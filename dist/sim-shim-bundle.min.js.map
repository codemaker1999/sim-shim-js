{"version":3,"sources":["src/RungeKutta.js","src/SimShim.js","src/SimShimPlot.js","src/SimShimPlotCtx.js","src/SimShimSanitize.js","src/SimShimUtil.js","src/UtilFunctional.js","vendor/mathjs/index.js","vendor/threejs/index.js","vendor/threejs-extras/Detector.js","vendor/threejs-extras/FlyControls.js","vendor/threejs-extras/OrbitControls.js"],"names":["RungeKutta","A","b","c","h","_classCallCheck","this","n","length","f","t","y","_this","ks","i","ti","yi","reduce","acc","ki","j","push","_UtilFunctional","zip","tup","bools","a","vec","row","rowsum","sum","aij","bool","RK4","_possibleConstructorReturn","Object","getPrototypeOf","call","module","exports","SimShim","plotTarget","settings","arguments","undefined","ids","paused","document","querySelector","Array","Element","Error","_SimShimSanitize2","checkSettings","setns","userDefinedCam","Boolean","cameraPosn","far","near","showGrid","showAxes","ctrlType","clearColor","autoRotate","cameraAngle","orbitTarget","lightIntensity","_SimShimUtil2","toVec3","WIDTH","offsetWidth","HEIGHT","offsetHeight","FAR","NEAR","CTRLTYPE","AUTOROT","CAMERAPOSN","CAMANGLE","ORBITTARGET","LIGHTINTESITY","CLEARCOLOR","THREE","Color","renderer","WebGLRenderer","setSize","domElement","style","margin","padding","setClearColor","appendChild","scene","Scene","camera","PerspectiveCamera","position","set","up","Vector3","lookAt","add","controls","FlyControls","dragToLook","OrbitControls","target","light","DirectionalLight","plotCtx","_SimShimPlotCtx2","addEventListener","e","plots","retargetCamera","rend","cam","W","H","console","log","width","height","aspect","updateProjectionMatrix","_createClass","key","value","plot","checkPlotObj","sh","color","setHSL","Math","random","shading","SmoothShading","FlatShading","id","toString","slice","indexOf","ssPlot","_SimShimPlot2","threeObj","stack","error","warn","obj","find","p","remove","idIdx","plotIdx","findIndex","splice","k","setX","setY","setZ","fov","update","intensity","M","updateMetrics","relativeCameraPosn","distX","distY","distZ","multiplyScalar","center","x","z","copy","_this2","window","requestAnimationFrame","animate","metrics","render","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","cb","setTimeout","SimShimPlot","type","_initLineplot","_initSurface","parse","fns","_loop","tree","math","symNames","uniqueSymbolNames","compiled","compile","s","eval","animated","start","dt","step","next","xyz","bind","end","data","material","LineBasicMaterial","linewidth","geometry","Geometry","dynamic","initialXyz","lineLength","vertices","traj","Line","frustumCulled","shift","verticesNeedUpdate","map","fn","maxAllowedVars","namesLeft","filter","vars","scope","forEach","mesh","minX","maxX","minY","maxY","MeshLambertMaterial","side","DoubleSide","wireframe","MeshBasicMaterial","wireframeColor","transparent","makeSurfaceGeometry","computeFaceNormals","computeVertexNormals","multiMaterial","wireframeMaterial","SceneUtils","createMultiMaterialObject","Mesh","o","geo","dispose","rotation","q","Quaternion","fromArray","rotn","normalize","setFromUnitVectors","setRotationFromQuaternion","SimShimPlotCtx","setMaxMin","px","py","pz","res","maxZ","minZ","midX","midY","midZ","plt","maxDist","sqrt","pow","SimShimSanitize","str","policy","_typeof","_handle","join","all","stuff","cond","isArr","isNum","isNumArr","isNumArr2D","pts","pt","label","SimShimUtil","arr","node","dummy","names","l","hasOwnProperty","name","wid","hgt","dy","dx","v","ind_ul","ind_ur","ind_dl","ind_dr","faces","Face3","x1","x2","zipRec","zipped","rest","xs","sorted","list","sort","root","factory","define","amd","modules","__webpack_require__","moduleId","installedModules","loaded","m","create","config","core","isFactory","typedFactory","deepExtend","emitter","importFactory","configFactory","options","load","instance","index","factories","_config","typed","instances","mixin","expression","transform","epsilon","matrix","number","precision","predictable","clone","isArray","Number","valueOf","String","Date","isBigNumber","RegExp","TypeError","extend","prop","constructor","deepEqual","len","canDefineProperty","defineProperty","get","lazy","object","_value","_uninitialized","configurable","enumerable","traverse","path","split","typedFunction","digits","createTyped","types","test","isComplex","isFraction","isUnit","isMatrix","isDenseMatrix","isSparseMatrix","isImmutableDenseMatrix","isRange","isIndex","isResultSet","isHelp","conversions","from","to","convert","BigNumber","Complex","toNumber","Fraction","isNaN","array","DenseMatrix","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","apply","getTypeTest","entry","hint","toLowerCase","getName","signatures","err","actual","expected","createError","argCount","message","actualType","getTypeOf","_expected","_fn","anyType","contains","Refs","categories","Param","varArgs","_types","trim","_varArgs","substr","Signature","params","_params","param","SyntaxError","Node","signature","childs","parseSignatures","rawSignatures","keys","ignore","expanded","expand","signature_i","existing","cmp","compare","other","mapSignatures","normalized","hasConversions","parseTree","nodeSignature","filtered","entries","overlapping","concat","getArgs","count","args","_typed","refs","_signatures","code","_name","_args","maxParams","toCode","body","Function","max","match","conversion","prototype","category","cat","ac","bc","ai","bi","toConversion","recurse","newParam","prefix","ref","comment","getTests","arg","tests","allTypes","exactTypes","conversion_i","_innerCode","nextAnyType","exceptions","_exceptions","string, Object","...Function","addType","addConversion","NumberFormatter","isNumber","isInteger","isFinite","round","sign","format","Infinity","notation","toFixed","toExponential","toEngineering","toPrecision","exponential","replace","DBL_EPSILON","EPSILON","nearlyEqual","diff","abs","coefficients","exponent","parseFloat","dot","zeros","d","parseInt","rounded","roundDigits","newExp","significandsDiff","expDiff","decimalIdx","decimals","decimalVal","pp","first","lower","upper","unshift","removed","pop","Emitter","on","off","once","emit","E","callback","ctx","listener","self","_","evtArr","evts","liveEvents","math_import","num","ArgumentsError","_importFactory","isSupportedType","_import","silent","wrap","_wrap","isTypedFunction","override","_importTransform","wrapper","namespace","resolver","min","isArgumentsError","prev","validateOption","MATRIX","NUMBER","curr","item","values","JSON","stringify","Decimal","toJSON","mathjs","fromJSON","json","globalScope","digitsToString","ws","indexOfLastWord","w","LOG_BASE","getZeroString","checkInt32","invalidArgument","checkRoundingDigits","rm","repeating","di","r","rd","ceil","mathpow","convertBase","baseIn","baseOut","arrL","strL","NUMERALS","charAt","reverse","cosine","Ctor","taylorSeries","times","cos2x","minus","plus","finalise","sd","isTruncated","roundUp","xd","xdi","out","BASE","external","maxE","NaN","minE","finiteToString","isExp","nonFiniteToString","getBase10Exponent","getLn10","pr","LN10_PRECISION","precisionLimitExceeded","LN10","getPi","PI_PRECISION","PI","getPrecision","zs","intPow","truncate","mathfloor","isOdd","maxOrMin","ltgt","naturalExponential","denominator","guard","wpr","rep","rounding","divide","naturalLogarithm","c0","numerator","parseDecimal","search","substring","charCodeAt","parseOther","base","divisor","isFloat","xe","isHex","isBinary","isOctal","sine","sin2_x","d5","d16","d20","isHyperbolic","u","toLessThanHalfPi","isNeg","pi","halfPi","lte","quadrant","divToInt","isZero","toStringBinary","MAX_DIGITS","inexact","acos","acosh","asin","asinh","atan","atanh","atan2","cbrt","decimalError","ps","EXP_LIMIT","cryptoObject","getRandomValues","randomBytes","cos","cosh","isDecimal","P","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","div","exp","floor","hypot","ln","log10","log2","mod","mul","sin","sinh","sub","tan","tanh","trunc","crypto","Uint32Array","modulo","toExpNeg","toExpPos","MAX_SAFE_INTEGER","absoluteValue","comparedTo","xdL","ydL","yd","ys","neg","cubeRoot","t3","t3plusx","eq","decimalPlaces","dp","dividedBy","dividedToIntegerBy","equals","greaterThan","gt","greaterThanOrEqualTo","gte","hyperbolicCosine","one","cosh2_x","d8","hyperbolicSine","sinh2_x","hyperbolicTangent","inverseCosine","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","xsd","inverseSine","inverseTangent","isInt","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","isBase10","inf","xLTy","negated","carry","squareRoot","tangent","rL","toBinary","toDecimalPlaces","toDP","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toOctal","toPower","yIsInt","yn","toSignificantDigits","toSD","truncated","multiplyInteger","temp","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","bignumber","","string","Array | Matrix","deepMap","toTex",0,1,"skipZeros","boolean","lcase","Chain","isChain","createProxy","chainify","createLazyProxy","done","arg0","arg1","formatArray","formatNumber","formatBigNumber","isString","endsWith","text","fraction","syntax","any","re","im","toPolar","phi","strRe","strIm","fromPolar","hasBase","logHypot","_a","_b","parser_exit","tokens","loh","tmp","cot","sec","csc","t1","t2","acot","asec","acsc","coth","csch","sech","noIM","oneMinus","onePlus","acoth","acsch","asech","inverse","conjugate","places","ret","toVector","webpackPolyfill","deprecate","paths","children","latex","complex","ZERO","number, number","BigNumber, BigNumber",2,"symbols","Alpha","alpha","Beta","beta","Gamma","gamma","Delta","delta","Epsilon","varepsilon","Zeta","zeta","Eta","eta","Theta","theta","vartheta","Iota","iota","Kappa","kappa","varkappa","Lambda","lambda","Mu","mu","Nu","nu","Xi","Omicron","omicron","Pi","varpi","Rho","rho","varrho","Sigma","sigma","varsigma","Tau","tau","Upsilon","upsilon","Phi","varphi","Chi","chi","Psi","psi","Omega","omega","true","false","Inf","infinity","oo","lim","operators","transpose","factorial","dotPow","unaryPlus","unaryMinus","bitNot","not","multiply","dotMultiply","dotDivide","leftShift","rightArithShift","rightLogShift","equal","unequal","smaller","larger","smallerEq","largerEq","bitAnd","bitXor","bitOr","and","xor","or","defaultTemplate","units","deg","toSymbol","assign","throwInvalidParam","gcd","MAX_CYCLE_LEN","p1","p2","B","C","D","N","modpow","cycleLen","cycleStart","rem1","rem2","lcm","divisible","excludeWhole","whole","toLatex","toContinued","g","cycLen","cycOff","Matrix","storage","_storage","datatype","subset","replacement","defaultValue","resize","size","toArray","util","_validate","dim","DimensionError","dimNext","child","_resize","elem","oldLen","newLen","minLen","UNINITIALIZED","_squeeze","dims","ii","_unsqueeze","IndexError","validate","isScalar","validateIndex","_defaultValue","squeeze","unsqueeze","outer","flatten","flat","relation","RangeError","isDimensionError","isIndexError","isBoolean","memoize","hasher","cache","hash","_data","_size","_datatype","preprocess","_get","_getSubmatrix","last","range","dimension","_set","submatrix","sSize","iSize","_fit","_setSubmatrix","dataIndex","subIndex","newSize","changed","index_i","me","diagonal","kSuper","kSub","rows","columns","ms","swapRows","_swapRows","vi","dense","SparseMatrix","_createFromMatrix","ptr","_values","_index","_ptr","_createFromArray","equalScalar","source","zero","density","_getsubset","_setsubset","idx","kk","mvalues","mindex","mptr","pv","x0","y0","_getValueIndex","_remove","_insert","top","bottom","ins","k0","k1","invoke","_map","minRow","maxRow","minColumn","maxColumn","_toArray","_forEachRow","kx","ky","vx","vy","sparse","boolean, boolean","bigNearlyEqual","Fraction, Fraction","Complex, Complex","Unit, Unit","equalBase","string, string","Spa","_heap","FibonacciHeap","isSpa","insert","accumulate","heap","nodes","extractMinimum","swap","nodei","nodej","addScalar","algorithm01","algorithm04","algorithm10","algorithm13","algorithm14","Matrix, Matrix","Array, Array","Array, Matrix","Matrix, Array","Matrix, any","any, Matrix","Array, any","any, Array","_create","Array | Matrix, string","Array | Matrix, string, string","fixPrefix","denseMatrix","sparseMatrix","adata","asize","adt","bvalues","bindex","bptr","bsize","bdt","cf","cdata","mark","avalues","aindex","aptr","cvalues","cindex","cptr","xa","xb","wa","wb","bdata","csize","_iterate","level","av","bv","cv","_minimum","oneOverLogPhi","isFibonacciHeap","degree","minimum","left","right","clear","isEmpty","numberOfChildren","tempRight","parent","_findMinimumNode","_decreaseKey","_cut","_cascadingCut","_linkNodes","arraySize","numRoots","algorithm03","algorithm07","algorithm12","_scatter","va","vb","ImmutableDenseMatrix","_min","_max","Index","ranges","_dimensions","_isScalar","_createImmutableMatrix","isObjectProperty","getObjectProperty","strings","dimensions","Range","nums","invalid","some","...number | string | BigNumber | Range | Array | Matrix","Unit","Unit, string | Unit","unit","valuelessUnit","ResultSet","null","isNumeric","UNIT_NONE","PREFIXES","NONE","power","_normalize","isUnitListSimplified","skipWhitespace","isDigitDot","isDigit","revert","oldIndex","parseNumber","tentativeNumber","tentativeIndex","parseUnit","unitName","parseCharacter","toFind","_findUnit","UNITS","prefixLen","prefixName","prefixes","calculateAngleValues","constants","rad","grad","cycle","arcsec","arcmin","valueStr","powerMultiplierCurrent","expectingUnit","powerMultiplierStack","powerMultiplierStackProduct","oldC","uStr","BASE_DIMENSIONS","baseDim","UNIT_SYSTEMS","auto","_isDerived","unitValue","unitOffset","unitPower","unitPrefixValue","_getNumberConverter","offset","_denormalize","prefixValue","isValuelessUnit","BASE_UNITS","inverted","valThis","valOther","getNumericIfUnitless","toNumeric","formatUnits","simplifyUnitListLazy","matchingBase","proposedUnitList","currentUnitSystem","matchingUnit","strNum","strDen","nNum","nDen","isImaginary","isReal","_bestPrefix","unitStr","absValue","absUnitValue","bestPrefix","bestDiff","scientific","SHORT","da","G","T","Z","Y","LONG","deca","hecto","kilo","mega","giga","tera","peta","exa","zetta","yotta","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","SQUARED","CUBIC","BINARY_SHORT","Ki","Mi","Gi","Ti","Ei","Zi","Yi","BINARY_LONG","kibi","mebi","gibi","tebi","pebi","exi","zebi","yobi","BTU","MM","SHORTLONG","MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","FORCE","SURFACE","VOLUME","ENERGY","POWER","PRESSURE","ELECTRIC_CHARGE","ELECTRIC_CAPACITANCE","ELECTRIC_POTENTIAL","ELECTRIC_RESISTANCE","ELECTRIC_INDUCTANCE","ELECTRIC_CONDUCTANCE","MAGNETIC_FLUX","MAGNETIC_FLUX_DENSITY","FREQUENCY","ANGLE","BIT","BASE_UNIT_NONE","meter","inch","foot","yard","mile","link","rod","chain","angstrom","in","ft","mi","li","ch","mil","m2","sqin","sqft","sqyd","sqmi","sqrd","sqch","sqmil","acre","hectare","m3","L","litre","cuin","cuft","cuyd","teaspoon","tablespoon","drop","gtt","minim","fluiddram","fluidounce","gill","cc","cup","pint","quart","gallon","beerbarrel","oilbarrel","hogshead","fldr","floz","gi","cp","qt","gal","bbl","obl","gram","ton","tonne","grain","dram","ounce","poundmass","hundredweight","stick","stone","gr","dr","oz","lbm","cwt","second","minute","hour","day","week","month","year","decade","century","millennium","hertz","reciprocal","Hz","ampere","K","degC","degF","degR","kelvin","celsius","fahrenheit","rankine","mol","mole","cd","candela","newton","dyn","dyne","lbf","poundforce","kip","J","joule","erg","Wh","eV","electronvolt","watt","hp","VAR","I","VA","Pa","atm","bar","torr","mmHg","mmH2O","cmH2O","coulomb","farad","F","volt","V","ohm","henry","siemens","S","weber","Wb","tesla","bits","bytes","ALIASES","meters","inches","feet","yards","miles","links","rods","chains","angstroms","litres","liter","liters","teaspoons","tablespoons","minims","fluiddrams","fluidounces","gills","cups","pints","quarts","gallons","beerbarrels","oilbarrels","hogsheads","gtts","grams","tons","tonnes","grains","drams","ounces","poundmasses","hundredweights","sticks","lb","lbs","kips","acres","hectares","sqfeet","sqyard","sqmile","sqmiles","mmhg","mmh2o","cmh2o","seconds","secs","minutes","mins","hours","hr","hrs","days","weeks","months","years","radians","degrees","gradian","gradians","cycles","arcsecond","arcseconds","arcminute","arcminutes","BTUs","watts","joules","amperes","coulombs","volts","ohms","farads","webers","teslas","electronvolts","moles","si","bit","cgs","us","setUnitSystem","getUnitSystem","typeConverters","alias","algorithm05","xsize","ysize","wai","wbi","vc","number | Fraction | BigNumber | Complex, Unit","Unit, number | Fraction | BigNumber | Complex","divideScalar","Unit, number | Fraction | BigNumber","number | Fraction | BigNumber, Unit","_pow","yFrac","yNum","ex","_powArray","eye","_powMatrix","Array, number","Array, BigNumber","Matrix, number","Matrix, BigNumber","Unit, number","_eyeVector","_eye","cols","Big","number | BigNumber","number | BigNumber, string","number | BigNumber, number | BigNumber","number | BigNumber, number | BigNumber, string","Array, string","Matrix, string","algorithm11","_validateMatrixDimensions","_multiplyVectorVector","_multiplyVectorMatrix","_multiplyMatrixVector","_multiplyMatrixMatrix","size1","size2","af","mf","_multiplyVectorDenseMatrix","alength","bcolumns","_multiplyDenseMatrixVector","_multiplySparseMatrixVector","_multiplyDenseMatrixDenseMatrix","_multiplyDenseMatrixSparseMatrix","_multiplySparseMatrixDenseMatrix","_multiplySparseMatrixSparseMatrix","arows","acolumns","jb","kb0","kb1","cij","kb","ib","brows","vbi","ka0","ka1","ka","ia","ic","vbij","p0","any, any","number | BigNumber | Fraction | boolean","Complex | Unit | string","any, Object | function | number","number | BigNumber | Fraction | Complex, string","fixedUnit","bigConstants","LN2","LOG2E","LOG10E","SQRT1_2","SQRT2","version","construction","docs","speedOfLight","description","examples","gravitationConstant","planckConstant","reducedPlanckConstant","magneticConstant","electricConstant","vacuumImpedance","elementaryCharge","bohrMagneton","conductanceQuantum","inverseConductanceQuantum","magneticFluxQuantum","nuclearMagneton","klitzing","bohrRadius","classicalElectronRadius","electronMass","fermiCoupling","fineStructure","hartreeEnergy","protonMass","deuteronMass","neutronMass","quantumOfCirculation","rydberg","thomsonCrossSection","weakMixingAngle","efimovFactor","atomicMass","avogadro","boltzmann","faraday","firstRadiation","loschmidt","gasConstant","molarPlanckConstant","molarVolume","sackurTetrode","secondRadiation","stefanBoltzmann","wienDisplacement","molarMass","molarMassC12","gravity","planckLength","planckMass","planckTime","planckCharge","planckTemperature","lsolve","lup","lusolve","slu","usolve","cube","fix","norm","nthRoot","square","xgcd","bellNumbers","catalan","composition","stirlingS2","conj","help","distance","intersect","cross","det","diag","inv","ones","partitionSelect","trace","combinations","kldivergence","multinomial","permutations","pickRandom","randomInt","mean","median","mode","quantileSeq","std","seealso","expr","extra_nodes","parseStart","nesting_level","conditional_level","nextPreview","nextNextPreview","getToken","token_type","TOKENTYPE","NULL","token","DELIMITER","c2","c3","DELIMITERS","currentIsAlpha","NAMED_DELIMITERS","SYMBOL","UNKNOWN","createSyntaxError","getTokenSkipNewline","openParams","closeParams","cPrev","cNext","isValidLatinOrGreek","isValidMathSymbol","high","low","parseBlock","visible","blocks","ConstantNode","parseAssignment","BlockNode","valid","parseConditional","isSymbolNode","AssignmentNode","SymbolNode","isAccessorNode","isFunctionNode","FunctionAssignmentNode","parseLogicalOr","condition","trueExpr","falseExpr","ConditionalNode","parseLogicalXor","OperatorNode","parseLogicalAnd","parseBitwiseOr","parseBitwiseXor","parseBitwiseAnd","parseRelational","parseShift","==","!=","<",">","<=",">=","parseConversion","<<",">>",">>>","parseRange","parseAddSubtract","RangeNode","parseMultiplyDivide","+","-","parseUnary","*",".*","/","./","%","isConstantNode","~","parsePow","parseLeftHandOperators","parseCustomNodes","!","'","parseAccessors","handler","parseSymbol","parseString","FunctionNode","AccessorNode","IndexNode","dotNotation","parseStringToken","parseMatrix","parseRow","items","ArrayNode","parseObject","properties","ObjectNode","parseParentheses","ParenthesisNode","parseEnd","col",",","(",")","[","]","{","}","\"",";","^",".^","&","|","^|","=",":","?","isNode","isIndexNode","needParenthesis","isArrayNode","isObjectNode","isParenthesisNode","access","_compile","defs","needsSize","_ifNode","_toString","_toTex","_validateScope","symbol","keywords","defsCode","factoryCode","_traverse","_transform","customString","customTex","getIdentifier","getContent","errorTransform","_getSubstring","strLen","_setSubstring","chars","Array, Index","Matrix, Index","Object, Index","_getObjectProperty","string, Index","Array, Index, any","Array, Index, any, any","Matrix, Index, any","Matrix, Index, any, any","string, Index, string","string, Index, string, string","Object, Index, any","_setObjectProperty","updated","every","deprecated","asMatrix","childNode","parenthesis","precedence","getPrecedence","exprPrecedence","isAssignmentNode","parentObject","parentProperty","parentSize","parentIndex","_node","identifier","getAssociativity","property","associativity","isAssociativeWith","nodeA","nodeB","identifierA","identifierB","associativeWith","latexLeftParens","latexRightParens","latexParens","OperatorNode:or","OperatorNode:xor","OperatorNode:and","OperatorNode:bitOr","OperatorNode:bitXor","OperatorNode:bitAnd","OperatorNode:equal","OperatorNode:unequal","OperatorNode:smaller","OperatorNode:larger","OperatorNode:smallerEq","OperatorNode:largerEq","OperatorNode:leftShift","OperatorNode:rightArithShift","OperatorNode:rightLogShift","OperatorNode:to","OperatorNode:add","OperatorNode:subtract","OperatorNode:multiply","OperatorNode:divide","OperatorNode:dotMultiply","OperatorNode:dotDivide","OperatorNode:mod","OperatorNode:unaryPlus","OperatorNode:unaryMinus","OperatorNode:bitNot","OperatorNode:not","OperatorNode:pow","OperatorNode:dotPow","OperatorNode:factorial","OperatorNode:transpose","block","isBlockNode","js","isConditionalNode","testCondition","conditionPrecedence","truePrecedence","falsePrecedence","valueType","getType","SUPPORTED_TYPES","numConfig","isFunctionAssignmentNode","childArgs","variable","jsExpr","isRangeNode","needsEnd","calculateNecessaryParentheses","parens","startPrecedence","stepPrecedence","endPrecedence","endSymbols","undef","op","implicit","operandPrecedence","operandIdentifier","rootIdentifier","lhsParens","lhsPrecedence","assocWithLhs","rhsParens","rhsPrecedence","assocWithRhs","lhsIdentifier","rhsIdentifier","isOperatorNode","jsArgs","assoc","operand","lhs","rhs","lhsTex","rhsTex","expandTemplate","template","regex","inputPos","exec","ReferenceError","argsName","jsFn","isRaw","rawArgs","_getUniqueArgumentsName","jsObject","nodeToString","nodeToTex","latexConverter","customToTex","content","Array | Matrix, Object","doc","Help","string | Array | Matrix","string | Array | Matrix, Object","Parser","_parse","isParser","getAll","UpdateNode","...any","lastIndex","...Array | Matrix | number | BigNumber","prevDim","matrices","_concat","...string","concatDim","filterTransform","_scope","Array, function","_filterCallback","Array, RegExp","_filterRegExp","Matrix, function","Matrix, RegExp","regexp","Array | Matrix, function","_forEach","isSet","orig","isCollection","_largest","deepForEach","Array | Matrix, number | BigNumber","...","containsCollections","_reduce","mat","val","tran","_switch","_nmean","_mean","Array | Matrix, Array | Matrix","any, Array | Matrix","_inv","Ac","Bc","Ar","Br","_det","compute_mu","fa","_smallest","_out","_strRange","includeEnd","_bigRangeInc","_bigRangeEx","_rangeInc","_rangeEx","ONE","string, boolean","number, number, number","number, number, boolean","number, number, number, boolean","BigNumber, BigNumber, BigNumber","BigNumber, BigNumber, boolean","BigNumber, BigNumber, BigNumber, boolean","parser","desc","_denseLUP","_sparseLUP","U","ldata","lsize","udata","usize","pabsv","vjj","absv","vij","lvalues","lindex","lptr","uvalues","uindex","uptr","pv_co","pv_oc","swapIndeces","spa","vkj","vik","cs_sqr","cs_lu","SparseMatrix, number, number","order","threshold","pinv","cs_amd","cs_permute","cs_etree","cs_post","cs_counts","qr","post","_vcount","unz","lnz","leftmost","head","tail","nque","pa","cs_flip","cs_fkeep","cs_tdfs","lemax","cm","_createTargetMatrix","_diag","k2","pj","nvi","pk","eln","pn","cnz","nv","elen","hhead","_initializeQuotientGraph","nel","_initializeDegreeLists","mindeg","elenk","nvk","dk","pk1","pk2","_wclear","wnvi","dext","p3","p4","nvj","jlast","ok","at","tindex","tptr","nz","_denseTranspose","_sparseTranspose","transposedRow","transposed","t0","ata","inext","ancestor","cs_leaf","maxfirst","prevleaf","colcount","jleaf","sparent","jprev","cs_spsolve","tol","ipiv","xabs","pivot","cs_reach","lo","gvalues","gindex","gptr","gsize","cs_dfs","cs_marked","cs_mark","cs_unflip","jnew","solveValidation","SparseMatrix, Array | Matrix","_sparseForwardSubstitution","DenseMatrix, Array | Matrix","_denseForwardSubstitution","Array, Array | Matrix","xj","bj","jvalues","jindex","msize","cs_ipvec","_lusolve","SparseMatrix, Array | Matrix, number, number","Object, Array | Matrix","_toMatrix","_sparseBackwardSubstitution","_denseBackwardSubstitution","_cbrtComplex","allRoots","arg_3","principal","_cbrtNumber","_cbrtUnit","result","negate","third","Complex, boolean","algorithm02","algorithm09","_gcdBigNumber","_gcd","Matrix, number | BigNumber","number | BigNumber, Matrix","Array, number | BigNumber","number | BigNumber, Array","Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber","_hypot","largest","... number | BigNumber","_sqrtNumber","_lcmBigNumber","algorithm06","_lcm","scatter","_log10","_mod","_norm","sizeX","POSITIVE_INFINITY","pinf","NEGATIVE_INFINITY","ninf","maxc","cj","maxr","ri","boolean | null","number | Complex | BigNumber | boolean | null, number | BigNumber | string","Array, number | BigNumber | string","Matrix, number | BigNumber | string","_denseTrace","_sparseTrace","_bigNthRoot","_nthRoot","_nthComplexRoot","Complex, number","roots","NO_INT","_round","Complex, BigNumber","_n","number, BigNumber","Fraction, number","number | Complex | BigNumber, Matrix","number | Complex | BigNumber, Array","_zeros","hasBigNumbers","...number | BigNumber | string","boolean | string | null","_xgcd","lastx","lasty","_xgcdBigNumber","bigBitAnd","bitwise","decCoefficientToBinaryString","func","xBits","yBits","xSign","ySign","minBits","maxBits","minSign","shortLen","longLen","expFuncVal","outVal","twoPower","two","prevPrec","bigBitNot","bigBitOr","negOne","bigBitXor","algorithm08","bigLeftShift","bigRightArithShift","kFactorial","negativeOne","kChooseI","iPower","bigFactorial","twoN","threeN","fourN","fiveN","real","den","twoPiSqrt","isPositiveInteger","_2d","_3d","_4d","_intersect2d","p1a","p1b","p2a","p2b","o1","o2","_intersect3d","y1","z1","y2","z2","x3","y3","z3","x4","y4","z4","d1343","d4321","d1321","d4343","d2121","ta","tb","pax","pay","paz","pbx","pby","pbz","_intersectLinePlane","Array, Array, Array","plane","Array, Array, Array, Array","Matrix, Matrix, Matrix","Matrix, Matrix, Matrix, Matrix","xCoeff","yCoeff","constant","_distancePointLine2D","Object, Object, Object","lineTwoPtY","lineTwoPtX","lineOnePtY","lineOnePtX","pointX","pointY","_parametricLine","_distancePointLine3D","_distance2d","_distance3d","Object, Object","xCoeffLine","yCoeffLine","pointZ","z0","pointOneX","pointOneY","pointTwoX","pointTwoY","pointOneZ","pointTwoZ","_pairwise","_distancePairwise","_objectToArray","yDiff","xDiff","radicant","zDiff","_cross","xSize","ySize","_createDiagonalMatrix","_getDiagonal","dm","vector","Array, number, string","Array, BigNumber, string","Matrix, number, string","Matrix, BigNumber, string","_dot","_flatten","_ones","asc","_partitionSelect","quickSelect","Array | Matrix, number","Array | Matrix, number, string","Array | Matrix, number, function","_resizeString","defaultChar","number | Complex | BigNumber | Unit | boolean | null","_comparator","_arrayIsVector","_matrixIsVector","_kldiv","plength","qlength","sumq","sump","qnorm","pnorm","_sum","denom","distribution","distributions","randFunctions","arg2","arg3","_randomDataForMatrix","_random","_randomInt","possibles","randFunc","uniform","normal","u1","u2","picked","_deepEqual","_unequal","_median","mid","middle2","middle","number | BigNumber | Unit","number | BigNumber | Unit, number | BigNumber | Unit","_mode","_prod","probOrN","probArr","dataArr","_quantileSeq","nPlusOne","intN","currProb","prob","fracPart","integerPart","integerPartNumber","_std","normalization","variance","_var","DEFAULT_NORMALIZATION","print","_print","string, Object, number","original","_acosh","_atanh","_cosh","_coth","_csch","_sech","_sinh","_tanh","Unit, Unit | string","REVISION","output","nextKey","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","setRGB","setHex","setStyle","setScalar","scalar","hex","hue2rgb","euclideanModulo","clamp","handleAlpha","components","ColorKeywords","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","getHSL","optionalTarget","hue","saturation","hsl","lightness","getStyle","offsetHSL","addColors","color1","color2","lerp","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_x","_y","_z","_w","onChangeCallback","quaternion","setFromEuler","euler","Euler","c1","s1","s2","s3","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","v1","EPS","vFrom","vTo","crossVectors","lengthSq","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","onChange","qa","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","w0","w1","dir","sqrSin","tDir","Vector2","setComponent","getComponent","addVectors","addScaledVector","subVectors","subScalar","clampScalar","minVal","maxVal","clampLength","roundToZero","lengthManhattan","distanceTo","distanceToSquared","setLength","lerpVectors","v2","fromAttribute","attribute","itemSize","rotateAround","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyMatrix3","applyMatrix4","applyProjection","qx","qy","qz","qw","ix","iy","iz","iw","project","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","unproject","transformDirection","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","angleTo","dz","setFromSpherical","sinPhiRadius","radius","setFromMatrixPosition","setFromMatrixColumn","setFromMatrixScale","sx","sy","sz","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","epsilon2","xx","yy","zz","xy","xz","_order","DefaultOrder","RotationOrders","setFromQuaternion","makeRotationFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","Line3","line","distanceSq","closestPointToPointParameter","startP","startEnd","point","clampToLine","startEnd2","startEnd_startP","closestPointToPoint","Box2","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","halfSize","box","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","intersectsBox","clampPoint","distanceToPoint","clampedPoint","union","translate","Box3","setFromArray","setFromObject","updateMatrixWorld","BufferGeometry","attributes","positions","intersectsSphere","closestPoint","sphere","intersectsPlane","getBoundingSphere","Sphere","Matrix3","Float32Array","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","setFromMatrix4","applyToVector3Array","applyToBuffer","buffer","getX","getY","getZ","setXYZ","determinant","throwOnDegenerate","t11","t12","t13","msg","detInv","flattenToArrayOffset","getNormalMatrix","matrix4","transposeIntoArray","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","be","bf","ce","de","df","ad","bd","wx","wy","wz","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","getPosition","setPosition","t14","scale","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","decompose","invSX","invSY","invSZ","makeFrustum","makePerspective","ymax","DEG2RAD","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","recast","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","v0","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","b1","invDet","intersectSphere","tca","radius2","thc","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","sprite","negRadius","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","normalMatrix","Spherical","makeSafe","vec3","RAD2DEG","generateUUID","uuid","rnd","mapLinear","a1","a2","b2","smoothstep","smootherstep","random16","randInt","randFloat","randFloatSpread","degToRad","radToDeg","isPowerOfTwo","nearestPowerOfTwo","nextPowerOfTwo","Spline","interpolate","intPoint","weight","w2","w3","pb","pc","pd","v3","initFromArray","getPoint","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","invDenom","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","edgeList","projectedPoint","minDistance","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","evaluate","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","stride","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","DiscreteInterpolant","LinearInterpolant","offset1","offset0","weight1","weight0","QuaternionLinearInterpolant","Clock","autoStart","startTime","oldTime","elapsedTime","running","performance","now","stop","getElapsedTime","getDelta","newTime","EventDispatcher","_listeners","listeners","hasEventListener","removeEventListener","listenerArray","dispatchEvent","event","Layers","mask","channel","enable","toggle","disable","layers","ascSort","intersectObject","raycaster","intersects","recursive","raycast","Raycaster","LOD","Points","Sprite","defineProperties","PointCloud","linePrecision","setFromCamera","OrthographicCamera","intersectObjects","objects","Object3D","onRotationChange","onQuaternionChange","Object3DIdCount","DefaultUp","modelViewMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","castShadow","receiveShadow","renderOrder","userData","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","rotateOnAxis","q1","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","updateMatrix","force","meta","extractFromCache","metadata","isRootObject","geometries","materials","textures","images","generator","materialIndex","vertexNormals","vertexColors","BufferAttribute","updateRange","needsUpdate","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyIndicesArray","indices","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXY","setXYZW","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Uint16Array","Int32Attribute","Int32Array","Uint32Attribute","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","InstancedBufferAttribute","meshPerAttribute","InterleavedBuffer","InstancedInterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","GeometryIdCount","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","elementsNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","vertex","face","jl","computeBoundingBox","fromBufferGeometry","addFace","normals","tempNormals","uvs","tempUVs","uvs2","tempUVs2","uv","uv2","groups","group","ab","fl","vA","vB","vC","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mergeVertices","verticesMap","unique","changes","precisionPoints","faceIndicesToRemove","dupIndex","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","enabled","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","parameters","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","kl","DirectGeometry","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","morphAttributes","drawRange","getIndex","setIndex","addAttribute","getAttribute","removeAttribute","addGroup","clearGroups","setDrawRange","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","TypeArray","pA","pB","pC","normalizeNormals","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","geometry2","array2","MaxIndex","InstancedBufferGeometry","maxInstancedCount","Uniform","onUpdate","onUpdateCallback","AnimationAction","_new","mixer","clip","localRoot","_mixer","_clip","_localRoot","tracks","nTracks","interpolants","interpolantSettings","interpolant","createInterpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","loop","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","_effectiveWeight","repetitions","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","play","_activateAction","_deactivateAction","reset","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setLoop","setEffectiveWeight","getEffectiveWeight","fadeIn","duration","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","accuIndex","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationClip","resetDuration","optimize","track","jsonTracks","frameTime","fps","KeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","AnimationUtils","getKeyframeOrder","sortedArray","NumberKeyframeTrack","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","animation","bones","nodeName","addNonemptyTrack","trackType","trackName","animationKeys","propertyName","destTracks","flattenJSON","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationMixer","_initMemoryManager","_accuIndex","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_Action","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","bindings","_bindings","nBindings","_nActiveBindings","useCount","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingsByRoot","_bindingsByRootAndName","bindingByName","binding","restoreOriginalState","_removeInactiveBinding","uncacheAction","bindingsByName","referenceCount","_addInactiveBinding","parsedPath","PropertyMixer","PropertyBinding","ValueTypeName","getValueSize","_lendBinding","saveOriginalState","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","stats","inUse","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","rootNode","lastInactiveBinding","remove_empty_map","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","AnimationObjectGroup","var_args","_objects","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","bindingsPerObject","nObjects","nCachedObjects","indicesByUUID","parsedPaths","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","subscribe_","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","arraySlice","isTypedArray","subarray","convertArray","forceClone","BYTES_PER_ELEMENT","ArrayBuffer","isView","DataView","compareTime","nValues","srcOffset","jsonKeys","valuePropertyName","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","getInterpolation","timeOffset","endTime","nKeys","prevTime","currTime","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","_getTrackTypeForValueTypeName","typeName","ColorKeyframeTrack","BooleanKeyframeTrack","StringKeyframeTrack","parseTrackName","findNode","getValue","targetArray","setValue","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","skeleton","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","firstValidIndex","matches","results","searchSkeleton","bone","searchNodeSubtree","subTreeNode","mixFunction","bufferType","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","currentWeight","mix","originalValueOffset","Audio","context","createBufferSource","onended","onEnded","gain","createGain","connect","getInput","autoplay","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","getOutput","setNodeSource","audioNode","setBuffer","audioBuffer","pause","currentTime","disconnect","getFilters","setFilters","getFilter","setFilter","setPlaybackRate","getPlaybackRate","getLoop","getVolume","setVolume","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","AudioContext","webkitAudioContext","PositionalAudio","panner","createPanner","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","AudioListener","destination","removeFilter","getMasterVolume","setMasterVolume","orientation","setOrientation","Camera","matrixWorldInverse","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","magFilter","minFilter","renderTarget","WebGLRenderTargetCube","updateCubeMap","generateMipmaps","texture","activeCubeFace","setRenderTarget","zoom","view","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","cx","cy","zoomW","zoomH","scaleW","scaleH","focus","filmGauge","filmOffset","setFocalLength","focalLength","vExtentSlope","getFilmHeight","getFocalLength","getEffectiveFOV","getFilmWidth","skew","StereoCamera","cameraL","cameraR","eyeRight","eyeLeft","eyeSep","eyeSepOnProjection","Light","groundColor","decay","penumbra","LightShadow","bias","mapSize","AmbientLight","shadow","DirectionalLightShadow","HemisphereLight","skyColor","PointLight","SpotLight","SpotLightShadow","AudioLoader","manager","DefaultLoadingManager","url","onLoad","onProgress","onError","loader","XHRLoader","setResponseType","decodeAudioData","Cache","files","file","Loader","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","extractUrlBase","initMaterials","texturePath","createMaterial","textureLoader","materialLoader","loadTexture","repeat","anisotropy","fullPath","Handlers","setCrossOrigin","wrapS","wrapT","TextureLoader","MaterialLoader","blending","specular","emissive","shininess","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","emissiveMap","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","lightMap","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","aoMap","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","bumpMap","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","bumpScale","normalMap","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","normalScale","specularMap","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","metalnessMap","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","roughnessMap","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","alphaMap","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","opacity","setTextures","handlers","cached","request","XMLHttpRequest","overrideMimeType","open","response","status","itemEnd","itemError","responseType","withCredentials","send","itemStart","setPath","setWithCredentials","FontLoader","font","Font","ImageLoader","image","createElementNS","onload","URL","revokeObjectURL","src","blob","createObjectURL","JSONLoader","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","LoadingManager","isLoading","itemsLoaded","itemsTotal","onStart","BufferGeometryLoader","TYPED_ARRAYS","typedArray","drawcalls","offsets","getTexture","roughness","metalness","uniforms","vertexShader","fragmentShader","alphaTest","depthTest","depthWrite","colorWrite","wireframeLinewidth","sizeAttenuation","displacementMap","displacementScale","displacementBias","emissiveIntensity","envMap","combine","reflectivity","lightMapIntensity","aoMapIntensity","ObjectLoader","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","geometryLoader","bufferGeometryLoader","widthSegments","heightSegments","depth","depthSegments","segments","thetaStart","thetaLength","radiusTop","radiusBottom","radialSegments","openEnded","phiStart","phiLength","detail","innerRadius","outerRadius","thetaSegments","phiSegments","tube","tubularSegments","arc","loadImage","parseConstant","Texture","mapping","getGeometry","getMaterial","SkinnedMesh","Group","levels","addLevel","CubeTextureLoader","urls","CubeTexture","DataTextureLoader","BinaryTextureLoader","_parser","DataTexture","texData","mipmaps","mipmapCount","CompressedTextureLoader","texDatas","CompressedTexture","isCubemap","Material","MaterialIdCount","fog","lights","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","clippingPlanes","clipShadows","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","overdraw","_needsUpdate","setValues","newValue","currentValue","isRoot","srcPlanes","dstPlanes","linecap","linejoin","LineDashedMaterial","dashSize","gapSize","refractionRatio","wireframeLinecap","wireframeLinejoin","skinning","MeshDepthMaterial","depthPacking","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","defines","STANDARD","envMapIntensity","MeshPhysicalMaterial","PHYSICAL","clearCoat","clearCoatRoughness","MultiMaterial","PointsMaterial","ShaderMaterial","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","UniformsUtils","RawShaderMaterial","SpriteMaterial","ShadowMaterial","UniformsLib","ShaderChunk","encoding","TextureIdCount","sourceFile","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","flipY","unpackAlignment","getDataURL","canvas","toDataURL","getContext","drawImage","transformUv","DepthTexture","CanvasTexture","VideoTexture","video","readyState","HAVE_CURRENT_DATA","inverseMatrix","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","LineSegments","precisionSq","vStart","vEnd","interSegment","interRay","distSq","faceIndex","nbVertices","drawMode","updateMorphTargets","setDrawMode","morphTargetBase","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","uvA","uvB","uvC","tempA","tempB","tempC","fvA","fvB","fvC","isFaceMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","Bone","skin","Skeleton","boneInverses","useVertexTexture","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","pose","offsetMatrix","bindMode","bindMatrix","bindMatrixInverse","gbone","pos","rotq","scl","normalizeSkinWeights","sw","skinWeight","getObjectForDistance","matrixPosition","guessSizeSq","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","background","overrideMaterial","autoUpdate","Fog","FogExp2","merged","uniforms_src","uniforms_dst","parameter_src","common","diffuse","offsetRepeat","flipEnvMap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLights","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","spotShadowMap","spotShadowMatrix","pointLights","pointShadowMap","pointShadowMatrix","hemisphereLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","tCube","tFlip","equirect","tEquirect","distanceRGBA","lightPos","getTargetPixelRatio","_currentRenderTarget","_pixelRatio","glClearColor","_premultipliedAlpha","state","setDefaultGLState","init","scissor","_currentScissor","_scissor","viewport","_currentViewport","_viewport","_clearColor","_clearAlpha","resetGLState","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","preventDefault","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programInfo","program","programCache","releaseProgram","setupVertexAttributes","startIndex","extension","initAttributes","geometryAttributes","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","_gl","FLOAT","UNSIGNED_SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","getAttributeBuffer","enableAttributeAndDivisor","enableAttribute","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","disableUnusedAttributes","absNumericalSort","painterSortStable","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","_vector3","isObjectViewable","_sphere","isSphereViewable","isSpriteViewable","_frustum","numPlanes","_clipping","negRad","projectObject","sprites","ImmediateRenderObject","sortObjects","_projScreenMatrix","groupMaterial","renderObjects","renderList","setMaterial","setProgram","renderBufferImmediate","renderBufferDirect","initMaterial","materialProperties","getParameters","_lights","getProgramCode","programChange","shaderID","shader","__webglShader","acquireProgram","numSupportedMorphTargets","maxMorphTargets","numSupportedMorphNormals","maxMorphNormals","numClippingPlanes","lightsHash","ambient","directional","spot","hemi","progUniforms","getUniforms","uniformsList","WebGLUniforms","seqWithValue","seq","dynamicUniforms","splitDynamic","CULL_FACE","setFlipSided","setBlending","setDepthFunc","setDepthTest","setDepthWrite","setColorWrite","setPolygonOffset","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","useCache","setState","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","capabilities","logarithmicDepthBuffer","uCamPos","cameraPosition","setOptional","floatVertexTextures","markUniformsLightsNeedsUpdate","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","refreshUniformsPhysical","refreshUniformsStandard","upload","dynUniforms","evalDynamic","uvScaleMap","WebGLRenderTarget","_canvas","clientHeight","setupShadows","lightShadowsLength","shadows","setupLights","ll","shadowMap","viewMatrix","directionalLength","pointLength","spotLength","hemiLength","lightCache","allocTextureUnit","textureUnit","maxTextures","paramThreeToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","DEPTH_COMPONENT","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","_context","_alpha","_depth","_stencil","stencil","_antialias","antialias","_preserveDrawingBuffer","preserveDrawingBuffer","autoClear","autoClearColor","autoClearDepth","autoClearStencil","localClippingEnabled","gammaInput","gammaOutput","physicallyCorrectLights","toneMapping","toneMappingExposure","toneMappingWhitePoint","_currentFramebuffer","_currentScissorTest","_width","_height","_scissorTest","WebGLClipping","_infoRender","calls","info","memory","programs","getShaderPrecisionFormat","rangeMin","rangeMax","WebGLExtensions","WebGLCapabilities","WebGLState","WebGLProperties","WebGLTextures","WebGLObjects","WebGLPrograms","WebGLLights","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","backgroundCamera","backgroundCamera2","backgroundPlaneMesh","PlaneBufferGeometry","backgroundBoxShader","backgroundBoxMesh","BoxBufferGeometry","WebGLShadowMap","spritePlugin","SpritePlugin","lensFlarePlugin","LensFlarePlugin","getContextAttributes","forceContextLoss","loseContext","getMaxAnisotropy","getPixelRatio","setPixelRatio","getSize","updateStyle","setViewport","setScissor","setScissorTest","getClearColor","getClearAlpha","setClearAlpha","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearDepth","clearStencil","clearTarget","buffers","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","bufferData","positionArray","DYNAMIC_DRAW","normalArray","nx","ny","uvArray","colorArray","drawArrays","TRIANGLES","updateBuffers","geometryProgram","activeInfluences","getWireframeAttribute","ELEMENT_ARRAY_BUFFER","dataStart","dataCount","rangeStart","rangeCount","groupStart","groupCount","drawStart","drawEnd","drawCount","setLineWidth","setMode","LINES","TRIANGLE_STRIP","TRIANGLE_FAN","lineWidth","LINE_STRIP","POINTS","renderInstances","forceClear","beginShadows","endShadows","updateRenderTargetMipmap","setFaceCulling","cullFace","frontFaceDirection","setCullFace","setTexture2D","warned","slot","setTexture","setTextureCube","setTextureCubeDynamic","getCurrentRenderTarget","__webglFramebuffer","setupRenderTarget","framebuffer","isCube","renderTargetProperties","scissorTest","bindFramebuffer","FRAMEBUFFER","textureProperties","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","__webglTexture","activeMipMapLevel","readRenderTargetPixels","restore","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","depthBuffer","stencilBuffer","depthTexture","drawArraysInstancedANGLE","resetGlobalState","globalState","numGlobalPlanes","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewNormalMatrix","i4","renderingShadows","enableLocalClipping","fromCache","nGlobal","lGlobal","clippingState","drawElements","drawElementsInstancedANGLE","gl","getExtension","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getMaxPrecision","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","_maxPrecision","WebGLGeometries","onGeometryDispose","buffergeometry","_bufferGeometry","deleteAttribute","deleteAttributes","bufferproperty","__webglBuffer","deleteBuffer","removeAttributeBuffer","updateAttribute","attributeProperties","updateBuffer","usage","STATIC_DRAW","bufferSubData","edges","checkEdge","WebGLProgram","getEncodingComponents","getTexelDecodingFunction","functionName","getTexelEncodingFunction","getToneMappingFunction","toneMappingName","generateExtensions","rendererExtensions","envMapCubeUV","flatShading","filterEmptyLine","generateDefines","fetchAttributeLocations","identifiers","getProgramParameter","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","replaceLightNums","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","unrollLoops","snippet","unroll","programIdCount","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customExtensions","customDefines","createProgram","supportsVertexTextures","maxBones","doubleSided","flipSided","shadowMapEnabled","useFog","fogExp","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","programLog","getProgramInfoLog","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","deleteShader","cachedUniforms","cachedAttributes","destroy","deleteProgram","usedTimes","allocateBones","nVertexUniforms","nVertexMatrices","getTextureEncodingFromMap","gammaOverrideLinear","shaderIDs","parameterNames","nClipPlanes","currentRenderTarget","envMapMode","pl","addLineNumbers","lines","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","_renderer","getDepthMaterial","isPointLight","lightPositionWorld","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","useSkinning","variantIndex","_MorphingFlag","_SkinningFlag","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","renderSingleSided","renderReverseSided","shadowCamera","_renderList","_state","_lightShadows","_shadowMapSize","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","distanceShader","distanceUniforms","depthMaterial","distanceMaterial","USE_SHADOWMAP","BLEND","faceCount","vpWidth","vpHeight","pars","shadowMatrix","vpDimensions","clearAlpha","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texImage2D","WebGLColorBuffer","WebGLDepthBuffer","WebGLStencilBuffer","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentScissorTest","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","DEPTH_TEST","enableVertexAttribArray","vertexAttribDivisorANGLE","disableVertexAttribArray","getCompressedTextureFormats","formats","COMPRESSED_TEXTURE_FORMATS","blendEquationSeparate","blendFuncSeparate","blendFunc","setMask","setTest","setFunc","setStencilTest","stencilTest","setStencilWrite","stencilWrite","setStencilFunc","stencilFunc","stencilRef","stencilMask","setStencilOp","stencilFail","stencilZFail","stencilZPass","setOp","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","factor","POLYGON_OFFSET_FILL","getScissorTest","SCISSOR_TEST","activeTexture","webglSlot","TEXTURE0","webglType","webglTexture","boundTexture","compressedTexImage2D","setClear","locked","currentColorMask","currentColorClear","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","STENCIL_TEST","stencilOp","clampToMaxSize","maxSize","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","textureNeedsPowerOfTwo","filterFallback","onTextureDispose","deallocateTexture","_infoMemory","onRenderTargetDispose","deallocateRenderTarget","__image__webglTextureCube","deleteTexture","__webglInit","deleteFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__version","complete","uploadTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isDataTexture","cubeImage","isPowerOfTwoImage","glFormat","glType","setTextureParameters","mipmap","generateMipmap","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","internalFormat","_isWebGL2","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","setupFrameBufferTexture","attachment","textureTarget","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","webglDepthTexture","setupDepthRenderbuffer","createRenderbuffer","isTargetPowerOfTwo","createFramebuffer","WebGL2RenderingContext","emptyTexture","emptyCubeTexture","UniformContainer","arrayCacheF32","arrayCacheI32","nBlocks","blockSize","firstElem","allocTexUnits","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","setValueT6","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","setValueT6a","getPureArraySetter","SingleUniform","activeInfo","PureArrayUniform","StructuredUniform","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","matchEnd","idIsIndex","subscript","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","flares","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","renderType","occlusionMap","screenPosition","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","TEXTURE1","copyTexImage2D","uvOffset","uvScale","fogType","fillStyle","fillRect","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","Face4","LineStrip","LinePieces","MeshFaceMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","indexOffset","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","audioLoader","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","detach","attach","ShapeUtils","contour","triangulate","snip","verts","aX","aY","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","triangulateShape","holes","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","hl","minShapeIndex","counter","h2","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","Curve","getPointAt","getUtoTmapping","getPoints","divisions","getSpacedPoints","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","getPointFunc","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","LineCurve","curveLengths","getCurveLengths","lens","cacheLengths","sums","createPointsGeometry","createGeometry","createSpacedPointsGeometry","generateShapes","createPaths","resolution","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","Path","outline","_cachedOutline","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","shapes","toShapes","fromPoints","lastargs","aCPx","aCPy","QuadraticBezierCurve","aCP1x","aCP1y","aCP2x","aCP2y","CubicBezierCurve","splineThru","npts","SplineCurve","lastPoint","aRadius","aStartAngle","aEndAngle","aClockwise","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","EllipseCurve","spts","spline","deltaAngle","tdivisions","isCCW","noHoles","extractSubpaths","inActions","subPaths","lastPath","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","Shape","isPointInsidePolygon","inPt","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","extractAllPoints","extractPoints","point0","point1","point2","point3","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","CatmullRomCurve3","CubicPoly","initNonuniformCatmullRom","dt0","dt1","dt2","initCatmullRom","tension","calc","closed","ClosedSplineCurve3","BoxGeometry","CubeGeometry","calculateVertexCount","calculateIndexCount","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","vertexBufferOffset","uvBufferOffset","numberOfVertices","indexBufferOffset","vertexCount","indexCount","CircleGeometry","CircleBufferGeometry","segment","CylinderBufferGeometry","nbCap","generateTorso","tanTheta","indexRow","halfHeight","indexArray","i3","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","CylinderGeometry","ConeBufferGeometry","ConeGeometry","EdgesGeometry","thresholdAngle","sortFunction","thresholdDot","edge","vert1","vert2","face1","face2","addShapeList","addShape","scalePt2","getBevelVec","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","bevelEnabled","layer","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","binormal","position2","amount","bevelThickness","bevelSize","curveSegments","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapePoints","bs","vert","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","indexA","indexB","indexC","indexD","LatheBufferGeometry","inverseSegments","n2","LatheGeometry","PlaneGeometry","width_half","height_half","segment_width","segment_height","offset2","RingBufferGeometry","radiusStep","thetaSegmentLevel","RingGeometry","SphereGeometry","SphereBufferGeometry","thetaEnd","verticesRow","v4","TextGeometry","TorusBufferGeometry","TorusGeometry","TorusKnotBufferGeometry","calculatePositionOnCurve","cu","su","quOverP","cs","P1","P2","TorusKnotGeometry","heightScale","taper","NoTaper","ip","jp","uva","uvb","uvc","uvd","grid","numpoints","pos2","tangents","SinusoidalTaper","initialNormal3","smallest","MAX_VALUE","tz","PolyhedronGeometry","prepare","that","azimuth","inclination","make","centroid","azi","correctUV","subdivide","aj","DodecahedronGeometry","IcosahedronGeometry","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","slices","stacks","sliceCount","WireframeGeometry","numEdges","ol","numTris","AxisHelper","ArrowHelper","lineGeometry","coneGeometry","headLength","headWidth","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","setPoint","DirectionalLightHelper","lightPlane","targetLine","EdgesHelper","FaceNormalsHelper","nNormals","objGeometry","GridHelper","setColors","HemisphereLightHelper","sphereSize","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","boneList","matrixWorldInv","boneMatrix","SpotLightHelper","vector2","coneLength","coneWidth","VertexNormalsHelper","objPos","objNorm","WireframeHelper","renderCallback","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","createAnimation","setAnimationWeight","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","Detector","CanvasRenderingContext2D","webgl","createElement","WebGLRenderingContext","workers","Worker","fileapi","File","FileReader","FileList","Blob","getWebGLErrorMessage","element","fontFamily","fontSize","fontWeight","textAlign","innerHTML","addGetWebGLMessage","setAttribute","movementSpeed","rollSpeed","autoForward","tmpQuaternion","mouseStatus","moveState","down","forward","back","pitchUp","pitchDown","yawLeft","yawRight","rollLeft","rollRight","moveVector","rotationVector","handleEvent","keydown","altKey","keyCode","movementSpeedMultiplier","updateMovementVector","updateRotationVector","keyup","mousedown","stopPropagation","button","mousemove","getContainerDimensions","halfWidth","pageX","pageY","mouseup","moveMult","rotMult","offsetLeft","offsetTop","innerWidth","innerHeight","getAutoRotationAngle","autoRotateSpeed","getZoomScale","zoomSpeed","onMouseDown","noRotate","STATE","ROTATE","rotateStart","clientX","clientY","noZoom","DOLLY","dollyStart","noPan","PAN","panStart","onMouseMove","onMouseUp","startEvent","rotateEnd","rotateDelta","rotateLeft","clientWidth","rotateSpeed","rotateUp","dollyEnd","dollyDelta","dollyIn","dollyOut","panEnd","panDelta","pan","endEvent","onMouseWheel","wheelDelta","onKeyDown","noKeys","UP","keyPanSpeed","BOTTOM","touchstart","touches","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","touchmove","touchend","minPolarAngle","maxPolarAngle","panOffset","phiDelta","thetaDelta","lastPosition","target0","position0","quat","quatInverse","changeEvent","panLeft","panUp","deltaX","deltaY","targetDistance","dollyScale"],"mappings":"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Q,KAAA,SACAwL,SAAA,aACA4X,QACA,uBACA,aAEAo1B,YAAA,mLACAC,UACA,kBACA,yBAEAsF,SACA,MACA,OACA,MACA,OACA,MACA,MACA,SAOA,SAAAxuD,EAAAC,GAEAD,EAAAC,SACAwQ,KAAA,MACAwL,SAAA,aACA4X,QACA,oBACA,SACA,eAEAo1B,YAAA,iDACAC,UACA,kBACA,oBACA,oBACA,uBACA,uBACA,gCACA,iCAEAsF,SACA,MACA,OACA,SACA,OACA,MACA,MACA,SAOA,SAAAxuD,EAAAC,GAEAD,EAAAC,SACAwQ,KAAA,OACAwL,SAAA,aACA4X,QACA,qBACA,UACA,4BAEAo1B,YAAA,2HACAC,UACA,gBACA,uBAEAsF,SACA,MACA,OACA,MACA,SACA,OACA,MACA,MACA,SAOA,SAAAxuD,EAAAC,GAEAD,EAAAC,SACAwQ,KAAA,OACAwL,SAAA,aACA4X,QACA,qBACA,WAEAo1B,YAAA,qCACAC,UACA,gBACA,kBACA,sBAEAsF,SACA,MACA,OACA,MACA,SACA,MACA,MACA,MACA,SAOA,SAAAxuD,EAAAC,GAEAD,EAAAC,SACAwQ,KAAA,cACAwL,SAAA,aACA4X,QACA,iCACA,gDACA,+BAEAo1B,YAAA,sWACAC,UACA,kCACA,yCACA,gCACA,yCAEAsF,SACA,OACA,SACA,MACA,MACA,OACA,MACA,MACA,SAMA,SAAAxuD,EAAAC,GAEAD,EAAAC,SACAwQ,KAAA,MACAwL,SAAA,aACA4X,QACA,oBACA,SACA,yBAEAo1B,YAAA,4KACAC,UACA,eACA,oBACA,mCACA,8BACA,2BAEAsF,SACA,MACA,OACA,MACA,SACA,MACA,OACA,MACA,SAOA,SAAAxuD,EAAAC,GAEAD,EAAAC,SACAwQ,KAAA,MACAwL,SAAA,aACA4X,QACA,oBACA,UAEAo1B,YAAA;AACAC,UACA,kBACA,oBACA,qBAEAsF,SACA,MACA,OACA,SACA,MACA,OACA,MACA,MACA,SAOA,SAAAxuD,EAAAC,GAEAD,EAAAC,SACAwQ,KAAA,MACAwL,SAAA,aACA4X,QACA,oBACA,SACA,yBAEAo1B,Y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","file":"dist/sim-shim-bundle.min.js.map","sourcesContent":["import {zip} from 'UtilFunctional';\n\nclass RungeKutta {\n\n  /*|\n  |*|  Creates an explicit Runge Kutta solver given a Butcher Tableau.\n  |*|\n  |*|  'A' is the Runge-Kutta matrix\n  |*|  'b' is the vector of weights\n  |*|  'c' is the vector of nodes\n  |*|  'h' is the step size\n  |*|\n  |*|  A must be a lower triangular matrix of size n by n\n  |*|  b and c must be dimension n\n  |*/\n\n  constructor (A, b, c, h) {\n    this.A = A;\n    this.b = b;\n    this.c = c;\n    this.h = h;\n    this.n = A.length;\n  }\n\n  // compute one step. supplied f must have signature f(t,vector)\n  step (f,t,y) {\n    ks = [];\n    for (var i = 0; i < this.n; i++) {\n      let ti = t + this.c[i] * this.h,\n          yi = y + this.h * ks.reduce( (acc,ki,j)=>{\n            return acc + this.A[i][j] * ki;\n          }, 0);\n      ks.push( f(ti,yi) );\n    }\n    return y + h * zip(this.b,ks).reduce((acc,tup)=>{\n      return acc + tup[0]*tup[1];\n    },0);\n  }\n\n  // checks the condition for a consistent RK method (google it...)\n  isConsistent () {\n    let bools = this.a.reduce( (vec,row,i)=>{\n      let rowsum = row.reduce( (sum,aij,j)=>{\n        if (j < i) return sum + aij;\n        else return sum;\n      }, 0 );\n      vec.push( c[i] == rowsum );\n    }, [] );\n    return bools.reduce( (acc,bool)=>{ return acc && bool }, true )\n  }\n\n}\n\nclass RK4 extends RungeKutta {\n\n  // The classic Runge-Kutta 4 method\n\n  constructor (h) {\n    A = [\n      [0,   0,   0, 0],\n      [0.5, 0,   0, 0],\n      [0,   0.5, 0, 0],\n      [0,   0,   1, 0]\n    ];\n    b = [1/6, 1/3, 1/3, 1/6];\n    c = [0, 0.5, 0.5, 1];\n    super(A,b,c,h);\n  }\n\n}\n","import SimShimSanitize from 'SimShimSanitize';\nimport SimShimPlotCtx from 'SimShimPlotCtx';\nimport SimShimPlot from 'SimShimPlot';\nimport SimShimUtil from 'SimShimUtil';\n\nmodule.exports = class SimShim {\n\n  constructor(plotTarget, settings = {}) {\n    this.ids = [];\n    this.paused = false;\n\n    /*\\\n    |*|  Sanitize\n    \\*/\n\n    // try to parse the plot target\n\n    if (typeof plotTarget === 'string') {\n      // '#plot'\n      plotTarget = document.querySelector(plotTarget);\n    } else if (plotTarget instanceof Array) {\n      // $('.plot')\n      plotTarget = plotTarget[0];\n    }\n\n    if (!(plotTarget instanceof Element)) {\n      throw new Error('First argument of SimShim constructor must be a selector string, jquery selection array, or an Element');\n    }\n\n    SimShimSanitize.checkSettings(settings, 'throw');\n\n    /*\\\n    |*|  Unpack / Initialize Settings\n    \\*/\n\n    let setns = {};\n\n    setns.userDefinedCam     = Boolean(settings.cameraPosn);\n    setns.far                = settings.far            || 500;\n    setns.near               = settings.near           || 0.005;\n    setns.showGrid           = settings.showGrid       || true; // TODO\n    setns.showAxes           = settings.showAxes       || true; // TODO\n    setns.ctrlType           = settings.ctrlType       || \"orbit\";\n    setns.clearColor         = settings.clearColor     || \"#111\";\n    setns.autoRotate         = settings.autoRotate     || false;\n    setns.cameraPosn         = settings.cameraPosn     || [0,0,0];\n    setns.cameraAngle        = settings.cameraAngle    || 45;\n    setns.orbitTarget        = settings.orbitTarget    || [0,0,0];\n    setns.lightIntensity     = settings.lightIntensity || 0.85;\n\n    /*\\\n    |*|  Conversions\n    \\*/\n\n    // accept arrays from users, but work with Vector3 internally\n    setns.cameraPosn = SimShimUtil.toVec3( setns.cameraPosn );\n    setns.orbitTarget = SimShimUtil.toVec3( setns.orbitTarget );\n\n    /*\\\n    |*|  Constants\n    \\*/\n\n    const WIDTH         = plotTarget.offsetWidth,\n          HEIGHT        = plotTarget.offsetHeight,\n          FAR           = setns.far,\n          NEAR          = setns.near,\n          SHOWGRID      = setns.showGrid,\n          SHOWAXES      = setns.showAxes,\n          CTRLTYPE      = setns.ctrlType,\n          AUTOROT       = setns.autoRotate,\n          CAMERAPOSN    = setns.cameraPosn,\n          CAMANGLE      = setns.cameraAngle,\n          ORBITTARGET   = setns.orbitTarget,\n          LIGHTINTESITY = setns.lightIntensity,\n          CLEARCOLOR    = new THREE.Color( setns.clearColor )\n          ;\n\n    /*\\\n    |*|  Set up ThreeJS\n    \\*/\n\n    // -----------------------------------------------------\n    // Renderer\n\n    var renderer = new THREE.WebGLRenderer({\n        // TODO expose more options?\n        // scale: SCALE,\n        // brightness: 2,\n        // antialias: true\n    });\n    renderer.setSize( WIDTH, HEIGHT );\n    // renderer.domElement.style.top = \"0px\";\n    // renderer.domElement.style.left = \"0px\";\n    renderer.domElement.style.margin = \"0px\";\n    renderer.domElement.style.padding = \"0px\";\n    renderer.setClearColor( CLEARCOLOR );\n    plotTarget.appendChild( renderer.domElement );\n\n    // -----------------------------------------------------\n    // Scene\n\n    var scene = new THREE.Scene();\n\n    // -----------------------------------------------------\n    // Camera\n\n    var camera = new THREE.PerspectiveCamera(CAMANGLE, WIDTH/HEIGHT, NEAR, FAR);\n    camera.position.set( CAMERAPOSN );\n    camera.up = new THREE.Vector3(0,0,1);\n    camera.lookAt( ORBITTARGET );\n    scene.add(camera);\n\n    // -----------------------------------------------------\n    // Controls\n\n    var controls;\n    switch (CTRLTYPE) {\n\n      case \"fly\":\n        if (!THREE.FlyControls) throw new Error(\"Error: \"+\n          \"Please include FlyControls.js before plotting\");\n        controls = new THREE.FlyControls( camera );\n        controls.dragToLook = true;\n        break;\n\n      case \"orbit\":\n        if (!THREE.OrbitControls) throw new Error(\"Error: \"+\n          \"Please include OrbitControls.js before plotting\");\n        controls = new THREE.OrbitControls( camera, renderer.domElement );\n        controls.target.set( ORBITTARGET );\n        controls.autoRotate = AUTOROT;\n        break;\n\n      default:\n        throw new Error(`Argument Error: Invalid control type \"${CTRLTYPE}\"`);\n        break;\n\n    }\n\n    // -----------------------------------------------------\n    // Light\n\n    var light = new THREE.DirectionalLight( 0xffffff, LIGHTINTESITY );\n    scene.add(light);\n\n    // -----------------------------------------------------\n    // Animate\n\n    // create plot context\n    this.plotCtx = new SimShimPlotCtx(renderer, scene, camera, controls, light);\n\n    // -----------------------------------------------------\n    // Events\n\n    // retarget camera (helpful for animations)\n    plotTarget.addEventListener(\n      'dblclick',\n      (e) => {\n        if (this.plotCtx.plots.length === 0) return;\n        this.retargetCamera();\n      },\n      false\n    );\n\n    // resize\n    // TODO fix this!\n    plotTarget.addEventListener(\n      'resize',\n      (rend, cam) => {\n        let W = rend.domElement.offsetWidth,\n            H = rend.domElement.offsetHeight;\n        console.log(plotTarget.style.width);\n        console.log(plotTarget.style.height);\n        console.log(renderer.domElement.style.width);\n        console.log(renderer.domElement.style.height);\n        camera.aspect = W / H;\n        camera.updateProjectionMatrix();\n        renderer.setSize( W, H );\n      },\n      false\n    );\n\n  }\n\n  setPaused (bool) {\n    this.paused = bool;\n  }\n\n  isPaused() {\n    return this.paused;\n  }\n\n  addPlot (plot, settings = {}) {\n    try {\n\n      SimShimSanitize.checkPlotObj(plot, 'throw'); // throws\n\n      // add/parse color\n      var color = settings.color ?\n                  new THREE.Color(settings.color) :\n                  new THREE.Color().setHSL(Math.random(),80/100,65/100);\n\n      // shading type\n      var sh;\n      switch (settings.shading) {\n        case 'smooth':\n          sh = THREE.SmoothShading;\n          break;\n        case 'flat':\n          sh = THREE.FlatShading;\n          break;\n        default:\n          sh = THREE.SmoothShading;\n      }\n\n      // make unique alpha-num string\n      var id;\n      do id = Math.random().toString(36).slice(2);\n      while (this.ids.indexOf(id) != -1);\n      this.ids.push(id);\n\n      // parse into wrapper\n      let ssPlot = new SimShimPlot( plot, id, color, sh ); // throws\n      this.plotCtx.scene.add( ssPlot.threeObj );\n      this.plotCtx.plots.push( ssPlot );\n\n      return id;\n\n    } catch (e) {\n      if (e.stack) console.error(e.stack);\n      else console.error(e);\n      console.warn('addPlot returning null');\n      return null;\n    }\n  }\n\n  addObject (obj, settings = {}) {\n    // add/parse color\n    var color = settings.color ?\n                new THREE.Color(settings.color) :\n                new THREE.Color().setHSL(Math.random(),80/100,65/100);\n\n    // make unique alpha-num string\n    var id;\n    do id = Math.random().toString(36).slice(2);\n    while (this.ids.indexOf(id) != -1);\n\n    this.ids.push(id);\n    obj.id = id;\n\n    this.plotCtx.plots.push( obj );\n    if (obj.threeObj) this.plotCtx.scene.add( obj.threeObj );\n\n    return id;\n  }\n\n  getPlot (id) {\n    return this.plotCtx.plots.find( (p) => p.id == id );\n  }\n\n  // remove all SimShimPlots and pause\n  kill () {\n    for (let i=0; i<this.plotCtx.plots.length; i++) {\n      let p = this.plotCtx.plots[i];\n      this.plotCtx.scene.remove( p.threeObj );\n    }\n    this.plotCtx.plots = [];\n    this.ids = [];\n    this.paused = true;\n  }\n\n  removeById (id) {\n    let idIdx = this.ids.indexOf( id );\n    let plotIdx = this.plotCtx.plots.findIndex((p) => p.id == id);\n    if (idIdx == -1) console.warn(`Plot id ${id} not tracked by SimShim (did you use the 'addPlot' method?)`);\n    else this.ids.splice( idIdx, 1 );\n    if (plotIdx == -1) console.warn(`No plot with id ${id} found, no plots removed`);\n    else {\n      this.plotCtx.scene.remove( this.plotCtx.plots[plotIdx].threeObj );\n      this.plotCtx.plots.splice( plotIdx, 1 );\n    }\n  }\n\n  // replace any given settings\n  setSettings (settings = {}) {\n\n    SimShimSanitize.checkSettings(settings, 'warn');\n\n    for (let k in settings) {\n      switch (k) {\n        case 'cameraPosn':\n          this.plotCtx.camera.position.setX(settings[k][0]);\n          this.plotCtx.camera.position.setY(settings[k][1]);\n          this.plotCtx.camera.position.setZ(settings[k][2]);\n          this.plotCtx.camera.updateProjectionMatrix();\n          break;\n        case 'cameraAngle':\n          this.plotCtx.camera.fov = settings[k];\n          this.plotCtx.camera.updateProjectionMatrix();\n          break;\n        case 'orbitTarget':\n          this.plotCtx.controls.target.setX(settings[k][0]);\n          this.plotCtx.controls.target.setY(settings[k][1]);\n          this.plotCtx.controls.target.setZ(settings[k][2]);\n          this.plotCtx.controls.update(1);\n          break;\n        case 'lightIntensity':\n          this.plotCtx.light.intensity = settings[k];\n          break;\n        case 'autoRotate':\n          this.plotCtx.controls.autoRotate = settings[k];\n          break;\n        default:\n          console.warn(`Cannot modify setting \"${k}\", skipping this key`);\n          break;\n      }\n    }\n  }\n\n  retargetCamera () {\n    var M = this.plotCtx.updateMetrics(),\n        relativeCameraPosn = new THREE.Vector3(\n            M.distX, M.distY, M.distZ\n        ).multiplyScalar(3),\n        cameraPosn = relativeCameraPosn.add(M.center);\n    // Camera\n    this.plotCtx.camera.position.x = cameraPosn.x;\n    this.plotCtx.camera.position.y = cameraPosn.y;\n    this.plotCtx.camera.position.z = cameraPosn.z;\n    this.plotCtx.camera.lookAt(M.center);\n    if (THREE.OrbitControls && this.plotCtx.controls instanceof THREE.OrbitControls) {\n      this.plotCtx.controls.target.copy(M.center);\n    };\n  }\n\n  animate () {\n    // loop\n    window.requestAnimationFrame( () => { this.animate() } );\n\n    // increment iterator plot objects\n    if (!this.paused) {\n      for (var j = 0; j < this.plotCtx.plots.length; j++) {\n        this.plotCtx.plots[j].update();\n      }\n\n      // update controls and lights\n      this.plotCtx.controls.update( 1 );\n      this.plotCtx.light.position.copy( this.plotCtx.camera.position );\n      this.plotCtx.light.lookAt( this.plotCtx.metrics.center );\n    }\n\n    // render\n    this.plotCtx.render();\n  }\n\n  start () {\n    this.plotCtx.render();\n\n    // Update Scene (Lights, Camera)\n    if (!this.userDefinedCam) this.retargetCamera();\n    this.plotCtx.light.position.copy( this.plotCtx.camera.position );\n    this.plotCtx.light.lookAt( this.plotCtx.metrics.center );\n\n    // polyfill animation frames\n    window.requestAnimationFrame = window.requestAnimationFrame\n                                || window.webkitRequestAnimationFrame\n                                || window.mozRequestAnimationFrame\n                                || window.oRequestAnimationFrame\n                                || window.msRequestAnimationFrame\n                                || ((cb) => window.setTimeout( cb, 1000 / 60 ));\n    // start the render loop\n    this.animate();\n  }\n}\n","import SimShimUtil from './SimShimUtil';\n\n\nexport default class SimShimPlot {\n\n  constructor (obj, id, color, shading) {\n\n    this.id = id;\n\n    // parse plottable object into an iterator that updates ThreeJS geometries\n    this.obj = obj;\n\n    switch (obj.type) {\n      case 'lineplot':\n        this._initLineplot(color);\n        break;\n\n      case 'surfaceplot':\n        this._initSurface(color, shading);\n        break;\n\n      // TODO: \"ode3\", \"pde3\", \"graph\", ...?\n\n      default:\n        throw new Error(`Unexpected plot type '${obj.type}'`);\n    }\n  }\n\n  _initLineplot(color) {\n\n    let obj = this.obj;\n\n    // convert to the 'manual' form of lineplot\n    if (obj.parse) {\n\n      // fns holds the parsed x(t), y(t), and z(t) funcitons\n      let fns = [];\n      for (let i = 0; i < obj.parse.length; i++) {\n\n        let tree     = math.parse(obj.parse[i]),\n            symNames = SimShimUtil.uniqueSymbolNames( tree ),\n            compiled = tree.compile();\n\n        if (symNames.length > 1) throw new Error(\"Argument Error: \"+\n          \"Please use 0 or 1 symbols for parsed lineplot functions\");\n\n        fns.push( function (t) {\n          let s = {};\n          if (symNames.length > 0) s[symNames[0]] = t;\n          return compiled.eval(s);\n        });\n      }\n\n      let f = (t) => new THREE.Vector3(fns[0](t), fns[1](t), fns[2](t));\n\n      // animated lineplot\n      if (obj.animated) {\n        // create 'next' function\n        obj.t = obj.start;\n        obj.dt = obj.step;\n        obj.next = (function () {\n          let xyz = f( this.t );\n          this.t += this.dt;\n          return xyz;\n        }).bind(obj);\n      }\n\n      // static lineplot\n      else {\n        // sample from the functions\n        let start = obj.start,\n            end   = obj.end,\n            dt    = obj.step,\n            data  = [];\n        for (let t = start; t < end; t+=dt) data.push( f(t) );\n        obj.data = data;\n      }\n    }\n\n    /**  BUILD THREE JS OBJECT  **/\n\n    // TODO support for custom shaders\n    let material = new THREE.LineBasicMaterial({\n        color: color,\n        linewidth: 2\n    });\n\n    // animated lineplot\n    if (obj.animated) {\n      let geometry = new THREE.Geometry();\n      geometry.dynamic = true;\n      // initialize all points in geometry to the initial point\n      let initialXyz = SimShimUtil.toVec3( obj.next() );\n      for (let j=0; j<obj.lineLength; j++) geometry.vertices.push(initialXyz);\n      // create and attach THREE object\n      let traj = new THREE.Line(geometry, material);\n      traj.frustumCulled = false;\n      this.threeObj = traj;\n      // update function wrapper that calls \"next\"\n      this.update = (function () {\n        this.threeObj.geometry.vertices.shift();\n        this.threeObj.geometry.vertices.push(SimShimUtil.toVec3(this.obj.next()));\n        this.threeObj.geometry.verticesNeedUpdate = true;\n      }).bind(this);\n    }\n\n    // static lineplot\n    else {\n      let geometry = new THREE.Geometry();\n      // fill the geometry with provided points\n      geometry.vertices = obj.data.map( SimShimUtil.toVec3 );\n      // construct THREE object\n      this.threeObj = new THREE.Line(geometry, material);\n      // don't change geometry on update\n      this.update = function () {};\n    }\n\n  }\n\n  _initSurface(color, shading) {\n    let obj = this.obj;\n\n    if (obj.parse) {\n      // Parse the string provided and add a mesh + update function\n      let fn,\n          tree     = math.parse(obj.parse),\n          symNames = SimShimUtil.uniqueSymbolNames( tree ),\n          compiled = tree.compile(),\n          maxAllowedVars = 2;\n\n      // special case for animations\n      if (symNames.indexOf(\"t\") != -1) maxAllowedVars++;\n\n      if (symNames.length <= maxAllowedVars) {\n        let namesLeft = symNames.filter((n) => n !== 't');\n        fn = (vars, t) => {\n          let scope = {t: t};\n          namesLeft.forEach((n) => scope[n]=vars.shift());\n          return compiled.eval(scope);\n        }\n      } else {\n        throw new Error(\"Invalid Surfaceplot 'parse' Parameter: use 0, 1, or 2 symbols, \" +\n          \"plus 't' if you are animating a surface.\");\n      }\n\n      // handle animation\n      if (obj.animated) {\n        // create 'next' function\n        obj.t  = obj.start;\n        obj.next = (function () {\n          // sample from the fn\n          let mesh = [];\n          // construct initial condition\n          for (let x = this.minX; x < this.maxX; x+=this.step) {\n            let row = [];\n            for (let y = this.minY; y < this.maxY; y+=this.step) {\n              row.push( fn([x,y], this.t) );\n            }\n            mesh.push( row );\n          }\n          this.t += this.dt;\n          return mesh;\n        }).bind(obj);\n\n      // not animated\n      } else {\n        // sample from the fn\n        let data = [];\n        for (let x = obj.minX; x < obj.maxX; x+=obj.step) {\n          let row = [];\n          for (let y = obj.minY; y < obj.maxY; y+=obj.step) {\n            row.push( fn([x,y]) );\n          };\n          data.push( row );\n        }\n        obj.data = data;\n      }\n    } // end parsing\n\n    // materials\n    let material = new THREE.MeshLambertMaterial({\n        color: color,\n        shading: shading,\n        side: THREE.DoubleSide,\n    });\n    if (obj.wireframe) { // TODO fix\n      let wireframeMaterial = new THREE.MeshBasicMaterial({\n        color: obj.wireframeColor || 0xeeeeee,\n        wireframe: true,\n        transparent: true\n      });\n    }\n\n    if (obj.animated) {\n\n      let geometry = SimShimUtil.makeSurfaceGeometry(\n        obj.minX, obj.minY, obj.maxX, obj.maxY, obj.next()\n      );\n      geometry.computeFaceNormals();\n      geometry.computeVertexNormals();\n\n      if (obj.wireframe) { // TODO wireframes\n        let multiMaterial = [ material, wireframeMaterial ];\n        this.threeObj = THREE.SceneUtils.createMultiMaterialObject(\n          geometry,\n          multiMaterial\n        );\n      } else {\n        this.threeObj = new THREE.Mesh( geometry, material );\n      }\n      this.update = (function () {\n        let o = this.obj;\n        // replace entire geometry object\n        // TODO better implementation\n        let geo = SimShimUtil.makeSurfaceGeometry(\n          o.minX, o.minY, o.maxX, o.maxY, o.next()\n        );\n        geo.computeFaceNormals();\n        geo.computeVertexNormals();\n        geo.verticesNeedUpdate = true; // flag for update\n        // threeJS holds references to geometries in object3Ds,\n        // so we must call .dispose() to avoid memory leaks\n        this.threeObj.geometry.dispose();\n        this.threeObj.geometry = geo;\n      }).bind(this);\n    } else {\n      let geometry = SimShimUtil.makeSurfaceGeometry(\n        obj.minX, obj.minY, obj.maxX, obj.maxY, obj.data\n      );\n      geometry.computeFaceNormals();\n      geometry.computeVertexNormals();\n      this.threeObj = new THREE.Mesh( geometry, material );\n      // don't change geometry\n      this.update = function () {};\n    }\n\n    // Rotate the surface by inputting...\n    //   * a quaternion (4 component array or THREE.Quaternion) that\n    //     is applied to the mesh, or\n    //   * a vector (3 component array or THREE.Vector3) that is interpretted\n    //     as a transformation of the vector (0,0,1). A quaternion is\n    //     interpolated from the input and (0,0,1), and this is used to\n    //     rotate the surface. This is just provided as a quick way to get\n    //     a rough rotation in place, and the resulting surface might be\n    //     rotated around in an undesirable way.\n    if (obj.rotation) {\n      let q;\n      if (obj.rotation instanceof THREE.Quaternion) {\n        q = rotation;\n      } else if (obj.rotation.length === 4) {\n        q = new THREE.Quaternion().fromArray( obj.rotation );\n      } else {\n        let up = new THREE.Vector3(0,0,1);\n        let rotn = SimShimUtil.toVec3( obj.rotation );\n        rotn.normalize();\n        q = new THREE.Quaternion().setFromUnitVectors(up, rotn);\n      }\n      this.threeObj.setRotationFromQuaternion(q);\n    };\n\n  }\n\n}\n","export default class SimShimPlotCtx {\n  constructor (renderer, scene, camera, controls, light) {\n    this.renderer = renderer;\n    this.scene    = scene;\n    this.camera   = camera;\n    this.controls = controls;\n    this.light    = light;\n    this.plots    = [];\n  }\n\n  updateMetrics () {\n    // init (also defaults for when no plots exist)\n    var res = {\n      'maxX': 0, 'maxY': 0, 'maxZ': 0,\n      'minX': 0, 'minY': 0, 'minZ': 0,\n      'midX': 0, 'midY': 0, 'midZ': 0,\n      'distX': 1, 'distY': 1, 'distZ': 1\n    };\n\n    // set Max and Min helper\n    function setMaxMin (data) {\n      for (let j = 0; j < data.length; j++) {\n        var px = data[j][0] || data[j].x,\n            py = data[j][1] || data[j].y,\n            pz = data[j][2] || data[j].z;\n        // set max\n        res.maxX = px > res.maxX ? px : res.maxX;\n        res.maxY = py > res.maxY ? py : res.maxY;\n        res.maxZ = pz > res.maxZ ? pz : res.maxZ;\n        // set min\n        res.minX = px < res.minX ? px : res.minX;\n        res.minY = py < res.minY ? py : res.minY;\n        res.minZ = pz < res.minZ ? pz : res.minZ;\n      }\n    }\n\n    // if plots exist, update these values\n    if (this.plots.length) {\n\n      // iterate\n      this.plots.forEach((plt) => {\n        if (plt.threeObj) setMaxMin( plt.threeObj.geometry.vertices );\n        else console.warn('SimShimPlot found with no THREEjs object');\n      });\n\n      // compute extra metrics\n      res.midX    = (res.maxX + res.minX)/2;\n      res.midY    = (res.maxY + res.minY)/2;\n      res.midZ    = (res.maxZ + res.minZ)/2;\n      res.distX   = (res.maxX - res.minX)/2;\n      res.distY   = (res.maxY - res.minY)/2;\n      res.distZ   = (res.maxZ - res.minZ)/2;\n\n    }\n\n    // computed metrics\n\n    res.maxDist = Math.sqrt( Math.pow(res.distX, 2)\n                           + Math.pow(res.distY, 2)\n                           + Math.pow(res.distZ, 2)\n                           );\n    res.center  = new THREE.Vector3(res.midX, res.midY, res.midZ);\n\n    // set and return\n\n    this.metrics = res;\n    return res;\n  }\n\n  render () {\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n","// This messy class is intended to give useful error messages when the API is\n// used incorrectly.\n\nexport default class SimShimSanitize {\n\n  static _handle(str, policy) {\n    switch (policy) {\n      case 'error':\n        console.error(str);\n        break;\n      case 'warn':\n        console.warn(str);\n        break;\n      default:\n        throw new Error(str);\n    }\n  }\n\n  // everything is optional in settings\n  static checkSettings(settings, policy='warn') {\n    let s = [],\n        i = (x, o) => x instanceof o,\n        t = (obj, str) => typeof obj === str\n        ;\n\n    if (!t(settings.far, 'undefined') && !t(settings.far, 'number')) s.push('The \"far\" setting must be a number');\n    if (!t(settings.near, 'undefined') && !t(settings.near, 'number')) s.push('The \"near\" setting must be a number');\n    if (!t(settings.cameraAngle, 'undefined') && !t(settings.cameraAngle, 'number')) s.push('The \"cameraAngle\" setting must be a number');\n    if (!t(settings.lightIntensity, 'undefined') && !t(settings.lightIntensity, 'number')) s.push('The \"lightIntensity\" setting must be a number');\n\n    if ( settings.ctrlType && !t(settings.ctrlType, 'string')) s.push('The \"ctrlType\" setting must be a string');\n    if ( settings.clearColor && !t(settings.clearColor, 'string')) s.push('The \"clearColor\" setting must be a string');\n\n    if ( settings.showGrid && !t(settings.showGrid, 'boolean')) s.push('The \"showGrid\" setting must be a boolean');\n    if ( settings.showAxes && !t(settings.showAxes, 'boolean')) s.push('The \"showAxes\" setting must be a boolean');\n    if ( settings.autoRotate && !t(settings.autoRotate, 'boolean')) s.push('The \"autoRotate\" setting must be a boolean');\n\n    if ( settings.cameraPosn && ! (i(settings.cameraPosn, Array) || i(settings.cameraPosn, THREE.Vector3))) s.push('The \"cameraPosn\" setting must be an array or THREE.Vector3');\n    if ( settings.orbitTarget && ! (i(settings.orbitTarget, Array) || i(settings.orbitTarget, THREE.Vector3))) s.push('The \"orbitTarget\" setting must be an array or THREE.Vector3');\n\n    if (s.length) this._handle(s.join('\\n'), policy);\n  }\n\n  // some required fields exist in plot objects. Ugly conditional nesting\n  // required to drill down and provide useful errors.\n  static checkPlotObj(plot, policy='warn') {\n    let s = [],\n        i = (x, o) => x instanceof o,\n        t = (obj, str) => typeof obj === str,\n        all = (stuff, cond) => stuff.findIndex((x) => !cond(x)) == -1,\n        isArr = (x) => i(x, Array),\n        isNum = (x) => t(x, 'number'),\n        isNumArr = (x) => all(x, (y) => isNum(y)),\n        isNumArr2D = (pts) => all(pts, (pt)=>(isArr(pt) && isNumArr(pt))),\n        x // use this with the comma operator to save a bit of space\n        ;\n\n    // OPTIONAL\n\n    if (x=plot.label, x && !t(x, 'string')) s.push('The \"label\" attribute must be a string');\n    if (x=plot.rotation, x && !(isNumArr(x) || i(x, THREE.Quaternion))) s.push('The \"rotation\" attribute must be an array of numbers (a rotation of [0,0,1] that will be applied to the plot) or a THREE.Quaternion');\n\n    // REQUIRED\n\n    if (x=plot.type, !x || !t(x, 'string')) s.push('The \"type\" attribute is required and must be a string');\n    else {\n\n      if (plot.type == 'lineplot') { // ===============================================================================================\n\n        if (plot.parse) {\n\n          if (x=plot.parse, !isArr(x) || !all(x, (y) => t(y, 'string'))) s.push('The \"parse\" attribute must be an array of strings');\n          if (!isNum(plot.start)) s.push('A parsed lineplot requires a \"start\" attribute (initial t value)');\n          if (!isNum(plot.step)) s.push('A parsed lineplot requires a \"step\" attribute (timestep between t values)');\n\n          if (plot.animated) { // lineplot, parsed, animated\n\n            if (!isNum(plot.lineLength)) s.push('This type of lineplot requires a \"lineLength\" attribute (animated lines have finite length)');\n\n          } else { // lineplot, parsed, not animated\n\n            // handled above.\n\n          }\n        } else {\n\n          if (plot.animated) { // lineplot, not parsed, animated\n\n            if (!isNum(plot.lineLength)) s.push('This type of lineplot requires a \"lineLength\" attribute (animated lines have finite length)');\n            if (x=plot.next, !x || !t(x, 'function')) s.push('This type of lineplot requires a \"next\" attribute (a function producing the next point)');\n\n          } else { // lineplot, not parsed, not animated\n\n            if (x=plot.data, !x || !isArr(x) || !isNumArr2D(x)) s.push('This type of lineplot requires a \"next\" attribute (a function producing the next point)');\n\n          }\n\n        }\n\n      } else if (plot.type == 'surfaceplot') { // =====================================================================================\n\n        if (!isNum(plot.minX)) s.push('Surfaceplots require the \"minX\" attribute (minimum x value)');\n        if (!isNum(plot.maxX)) s.push('Surfaceplots require the \"maxX\" attribute (maximum x value)');\n        if (!isNum(plot.minY)) s.push('Surfaceplots require the \"minY\" attribute (minimum y value)');\n        if (!isNum(plot.maxY)) s.push('Surfaceplots require the \"maxY\" attribute (maxmium y value)');\n\n        if (plot.parse) {\n\n          if (!isNum(plot.step)) s.push('A parsed surfaceplot requires the \"step\" attribute (interval between adjascent x and y values)');\n          if (x=plot.parse, !x || !t(x, 'string')) s.push('A parsed surfaceplot requires the \"parse\" attribute, which must be a string representing an expression for z, ie the \"f\" in \"z=f(x,y)\" (ex: \"sin(x)*y\", \"t*x*y\", etc. Don\\'t forget to add the \"animated\" attribute and a \"t\" in the function if you want it to be animated)');\n\n          if (plot.animated) { // surfaceplot, parsed, animated\n\n            if (!isNum(plot.start)) s.push('A parsed, animated surfaceplot requires the \"start\" attribute (initial time value)');\n            if (!isNum(plot.dt)) s.push('A parsed, animated surfaceplot requires the \"dt\" attribute (time step per frame)');\n\n          } else { // surfaceplot, parsed, not animated\n\n            // handled above.\n\n          }\n\n        } else {\n\n          if (plot.animated) { // surfaceplot, not parsed, animated\n\n            if (x=plot.next, !x || !t(x, 'function')) s.push('An animated surfaceplot requires a \"next\" attribute (provides the a new 2D array of heights each frame) or a \"parse\" attribute')\n\n          } else { // surfaceplot, not parsed, not animated\n\n            if (x=plot.data, !x || !isArr(x) || !isNumArr2D(x)) s.push('This type of surfaceplot requires the \"data\" attribute (2D array of height values)');\n\n          }\n        }\n      }\n    }\n\n    if (s.length) this._handle(s.join('\\n'), policy);\n  }\n\n}\n","// import * as RKStuff from './runge-kutta';\n//\n// window.SimShimUtil = RKStuff;\n\nexport default class SimShimUtil {\n\n  static toVec3(o) {\n    if (o instanceof THREE.Vector3) return o;\n    if (o instanceof Array) return new THREE.Vector3().fromArray(o);\n    console.error('Cannot coerce into Vector3');\n  }\n\n  static toQuat(o) {\n    if (o instanceof THREE.Quaternion) return o;\n    if (o instanceof Array) return new THREE.Quaternion().fromArray(o);\n    console.error('Cannot coerce into Vector3');\n  }\n\n  // helper for mathjs expression parsing. In particular for evalutation and\n  // determining if \"t\" was used (interpretted as time)\n  static uniqueSymbolNames (tree) {\n    // return the unique symbolNodes of tree\n    // filter the SymbolNodes out\n    var arr = tree.filter((node) => {\n      return node.type == 'SymbolNode';\n    });\n    // get unique list of names\n    var dummy = {}, names = [];\n    for(var i = 0, l = arr.length; i < l; ++i){\n      if(!dummy.hasOwnProperty(arr[i].name)) {\n        names.push(arr[i].name);\n        dummy[arr[i].name] = 1;\n      }\n    }\n    return names;\n  }\n\n  // convert 2D array of data into a THREEjs geometry with faces and vertices\n  static makeSurfaceGeometry (minX,minY,maxX,maxY,data) {\n    var geometry = new THREE.Geometry();\n    // add vertices\n    var wid = data[0].length;\n    var hgt = data.length;\n    var dy = (maxY - minY)/hgt;\n    var dx = (maxX - minX)/wid;\n    for (var j = 0; j < hgt; j++) {\n      for (var i = 0; i < wid; i++) {\n        var v = new THREE.Vector3(\n          minX + i*dx,\n          minY + j*dy,\n          data[j][i]\n        );\n        geometry.vertices.push(v);\n      }\n    };\n    // create triangles\n    var triangles = [];\n    for (var j = 0; j < hgt - 1; j++) {\n      for (var i = 0; i < wid - 1; i++) {\n        // up-left, up-right, etc. points\n        var ul = data[j][i],\n            ur = data[j][i+1],\n            dl = data[j+1][i],\n            dr = data[j+1][i+1],\n            ind_ul =     j*wid + i,\n            ind_ur =     j*wid + (i+1),\n            ind_dl = (j+1)*wid + i,\n            ind_dr = (j+1)*wid + (i+1);\n        // create 2 faces from 4 points\n        geometry.faces.push(new THREE.Face3(\n          ind_ul, ind_ur, ind_dl\n        ));\n        geometry.faces.push(new THREE.Face3(\n          ind_ur, ind_dr, ind_dl\n        ));\n      }\n    }\n\n    return geometry;\n  }\n\n}\n","export function add(x1,x2) {\n  return x1 + x2;\n}\n\nexport function zip(x1,x2) {\n  if (x1.length != x2.length)\n    throw new Error('zip: lists not same length');\n  else return zipRec(x1,x2,[]);\n}\n\nfunction zipRec(x1,x2,zipped) {\n  if (x1.length == 0) return zipped;\n  else return zipRec( rest(x1), rest(x2), push([x1[0],x2[0]], zipped) );\n}\n\nexport function push(x,xs) {\n  xs.push(x);\n  return xs;\n}\n\nexport function sorted(list, fn) {\n  list.sort(fn); // undefined is fine as arg\n  return list;\n}\n\nexport function rest(list) {\n  return list.splice(1);\n}\n","/**\n * math.js\n * https://github.com/josdejong/mathjs\n *\n * Math.js is an extensive math library for JavaScript and Node.js,\n * It features real and complex numbers, units, matrices, a large set of\n * mathematical functions, and a flexible expression parser.\n *\n * @version 3.2.1\n * @date    2016-04-26\n *\n * @license\n * Copyright (C) 2013-2016 Jos de Jong <wjosdejong@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar core = __webpack_require__(1);\n\n\t/**\n\t * math.js factory function. Creates a new instance of math.js\n\t *\n\t * @param {Object} [config] Available configuration options:\n\t *                            {number} epsilon\n\t *                              Minimum relative difference between two\n\t *                              compared values, used by all comparison functions.\n\t *                            {string} matrix\n\t *                              A string 'matrix' (default) or 'array'.\n\t *                            {string} number\n\t *                              A string 'number' (default), 'bignumber', or\n\t *                              'fraction'\n\t *                            {number} precision\n\t *                              The number of significant digits for BigNumbers.\n\t *                              Not applicable for Numbers.\n\t *                            {boolean} predictable\n\t *                              Predictable output type of functions. When true,\n\t *                              output type depends only on the input types. When\n\t *                              false (default), output type can vary depending\n\t *                              on input values. For example `math.sqrt(-2)`\n\t *                              returns `NaN` when predictable is false, and\n\t *                              returns `complex('2i')` when true.\n\t */\n\tfunction create (config) {\n\t  // create a new math.js instance\n\t  var math = core.create(config);\n\t  math.create = create;\n\n\t  // import data types, functions, constants, expression parser, etc.\n\t  math['import'](__webpack_require__(13));\n\n\t  return math;\n\t}\n\n\t// return a new instance of math.js\n\tmodule.exports = create();\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(2);\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar isFactory = __webpack_require__(3).isFactory;\n\tvar deepExtend = __webpack_require__(3).deepExtend;\n\tvar typedFactory = __webpack_require__(4);\n\tvar emitter = __webpack_require__(8);\n\n\tvar importFactory = __webpack_require__(10);\n\tvar configFactory = __webpack_require__(12);\n\n\t/**\n\t * Math.js core. Creates a new, empty math.js instance\n\t * @param {Object} [options] Available options:\n\t *                            {number} epsilon\n\t *                              Minimum relative difference between two\n\t *                              compared values, used by all comparison functions.\n\t *                            {string} matrix\n\t *                              A string 'Matrix' (default) or 'Array'.\n\t *                            {string} number\n\t *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n\t *                            {number} precision\n\t *                              The number of significant digits for BigNumbers.\n\t *                              Not applicable for Numbers.\n\t *                            {boolean} predictable\n\t *                              Predictable output type of functions. When true,\n\t *                              output type depends only on the input types. When\n\t *                              false (default), output type can vary depending\n\t *                              on input values. For example `math.sqrt(-2)`\n\t *                              returns `NaN` when predictable is false, and\n\t *                              returns `complex('2i')` when true.\n\t * @returns {Object} Returns a bare-bone math.js instance containing\n\t *                   functions:\n\t *                   - `import` to add new functions\n\t *                   - `config` to change configuration\n\t *                   - `on`, `off`, `once`, `emit` for events\n\t */\n\texports.create = function create (options) {\n\t  // simple test for ES5 support\n\t  if (typeof Object.create !== 'function') {\n\t    throw new Error('ES5 not supported by this JavaScript engine. ' +\n\t    'Please load the es5-shim and es5-sham library for compatibility.');\n\t  }\n\n\t  // cached factories and instances\n\t  var factories = [];\n\t  var instances = [];\n\n\t  // create a namespace for the mathjs instance, and attach emitter functions\n\t  var math = emitter.mixin({});\n\t  math.type = {};\n\t  math.expression = {\n\t    transform: Object.create(math)\n\t  };\n\n\t  // create a new typed instance\n\t  math.typed = typedFactory.create(math.type);\n\n\t  // create configuration options. These are private\n\t  var _config = {\n\t    // minimum relative difference between two compared values,\n\t    // used by all comparison functions\n\t    epsilon: 1e-12,\n\n\t    // type of default matrix output. Choose 'matrix' (default) or 'array'\n\t    matrix: 'Matrix',\n\n\t    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n\t    number: 'number',\n\n\t    // number of significant digits in BigNumbers\n\t    precision: 64,\n\n\t    // predictable output type of functions. When true, output type depends only\n\t    // on the input types. When false (default), output type can vary depending\n\t    // on input values. For example `math.sqrt(-2)` returns `NaN` when\n\t    // predictable is false, and returns `complex('2i')` when true.\n\t    predictable: false\n\t  };\n\n\t  /**\n\t   * Load a function or data type from a factory.\n\t   * If the function or data type already exists, the existing instance is\n\t   * returned.\n\t   * @param {{type: string, name: string, factory: Function}} factory\n\t   * @returns {*}\n\t   */\n\t  function load (factory) {\n\t    if (!isFactory(factory)) {\n\t      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');\n\t    }\n\n\t    var index = factories.indexOf(factory);\n\t    var instance;\n\t    if (index === -1) {\n\t      // doesn't yet exist\n\t      if (factory.math === true) {\n\t        // pass with math namespace\n\t        instance = factory.factory(math.type, _config, load, math.typed, math);\n\t      }\n\t      else {\n\t        instance = factory.factory(math.type, _config, load, math.typed);\n\t      }\n\n\t      // append to the cache\n\t      factories.push(factory);\n\t      instances.push(instance);\n\t    }\n\t    else {\n\t      // already existing function, return the cached instance\n\t      instance = instances[index];\n\t    }\n\n\t    return instance;\n\t  }\n\n\t  // load the import and config functions\n\t  math['import'] = load(importFactory);\n\t  math['config'] = load(configFactory);\n\n\t  // apply options\n\t  if (options) {\n\t    math.config(options);\n\t  }\n\n\t  return math;\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/**\n\t * Clone an object\n\t *\n\t *     clone(x)\n\t *\n\t * Can clone any primitive type, array, and object.\n\t * If x has a function clone, this function will be invoked to clone the object.\n\t *\n\t * @param {*} x\n\t * @return {*} clone\n\t */\n\texports.clone = function clone(x) {\n\t  var type = typeof x;\n\n\t  // immutable primitive types\n\t  if (type === 'number' || type === 'string' || type === 'boolean' ||\n\t      x === null || x === undefined) {\n\t    return x;\n\t  }\n\n\t  // use clone function of the object when available\n\t  if (typeof x.clone === 'function') {\n\t    return x.clone();\n\t  }\n\n\t  // array\n\t  if (Array.isArray(x)) {\n\t    return x.map(function (value) {\n\t      return clone(value);\n\t    });\n\t  }\n\n\t  if (x instanceof Number)    return new Number(x.valueOf());\n\t  if (x instanceof String)    return new String(x.valueOf());\n\t  if (x instanceof Boolean)   return new Boolean(x.valueOf());\n\t  if (x instanceof Date)      return new Date(x.valueOf());\n\t  if (x && x.isBigNumber === true) return x; // bignumbers are immutable\n\t  if (x instanceof RegExp)  throw new TypeError('Cannot clone ' + x);  // TODO: clone a RegExp\n\n\t  // object\n\t  var m = {};\n\t  for (var key in x) {\n\t    if (x.hasOwnProperty(key)) {\n\t      m[key] = clone(x[key]);\n\t    }\n\t  }\n\t  return m;\n\t};\n\n\t/**\n\t * Extend object a with the properties of object b\n\t * @param {Object} a\n\t * @param {Object} b\n\t * @return {Object} a\n\t */\n\texports.extend = function(a, b) {\n\t  for (var prop in b) {\n\t    if (b.hasOwnProperty(prop)) {\n\t      a[prop] = b[prop];\n\t    }\n\t  }\n\t  return a;\n\t};\n\n\t/**\n\t * Deep extend an object a with the properties of object b\n\t * @param {Object} a\n\t * @param {Object} b\n\t * @returns {Object}\n\t */\n\texports.deepExtend = function deepExtend (a, b) {\n\t  // TODO: add support for Arrays to deepExtend\n\t  if (Array.isArray(b)) {\n\t    throw new TypeError('Arrays are not supported by deepExtend');\n\t  }\n\n\t  for (var prop in b) {\n\t    if (b.hasOwnProperty(prop)) {\n\t      if (b[prop] && b[prop].constructor === Object) {\n\t        if (a[prop] === undefined) {\n\t          a[prop] = {};\n\t        }\n\t        if (a[prop].constructor === Object) {\n\t          deepExtend(a[prop], b[prop]);\n\t        }\n\t        else {\n\t          a[prop] = b[prop];\n\t        }\n\t      } else if (Array.isArray(b[prop])) {\n\t        throw new TypeError('Arrays are not supported by deepExtend');\n\t      } else {\n\t        a[prop] = b[prop];\n\t      }\n\t    }\n\t  }\n\t  return a;\n\t};\n\n\t/**\n\t * Deep test equality of all fields in two pairs of arrays or objects.\n\t * @param {Array | Object} a\n\t * @param {Array | Object} b\n\t * @returns {boolean}\n\t */\n\texports.deepEqual = function deepEqual (a, b) {\n\t  var prop, i, len;\n\t  if (Array.isArray(a)) {\n\t    if (!Array.isArray(b)) {\n\t      return false;\n\t    }\n\n\t    if (a.length != b.length) {\n\t      return false;\n\t    }\n\n\t    for (i = 0, len = a.length; i < len; i++) {\n\t      if (!exports.deepEqual(a[i], b[i])) {\n\t        return false;\n\t      }\n\t    }\n\t    return true;\n\t  }\n\t  else if (a instanceof Object) {\n\t    if (Array.isArray(b) || !(b instanceof Object)) {\n\t      return false;\n\t    }\n\n\t    for (prop in a) {\n\t      //noinspection JSUnfilteredForInLoop\n\t      if (!exports.deepEqual(a[prop], b[prop])) {\n\t        return false;\n\t      }\n\t    }\n\t    for (prop in b) {\n\t      //noinspection JSUnfilteredForInLoop\n\t      if (!exports.deepEqual(a[prop], b[prop])) {\n\t        return false;\n\t      }\n\t    }\n\t    return true;\n\t  }\n\t  else {\n\t    return (typeof a === typeof b) && (a == b);\n\t  }\n\t};\n\n\t/**\n\t * Test whether the current JavaScript engine supports Object.defineProperty\n\t * @returns {boolean} returns true if supported\n\t */\n\texports.canDefineProperty = function () {\n\t  // test needed for broken IE8 implementation\n\t  try {\n\t    if (Object.defineProperty) {\n\t      Object.defineProperty({}, 'x', { get: function () {} });\n\t      return true;\n\t    }\n\t  } catch (e) {}\n\n\t  return false;\n\t};\n\n\t/**\n\t * Attach a lazy loading property to a constant.\n\t * The given function `fn` is called once when the property is first requested.\n\t * On older browsers (<IE8), the function will fall back to direct evaluation\n\t * of the properties value.\n\t * @param {Object} object   Object where to add the property\n\t * @param {string} prop     Property name\n\t * @param {Function} fn     Function returning the property value. Called\n\t *                          without arguments.\n\t */\n\texports.lazy = function (object, prop, fn) {\n\t  if (exports.canDefineProperty()) {\n\t    var _uninitialized = true;\n\t    var _value;\n\t    Object.defineProperty(object, prop, {\n\t      get: function () {\n\t        if (_uninitialized) {\n\t          _value = fn();\n\t          _uninitialized = false;\n\t        }\n\t        return _value;\n\t      },\n\n\t      set: function (value) {\n\t        _value = value;\n\t        _uninitialized = false;\n\t      },\n\n\t      configurable: true,\n\t      enumerable: true\n\t    });\n\t  }\n\t  else {\n\t    // fall back to immediate evaluation\n\t    object[prop] = fn();\n\t  }\n\t};\n\n\t/**\n\t * Traverse a path into an object.\n\t * When a namespace is missing, it will be created\n\t * @param {Object} object\n\t * @param {string} path   A dot separated string like 'name.space'\n\t * @return {Object} Returns the object at the end of the path\n\t */\n\texports.traverse = function(object, path) {\n\t  var obj = object;\n\n\t  if (path) {\n\t    var names = path.split('.');\n\t    for (var i = 0; i < names.length; i++) {\n\t      var name = names[i];\n\t      if (!(name in obj)) {\n\t        obj[name] = {};\n\t      }\n\t      obj = obj[name];\n\t    }\n\t  }\n\n\t  return obj;\n\t};\n\n\t/**\n\t * Test whether an object is a factory. a factory has fields:\n\t *\n\t * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n\t * - name: string (optional)\n\t * - path: string    A dot separated path (optional)\n\t * - math: boolean   If true (false by default), the math namespace is passed\n\t *                   as fifth argument of the factory function\n\t *\n\t * @param {*} object\n\t * @returns {boolean}\n\t */\n\texports.isFactory = function (object) {\n\t  return object && typeof object.factory === 'function';\n\t};\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar typedFunction = __webpack_require__(5);\n\tvar digits = __webpack_require__(6).digits;\n\n\t// returns a new instance of typed-function\n\tvar createTyped = function () {\n\t  // initially, return the original instance of typed-function\n\t  // consecutively, return a new instance from typed.create.\n\t  createTyped = typedFunction.create;\n\t  return typedFunction;\n\t};\n\n\t/**\n\t * Factory function for creating a new typed instance\n\t * @param {Object} type   Object with data types like Complex and BigNumber\n\t * @returns {Function}\n\t */\n\texports.create = function create(type) {\n\t  // TODO: typed-function must be able to silently ignore signatures with unknown data types\n\n\t  // get a new instance of typed-function\n\t  var typed = createTyped();\n\n\t  // define all types. The order of the types determines in which order function\n\t  // arguments are type-checked (so for performance it's important to put the\n\t  // most used types first).\n\t  typed.types = [\n\t    { name: 'number',               test: function (x) { return typeof x === 'number'; } },\n\t    { name: 'Complex',              test: function (x) { return x && x.isComplex; } },\n\t    { name: 'BigNumber',            test: function (x) { return x && x.isBigNumber; } },\n\t    { name: 'Fraction',             test: function (x) { return x && x.isFraction; } },\n\t    { name: 'Unit',                 test: function (x) { return x && x.isUnit; } },\n\t    { name: 'string',               test: function (x) { return typeof x === 'string'; } },\n\t    { name: 'Array',                test: Array.isArray },\n\t    { name: 'Matrix',               test: function (x) { return x && x.isMatrix; } },\n\t    { name: 'DenseMatrix',          test: function (x) { return x && x.isDenseMatrix; } },\n\t    { name: 'SparseMatrix',         test: function (x) { return x && x.isSparseMatrix; } },\n\t    { name: 'ImmutableDenseMatrix', test: function (x) { return x && x.isImmutableDenseMatrix; } },\n\t    { name: 'Range',                test: function (x) { return x && x.isRange; } },\n\t    { name: 'Index',                test: function (x) { return x && x.isIndex; } },\n\t    { name: 'boolean',              test: function (x) { return typeof x === 'boolean'; } },\n\t    { name: 'ResultSet',            test: function (x) { return x && x.isResultSet; } },\n\t    { name: 'Help',                 test: function (x) { return x && x.isHelp; } },\n\t    { name: 'function',             test: function (x) { return typeof x === 'function';} },\n\t    { name: 'Date',                 test: function (x) { return x instanceof Date; } },\n\t    { name: 'RegExp',               test: function (x) { return x instanceof RegExp; } },\n\t    { name: 'Object',               test: function (x) { return typeof x === 'object'; } },\n\t    { name: 'null',                 test: function (x) { return x === null; } },\n\t    { name: 'undefined',            test: function (x) { return x === undefined; } }\n\t  ];\n\n\t  // TODO: add conversion from BigNumber to number?\n\t  typed.conversions = [\n\t    {\n\t      from: 'number',\n\t      to: 'BigNumber',\n\t      convert: function (x) {\n\t        // note: conversion from number to BigNumber can fail if x has >15 digits\n\t        if (digits(x) > 15) {\n\t          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' +\n\t          '(value: ' + x + '). ' +\n\t          'Use function bignumber(x) to convert to BigNumber.');\n\t        }\n\t        return new type.BigNumber(x);\n\t      }\n\t    }, {\n\t      from: 'number',\n\t      to: 'Complex',\n\t      convert: function (x) {\n\t        return new type.Complex(x, 0);\n\t      }\n\t    }, {\n\t      from: 'number',\n\t      to: 'string',\n\t      convert: function (x) {\n\t        return x + '';\n\t      }\n\t    }, {\n\t      from: 'BigNumber',\n\t      to: 'Complex',\n\t      convert: function (x) {\n\t        return new type.Complex(x.toNumber(), 0);\n\t      }\n\t    }, {\n\t      from: 'Fraction',\n\t      to: 'Complex',\n\t      convert: function (x) {\n\t        return new type.Complex(x.valueOf(), 0);\n\t      }\n\t    }, {\n\t      from: 'number',\n\t      to: 'Fraction',\n\t      convert: function (x) {\n\t        if (digits(x) > 15) {\n\t          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to Fraction ' +\n\t              '(value: ' + x + '). ' +\n\t              'Use function fraction(x) to convert to Fraction.');\n\t        }\n\t        return new type.Fraction(x);\n\t      }\n\t    }, {\n\t    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`\n\t    //  from: 'Fraction',\n\t    //  to: 'number',\n\t    //  convert: function (x) {\n\t    //    return x.valueOf();\n\t    //  }\n\t    //}, {\n\t      from: 'string',\n\t      to: 'number',\n\t      convert: function (x) {\n\t        var n = Number(x);\n\t        if (isNaN(n)) {\n\t          throw new Error('Cannot convert \"' + x + '\" to a number');\n\t        }\n\t        return n;\n\t      }\n\t    }, {\n\t      from: 'boolean',\n\t      to: 'number',\n\t      convert: function (x) {\n\t        return +x;\n\t      }\n\t    }, {\n\t      from: 'boolean',\n\t      to: 'BigNumber',\n\t      convert: function (x) {\n\t        return new type.BigNumber(+x);\n\t      }\n\t    }, {\n\t      from: 'boolean',\n\t      to: 'Fraction',\n\t      convert: function (x) {\n\t        return new type.Fraction(+x);\n\t      }\n\t    }, {\n\t      from: 'boolean',\n\t      to: 'string',\n\t      convert: function (x) {\n\t        return +x;\n\t      }\n\t    }, {\n\t      from: 'null',\n\t      to: 'number',\n\t      convert: function () {\n\t        return 0;\n\t      }\n\t    }, {\n\t      from: 'null',\n\t      to: 'string',\n\t      convert: function () {\n\t        return 'null';\n\t      }\n\t    }, {\n\t      from: 'null',\n\t      to: 'BigNumber',\n\t      convert: function () {\n\t        return new type.BigNumber(0);\n\t      }\n\t    }, {\n\t      from: 'null',\n\t      to: 'Fraction',\n\t      convert: function () {\n\t        return new type.Fraction(0);\n\t      }\n\t    }, {\n\t      from: 'Array',\n\t      to: 'Matrix',\n\t      convert: function (array) {\n\t        // TODO: how to decide on the right type of matrix to create?\n\t        return new type.DenseMatrix(array);\n\t      }\n\t    }, {\n\t      from: 'Matrix',\n\t      to: 'Array',\n\t      convert: function (matrix) {\n\t        return matrix.valueOf();\n\t      }\n\t    }\n\t  ];\n\n\t  return typed;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * typed-function\n\t *\n\t * Type checking for JavaScript functions\n\t *\n\t * https://github.com/josdejong/typed-function\n\t */\n\t'use strict';\n\n\t(function (root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports === 'object') {\n\t    // OldNode. Does not work with strict CommonJS, but\n\t    // only CommonJS-like environments that support module.exports,\n\t    // like OldNode.\n\t    module.exports = factory();\n\t  } else {\n\t    // Browser globals (root is window)\n\t    root.typed = factory();\n\t  }\n\t}(this, function () {\n\t  // factory function to create a new instance of typed-function\n\t  // TODO: allow passing configuration, types, tests via the factory function\n\t  function create() {\n\t    /**\n\t     * Get a type test function for a specific data type\n\t     * @param {string} name                   Name of a data type like 'number' or 'string'\n\t     * @returns {Function(obj: *) : boolean}  Returns a type testing function.\n\t     *                                        Throws an error for an unknown type.\n\t     */\n\t    function getTypeTest(name) {\n\t      var test;\n\t      for (var i = 0; i < typed.types.length; i++) {\n\t        var entry = typed.types[i];\n\t        if (entry.name === name) {\n\t          test = entry.test;\n\t          break;\n\t        }\n\t      }\n\n\t      if (!test) {\n\t        var hint;\n\t        for (i = 0; i < typed.types.length; i++) {\n\t          entry = typed.types[i];\n\t          if (entry.name.toLowerCase() == name.toLowerCase()) {\n\t            hint = entry.name;\n\t            break;\n\t          }\n\t        }\n\n\t        throw new Error('Unknown type \"' + name + '\"' +\n\t            (hint ? ('. Did you mean \"' + hint + '\"?') : ''));\n\t      }\n\t      return test;\n\t    }\n\n\t    /**\n\t     * Retrieve the function name from a set of functions, and check\n\t     * whether the name of all functions match (if given)\n\t     * @param {Array.<function>} fns\n\t     */\n\t    function getName (fns) {\n\t      var name = '';\n\n\t      for (var i = 0; i < fns.length; i++) {\n\t        var fn = fns[i];\n\n\t        // merge function name when this is a typed function\n\t        if (fn.signatures && fn.name != '') {\n\t          if (name == '') {\n\t            name = fn.name;\n\t          }\n\t          else if (name != fn.name) {\n\t            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');\n\t            err.data = {\n\t              actual: fn.name,\n\t              expected: name\n\t            };\n\t            throw err;\n\t          }\n\t        }\n\t      }\n\n\t      return name;\n\t    }\n\n\t    /**\n\t     * Create an ArgumentsError. Creates messages like:\n\t     *\n\t     *   Unexpected type of argument (expected: ..., actual: ..., index: ...)\n\t     *   Too few arguments (expected: ..., index: ...)\n\t     *   Too many arguments (expected: ..., actual: ...)\n\t     *\n\t     * @param {String} fn         Function name\n\t     * @param {number} argCount   Number of arguments\n\t     * @param {Number} index      Current argument index\n\t     * @param {*} actual          Current argument\n\t     * @param {string} [expected] An optional, comma separated string with\n\t     *                            expected types on given index\n\t     * @extends Error\n\t     */\n\t    function createError(fn, argCount, index, actual, expected) {\n\t      var actualType = getTypeOf(actual);\n\t      var _expected = expected ? expected.split(',') : null;\n\t      var _fn = (fn || 'unnamed');\n\t      var anyType = _expected && contains(_expected, 'any');\n\t      var message;\n\t      var data = {\n\t        fn: fn,\n\t        index: index,\n\t        actual: actual,\n\t        expected: _expected\n\t      };\n\n\t      if (_expected) {\n\t        if (argCount > index && !anyType) {\n\t          // unexpected type\n\t          message = 'Unexpected type of argument in function ' + _fn +\n\t              ' (expected: ' + _expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')';\n\t        }\n\t        else {\n\t          // too few arguments\n\t          message = 'Too few arguments in function ' + _fn +\n\t              ' (expected: ' + _expected.join(' or ') + ', index: ' + index + ')';\n\t        }\n\t      }\n\t      else {\n\t        // too many arguments\n\t        message = 'Too many arguments in function ' + _fn +\n\t            ' (expected: ' + index + ', actual: ' + argCount + ')'\n\t      }\n\n\t      var err = new TypeError(message);\n\t      err.data = data;\n\t      return err;\n\t    }\n\n\t    /**\n\t     * Collection with function references (local shortcuts to functions)\n\t     * @constructor\n\t     * @param {string} [name='refs']  Optional name for the refs, used to generate\n\t     *                                JavaScript code\n\t     */\n\t    function Refs(name) {\n\t      this.name = name || 'refs';\n\t      this.categories = {};\n\t    }\n\n\t    /**\n\t     * Add a function reference.\n\t     * @param {Function} fn\n\t     * @param {string} [category='fn']    A function category, like 'fn' or 'signature'\n\t     * @returns {string} Returns the function name, for example 'fn0' or 'signature2'\n\t     */\n\t    Refs.prototype.add = function (fn, category) {\n\t      var cat = category || 'fn';\n\t      if (!this.categories[cat]) this.categories[cat] = [];\n\n\t      var index = this.categories[cat].indexOf(fn);\n\t      if (index == -1) {\n\t        index = this.categories[cat].length;\n\t        this.categories[cat].push(fn);\n\t      }\n\n\t      return cat + index;\n\t    };\n\n\t    /**\n\t     * Create code lines for all function references\n\t     * @returns {string} Returns the code containing all function references\n\t     */\n\t    Refs.prototype.toCode = function () {\n\t      var code = [];\n\t      var path = this.name + '.categories';\n\t      var categories = this.categories;\n\n\t      for (var cat in categories) {\n\t        if (categories.hasOwnProperty(cat)) {\n\t          var category = categories[cat];\n\n\t          for (var i = 0; i < category.length; i++) {\n\t            code.push('var ' + cat + i + ' = ' + path + '[\\'' + cat + '\\'][' + i + '];');\n\t          }\n\t        }\n\t      }\n\n\t      return code.join('\\n');\n\t    };\n\n\t    /**\n\t     * A function parameter\n\t     * @param {string | string[] | Param} types    A parameter type like 'string',\n\t     *                                             'number | boolean'\n\t     * @param {boolean} [varArgs=false]            Variable arguments if true\n\t     * @constructor\n\t     */\n\t    function Param(types, varArgs) {\n\t      // parse the types, can be a string with types separated by pipe characters |\n\t      if (typeof types === 'string') {\n\t        // parse variable arguments operator (ellipses '...number')\n\t        var _types = types.trim();\n\t        var _varArgs = _types.substr(0, 3) === '...';\n\t        if (_varArgs) {\n\t          _types = _types.substr(3);\n\t        }\n\t        if (_types === '') {\n\t          this.types = ['any'];\n\t        }\n\t        else {\n\t          this.types = _types.split('|');\n\t          for (var i = 0; i < this.types.length; i++) {\n\t            this.types[i] = this.types[i].trim();\n\t          }\n\t        }\n\t      }\n\t      else if (Array.isArray(types)) {\n\t        this.types = types;\n\t      }\n\t      else if (types instanceof Param) {\n\t        return types.clone();\n\t      }\n\t      else {\n\t        throw new Error('String or Array expected');\n\t      }\n\n\t      // can hold a type to which to convert when handling this parameter\n\t      this.conversions = [];\n\t      // TODO: implement better API for conversions, be able to add conversions via constructor (support a new type Object?)\n\n\t      // variable arguments\n\t      this.varArgs = _varArgs || varArgs || false;\n\n\t      // check for any type arguments\n\t      this.anyType = this.types.indexOf('any') !== -1;\n\t    }\n\n\t    /**\n\t     * Order Params\n\t     * any type ('any') will be ordered last, and object as second last (as other\n\t     * types may be an object as well, like Array).\n\t     *\n\t     * @param {Param} a\n\t     * @param {Param} b\n\t     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.\n\t     */\n\t    Param.compare = function (a, b) {\n\t      // TODO: simplify parameter comparison, it's a mess\n\t      if (a.anyType) return 1;\n\t      if (b.anyType) return -1;\n\n\t      if (contains(a.types, 'Object')) return 1;\n\t      if (contains(b.types, 'Object')) return -1;\n\n\t      if (a.hasConversions()) {\n\t        if (b.hasConversions()) {\n\t          var i, ac, bc;\n\n\t          for (i = 0; i < a.conversions.length; i++) {\n\t            if (a.conversions[i] !== undefined) {\n\t              ac = a.conversions[i];\n\t              break;\n\t            }\n\t          }\n\n\t          for (i = 0; i < b.conversions.length; i++) {\n\t            if (b.conversions[i] !== undefined) {\n\t              bc = b.conversions[i];\n\t              break;\n\t            }\n\t          }\n\n\t          return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);\n\t        }\n\t        else {\n\t          return 1;\n\t        }\n\t      }\n\t      else {\n\t        if (b.hasConversions()) {\n\t          return -1;\n\t        }\n\t        else {\n\t          // both params have no conversions\n\t          var ai, bi;\n\n\t          for (i = 0; i < typed.types.length; i++) {\n\t            if (typed.types[i].name === a.types[0]) {\n\t              ai = i;\n\t              break;\n\t            }\n\t          }\n\n\t          for (i = 0; i < typed.types.length; i++) {\n\t            if (typed.types[i].name === b.types[0]) {\n\t              bi = i;\n\t              break;\n\t            }\n\t          }\n\n\t          return ai - bi;\n\t        }\n\t      }\n\t    };\n\n\t    /**\n\t     * Test whether this parameters types overlap an other parameters types.\n\t     * @param {Param} other\n\t     * @return {boolean} Returns true when there are conflicting types\n\t     */\n\t    Param.prototype.overlapping = function (other) {\n\t      for (var i = 0; i < this.types.length; i++) {\n\t        if (contains(other.types, this.types[i])) {\n\t          return true;\n\t        }\n\t      }\n\t      return false;\n\t    };\n\n\t    /**\n\t     * Create a clone of this param\n\t     * @returns {Param} Returns a cloned version of this param\n\t     */\n\t    Param.prototype.clone = function () {\n\t      var param = new Param(this.types.slice(), this.varArgs);\n\t      param.conversions = this.conversions.slice();\n\t      return param;\n\t    };\n\n\t    /**\n\t     * Test whether this parameter contains conversions\n\t     * @returns {boolean} Returns true if the parameter contains one or\n\t     *                    multiple conversions.\n\t     */\n\t    Param.prototype.hasConversions = function () {\n\t      return this.conversions.length > 0;\n\t    };\n\n\t    /**\n\t     * Tests whether this parameters contains any of the provided types\n\t     * @param {Object} types  A Map with types, like {'number': true}\n\t     * @returns {boolean}     Returns true when the parameter contains any\n\t     *                        of the provided types\n\t     */\n\t    Param.prototype.contains = function (types) {\n\t      for (var i = 0; i < this.types.length; i++) {\n\t        if (types[this.types[i]]) {\n\t          return true;\n\t        }\n\t      }\n\t      return false;\n\t    };\n\n\t    /**\n\t     * Return a string representation of this params types, like 'string' or\n\t     * 'number | boolean' or '...number'\n\t     * @param {boolean} [toConversion]   If true, the returned types string\n\t     *                                   contains the types where the parameter\n\t     *                                   will convert to. If false (default)\n\t     *                                   the \"from\" types are returned\n\t     * @returns {string}\n\t     */\n\t    Param.prototype.toString = function (toConversion) {\n\t      var types = [];\n\t      var keys = {};\n\n\t      for (var i = 0; i < this.types.length; i++) {\n\t        var conversion = this.conversions[i];\n\t        var type = toConversion && conversion ? conversion.to : this.types[i];\n\t        if (!(type in keys)) {\n\t          keys[type] = true;\n\t          types.push(type);\n\t        }\n\t      }\n\n\t      return (this.varArgs ? '...' : '') + types.join('|');\n\t    };\n\n\t    /**\n\t     * A function signature\n\t     * @param {string | string[] | Param[]} params\n\t     *                         Array with the type(s) of each parameter,\n\t     *                         or a comma separated string with types\n\t     * @param {Function} fn    The actual function\n\t     * @constructor\n\t     */\n\t    function Signature(params, fn) {\n\t      var _params;\n\t      if (typeof params === 'string') {\n\t        _params = (params !== '') ? params.split(',') : [];\n\t      }\n\t      else if (Array.isArray(params)) {\n\t        _params = params;\n\t      }\n\t      else {\n\t        throw new Error('string or Array expected');\n\t      }\n\n\t      this.params = new Array(_params.length);\n\t      for (var i = 0; i < _params.length; i++) {\n\t        var param = new Param(_params[i]);\n\t        this.params[i] = param;\n\t        if (i === _params.length - 1) {\n\t          // the last argument\n\t          this.varArgs = param.varArgs;\n\t        }\n\t        else {\n\t          // non-last argument\n\t          if (param.varArgs) {\n\t            throw new SyntaxError('Unexpected variable arguments operator \"...\"');\n\t          }\n\t        }\n\t      }\n\n\t      this.fn = fn;\n\t    }\n\n\t    /**\n\t     * Create a clone of this signature\n\t     * @returns {Signature} Returns a cloned version of this signature\n\t     */\n\t    Signature.prototype.clone = function () {\n\t      return new Signature(this.params.slice(), this.fn);\n\t    };\n\n\t    /**\n\t     * Expand a signature: split params with union types in separate signatures\n\t     * For example split a Signature \"string | number\" into two signatures.\n\t     * @return {Signature[]} Returns an array with signatures (at least one)\n\t     */\n\t    Signature.prototype.expand = function () {\n\t      var signatures = [];\n\n\t      function recurse(signature, path) {\n\t        if (path.length < signature.params.length) {\n\t          var i, newParam, conversion;\n\n\t          var param = signature.params[path.length];\n\t          if (param.varArgs) {\n\t            // a variable argument. do not split the types in the parameter\n\t            newParam = param.clone();\n\n\t            // add conversions to the parameter\n\t            // recurse for all conversions\n\t            for (i = 0; i < typed.conversions.length; i++) {\n\t              conversion = typed.conversions[i];\n\t              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {\n\t                var j = newParam.types.length;\n\t                newParam.types[j] = conversion.from;\n\t                newParam.conversions[j] = conversion;\n\t              }\n\t            }\n\n\t            recurse(signature, path.concat(newParam));\n\t          }\n\t          else {\n\t            // split each type in the parameter\n\t            for (i = 0; i < param.types.length; i++) {\n\t              recurse(signature, path.concat(new Param(param.types[i])));\n\t            }\n\n\t            // recurse for all conversions\n\t            for (i = 0; i < typed.conversions.length; i++) {\n\t              conversion = typed.conversions[i];\n\t              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {\n\t                newParam = new Param(conversion.from);\n\t                newParam.conversions[0] = conversion;\n\t                recurse(signature, path.concat(newParam));\n\t              }\n\t            }\n\t          }\n\t        }\n\t        else {\n\t          signatures.push(new Signature(path, signature.fn));\n\t        }\n\t      }\n\n\t      recurse(this, []);\n\n\t      return signatures;\n\t    };\n\n\t    /**\n\t     * Compare two signatures.\n\t     *\n\t     * When two params are equal and contain conversions, they will be sorted\n\t     * by lowest index of the first conversions.\n\t     *\n\t     * @param {Signature} a\n\t     * @param {Signature} b\n\t     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.\n\t     */\n\t    Signature.compare = function (a, b) {\n\t      if (a.params.length > b.params.length) return 1;\n\t      if (a.params.length < b.params.length) return -1;\n\n\t      // count the number of conversions\n\t      var i;\n\t      var len = a.params.length; // a and b have equal amount of params\n\t      var ac = 0;\n\t      var bc = 0;\n\t      for (i = 0; i < len; i++) {\n\t        if (a.params[i].hasConversions()) ac++;\n\t        if (b.params[i].hasConversions()) bc++;\n\t      }\n\n\t      if (ac > bc) return 1;\n\t      if (ac < bc) return -1;\n\n\t      // compare the order per parameter\n\t      for (i = 0; i < a.params.length; i++) {\n\t        var cmp = Param.compare(a.params[i], b.params[i]);\n\t        if (cmp !== 0) {\n\t          return cmp;\n\t        }\n\t      }\n\n\t      return 0;\n\t    };\n\n\t    /**\n\t     * Test whether any of the signatures parameters has conversions\n\t     * @return {boolean} Returns true when any of the parameters contains\n\t     *                   conversions.\n\t     */\n\t    Signature.prototype.hasConversions = function () {\n\t      for (var i = 0; i < this.params.length; i++) {\n\t        if (this.params[i].hasConversions()) {\n\t          return true;\n\t        }\n\t      }\n\t      return false;\n\t    };\n\n\t    /**\n\t     * Test whether this signature should be ignored.\n\t     * Checks whether any of the parameters contains a type listed in\n\t     * typed.ignore\n\t     * @return {boolean} Returns true when the signature should be ignored\n\t     */\n\t    Signature.prototype.ignore = function () {\n\t      // create a map with ignored types\n\t      var types = {};\n\t      for (var i = 0; i < typed.ignore.length; i++) {\n\t        types[typed.ignore[i]] = true;\n\t      }\n\n\t      // test whether any of the parameters contains this type\n\t      for (i = 0; i < this.params.length; i++) {\n\t        if (this.params[i].contains(types)) {\n\t          return true;\n\t        }\n\t      }\n\n\t      return false;\n\t    };\n\n\t    /**\n\t     * Generate the code to invoke this signature\n\t     * @param {Refs} refs\n\t     * @param {string} prefix\n\t     * @returns {string} Returns code\n\t     */\n\t    Signature.prototype.toCode = function (refs, prefix) {\n\t      var code = [];\n\n\t      var args = new Array(this.params.length);\n\t      for (var i = 0; i < this.params.length; i++) {\n\t        var param = this.params[i];\n\t        var conversion = param.conversions[0];\n\t        if (param.varArgs) {\n\t          args[i] = 'varArgs';\n\t        }\n\t        else if (conversion) {\n\t          args[i] = refs.add(conversion.convert, 'convert') + '(arg' + i + ')';\n\t        }\n\t        else {\n\t          args[i] = 'arg' + i;\n\t        }\n\t      }\n\n\t      var ref = this.fn ? refs.add(this.fn, 'signature') : undefined;\n\t      if (ref) {\n\t        return prefix + 'return ' + ref + '(' + args.join(', ') + '); // signature: ' + this.params.join(', ');\n\t      }\n\n\t      return code.join('\\n');\n\t    };\n\n\t    /**\n\t     * Return a string representation of the signature\n\t     * @returns {string}\n\t     */\n\t    Signature.prototype.toString = function () {\n\t      return this.params.join(', ');\n\t    };\n\n\t    /**\n\t     * A group of signatures with the same parameter on given index\n\t     * @param {Param[]} path\n\t     * @param {Signature} [signature]\n\t     * @param {Node[]} childs\n\t     * @constructor\n\t     */\n\t    function Node(path, signature, childs) {\n\t      this.path = path || [];\n\t      this.param = path[path.length - 1] || null;\n\t      this.signature = signature || null;\n\t      this.childs = childs || [];\n\t    }\n\n\t    /**\n\t     * Generate code for this group of signatures\n\t     * @param {Refs} refs\n\t     * @param {string} prefix\n\t     * @param {Node | undefined} [anyType]  Sibling of this node with any type parameter\n\t     * @returns {string} Returns the code as string\n\t     */\n\t    Node.prototype.toCode = function (refs, prefix, anyType) {\n\t      // TODO: split this function in multiple functions, it's too large\n\t      var code = [];\n\n\t      if (this.param) {\n\t        var index = this.path.length - 1;\n\t        var conversion = this.param.conversions[0];\n\t        var comment = '// type: ' + (conversion ?\n\t                (conversion.from + ' (convert to ' + conversion.to + ')') :\n\t                this.param);\n\n\t        // non-root node (path is non-empty)\n\t        if (this.param.varArgs) {\n\t          if (this.param.anyType) {\n\t            // variable arguments with any type\n\t            code.push(prefix + 'if (arguments.length > ' + index + ') {');\n\t            code.push(prefix + '  var varArgs = [];');\n\t            code.push(prefix + '  for (var i = ' + index + '; i < arguments.length; i++) {');\n\t            code.push(prefix + '    varArgs.push(arguments[i]);');\n\t            code.push(prefix + '  }');\n\t            code.push(this.signature.toCode(refs, prefix + '  '));\n\t            code.push(prefix + '}');\n\t          }\n\t          else {\n\t            // variable arguments with a fixed type\n\t            var getTests = function (types, arg) {\n\t              var tests = [];\n\t              for (var i = 0; i < types.length; i++) {\n\t                tests[i] = refs.add(getTypeTest(types[i]), 'test') + '(' + arg + ')';\n\t              }\n\t              return tests.join(' || ');\n\t            }.bind(this);\n\n\t            var allTypes = this.param.types;\n\t            var exactTypes = [];\n\t            for (var i = 0; i < allTypes.length; i++) {\n\t              if (this.param.conversions[i] === undefined) {\n\t                exactTypes.push(allTypes[i]);\n\t              }\n\t            }\n\n\t            code.push(prefix + 'if (' + getTests(allTypes, 'arg' + index) + ') { ' + comment);\n\t            code.push(prefix + '  var varArgs = [arg' + index + '];');\n\t            code.push(prefix + '  for (var i = ' + (index + 1) + '; i < arguments.length; i++) {');\n\t            code.push(prefix + '    if (' + getTests(exactTypes, 'arguments[i]') + ') {');\n\t            code.push(prefix + '      varArgs.push(arguments[i]);');\n\n\t            for (var i = 0; i < allTypes.length; i++) {\n\t              var conversion_i = this.param.conversions[i];\n\t              if (conversion_i) {\n\t                var test = refs.add(getTypeTest(allTypes[i]), 'test');\n\t                var convert = refs.add(conversion_i.convert, 'convert');\n\t                code.push(prefix + '    }');\n\t                code.push(prefix + '    else if (' + test + '(arguments[i])) {');\n\t                code.push(prefix + '      varArgs.push(' + convert + '(arguments[i]));');\n\t              }\n\t            }\n\t            code.push(prefix + '    } else {');\n\t            code.push(prefix + '      throw createError(name, arguments.length, i, arguments[i], \\'' + exactTypes.join(',') + '\\');');\n\t            code.push(prefix + '    }');\n\t            code.push(prefix + '  }');\n\t            code.push(this.signature.toCode(refs, prefix + '  '));\n\t            code.push(prefix + '}');\n\t          }\n\t        }\n\t        else {\n\t          if (this.param.anyType) {\n\t            // any type\n\t            code.push(prefix + '// type: any');\n\t            code.push(this._innerCode(refs, prefix, anyType));\n\t          }\n\t          else {\n\t            // regular type\n\t            var type = this.param.types[0];\n\t            var test = type !== 'any' ? refs.add(getTypeTest(type), 'test') : null;\n\n\t            code.push(prefix + 'if (' + test + '(arg' + index + ')) { ' + comment);\n\t            code.push(this._innerCode(refs, prefix + '  ', anyType));\n\t            code.push(prefix + '}');\n\t          }\n\t        }\n\t      }\n\t      else {\n\t        // root node (path is empty)\n\t        code.push(this._innerCode(refs, prefix, anyType));\n\t      }\n\n\t      return code.join('\\n');\n\t    };\n\n\t    /**\n\t     * Generate inner code for this group of signatures.\n\t     * This is a helper function of Node.prototype.toCode\n\t     * @param {Refs} refs\n\t     * @param {string} prefix\n\t     * @param {Node | undefined} [anyType]  Sibling of this node with any type parameter\n\t     * @returns {string} Returns the inner code as string\n\t     * @private\n\t     */\n\t    Node.prototype._innerCode = function (refs, prefix, anyType) {\n\t      var code = [];\n\t      var i;\n\n\t      if (this.signature) {\n\t        code.push(prefix + 'if (arguments.length === ' + this.path.length + ') {');\n\t        code.push(this.signature.toCode(refs, prefix + '  '));\n\t        code.push(prefix + '}');\n\t      }\n\n\t      var nextAnyType;\n\t      for (i = 0; i < this.childs.length; i++) {\n\t        if (this.childs[i].param.anyType) {\n\t          nextAnyType = this.childs[i];\n\t          break;\n\t        }\n\t      }\n\n\t      for (i = 0; i < this.childs.length; i++) {\n\t        code.push(this.childs[i].toCode(refs, prefix, nextAnyType));\n\t      }\n\n\t      if (anyType && !this.param.anyType) {\n\t        code.push(anyType.toCode(refs, prefix, nextAnyType));\n\t      }\n\n\t      var exceptions = this._exceptions(refs, prefix);\n\t      if (exceptions) {\n\t        code.push(exceptions);\n\t      }\n\n\t      return code.join('\\n');\n\t    };\n\n\t    /**\n\t     * Generate code to throw exceptions\n\t     * @param {Refs} refs\n\t     * @param {string} prefix\n\t     * @returns {string} Returns the inner code as string\n\t     * @private\n\t     */\n\t    Node.prototype._exceptions = function (refs, prefix) {\n\t      var index = this.path.length;\n\n\t      if (this.childs.length === 0) {\n\t        // TODO: can this condition be simplified? (we have a fall-through here)\n\t        return [\n\t          prefix + 'if (arguments.length > ' + index + ') {',\n\t          prefix + '  throw createError(name, arguments.length, ' + index + ', arguments[' + index + ']);',\n\t          prefix + '}'\n\t        ].join('\\n');\n\t      }\n\t      else {\n\t        var keys = {};\n\t        var types = [];\n\n\t        for (var i = 0; i < this.childs.length; i++) {\n\t          var node = this.childs[i];\n\t          if (node.param) {\n\t            for (var j = 0; j < node.param.types.length; j++) {\n\t              var type = node.param.types[j];\n\t              if (!(type in keys) && !node.param.conversions[j]) {\n\t                keys[type] = true;\n\t                types.push(type);\n\t              }\n\t            }\n\t          }\n\t        }\n\n\t        return prefix + 'throw createError(name, arguments.length, ' + index + ', arguments[' + index + '], \\'' + types.join(',') + '\\');';\n\t      }\n\t    };\n\n\t    /**\n\t     * Split all raw signatures into an array with expanded Signatures\n\t     * @param {Object.<string, Function>} rawSignatures\n\t     * @return {Signature[]} Returns an array with expanded signatures\n\t     */\n\t    function parseSignatures(rawSignatures) {\n\t      // FIXME: need to have deterministic ordering of signatures, do not create via object\n\t      var signature;\n\t      var keys = {};\n\t      var signatures = [];\n\t      var i;\n\n\t      for (var types in rawSignatures) {\n\t        if (rawSignatures.hasOwnProperty(types)) {\n\t          var fn = rawSignatures[types];\n\t          signature = new Signature(types, fn);\n\n\t          if (signature.ignore()) {\n\t            continue;\n\t          }\n\n\t          var expanded = signature.expand();\n\n\t          for (i = 0; i < expanded.length; i++) {\n\t            var signature_i = expanded[i];\n\t            var key = signature_i.toString();\n\t            var existing = keys[key];\n\t            if (!existing) {\n\t              keys[key] = signature_i;\n\t            }\n\t            else {\n\t              var cmp = Signature.compare(signature_i, existing);\n\t              if (cmp < 0) {\n\t                // override if sorted first\n\t                keys[key] = signature_i;\n\t              }\n\t              else if (cmp === 0) {\n\t                throw new Error('Signature \"' + key + '\" is defined twice');\n\t              }\n\t              // else: just ignore\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      // convert from map to array\n\t      for (key in keys) {\n\t        if (keys.hasOwnProperty(key)) {\n\t          signatures.push(keys[key]);\n\t        }\n\t      }\n\n\t      // order the signatures\n\t      signatures.sort(function (a, b) {\n\t        return Signature.compare(a, b);\n\t      });\n\n\t      // filter redundant conversions from signatures with varArgs\n\t      // TODO: simplify this loop or move it to a separate function\n\t      for (i = 0; i < signatures.length; i++) {\n\t        signature = signatures[i];\n\n\t        if (signature.varArgs) {\n\t          var index = signature.params.length - 1;\n\t          var param = signature.params[index];\n\n\t          var t = 0;\n\t          while (t < param.types.length) {\n\t            if (param.conversions[t]) {\n\t              var type = param.types[t];\n\n\t              for (var j = 0; j < signatures.length; j++) {\n\t                var other = signatures[j];\n\t                var p = other.params[index];\n\n\t                if (other !== signature &&\n\t                    p &&\n\t                    contains(p.types, type) && !p.conversions[index]) {\n\t                  // this (conversion) type already exists, remove it\n\t                  param.types.splice(t, 1);\n\t                  param.conversions.splice(t, 1);\n\t                  t--;\n\t                  break;\n\t                }\n\t              }\n\t            }\n\t            t++;\n\t          }\n\t        }\n\t      }\n\n\t      return signatures;\n\t    }\n\n\t    /**\n\t     * create a map with normalized signatures as key and the function as value\n\t     * @param {Signature[]} signatures   An array with split signatures\n\t     * @return {Object.<string, Function>} Returns a map with normalized\n\t     *                                     signatures as key, and the function\n\t     *                                     as value.\n\t     */\n\t    function mapSignatures(signatures) {\n\t      var normalized = {};\n\n\t      for (var i = 0; i < signatures.length; i++) {\n\t        var signature = signatures[i];\n\t        if (signature.fn && !signature.hasConversions()) {\n\t          var params = signature.params.join(',');\n\t          normalized[params] = signature.fn;\n\t        }\n\t      }\n\n\t      return normalized;\n\t    }\n\n\t    /**\n\t     * Parse signatures recursively in a node tree.\n\t     * @param {Signature[]} signatures  Array with expanded signatures\n\t     * @param {Param[]} path            Traversed path of parameter types\n\t     * @return {Node}                   Returns a node tree\n\t     */\n\t    function parseTree(signatures, path) {\n\t      var i, signature;\n\t      var index = path.length;\n\t      var nodeSignature;\n\n\t      var filtered = [];\n\t      for (i = 0; i < signatures.length; i++) {\n\t        signature = signatures[i];\n\n\t        // filter the first signature with the correct number of params\n\t        if (signature.params.length === index && !nodeSignature) {\n\t          nodeSignature = signature;\n\t        }\n\n\t        if (signature.params[index] != undefined) {\n\t          filtered.push(signature);\n\t        }\n\t      }\n\n\t      // sort the filtered signatures by param\n\t      filtered.sort(function (a, b) {\n\t        return Param.compare(a.params[index], b.params[index]);\n\t      });\n\n\t      // recurse over the signatures\n\t      var entries = [];\n\t      for (i = 0; i < filtered.length; i++) {\n\t        signature = filtered[i];\n\t        // group signatures with the same param at current index\n\t        var param = signature.params[index];\n\n\t        // TODO: replace the next filter loop\n\t        var existing = entries.filter(function (entry) {\n\t          return entry.param.overlapping(param);\n\t        })[0];\n\n\t        //var existing;\n\t        //for (var j = 0; j < entries.length; j++) {\n\t        //  if (entries[j].param.overlapping(param)) {\n\t        //    existing = entries[j];\n\t        //    break;\n\t        //  }\n\t        //}\n\n\t        if (existing) {\n\t          if (existing.param.varArgs) {\n\t            throw new Error('Conflicting types \"' + existing.param + '\" and \"' + param + '\"');\n\t          }\n\t          existing.signatures.push(signature);\n\t        }\n\t        else {\n\t          entries.push({\n\t            param: param,\n\t            signatures: [signature]\n\t          });\n\t        }\n\t      }\n\n\t      // parse the childs\n\t      var childs = new Array(entries.length);\n\t      for (i = 0; i < entries.length; i++) {\n\t        var entry = entries[i];\n\t        childs[i] = parseTree(entry.signatures, path.concat(entry.param))\n\t      }\n\n\t      return new Node(path, nodeSignature, childs);\n\t    }\n\n\t    /**\n\t     * Generate an array like ['arg0', 'arg1', 'arg2']\n\t     * @param {number} count Number of arguments to generate\n\t     * @returns {Array} Returns an array with argument names\n\t     */\n\t    function getArgs(count) {\n\t      // create an array with all argument names\n\t      var args = [];\n\t      for (var i = 0; i < count; i++) {\n\t        args[i] = 'arg' + i;\n\t      }\n\n\t      return args;\n\t    }\n\n\t    /**\n\t     * Compose a function from sub-functions each handling a single type signature.\n\t     * Signatures:\n\t     *   typed(signature: string, fn: function)\n\t     *   typed(name: string, signature: string, fn: function)\n\t     *   typed(signatures: Object.<string, function>)\n\t     *   typed(name: string, signatures: Object.<string, function>)\n\t     *\n\t     * @param {string | null} name\n\t     * @param {Object.<string, Function>} signatures\n\t     * @return {Function} Returns the typed function\n\t     * @private\n\t     */\n\t    function _typed(name, signatures) {\n\t      var refs = new Refs();\n\n\t      // parse signatures, expand them\n\t      var _signatures = parseSignatures(signatures);\n\t      if (_signatures.length == 0) {\n\t        throw new Error('No signatures provided');\n\t      }\n\n\t      // parse signatures into a node tree\n\t      var node = parseTree(_signatures, []);\n\n\t      //var util = require('util');\n\t      //console.log('ROOT');\n\t      //console.log(util.inspect(node, { depth: null }));\n\n\t      // generate code for the typed function\n\t      var code = [];\n\t      var _name = name || '';\n\t      var _args = getArgs(maxParams(_signatures));\n\t      code.push('function ' + _name + '(' + _args.join(', ') + ') {');\n\t      code.push('  \"use strict\";');\n\t      code.push('  var name = \\'' + _name + '\\';');\n\t      code.push(node.toCode(refs, '  '));\n\t      code.push('}');\n\n\t      // generate body for the factory function\n\t      var body = [\n\t        refs.toCode(),\n\t        'return ' + code.join('\\n')\n\t      ].join('\\n');\n\n\t      // evaluate the JavaScript code and attach function references\n\t      var factory = (new Function(refs.name, 'createError', body));\n\t      var fn = factory(refs, createError);\n\n\t      //console.log('FN\\n' + fn.toString()); // TODO: cleanup\n\n\t      // attach the signatures with sub-functions to the constructed function\n\t      fn.signatures = mapSignatures(_signatures);\n\n\t      return fn;\n\t    }\n\n\t    /**\n\t     * Calculate the maximum number of parameters in givens signatures\n\t     * @param {Signature[]} signatures\n\t     * @returns {number} The maximum number of parameters\n\t     */\n\t    function maxParams(signatures) {\n\t      var max = 0;\n\n\t      for (var i = 0; i < signatures.length; i++) {\n\t        var len = signatures[i].params.length;\n\t        if (len > max) {\n\t          max = len;\n\t        }\n\t      }\n\n\t      return max;\n\t    }\n\n\t    /**\n\t     * Get the type of a value\n\t     * @param {*} x\n\t     * @returns {string} Returns a string with the type of value\n\t     */\n\t    function getTypeOf(x) {\n\t      var obj;\n\n\t      for (var i = 0; i < typed.types.length; i++) {\n\t        var entry = typed.types[i];\n\n\t        if (entry.name === 'Object') {\n\t          // Array and Date are also Object, so test for Object afterwards\n\t          obj = entry;\n\t        }\n\t        else {\n\t          if (entry.test(x)) return entry.name;\n\t        }\n\t      }\n\n\t      // at last, test whether an object\n\t      if (obj && obj.test(x)) return obj.name;\n\n\t      return 'unknown';\n\t    }\n\n\t    /**\n\t     * Test whether an array contains some entry\n\t     * @param {Array} array\n\t     * @param {*} entry\n\t     * @return {boolean} Returns true if array contains entry, false if not.\n\t     */\n\t    function contains(array, entry) {\n\t      return array.indexOf(entry) !== -1;\n\t    }\n\n\t    // data type tests\n\t    var types = [\n\t      { name: 'number',    test: function (x) { return typeof x === 'number' } },\n\t      { name: 'string',    test: function (x) { return typeof x === 'string' } },\n\t      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },\n\t      { name: 'Function',  test: function (x) { return typeof x === 'function'} },\n\t      { name: 'Array',     test: Array.isArray },\n\t      { name: 'Date',      test: function (x) { return x instanceof Date } },\n\t      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },\n\t      { name: 'Object',    test: function (x) { return typeof x === 'object' } },\n\t      { name: 'null',      test: function (x) { return x === null } },\n\t      { name: 'undefined', test: function (x) { return x === undefined } }\n\t    ];\n\n\t    // configuration\n\t    var config = {};\n\n\t    // type conversions. Order is important\n\t    var conversions = [];\n\n\t    // types to be ignored\n\t    var ignore = [];\n\n\t    // temporary object for holding types and conversions, for constructing\n\t    // the `typed` function itself\n\t    // TODO: find a more elegant solution for this\n\t    var typed = {\n\t      config: config,\n\t      types: types,\n\t      conversions: conversions,\n\t      ignore: ignore\n\t    };\n\n\t    /**\n\t     * Construct the typed function itself with various signatures\n\t     *\n\t     * Signatures:\n\t     *\n\t     *   typed(signatures: Object.<string, function>)\n\t     *   typed(name: string, signatures: Object.<string, function>)\n\t     */\n\t    typed = _typed('typed', {\n\t      'Object': function (signatures) {\n\t        var fns = [];\n\t        for (var signature in signatures) {\n\t          if (signatures.hasOwnProperty(signature)) {\n\t            fns.push(signatures[signature]);\n\t          }\n\t        }\n\t        var name = getName(fns);\n\n\t        return _typed(name, signatures);\n\t      },\n\t      'string, Object': _typed,\n\t      // TODO: add a signature 'Array.<function>'\n\t      '...Function': function (fns) {\n\t        var err;\n\t        var name = getName(fns);\n\t        var signatures = {};\n\n\t        for (var i = 0; i < fns.length; i++) {\n\t          var fn = fns[i];\n\n\t          // test whether this is a typed-function\n\t          if (!(typeof fn.signatures === 'object')) {\n\t            err = new TypeError('Function is no typed-function (index: ' + i + ')');\n\t            err.data = {index: i};\n\t            throw err;\n\t          }\n\n\t          // merge the signatures\n\t          for (var signature in fn.signatures) {\n\t            if (fn.signatures.hasOwnProperty(signature)) {\n\t              if (signatures.hasOwnProperty(signature)) {\n\t                if (fn.signatures[signature] !== signatures[signature]) {\n\t                  err = new Error('Signature \"' + signature + '\" is defined twice');\n\t                  err.data = {signature: signature};\n\t                  throw err;\n\t                }\n\t                // else: both signatures point to the same function, that's fine\n\t              }\n\t              else {\n\t                signatures[signature] = fn.signatures[signature];\n\t              }\n\t            }\n\t          }\n\t        }\n\n\t        return _typed(name, signatures);\n\t      }\n\t    });\n\n\t    /**\n\t     * Find a specific signature from a (composed) typed function, for\n\t     * example:\n\t     *\n\t     *   typed.find(fn, ['number', 'string'])\n\t     *   typed.find(fn, 'number, string')\n\t     *\n\t     * Function find only only works for exact matches.\n\t     *\n\t     * @param {Function} fn                   A typed-function\n\t     * @param {string | string[]} signature   Signature to be found, can be\n\t     *                                        an array or a comma separated string.\n\t     * @return {Function}                     Returns the matching signature, or\n\t     *                                        throws an errror when no signature\n\t     *                                        is found.\n\t     */\n\t    function find (fn, signature) {\n\t      if (!fn.signatures) {\n\t        throw new TypeError('Function is no typed-function');\n\t      }\n\n\t      // normalize input\n\t      var arr;\n\t      if (typeof signature === 'string') {\n\t        arr = signature.split(',');\n\t        for (var i = 0; i < arr.length; i++) {\n\t          arr[i] = arr[i].trim();\n\t        }\n\t      }\n\t      else if (Array.isArray(signature)) {\n\t        arr = signature;\n\t      }\n\t      else {\n\t        throw new TypeError('String array or a comma separated string expected');\n\t      }\n\n\t      var str = arr.join(',');\n\n\t      // find an exact match\n\t      var match = fn.signatures[str];\n\t      if (match) {\n\t        return match;\n\t      }\n\n\t      // TODO: extend find to match non-exact signatures\n\n\t      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');\n\t    }\n\n\t    /**\n\t     * Convert a given value to another data type.\n\t     * @param {*} value\n\t     * @param {string} type\n\t     */\n\t    function convert (value, type) {\n\t      var from = getTypeOf(value);\n\n\t      // check conversion is needed\n\t      if (type === from) {\n\t        return value;\n\t      }\n\n\t      for (var i = 0; i < typed.conversions.length; i++) {\n\t        var conversion = typed.conversions[i];\n\t        if (conversion.from === from && conversion.to === type) {\n\t          return conversion.convert(value);\n\t        }\n\t      }\n\n\t      throw new Error('Cannot convert from ' + from + ' to ' + type);\n\t    }\n\n\t    // attach types and conversions to the final `typed` function\n\t    typed.config = config;\n\t    typed.types = types;\n\t    typed.conversions = conversions;\n\t    typed.ignore = ignore;\n\t    typed.create = create;\n\t    typed.find = find;\n\t    typed.convert = convert;\n\n\t    // add a type\n\t    typed.addType = function (type) {\n\t      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {\n\t        throw new TypeError('Object with properties {name: string, test: function} expected');\n\t      }\n\n\t      typed.types.push(type);\n\t    };\n\n\t    // add a conversion\n\t    typed.addConversion = function (conversion) {\n\t      if (!conversion\n\t          || typeof conversion.from !== 'string'\n\t          || typeof conversion.to !== 'string'\n\t          || typeof conversion.convert !== 'function') {\n\t        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n\t      }\n\n\t      typed.conversions.push(conversion);\n\t    };\n\n\t    return typed;\n\t  }\n\n\t  return create();\n\t}));\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar NumberFormatter = __webpack_require__(7);\n\n\t/**\n\t * Test whether value is a number\n\t * @param {*} value\n\t * @return {boolean} isNumber\n\t */\n\texports.isNumber = function(value) {\n\t  return typeof value === 'number';\n\t};\n\n\t/**\n\t * Check if a number is integer\n\t * @param {number | boolean} value\n\t * @return {boolean} isInteger\n\t */\n\texports.isInteger = function(value) {\n\t  return isFinite(value)\n\t      ? (value == Math.round(value))\n\t      : false;\n\t  // Note: we use ==, not ===, as we can have Booleans as well\n\t};\n\n\t/**\n\t * Calculate the sign of a number\n\t * @param {number} x\n\t * @returns {*}\n\t */\n\texports.sign = Math.sign || function(x) {\n\t  if (x > 0) {\n\t    return 1;\n\t  }\n\t  else if (x < 0) {\n\t    return -1;\n\t  }\n\t  else {\n\t    return 0;\n\t  }\n\t};\n\n\t/**\n\t * Convert a number to a formatted string representation.\n\t *\n\t * Syntax:\n\t *\n\t *    format(value)\n\t *    format(value, options)\n\t *    format(value, precision)\n\t *    format(value, fn)\n\t *\n\t * Where:\n\t *\n\t *    {number} value   The value to be formatted\n\t *    {Object} options An object with formatting options. Available options:\n\t *                     {string} notation\n\t *                         Number notation. Choose from:\n\t *                         'fixed'          Always use regular number notation.\n\t *                                          For example '123.40' and '14000000'\n\t *                         'exponential'    Always use exponential notation.\n\t *                                          For example '1.234e+2' and '1.4e+7'\n\t *                         'engineering'    Always use engineering notation.\n\t *                                          For example '123.4e+0' and '14.0e+6'\n\t *                         'auto' (default) Regular number notation for numbers\n\t *                                          having an absolute value between\n\t *                                          `lower` and `upper` bounds, and uses\n\t *                                          exponential notation elsewhere.\n\t *                                          Lower bound is included, upper bound\n\t *                                          is excluded.\n\t *                                          For example '123.4' and '1.4e7'.\n\t *                     {number} precision   A number between 0 and 16 to round\n\t *                                          the digits of the number.\n\t *                                          In case of notations 'exponential' and\n\t *                                          'auto', `precision` defines the total\n\t *                                          number of significant digits returned\n\t *                                          and is undefined by default.\n\t *                                          In case of notation 'fixed',\n\t *                                          `precision` defines the number of\n\t *                                          significant digits after the decimal\n\t *                                          point, and is 0 by default.\n\t *                     {Object} exponential An object containing two parameters,\n\t *                                          {number} lower and {number} upper,\n\t *                                          used by notation 'auto' to determine\n\t *                                          when to return exponential notation.\n\t *                                          Default values are `lower=1e-3` and\n\t *                                          `upper=1e5`.\n\t *                                          Only applicable for notation `auto`.\n\t *    {Function} fn    A custom formatting function. Can be used to override the\n\t *                     built-in notations. Function `fn` is called with `value` as\n\t *                     parameter and must return a string. Is useful for example to\n\t *                     format all values inside a matrix in a particular way.\n\t *\n\t * Examples:\n\t *\n\t *    format(6.4);                                        // '6.4'\n\t *    format(1240000);                                    // '1.24e6'\n\t *    format(1/3);                                        // '0.3333333333333333'\n\t *    format(1/3, 3);                                     // '0.333'\n\t *    format(21385, 2);                                   // '21000'\n\t *    format(12.071, {notation: 'fixed'});                // '12'\n\t *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n\t *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n\t *    format(12345678, {notation: 'engineering'});        // '12.345678e+6'\n\t *\n\t * @param {number} value\n\t * @param {Object | Function | number} [options]\n\t * @return {string} str The formatted value\n\t */\n\texports.format = function(value, options) {\n\t  if (typeof options === 'function') {\n\t    // handle format(value, fn)\n\t    return options(value);\n\t  }\n\n\t  // handle special cases\n\t  if (value === Infinity) {\n\t    return 'Infinity';\n\t  }\n\t  else if (value === -Infinity) {\n\t    return '-Infinity';\n\t  }\n\t  else if (isNaN(value)) {\n\t    return 'NaN';\n\t  }\n\n\t  // default values for options\n\t  var notation = 'auto';\n\t  var precision = undefined;\n\n\t  if (options) {\n\t    // determine notation from options\n\t    if (options.notation) {\n\t      notation = options.notation;\n\t    }\n\n\t    // determine precision from options\n\t    if (exports.isNumber(options)) {\n\t      precision = options;\n\t    }\n\t    else if (options.precision) {\n\t      precision = options.precision;\n\t    }\n\t  }\n\n\t  // handle the various notations\n\t  switch (notation) {\n\t    case 'fixed':\n\t      return exports.toFixed(value, precision);\n\n\t    case 'exponential':\n\t      return exports.toExponential(value, precision);\n\n\t    case 'engineering':\n\t      return exports.toEngineering(value, precision);\n\n\t    case 'auto':\n\t      return exports\n\t          .toPrecision(value, precision, options && options.exponential)\n\n\t          // remove trailing zeros after the decimal point\n\t          .replace(/((\\.\\d*?)(0+))($|e)/, function () {\n\t            var digits = arguments[2];\n\t            var e = arguments[4];\n\t            return (digits !== '.') ? digits + e : e;\n\t          });\n\n\t    default:\n\t      throw new Error('Unknown notation \"' + notation + '\". ' +\n\t          'Choose \"auto\", \"exponential\", or \"fixed\".');\n\t  }\n\t};\n\n\t/**\n\t * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n\t * @param {number} value\n\t * @param {number} [precision]  Number of digits in formatted output.\n\t *                              If not provided, the maximum available digits\n\t *                              is used.\n\t * @returns {string} str\n\t */\n\texports.toExponential = function(value, precision) {\n\t  return new NumberFormatter(value).toExponential(precision);\n\t};\n\n\t/**\n\t * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n\t * @param {number} value\n\t * @param {number} [precision]  Number of digits in formatted output.\n\t *                              If not provided, the maximum available digits\n\t *                              is used.\n\t * @returns {string} str\n\t */\n\texports.toEngineering = function(value, precision) {\n\t  return new NumberFormatter(value).toEngineering(precision);\n\t};\n\n\t/**\n\t * Format a number with fixed notation.\n\t * @param {number} value\n\t * @param {number} [precision=0]        Optional number of decimals after the\n\t *                                      decimal point. Zero by default.\n\t */\n\texports.toFixed = function(value, precision) {\n\t  return new NumberFormatter(value).toFixed(precision);\n\t};\n\n\t/**\n\t * Format a number with a certain precision\n\t * @param {number} value\n\t * @param {number} [precision=undefined] Optional number of digits.\n\t * @param {{lower: number, upper: number}} [options]  By default:\n\t *                                                    lower = 1e-3 (excl)\n\t *                                                    upper = 1e+5 (incl)\n\t * @return {string}\n\t */\n\texports.toPrecision = function(value, precision, options) {\n\t  return new NumberFormatter(value).toPrecision(precision, options);\n\t};\n\n\t/**\n\t * Count the number of significant digits of a number.\n\t *\n\t * For example:\n\t *   2.34 returns 3\n\t *   0.0034 returns 2\n\t *   120.5e+30 returns 4\n\t *\n\t * @param {number} value\n\t * @return {number} digits   Number of significant digits\n\t */\n\texports.digits = function(value) {\n\t  return value\n\t      .toExponential()\n\t      .replace(/e.*$/, '')          // remove exponential notation\n\t      .replace( /^0\\.?0*|\\./, '')   // remove decimal point and leading zeros\n\t      .length\n\t};\n\n\t/**\n\t * Minimum number added to one that makes the result different than one\n\t */\n\texports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n\n\t/**\n\t * Compares two floating point numbers.\n\t * @param {number} x          First value to compare\n\t * @param {number} y          Second value to compare\n\t * @param {number} [epsilon]  The maximum relative difference between x and y\n\t *                            If epsilon is undefined or null, the function will\n\t *                            test whether x and y are exactly equal.\n\t * @return {boolean} whether the two numbers are nearly equal\n\t*/\n\texports.nearlyEqual = function(x, y, epsilon) {\n\t  // if epsilon is null or undefined, test whether x and y are exactly equal\n\t  if (epsilon == null) {\n\t    return x == y;\n\t  }\n\n\t  // use \"==\" operator, handles infinities\n\t  if (x == y) {\n\t    return true;\n\t  }\n\n\t  // NaN\n\t  if (isNaN(x) || isNaN(y)) {\n\t    return false;\n\t  }\n\n\t  // at this point x and y should be finite\n\t  if(isFinite(x) && isFinite(y)) {\n\t    // check numbers are very close, needed when comparing numbers near zero\n\t    var diff = Math.abs(x - y);\n\t    if (diff < exports.DBL_EPSILON) {\n\t      return true;\n\t    }\n\t    else {\n\t      // use relative error\n\t      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n\t    }\n\t  }\n\n\t  // Infinite and Number or negative Infinite and positive Infinite cases\n\t  return false;\n\t};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/**\n\t * Format a number using methods toPrecision, toFixed, toExponential.\n\t * @param {number | string} value\n\t * @constructor\n\t */\n\tfunction NumberFormatter (value) {\n\t  // parse the input value\n\t  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\t  if (!match) {\n\t    throw new SyntaxError('Invalid number');\n\t  }\n\n\t  var sign         = match[1];\n\t  var coefficients = match[2];\n\t  var exponent     = parseFloat(match[4] || '0');\n\n\t  var dot = coefficients.indexOf('.');\n\t  exponent += (dot !== -1) ? (dot - 1) : (coefficients.length - 1);\n\n\t  this.sign = sign;\n\t  this.coefficients = coefficients\n\t      .replace('.', '')  // remove the dot (must be removed before removing leading zeros)\n\t      .replace(/^0*/, function (zeros) {\n\t        // remove leading zeros, add their count to the exponent\n\t        exponent -= zeros.length;\n\t        return '';\n\t      })\n\t      .replace(/0*$/, '') // remove trailing zeros\n\t      .split('')\n\t      .map(function (d) {\n\t        return parseInt(d);\n\t      });\n\n\t  if (this.coefficients.length === 0) {\n\t    this.coefficients.push(0);\n\t    exponent++;\n\t  }\n\n\t  this.exponent = exponent;\n\t}\n\n\n\t/**\n\t * Format a number with engineering notation.\n\t * @param {number} [precision=0]        Optional number of decimals after the\n\t *                                      decimal point. Zero by default.\n\t */\n\tNumberFormatter.prototype.toEngineering = function(precision) {\n\t  var rounded = this.roundDigits(precision);\n\n\t  var e = rounded.exponent;\n\t  var c = rounded.coefficients;\n\n\t  // find nearest lower multiple of 3 for exponent\n\t  var newExp = e % 3 === 0 ? e : (e < 0 ? (e - 3) - (e % 3) : e - (e % 3));\n\n\t  // concatenate coefficients with necessary zeros\n\t  var significandsDiff = e >= 0 ? e : Math.abs(newExp);\n\n\t  // add zeros if necessary (for ex: 1e+8)\n\t  if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));\n\n\t  // find difference in exponents\n\t  var expDiff = Math.abs(e - newExp);\n\n\t  var decimalIdx = 1;\n\t  var str = '';\n\n\t  // push decimal index over by expDiff times\n\t  while (--expDiff >= 0) decimalIdx++;\n\n\t  // if all coefficient values are zero after the decimal point, don't add a decimal value. \n\t  // otherwise concat with the rest of the coefficients\n\t  var decimals = c.slice(decimalIdx).join('');\n\t  var decimalVal = decimals.match(/[1-9]/) ? ('.' + decimals) : '';\n\n\t  str = c.slice(0, decimalIdx).join('') + decimalVal;\n\n\t  str += 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n\t  return rounded.sign + str;\n\t}\n\n\t/**\n\t * Format a number with fixed notation.\n\t * @param {number} [precision=0]        Optional number of decimals after the\n\t *                                      decimal point. Zero by default.\n\t */\n\tNumberFormatter.prototype.toFixed = function (precision) {\n\t  var rounded = this.roundDigits(this.exponent + 1 + (precision || 0));\n\t  var c = rounded.coefficients;\n\t  var p = rounded.exponent + 1; // exponent may have changed\n\n\t  // append zeros if needed\n\t  var pp = p + (precision || 0);\n\t  if (c.length < pp) {\n\t    c = c.concat(zeros(pp - c.length));\n\t  }\n\n\t  // prepend zeros if needed\n\t  if (p < 0) {\n\t    c = zeros(-p + 1).concat(c);\n\t    p = 1;\n\t  }\n\n\t  // insert a dot if needed\n\t  if (precision) {\n\t    c.splice(p, 0, (p === 0) ? '0.' : '.');\n\t  }\n\n\t  return this.sign + c.join('');\n\t};\n\n\t/**\n\t * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n\t * @param {number} [precision]  Number of digits in formatted output.\n\t *                              If not provided, the maximum available digits\n\t *                              is used.\n\t */\n\tNumberFormatter.prototype.toExponential = function (precision) {\n\t  // round if needed, else create a clone\n\t  var rounded = precision ? this.roundDigits(precision) : this.clone();\n\t  var c = rounded.coefficients;\n\t  var e = rounded.exponent;\n\n\t  // append zeros if needed\n\t  if (c.length < precision) {\n\t    c = c.concat(zeros(precision - c.length));\n\t  }\n\n\t  // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\t  var first = c.shift();\n\t  return this.sign + first + (c.length > 0 ? ('.' + c.join('')) : '') +\n\t      'e' + (e >= 0 ? '+' : '') + e;\n\t};\n\n\t/**\n\t * Format a number with a certain precision\n\t * @param {number} [precision=undefined] Optional number of digits.\n\t * @param {{lower: number | undefined, upper: number | undefined}} [options]\n\t *                                       By default:\n\t *                                         lower = 1e-3 (excl)\n\t *                                         upper = 1e+5 (incl)\n\t * @return {string}\n\t */\n\tNumberFormatter.prototype.toPrecision = function(precision, options) {\n\t  // determine lower and upper bound for exponential notation.\n\t  var lower = (options && options.lower !== undefined) ? options.lower : 1e-3;\n\t  var upper = (options && options.upper !== undefined) ? options.upper : 1e+5;\n\n\t  var abs = Math.abs(Math.pow(10, this.exponent));\n\t  if (abs < lower || abs >= upper) {\n\t    // exponential notation\n\t    return this.toExponential(precision);\n\t  }\n\t  else {\n\t    var rounded = precision ? this.roundDigits(precision) : this.clone();\n\t    var c = rounded.coefficients;\n\t    var e = rounded.exponent;\n\n\t    // append trailing zeros\n\t    if (c.length < precision) {\n\t      c = c.concat(zeros(precision - c.length));\n\t    }\n\n\t    // append trailing zeros\n\t    // TODO: simplify the next statement\n\t    c = c.concat(zeros(e - c.length + 1 +\n\t        (c.length < precision ? precision - c.length : 0)));\n\n\t    // prepend zeros\n\t    c = zeros(-e).concat(c);\n\n\t    var dot = e > 0 ? e : 0;\n\t    if (dot < c.length - 1) {\n\t      c.splice(dot + 1, 0, '.');\n\t    }\n\n\t    return this.sign + c.join('');\n\t  }\n\t};\n\n\t/**\n\t * Crete a clone of the NumberFormatter\n\t * @return {NumberFormatter} Returns a clone of the NumberFormatter\n\t */\n\tNumberFormatter.prototype.clone = function () {\n\t  var clone = new NumberFormatter('0');\n\t  clone.sign = this.sign;\n\t  clone.coefficients = this.coefficients.slice(0);\n\t  clone.exponent = this.exponent;\n\t  return clone;\n\t};\n\n\t/**\n\t * Round the number of digits of a number *\n\t * @param {number} precision  A positive integer\n\t * @return {NumberFormatter}  Returns a new NumberFormatter with the rounded\n\t *                            digits\n\t */\n\tNumberFormatter.prototype.roundDigits = function (precision) {\n\t  var rounded = this.clone();\n\t  var c = rounded.coefficients;\n\n\t  // prepend zeros if needed\n\t  while (precision <= 0) {\n\t    c.unshift(0);\n\t    rounded.exponent++;\n\t    precision++;\n\t  }\n\n\t  if (c.length > precision) {\n\t    var removed = c.splice(precision, c.length - precision);\n\n\t    if (removed[0] >= 5) {\n\t      var i = precision - 1;\n\t      c[i]++;\n\t      while (c[i] === 10) {\n\t        c.pop();\n\t        if (i === 0) {\n\t          c.unshift(0);\n\t          rounded.exponent++;\n\t          i++;\n\t        }\n\t        i--;\n\t        c[i]++;\n\t      }\n\t    }\n\t  }\n\n\t  return rounded;\n\t};\n\n\t/**\n\t * Create an array filled with zeros.\n\t * @param {number} length\n\t * @return {Array}\n\t */\n\tfunction zeros(length) {\n\t  var arr = [];\n\t  for (var i = 0; i < length; i++) {\n\t    arr.push(0);\n\t  }\n\t  return arr;\n\t}\n\n\tmodule.exports = NumberFormatter;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Emitter = __webpack_require__(9);\n\n\t/**\n\t * Extend given object with emitter functions `on`, `off`, `once`, `emit`\n\t * @param {Object} obj\n\t * @return {Object} obj\n\t */\n\texports.mixin = function (obj) {\n\t  // create event emitter\n\t  var emitter = new Emitter();\n\n\t  // bind methods to obj (we don't want to expose the emitter.e Array...)\n\t  obj.on   = emitter.on.bind(emitter);\n\t  obj.off  = emitter.off.bind(emitter);\n\t  obj.once = emitter.once.bind(emitter);\n\t  obj.emit = emitter.emit.bind(emitter);\n\n\t  return obj;\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tfunction E () {\n\t\t// Keep this empty so it's easier to inherit from\n\t  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n\t}\n\n\tE.prototype = {\n\t\ton: function (name, callback, ctx) {\n\t    var e = this.e || (this.e = {});\n\n\t    (e[name] || (e[name] = [])).push({\n\t      fn: callback,\n\t      ctx: ctx\n\t    });\n\n\t    return this;\n\t  },\n\n\t  once: function (name, callback, ctx) {\n\t    var self = this;\n\t    function listener () {\n\t      self.off(name, listener);\n\t      callback.apply(ctx, arguments);\n\t    };\n\n\t    listener._ = callback\n\t    return this.on(name, listener, ctx);\n\t  },\n\n\t  emit: function (name) {\n\t    var data = [].slice.call(arguments, 1);\n\t    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n\t    var i = 0;\n\t    var len = evtArr.length;\n\n\t    for (i; i < len; i++) {\n\t      evtArr[i].fn.apply(evtArr[i].ctx, data);\n\t    }\n\n\t    return this;\n\t  },\n\n\t  off: function (name, callback) {\n\t    var e = this.e || (this.e = {});\n\t    var evts = e[name];\n\t    var liveEvents = [];\n\n\t    if (evts && callback) {\n\t      for (var i = 0, len = evts.length; i < len; i++) {\n\t        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n\t          liveEvents.push(evts[i]);\n\t      }\n\t    }\n\n\t    // Remove event from queue to prevent memory leak\n\t    // Suggested by https://github.com/lazd\n\t    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n\t    (liveEvents.length)\n\t      ? e[name] = liveEvents\n\t      : delete e[name];\n\n\t    return this;\n\t  }\n\t};\n\n\tmodule.exports = E;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar lazy = __webpack_require__(3).lazy;\n\tvar isFactory = __webpack_require__(3).isFactory;\n\tvar traverse = __webpack_require__(3).traverse;\n\tvar extend = __webpack_require__(3).extend;\n\tvar ArgumentsError = __webpack_require__(11);\n\n\tfunction factory (type, config, load, typed, math) {\n\t  /**\n\t   * Import functions from an object or a module\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.import(object)\n\t   *    math.import(object, options)\n\t   *\n\t   * Where:\n\t   *\n\t   * - `object: Object`\n\t   *   An object with functions to be imported.\n\t   * - `options: Object` An object with import options. Available options:\n\t   *   - `override: boolean`\n\t   *     If true, existing functions will be overwritten. False by default.\n\t   *   - `silent: boolean`\n\t   *     If true, the function will not throw errors on duplicates or invalid\n\t   *     types. False by default.\n\t   *   - `wrap: boolean`\n\t   *     If true, the functions will be wrapped in a wrapper function\n\t   *     which converts data types like Matrix to primitive data types like Array.\n\t   *     The wrapper is needed when extending math.js with libraries which do not\n\t   *     support these data type. False by default.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    // define new functions and variables\n\t   *    math.import({\n\t   *      myvalue: 42,\n\t   *      hello: function (name) {\n\t   *        return 'hello, ' + name + '!';\n\t   *      }\n\t   *    });\n\t   *\n\t   *    // use the imported function and variable\n\t   *    math.myvalue * 2;               // 84\n\t   *    math.hello('user');             // 'hello, user!'\n\t   *\n\t   *    // import the npm module 'numbers'\n\t   *    // (must be installed first with `npm install numbers`)\n\t   *    math.import(require('numbers'), {wrap: true});\n\t   *\n\t   *    math.fibonacci(7); // returns 13\n\t   *\n\t   * @param {Object | Array} object   Object with functions to be imported.\n\t   * @param {Object} [options]        Import options.\n\t   */\n\t  function math_import(object, options) {\n\t    var num = arguments.length;\n\t    if (num != 1 && num != 2) {\n\t      throw new ArgumentsError('import', num, 1, 2);\n\t    }\n\n\t    if (!options) {\n\t      options = {};\n\t    }\n\n\t    if (isFactory(object)) {\n\t      _importFactory(object, options);\n\t    }\n\t    // TODO: allow a typed-function with name too\n\t    else if (Array.isArray(object)) {\n\t      object.forEach(function (entry) {\n\t        math_import(entry, options);\n\t      });\n\t    }\n\t    else if (typeof object === 'object') {\n\t      // a map with functions\n\t      for (var name in object) {\n\t        if (object.hasOwnProperty(name)) {\n\t          var value = object[name];\n\t          if (isSupportedType(value)) {\n\t            _import(name, value, options);\n\t          }\n\t          else if (isFactory(object)) {\n\t            _importFactory(object, options);\n\t          }\n\t          else {\n\t            math_import(value, options);\n\t          }\n\t        }\n\t      }\n\t    }\n\t    else {\n\t      if (!options.silent) {\n\t        throw new TypeError('Factory, Object, or Array expected');\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Add a property to the math namespace and create a chain proxy for it.\n\t   * @param {string} name\n\t   * @param {*} value\n\t   * @param {Object} options  See import for a description of the options\n\t   * @private\n\t   */\n\t  function _import(name, value, options) {\n\t    if (options.wrap && typeof value === 'function') {\n\t      // create a wrapper around the function\n\t      value = _wrap(value);\n\t    }\n\n\t    if (isTypedFunction(math[name]) && isTypedFunction(value)) {\n\t      if (options.override) {\n\t        // give the typed function the right name\n\t        value = typed(name, value.signatures);\n\t      }\n\t      else {\n\t        // merge the existing and typed function\n\t        value = typed(math[name], value);\n\t      }\n\n\t      math[name] = value;\n\t      _importTransform(name, value);\n\t      math.emit('import', name, function resolver() {\n\t        return value;\n\t      });\n\t      return;\n\t    }\n\n\t    if (math[name] === undefined || options.override) {\n\t      math[name] = value;\n\t      _importTransform(name, value);\n\t      math.emit('import', name, function resolver() {\n\t        return value;\n\t      });\n\t      return;\n\t    }\n\n\t    if (!options.silent) {\n\t      throw new Error('Cannot import \"' + name + '\": already exists');\n\t    }\n\t  }\n\n\t  function _importTransform (name, value) {\n\t    if (value && typeof value.transform === 'function') {\n\t      math.expression.transform[name] = value.transform;\n\t    }\n\t  }\n\n\t  /**\n\t   * Create a wrapper a round an function which converts the arguments\n\t   * to their primitive values (like convert a Matrix to Array)\n\t   * @param {Function} fn\n\t   * @return {Function} Returns the wrapped function\n\t   * @private\n\t   */\n\t  function _wrap (fn) {\n\t    var wrapper = function wrapper () {\n\t      var args = [];\n\t      for (var i = 0, len = arguments.length; i < len; i++) {\n\t        var arg = arguments[i];\n\t        args[i] = arg && arg.valueOf();\n\t      }\n\t      return fn.apply(math, args);\n\t    };\n\n\t    if (fn.transform) {\n\t      wrapper.transform = fn.transform;\n\t    }\n\n\t    return wrapper;\n\t  }\n\n\t  /**\n\t   * Import an instance of a factory into math.js\n\t   * @param {{factory: Function, name: string, path: string, math: boolean}} factory\n\t   * @param {Object} options  See import for a description of the options\n\t   * @private\n\t   */\n\t  function _importFactory(factory, options) {\n\t    if (typeof factory.name === 'string') {\n\t      var name = factory.name;\n\t      var namespace = factory.path ? traverse(math, factory.path) : math;\n\t      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;\n\n\t      var resolver = function () {\n\t        var instance = load(factory);\n\n\t        if (isTypedFunction(existing) && isTypedFunction(instance)) {\n\t          if (options.override) {\n\t            // replace the existing typed function (nothing to do)\n\t          }\n\t          else {\n\t            // merge the existing and new typed function\n\t            instance = typed(existing, instance);\n\t          }\n\n\t          return instance;\n\t        }\n\n\t        if (existing === undefined || options.override) {\n\t          return instance;\n\t        }\n\n\t        if (!options.silent) {\n\t          throw new Error('Cannot import \"' + name + '\": already exists');\n\t        }\n\t      };\n\n\t      if (factory.lazy !== false) {\n\t        lazy(namespace, name, resolver);\n\t      }\n\t      else {\n\t        namespace[name] = resolver();\n\t      }\n\n\t      math.emit('import', name, resolver, factory.path);\n\t    }\n\t    else {\n\t      // unnamed factory.\n\t      // no lazy loading\n\t      load(factory);\n\t    }\n\t  }\n\n\t  /**\n\t   * Check whether given object is a type which can be imported\n\t   * @param {Function | number | string | boolean | null | Unit | Complex} object\n\t   * @return {boolean}\n\t   * @private\n\t   */\n\t  function isSupportedType(object) {\n\t    return typeof object == 'function'\n\t        || typeof object === 'number'\n\t        || typeof object === 'string'\n\t        || typeof object === 'boolean'\n\t        || object === null\n\t        || (object && object.isUnit === true)\n\t        || (object && object.isComplex === true)\n\t        || (object && object.isBigNumber === true)\n\t        || (object && object.isFraction === true)\n\t        || (object && object.isMatrix === true)\n\t        || (object && Array.isArray(object) === true)\n\t  }\n\n\t  /**\n\t   * Test whether a given thing is a typed-function\n\t   * @param {*} fn\n\t   * @return {boolean} Returns true when `fn` is a typed-function\n\t   */\n\t  function isTypedFunction (fn) {\n\t    return typeof fn === 'function' && typeof fn.signatures === 'object';\n\t  }\n\n\t  return math_import;\n\t}\n\n\texports.math = true; // request access to the math namespace as 5th argument of the factory function\n\texports.name = 'import';\n\texports.factory = factory;\n\texports.lazy = true;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/**\n\t * Create a syntax error with the message:\n\t *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n\t * @param {string} fn     Function name\n\t * @param {number} count  Actual argument count\n\t * @param {number} min    Minimum required argument count\n\t * @param {number} [max]  Maximum required argument count\n\t * @extends Error\n\t */\n\tfunction ArgumentsError(fn, count, min, max) {\n\t  if (!(this instanceof ArgumentsError)) {\n\t    throw new SyntaxError('Constructor must be called with the new operator');\n\t  }\n\n\t  this.fn = fn;\n\t  this.count = count;\n\t  this.min = min;\n\t  this.max = max;\n\n\t  this.message = 'Wrong number of arguments in function ' + fn +\n\t      ' (' + count + ' provided, ' +\n\t      min + ((max != undefined) ? ('-' + max) : '') + ' expected)';\n\n\t  this.stack = (new Error()).stack;\n\t}\n\n\tArgumentsError.prototype = new Error();\n\tArgumentsError.prototype.constructor = Error;\n\tArgumentsError.prototype.name = 'ArgumentsError';\n\tArgumentsError.prototype.isArgumentsError = true;\n\n\tmodule.exports = ArgumentsError;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar object = __webpack_require__(3);\n\n\tfunction factory (type, config, load, typed, math) {\n\t  var MATRIX = ['Matrix', 'Array'];                   // valid values for option matrix\n\t  var NUMBER = ['number', 'BigNumber', 'Fraction'];   // valid values for option number\n\n\t  /**\n\t   * Set configuration options for math.js, and get current options.\n\t   * Will emit a 'config' event, with arguments (curr, prev).\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.config(config: Object): Object\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.config().number;                // outputs 'number'\n\t   *     math.eval('0.4');                    // outputs number 0.4\n\t   *     math.config({number: 'Fraction'});\n\t   *     math.eval('0.4');                    // outputs Fraction 2/5\n\t   *\n\t   * @param {Object} [options] Available options:\n\t   *                            {number} epsilon\n\t   *                              Minimum relative difference between two\n\t   *                              compared values, used by all comparison functions.\n\t   *                            {string} matrix\n\t   *                              A string 'Matrix' (default) or 'Array'.\n\t   *                            {string} number\n\t   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n\t   *                            {number} precision\n\t   *                              The number of significant digits for BigNumbers.\n\t   *                              Not applicable for Numbers.\n\t   *                            {string} parenthesis\n\t   *                              How to display parentheses in LaTeX and string\n\t   *                              output.\n\t   * @return {Object} Returns the current configuration\n\t   */\n\t  function _config(options) {\n\t    if (options) {\n\t      var prev = object.clone(config);\n\n\t      // validate some of the options\n\t      validateOption(options, 'matrix', MATRIX);\n\t      validateOption(options, 'number', NUMBER);\n\n\t      // merge options\n\t      object.deepExtend(config, options);\n\n\t      var curr = object.clone(config);\n\n\t      // emit 'config' event\n\t      math.emit('config', curr, prev);\n\n\t      return curr;\n\t    }\n\t    else {\n\t      return object.clone(config);\n\t    }\n\t  }\n\n\t  // attach the valid options to the function so they can be extended\n\t  _config.MATRIX = MATRIX;\n\t  _config.NUMBER = NUMBER;\n\n\t  return _config;\n\t}\n\n\t/**\n\t * Test whether an Array contains a specific item.\n\t * @param {Array.<string>} array\n\t * @param {string} item\n\t * @return {boolean}\n\t */\n\tfunction contains (array, item) {\n\t  return array.indexOf(item) !== -1;\n\t}\n\n\t/**\n\t * Find a string in an array. Case insensitive search\n\t * @param {Array.<string>} array\n\t * @param {string} item\n\t * @return {number} Returns the index when found. Returns -1 when not found\n\t */\n\tfunction findIndex (array, item) {\n\t  return array\n\t      .map(function (i) {\n\t        return i.toLowerCase();\n\t      })\n\t      .indexOf(item.toLowerCase());\n\t}\n\n\t/**\n\t * Validate an option\n\t * @param {Object} options         Object with options\n\t * @param {string} name            Name of the option to validate\n\t * @param {Array.<string>} values  Array with valid values for this option\n\t */\n\tfunction validateOption(options, name, values) {\n\t  if (options[name] !== undefined && !contains(values, options[name])) {\n\t    var index = findIndex(values, options[name]);\n\t    if (index !== -1) {\n\t      // right value, wrong casing\n\t      // TODO: lower case values are deprecated since v3, remove this warning some day.\n\t      console.warn('Warning: Wrong casing for configuration option \"' + name + '\", should be \"' + values[index] + '\" instead of \"' + options[name] + '\".');\n\n\t      options[name] = values[index]; // change the option to the right casing\n\t    }\n\t    else {\n\t      // unknown value\n\t      console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". Available options: ' + values.map(JSON.stringify).join(', ') + '.');\n\t    }\n\t  }\n\t}\n\n\texports.name = 'config';\n\texports.math = true; // request the math namespace as fifth argument\n\texports.factory = factory;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(14),        // data types (Matrix, Complex, Unit, ...)\n\t  __webpack_require__(93),   // constants\n\t  __webpack_require__(95),  // expression parsing\n\t  __webpack_require__(326),    // functions\n\t  __webpack_require__(489),        // serialization utility (math.json.reviver)\n\t  __webpack_require__(491)        // errors\n\t];\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(15),\n\t  __webpack_require__(20),\n\t  __webpack_require__(21),\n\t  __webpack_require__(26),\n\t  __webpack_require__(33),\n\t  __webpack_require__(37),\n\t  __webpack_require__(70),\n\t  __webpack_require__(71),\n\t  __webpack_require__(73),\n\t  __webpack_require__(74)\n\t];\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  // type\n\t  __webpack_require__(16),\n\n\t  // construction function\n\t  __webpack_require__(18)\n\t];\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Decimal = __webpack_require__(17);\n\n\tfunction factory (type, config, load, typed, math) {\n\t  var BigNumber = Decimal.clone({precision: config.precision});\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  BigNumber.prototype.type = 'BigNumber';\n\t  BigNumber.prototype.isBigNumber = true;\n\n\t  /**\n\t   * Get a JSON representation of a BigNumber containing\n\t   * type information\n\t   * @returns {Object} Returns a JSON object structured as:\n\t   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n\t   */\n\t  BigNumber.prototype.toJSON = function () {\n\t    return {\n\t      mathjs: 'BigNumber',\n\t      value: this.toString()\n\t    };\n\t  };\n\n\t  /**\n\t   * Instantiate a BigNumber from a JSON object\n\t   * @param {Object} json  a JSON object structured as:\n\t   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n\t   * @return {BigNumber}\n\t   */\n\t  BigNumber.fromJSON = function (json) {\n\t    return new BigNumber(json.value);\n\t  };\n\n\t  // listen for changed in the configuration, automatically apply changed precision\n\t  math.on('config', function (curr, prev) {\n\t    if (curr.precision !== prev.precision) {\n\t      BigNumber.config({ precision: curr.precision });\n\t    }\n\t  });\n\n\t  return BigNumber;\n\t}\n\n\texports.name = 'BigNumber';\n\texports.path = 'type';\n\texports.factory = factory;\n\texports.math = true; // request access to the math namespace\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*! decimal.js v5.0.8 https://github.com/MikeMcl/decimal.js/LICENCE */\r\n\t;(function (globalScope) {\r\n\t  'use strict';\r\n\r\n\r\n\t  /*\r\n\t   *  decimal.js v5.0.8\r\n\t   *  An arbitrary-precision Decimal type for JavaScript.\r\n\t   *  https://github.com/MikeMcl/decimal.js\r\n\t   *  Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>\r\n\t   *  MIT Expat Licence\r\n\t   */\r\n\r\n\r\n\t  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n\t    // The maximum exponent magnitude.\r\n\t    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n\t  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n\t    // The limit on the value of `precision`, and on the value of the first argument to\r\n\t    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n\t    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\t    // The base 88 alphabet used by `toJSON` and `fromJSON`.\r\n\t    // 7 printable ASCII characters omitted (space) \\ \" & ' < >\r\n\t    NUMERALS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./:;=?@[]^_`{|}~',\r\n\r\n\t    // The natural logarithm of 10 (1025 digits).\r\n\t    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n\t    // Pi (1025 digits).\r\n\t    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n\t    // The initial configuration properties of the Decimal constructor.\r\n\t    Decimal = {\r\n\r\n\t      // These values must be integers within the stated ranges (inclusive).\r\n\t      // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n\t      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n\t      // E.g. `Decimal.config({ precision: 20 });`\r\n\t      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n\t      // The rounding mode used when rounding to `precision`.\r\n\t      //\r\n\t      // ROUND_UP         0 Away from zero.\r\n\t      // ROUND_DOWN       1 Towards zero.\r\n\t      // ROUND_CEIL       2 Towards +Infinity.\r\n\t      // ROUND_FLOOR      3 Towards -Infinity.\r\n\t      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n\t      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n\t      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n\t      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n\t      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n\t      //\r\n\t      // E.g.\r\n\t      // `Decimal.rounding = 4;`\r\n\t      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n\t      rounding: 4,                           // 0 to 8\r\n\r\n\t      // The modulo mode used when calculating the modulus: a mod n.\r\n\t      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n\t      // The remainder (r) is calculated as: r = a - n * q.\r\n\t      //\r\n\t      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n\t      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n\t      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n\t      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n\t      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n\t      //\r\n\t      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n\t      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n\t      // be used, but they may not give useful results.\r\n\t      modulo: 1,                             // 0 to 9\r\n\r\n\t      // The exponent value at and beneath which `toString` returns exponential notation.\r\n\t      // JavaScript numbers: -7\r\n\t      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n\t      // The exponent value at and above which `toString` returns exponential notation.\r\n\t      // JavaScript numbers: 21\r\n\t      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n\t      // The minimum exponent value, beneath which underflow to zero occurs.\r\n\t      // JavaScript numbers: -324  (5e-324)\r\n\t      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n\t      // The maximum exponent value, above which overflow to Infinity occurs.\r\n\t      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n\t      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n\t      // Whether to use cryptographically-secure random number generation, if available.\r\n\t      crypto: void 0                         // true/false/undefined\r\n\t    },\r\n\r\n\r\n\t  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n\t    inexact, noConflict, quadrant,\r\n\t    cryptoObject = typeof crypto != 'undefined' ? crypto : null,\r\n\t    external = true,\r\n\r\n\t    decimalError = '[DecimalError] ',\r\n\t    invalidArgument = decimalError + 'Invalid argument: ',\r\n\t    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n\r\n\t    mathfloor = Math.floor,\r\n\t    mathpow = Math.pow,\r\n\r\n\t    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n\t    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n\t    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n\t    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n\t    BASE = 1e7,\r\n\t    LOG_BASE = 7,\r\n\t    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n\t    LN10_PRECISION = LN10.length - 1,\r\n\t    PI_PRECISION = PI.length - 1,\r\n\r\n\t    // Decimal.prototype object\r\n\t    P = {};\r\n\r\n\r\n\t  // Decimal prototype methods\r\n\r\n\r\n\t  /*\r\n\t   *  absoluteValue             abs\r\n\t   *  ceil\r\n\t   *  comparedTo                cmp\r\n\t   *  cosine                    cos\r\n\t   *  cubeRoot                  cbrt\r\n\t   *  decimalPlaces             dp\r\n\t   *  dividedBy                 div\r\n\t   *  dividedToIntegerBy        divToInt\r\n\t   *  equals                    eq\r\n\t   *  floor\r\n\t   *  greaterThan               gt\r\n\t   *  greaterThanOrEqualTo      gte\r\n\t   *  hyperbolicCosine          cosh\r\n\t   *  hyperbolicSine            sinh\r\n\t   *  hyperbolicTangent         tanh\r\n\t   *  inverseCosine             acos\r\n\t   *  inverseHyperbolicCosine   acosh\r\n\t   *  inverseHyperbolicSine     asinh\r\n\t   *  inverseHyperbolicTangent  atanh\r\n\t   *  inverseSine               asin\r\n\t   *  inverseTangent            atan\r\n\t   *  isFinite\r\n\t   *  isInteger                 isInt\r\n\t   *  isNaN\r\n\t   *  isNegative                isNeg\r\n\t   *  isPositive                isPos\r\n\t   *  isZero\r\n\t   *  lessThan                  lt\r\n\t   *  lessThanOrEqualTo         lte\r\n\t   *  logarithm                 log\r\n\t   *  [maximum]                 [max]\r\n\t   *  [minimum]                 [min]\r\n\t   *  minus                     sub\r\n\t   *  modulo                    mod\r\n\t   *  naturalExponential        exp\r\n\t   *  naturalLogarithm          ln\r\n\t   *  negated                   neg\r\n\t   *  plus                      add\r\n\t   *  precision                 sd\r\n\t   *  round\r\n\t   *  sine                      sin\r\n\t   *  squareRoot                sqrt\r\n\t   *  tangent                   tan\r\n\t   *  times                     mul\r\n\t   *  toBinary\r\n\t   *  toDecimalPlaces           toDP\r\n\t   *  toExponential\r\n\t   *  toFixed\r\n\t   *  toFraction\r\n\t   *  toHexadecimal             toHex\r\n\t   *  toJSON\r\n\t   *  toNearest\r\n\t   *  toNumber\r\n\t   *  toOctal\r\n\t   *  toPower                   pow\r\n\t   *  toPrecision\r\n\t   *  toSignificantDigits       toSD\r\n\t   *  toString\r\n\t   *  truncated                 trunc\r\n\t   *  valueOf\r\n\t   */\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n\t   *\r\n\t   */\r\n\t  P.absoluteValue = P.abs = function () {\r\n\t    var x = new this.constructor(this);\r\n\t    if (x.s < 0) x.s = 1;\r\n\t    return finalise(x);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n\t   * direction of positive Infinity.\r\n\t   *\r\n\t   */\r\n\t  P.ceil = function () {\r\n\t    return finalise(new this.constructor(this), this.e + 1, 2);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return\r\n\t   *   1    if the value of this Decimal is greater than the value of `y`,\r\n\t   *  -1    if the value of this Decimal is less than the value of `y`,\r\n\t   *   0    if they have the same value,\r\n\t   *   NaN  if the value of either Decimal is NaN.\r\n\t   *\r\n\t   */\r\n\t  P.comparedTo = P.cmp = function (y) {\r\n\t    var i, j, xdL, ydL,\r\n\t      x = this,\r\n\t      xd = x.d,\r\n\t      yd = (y = new x.constructor(y)).d,\r\n\t      xs = x.s,\r\n\t      ys = y.s;\r\n\r\n\t    // Either NaN or ±Infinity?\r\n\t    if (!xd || !yd) {\r\n\t      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n\t    }\r\n\r\n\t    // Either zero?\r\n\t    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n\t    // Signs differ?\r\n\t    if (xs !== ys) return xs;\r\n\r\n\t    // Compare exponents.\r\n\t    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n\t    xdL = xd.length;\r\n\t    ydL = yd.length;\r\n\r\n\t    // Compare digit by digit.\r\n\t    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n\t      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n\t    }\r\n\r\n\t    // Compare lengths.\r\n\t    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-1, 1]\r\n\t   *\r\n\t   * cos(0)         = 1\r\n\t   * cos(-0)        = 1\r\n\t   * cos(Infinity)  = NaN\r\n\t   * cos(-Infinity) = NaN\r\n\t   * cos(NaN)       = NaN\r\n\t   *\r\n\t   */\r\n\t  P.cosine = P.cos = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (!x.d) return new Ctor(NaN);\r\n\r\n\t    // cos(0) = cos(-0) = 1\r\n\t    if (!x.d[0]) return new Ctor(1);\r\n\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n\t    Ctor.rounding = 1;\r\n\r\n\t    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\r\n\t    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   *\r\n\t   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   *  cbrt(0)  =  0\r\n\t   *  cbrt(-0) = -0\r\n\t   *  cbrt(1)  =  1\r\n\t   *  cbrt(-1) = -1\r\n\t   *  cbrt(N)  =  N\r\n\t   *  cbrt(-I) = -I\r\n\t   *  cbrt(I)  =  I\r\n\t   *\r\n\t   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n\t   *\r\n\t   */\r\n\t  P.cubeRoot = P.cbrt = function () {\r\n\t    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\t    external = false;\r\n\r\n\t    // Initial estimate.\r\n\t    s = x.s * Math.pow(x.s * x, 1 / 3);\r\n\r\n\t     // Math.cbrt underflow/overflow?\r\n\t     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n\t    if (!s || Math.abs(s) == 1 / 0) {\r\n\t      n = digitsToString(x.d);\r\n\t      e = x.e;\r\n\r\n\t      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n\t      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n\t      s = Math.pow(n, 1 / 3);\r\n\r\n\t      // Rarely, e may be one less than the result exponent value.\r\n\t      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n\t      if (s == 1 / 0) {\r\n\t        n = '5e' + e;\r\n\t      } else {\r\n\t        n = s.toExponential();\r\n\t        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n\t      }\r\n\r\n\t      r = new Ctor(n);\r\n\t      r.s = x.s;\r\n\t    } else {\r\n\t      r = new Ctor(s.toString());\r\n\t    }\r\n\r\n\t    sd = (e = Ctor.precision) + 3;\r\n\r\n\t    // Halley's method.\r\n\t    // TODO? Compare Newton's method.\r\n\t    for (;;) {\r\n\t      t = r;\r\n\t      t3 = t.times(t).times(t);\r\n\t      t3plusx = t3.plus(x);\r\n\t      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n\t      // TODO? Replace with for-loop and checkRoundingDigits.\r\n\t      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n\t        n = n.slice(sd - 3, sd + 1);\r\n\r\n\t        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n\t        // , i.e. approaching a rounding boundary, continue the iteration.\r\n\t        if (n == '9999' || !rep && n == '4999') {\r\n\r\n\t          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n\t          // nines may infinitely repeat.\r\n\t          if (!rep) {\r\n\t            finalise(t, e + 1, 0);\r\n\r\n\t            if (t.times(t).times(t).eq(x)) {\r\n\t              r = t;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\r\n\t          sd += 4;\r\n\t          rep = 1;\r\n\t        } else {\r\n\r\n\t          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n\t          // If not, then there are further digits and m will be truthy.\r\n\t          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n\t            // Truncate to the first rounding digit.\r\n\t            finalise(r, e + 1, 1);\r\n\t            m = !r.times(r).times(r).eq(x);\r\n\t          }\r\n\r\n\t          break;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\r\n\t    external = true;\r\n\r\n\t    return finalise(r, e, Ctor.rounding, m);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return the number of decimal places of the value of this Decimal.\r\n\t   *\r\n\t   */\r\n\t  P.decimalPlaces = P.dp = function () {\r\n\t    var w,\r\n\t      d = this.d,\r\n\t      n = NaN;\r\n\r\n\t    if (d) {\r\n\t      w = d.length - 1;\r\n\t      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n\t      // Subtract the number of trailing zeros of the last word.\r\n\t      w = d[w];\r\n\t      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n\t      if (n < 0) n = 0;\r\n\t    }\r\n\r\n\t    return n;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   *  n / 0 = I\r\n\t   *  n / N = N\r\n\t   *  n / I = 0\r\n\t   *  0 / n = 0\r\n\t   *  0 / 0 = N\r\n\t   *  0 / N = N\r\n\t   *  0 / I = 0\r\n\t   *  N / n = N\r\n\t   *  N / 0 = N\r\n\t   *  N / N = N\r\n\t   *  N / I = N\r\n\t   *  I / n = I\r\n\t   *  I / 0 = I\r\n\t   *  I / N = N\r\n\t   *  I / I = N\r\n\t   *\r\n\t   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.dividedBy = P.div = function (y) {\r\n\t    return divide(this, new this.constructor(y));\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n\t   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor;\r\n\t    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.equals = P.eq = function (y) {\r\n\t    return this.cmp(y) === 0;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n\t   * direction of negative Infinity.\r\n\t   *\r\n\t   */\r\n\t  P.floor = function () {\r\n\t    return finalise(new this.constructor(this), this.e + 1, 3);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n\t   * false.\r\n\t   *\r\n\t   */\r\n\t  P.greaterThan = P.gt = function (y) {\r\n\t    return this.cmp(y) > 0;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n\t   * otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n\t    var k = this.cmp(y);\r\n\t    return k == 1 || k === 0;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n\t   * Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [1, Infinity]\r\n\t   *\r\n\t   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n\t   *\r\n\t   * cosh(0)         = 1\r\n\t   * cosh(-0)        = 1\r\n\t   * cosh(Infinity)  = Infinity\r\n\t   * cosh(-Infinity) = Infinity\r\n\t   * cosh(NaN)       = NaN\r\n\t   *\r\n\t   *  x        time taken (ms)   result\r\n\t   * 1000      9                 9.8503555700852349694e+433\r\n\t   * 10000     25                4.4034091128314607936e+4342\r\n\t   * 100000    171               1.4033316802130615897e+43429\r\n\t   * 1000000   3817              1.5166076984010437725e+434294\r\n\t   * 10000000  abandoned after 2 minute wait\r\n\t   *\r\n\t   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n\t   *\r\n\t   */\r\n\t  P.hyperbolicCosine = P.cosh = function () {\r\n\t    var k, n, pr, rm, len,\r\n\t      x = this,\r\n\t      Ctor = x.constructor,\r\n\t      one = new Ctor(1);\r\n\r\n\t    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n\t    if (x.isZero()) return one;\r\n\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n\t    Ctor.rounding = 1;\r\n\t    len = x.d.length;\r\n\r\n\t    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n\t    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n\t    // Estimate the optimum number of times to use the argument reduction.\r\n\t    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n\t    if (len < 32) {\r\n\t      k = Math.ceil(len / 3);\r\n\t      n = Math.pow(4, -k).toString();\r\n\t    } else {\r\n\t      k = 16;\r\n\t      n = '2.3283064365386962890625e-10';\r\n\t    }\r\n\r\n\t    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n\t    // Reverse argument reduction\r\n\t    var cosh2_x,\r\n\t      i = k,\r\n\t      d8 = new Ctor(8);\r\n\t    for (; i--;) {\r\n\t      cosh2_x = x.times(x);\r\n\t      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n\t    }\r\n\r\n\t    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n\t   * Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-Infinity, Infinity]\r\n\t   *\r\n\t   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n\t   *\r\n\t   * sinh(0)         = 0\r\n\t   * sinh(-0)        = -0\r\n\t   * sinh(Infinity)  = Infinity\r\n\t   * sinh(-Infinity) = -Infinity\r\n\t   * sinh(NaN)       = NaN\r\n\t   *\r\n\t   * x        time taken (ms)\r\n\t   * 10       2 ms\r\n\t   * 100      5 ms\r\n\t   * 1000     14 ms\r\n\t   * 10000    82 ms\r\n\t   * 100000   886 ms            1.4033316802130615897e+43429\r\n\t   * 200000   2613 ms\r\n\t   * 300000   5407 ms\r\n\t   * 400000   8824 ms\r\n\t   * 500000   13026 ms          8.7080643612718084129e+217146\r\n\t   * 1000000  48543 ms\r\n\t   *\r\n\t   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n\t   *\r\n\t   */\r\n\t  P.hyperbolicSine = P.sinh = function () {\r\n\t    var k, pr, rm, len,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n\t    Ctor.rounding = 1;\r\n\t    len = x.d.length;\r\n\r\n\t    if (len < 3) {\r\n\t      x = taylorSeries(Ctor, 2, x, x, true);\r\n\t    } else {\r\n\r\n\t      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n\t      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n\t      // 3 multiplications and 1 addition\r\n\r\n\t      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n\t      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n\t      // 4 multiplications and 2 additions\r\n\r\n\t      // Estimate the optimum number of times to use the argument reduction.\r\n\t      k = 1.4 * Math.sqrt(len);\r\n\t      k = k > 16 ? 16 : k | 0;\r\n\r\n\t      x = x.times(Math.pow(5, -k));\r\n\r\n\t      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n\t      // Reverse argument reduction\r\n\t      var sinh2_x,\r\n\t        d5 = new Ctor(5),\r\n\t        d16 = new Ctor(16),\r\n\t        d20 = new Ctor(20);\r\n\t      for (; k--;) {\r\n\t        sinh2_x = x.times(x);\r\n\t        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n\t      }\r\n\t    }\r\n\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\r\n\t    return finalise(x, pr, rm, true);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n\t   * Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-1, 1]\r\n\t   *\r\n\t   * tanh(x) = sinh(x) / cosh(x)\r\n\t   *\r\n\t   * tanh(0)         = 0\r\n\t   * tanh(-0)        = -0\r\n\t   * tanh(Infinity)  = 1\r\n\t   * tanh(-Infinity) = -1\r\n\t   * tanh(NaN)       = NaN\r\n\t   *\r\n\t   */\r\n\t  P.hyperbolicTangent = P.tanh = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (!x.isFinite()) return new Ctor(x.s);\r\n\t    if (x.isZero()) return new Ctor(x);\r\n\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + 7;\r\n\t    Ctor.rounding = 1;\r\n\r\n\t    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n\t   * this Decimal.\r\n\t   *\r\n\t   * Domain: [-1, 1]\r\n\t   * Range: [0, pi]\r\n\t   *\r\n\t   * acos(x) = pi/2 - asin(x)\r\n\t   *\r\n\t   * acos(0)       = pi/2\r\n\t   * acos(-0)      = pi/2\r\n\t   * acos(1)       = 0\r\n\t   * acos(-1)      = pi\r\n\t   * acos(1/2)     = pi/3\r\n\t   * acos(-1/2)    = 2*pi/3\r\n\t   * acos(|x| > 1) = NaN\r\n\t   * acos(NaN)     = NaN\r\n\t   *\r\n\t   */\r\n\t  P.inverseCosine = P.acos = function () {\r\n\t    var halfPi,\r\n\t      x = this,\r\n\t      Ctor = x.constructor,\r\n\t      k = x.abs().cmp(1),\r\n\t      pr = Ctor.precision,\r\n\t      rm = Ctor.rounding;\r\n\r\n\t    if (k !== -1) {\r\n\t      return k === 0\r\n\t        // |x| is 1\r\n\t        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n\t        // |x| > 1 or x is NaN\r\n\t        : new Ctor(NaN);\r\n\t    }\r\n\r\n\t    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n\t    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n\t    Ctor.precision = pr + 6;\r\n\t    Ctor.rounding = 1;\r\n\r\n\t    x = x.asin();\r\n\t    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\r\n\t    return halfPi.minus(x);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n\t   * value of this Decimal.\r\n\t   *\r\n\t   * Domain: [1, Infinity]\r\n\t   * Range: [0, Infinity]\r\n\t   *\r\n\t   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n\t   *\r\n\t   * acosh(x < 1)     = NaN\r\n\t   * acosh(NaN)       = NaN\r\n\t   * acosh(Infinity)  = Infinity\r\n\t   * acosh(-Infinity) = NaN\r\n\t   * acosh(0)         = NaN\r\n\t   * acosh(-0)        = NaN\r\n\t   * acosh(1)         = 0\r\n\t   * acosh(-1)        = NaN\r\n\t   *\r\n\t   */\r\n\t  P.inverseHyperbolicCosine = P.acosh = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n\t    if (!x.isFinite()) return new Ctor(x);\r\n\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n\t    Ctor.rounding = 1;\r\n\t    external = false;\r\n\r\n\t    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n\t    external = true;\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\r\n\t    return x.ln();\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n\t   * of this Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-Infinity, Infinity]\r\n\t   *\r\n\t   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n\t   *\r\n\t   * asinh(NaN)       = NaN\r\n\t   * asinh(Infinity)  = Infinity\r\n\t   * asinh(-Infinity) = -Infinity\r\n\t   * asinh(0)         = 0\r\n\t   * asinh(-0)        = -0\r\n\t   *\r\n\t   */\r\n\t  P.inverseHyperbolicSine = P.asinh = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n\t    Ctor.rounding = 1;\r\n\t    external = false;\r\n\r\n\t    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n\t    external = true;\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\r\n\t    return x.ln();\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n\t   * value of this Decimal.\r\n\t   *\r\n\t   * Domain: [-1, 1]\r\n\t   * Range: [-Infinity, Infinity]\r\n\t   *\r\n\t   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n\t   *\r\n\t   * atanh(|x| > 1)   = NaN\r\n\t   * atanh(NaN)       = NaN\r\n\t   * atanh(Infinity)  = NaN\r\n\t   * atanh(-Infinity) = NaN\r\n\t   * atanh(0)         = 0\r\n\t   * atanh(-0)        = -0\r\n\t   * atanh(1)         = Infinity\r\n\t   * atanh(-1)        = -Infinity\r\n\t   *\r\n\t   */\r\n\t  P.inverseHyperbolicTangent = P.atanh = function () {\r\n\t    var pr, rm, wpr, xsd,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (!x.isFinite()) return new Ctor(NaN);\r\n\t    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    xsd = x.sd();\r\n\r\n\t    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n\t    Ctor.precision = wpr = xsd - x.e;\r\n\r\n\t    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n\t    Ctor.precision = pr + 4;\r\n\t    Ctor.rounding = 1;\r\n\r\n\t    x = x.ln();\r\n\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\r\n\t    return x.times(0.5);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n\t   * Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-pi/2, pi/2]\r\n\t   *\r\n\t   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n\t   *\r\n\t   * asin(0)       = 0\r\n\t   * asin(-0)      = -0\r\n\t   * asin(1/2)     = pi/6\r\n\t   * asin(-1/2)    = -pi/6\r\n\t   * asin(1)       = pi/2\r\n\t   * asin(-1)      = -pi/2\r\n\t   * asin(|x| > 1) = NaN\r\n\t   * asin(NaN)     = NaN\r\n\t   *\r\n\t   * TODO? Compare performance of Taylor series.\r\n\t   *\r\n\t   */\r\n\t  P.inverseSine = P.asin = function () {\r\n\t    var halfPi, k,\r\n\t      pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (x.isZero()) return new Ctor(x);\r\n\r\n\t    k = x.abs().cmp(1);\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\r\n\t    if (k !== -1) {\r\n\r\n\t      // |x| is 1\r\n\t      if (k === 0) {\r\n\t        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\t        halfPi.s = x.s;\r\n\t        return halfPi;\r\n\t      }\r\n\r\n\t      // |x| > 1 or x is NaN\r\n\t      return new Ctor(NaN);\r\n\t    }\r\n\r\n\t    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n\t    Ctor.precision = pr + 6;\r\n\t    Ctor.rounding = 1;\r\n\r\n\t    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\r\n\t    return x.times(2);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n\t   * of this Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-pi/2, pi/2]\r\n\t   *\r\n\t   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n\t   *\r\n\t   * atan(0)         = 0\r\n\t   * atan(-0)        = -0\r\n\t   * atan(1)         = pi/4\r\n\t   * atan(-1)        = -pi/4\r\n\t   * atan(Infinity)  = pi/2\r\n\t   * atan(-Infinity) = -pi/2\r\n\t   * atan(NaN)       = NaN\r\n\t   *\r\n\t   */\r\n\t  P.inverseTangent = P.atan = function () {\r\n\t    var i, j, k, n, px, t, r, wpr, x2,\r\n\t      x = this,\r\n\t      Ctor = x.constructor,\r\n\t      pr = Ctor.precision,\r\n\t      rm = Ctor.rounding;\r\n\r\n\t    if (!x.isFinite()) {\r\n\t      if (!x.s) return new Ctor(NaN);\r\n\t      if (pr + 4 <= PI_PRECISION) {\r\n\t        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\t        r.s = x.s;\r\n\t        return r;\r\n\t      }\r\n\t    } else if (x.isZero()) {\r\n\t      return new Ctor(x);\r\n\t    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n\t      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n\t      r.s = x.s;\r\n\t      return r;\r\n\t    }\r\n\r\n\t    Ctor.precision = wpr = pr + 10;\r\n\t    Ctor.rounding = 1;\r\n\r\n\t    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n\t    // Argument reduction\r\n\t    // Ensure |x| < 0.42\r\n\t    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n\t    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n\t    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n\t    external = false;\r\n\r\n\t    j = Math.ceil(wpr / LOG_BASE);\r\n\t    n = 1;\r\n\t    x2 = x.times(x);\r\n\t    r = new Ctor(x);\r\n\t    px = x;\r\n\r\n\t    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n\t    for (; i !== -1;) {\r\n\t      px = px.times(x2);\r\n\t      t = r.minus(px.div(n += 2));\r\n\r\n\t      px = px.times(x2);\r\n\t      r = t.plus(px.div(n += 2));\r\n\r\n\t      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n\t    }\r\n\r\n\t    if (k) r = r.times(2 << (k - 1));\r\n\r\n\t    external = true;\r\n\r\n\t    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isFinite = function () {\r\n\t    return !!this.d;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isInteger = P.isInt = function () {\r\n\t    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isNaN = function () {\r\n\t    return !this.s;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is negative, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isNegative = P.isNeg = function () {\r\n\t    return this.s < 0;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is positive, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isPositive = P.isPos = function () {\r\n\t    return this.s > 0;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isZero = function () {\r\n\t    return !!this.d && this.d[0] === 0;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.lessThan = P.lt = function (y) {\r\n\t    return this.cmp(y) < 0;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.lessThanOrEqualTo = P.lte = function (y) {\r\n\t    return this.cmp(y) < 1;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * If no base is specified, return log[10](arg).\r\n\t   *\r\n\t   * log[base](arg) = ln(arg) / ln(base)\r\n\t   *\r\n\t   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n\t   * otherwise:\r\n\t   *\r\n\t   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n\t   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n\t   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n\t   *\r\n\t   * log[-b](a)       = NaN\r\n\t   * log[0](a)        = NaN\r\n\t   * log[1](a)        = NaN\r\n\t   * log[NaN](a)      = NaN\r\n\t   * log[Infinity](a) = NaN\r\n\t   * log[b](0)        = -Infinity\r\n\t   * log[b](-0)       = -Infinity\r\n\t   * log[b](-a)       = NaN\r\n\t   * log[b](1)        = 0\r\n\t   * log[b](Infinity) = Infinity\r\n\t   * log[b](NaN)      = NaN\r\n\t   *\r\n\t   * [base] {number|string|Decimal} The base of the logarithm.\r\n\t   *\r\n\t   */\r\n\t  P.logarithm = P.log = function (base) {\r\n\t    var isBase10, d, denominator, k, inf, num, sd, r,\r\n\t      arg = this,\r\n\t      Ctor = arg.constructor,\r\n\t      pr = Ctor.precision,\r\n\t      rm = Ctor.rounding,\r\n\t      guard = 5;\r\n\r\n\t    // Default base is 10.\r\n\t    if (base == null) {\r\n\t      base = new Ctor(10);\r\n\t      isBase10 = true;\r\n\t    } else {\r\n\t      base = new Ctor(base);\r\n\t      d = base.d;\r\n\r\n\t      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n\t      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n\t      isBase10 = base.eq(10);\r\n\t    }\r\n\r\n\t    d = arg.d;\r\n\r\n\t    // Is arg negative, non-finite, 0 or 1?\r\n\t    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n\t      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n\t    }\r\n\r\n\t    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n\t    // integer power of 10.\r\n\t    if (isBase10) {\r\n\t      if (d.length > 1) {\r\n\t        inf = true;\r\n\t      } else {\r\n\t        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n\t        inf = k !== 1;\r\n\t      }\r\n\t    }\r\n\r\n\t    external = false;\r\n\t    sd = pr + guard;\r\n\t    num = naturalLogarithm(arg, sd);\r\n\t    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n\t    // The result will have 5 rounding digits.\r\n\t    r = divide(num, denominator, sd, 1);\r\n\r\n\t    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n\t    // calculate 10 further digits.\r\n\t    //\r\n\t    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n\t    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n\t    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n\t    // Also assume the result is exact if the last 14 are zero.\r\n\t    //\r\n\t    // Example of a result that will be incorrectly rounded:\r\n\t    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n\t    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n\t    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n\t    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n\t    // place is still 2.6.\r\n\t    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n\t      do {\r\n\t        sd += 10;\r\n\t        num = naturalLogarithm(arg, sd);\r\n\t        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\t        r = divide(num, denominator, sd, 1);\r\n\r\n\t        if (!inf) {\r\n\r\n\t          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n\t          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n\t            r = finalise(r, pr + 1, 0);\r\n\t          }\r\n\r\n\t          break;\r\n\t        }\r\n\t      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n\t    }\r\n\r\n\t    external = true;\r\n\r\n\t    return finalise(r, pr, rm);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n\t   *\r\n\t   * arguments {number|string|Decimal}\r\n\t   *\r\n\t  P.max = function () {\r\n\t    Array.prototype.push.call(arguments, this);\r\n\t    return maxOrMin(this.constructor, arguments, 'lt');\r\n\t  };\r\n\t   */\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n\t   *\r\n\t   * arguments {number|string|Decimal}\r\n\t   *\r\n\t  P.min = function () {\r\n\t    Array.prototype.push.call(arguments, this);\r\n\t    return maxOrMin(this.constructor, arguments, 'gt');\r\n\t  };\r\n\t   */\r\n\r\n\r\n\t  /*\r\n\t   *  n - 0 = n\r\n\t   *  n - N = N\r\n\t   *  n - I = -I\r\n\t   *  0 - n = -n\r\n\t   *  0 - 0 = 0\r\n\t   *  0 - N = N\r\n\t   *  0 - I = -I\r\n\t   *  N - n = N\r\n\t   *  N - 0 = N\r\n\t   *  N - N = N\r\n\t   *  N - I = N\r\n\t   *  I - n = I\r\n\t   *  I - 0 = I\r\n\t   *  I - N = N\r\n\t   *  I - I = N\r\n\t   *\r\n\t   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.minus = P.sub = function (y) {\r\n\t    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    y = new Ctor(y);\r\n\r\n\t    // If either is not finite...\r\n\t    if (!x.d || !y.d) {\r\n\r\n\t      // Return NaN if either is NaN.\r\n\t      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n\t      // Return y negated if x is finite and y is ±Infinity.\r\n\t      else if (x.d) y.s = -y.s;\r\n\r\n\t      // Return x if y is finite and x is ±Infinity.\r\n\t      // Return x if both are ±Infinity with different signs.\r\n\t      // Return NaN if both are ±Infinity with the same sign.\r\n\t      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n\t      return y;\r\n\t    }\r\n\r\n\t    // If signs differ...\r\n\t    if (x.s != y.s) {\r\n\t      y.s = -y.s;\r\n\t      return x.plus(y);\r\n\t    }\r\n\r\n\t    xd = x.d;\r\n\t    yd = y.d;\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\r\n\t    // If either is zero...\r\n\t    if (!xd[0] || !yd[0]) {\r\n\r\n\t      // Return y negated if x is zero and y is non-zero.\r\n\t      if (yd[0]) y.s = -y.s;\r\n\r\n\t      // Return x if y is zero and x is non-zero.\r\n\t      else if (xd[0]) y = new Ctor(x);\r\n\r\n\t      // Return zero if both are zero.\r\n\t      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n\t      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n\t      return external ? finalise(y, pr, rm) : y;\r\n\t    }\r\n\r\n\t    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n\t    // Calculate base 1e7 exponents.\r\n\t    e = mathfloor(y.e / LOG_BASE);\r\n\t    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n\t    xd = xd.slice();\r\n\t    k = xe - e;\r\n\r\n\t    // If base 1e7 exponents differ...\r\n\t    if (k) {\r\n\t      xLTy = k < 0;\r\n\r\n\t      if (xLTy) {\r\n\t        d = xd;\r\n\t        k = -k;\r\n\t        len = yd.length;\r\n\t      } else {\r\n\t        d = yd;\r\n\t        e = xe;\r\n\t        len = xd.length;\r\n\t      }\r\n\r\n\t      // Numbers with massively different exponents would result in a very high number of\r\n\t      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n\t      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n\t      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n\t      if (k > i) {\r\n\t        k = i;\r\n\t        d.length = 1;\r\n\t      }\r\n\r\n\t      // Prepend zeros to equalise exponents.\r\n\t      d.reverse();\r\n\t      for (i = k; i--;) d.push(0);\r\n\t      d.reverse();\r\n\r\n\t    // Base 1e7 exponents equal.\r\n\t    } else {\r\n\r\n\t      // Check digits to determine which is the bigger number.\r\n\r\n\t      i = xd.length;\r\n\t      len = yd.length;\r\n\t      xLTy = i < len;\r\n\t      if (xLTy) len = i;\r\n\r\n\t      for (i = 0; i < len; i++) {\r\n\t        if (xd[i] != yd[i]) {\r\n\t          xLTy = xd[i] < yd[i];\r\n\t          break;\r\n\t        }\r\n\t      }\r\n\r\n\t      k = 0;\r\n\t    }\r\n\r\n\t    if (xLTy) {\r\n\t      d = xd;\r\n\t      xd = yd;\r\n\t      yd = d;\r\n\t      y.s = -y.s;\r\n\t    }\r\n\r\n\t    len = xd.length;\r\n\r\n\t    // Append zeros to `xd` if shorter.\r\n\t    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n\t    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n\t    // Subtract yd from xd.\r\n\t    for (i = yd.length; i > k;) {\r\n\r\n\t      if (xd[--i] < yd[i]) {\r\n\t        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n\t        --xd[j];\r\n\t        xd[i] += BASE;\r\n\t      }\r\n\r\n\t      xd[i] -= yd[i];\r\n\t    }\r\n\r\n\t    // Remove trailing zeros.\r\n\t    for (; xd[--len] === 0;) xd.pop();\r\n\r\n\t    // Remove leading zeros and adjust exponent accordingly.\r\n\t    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n\t    // Zero?\r\n\t    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n\t    y.d = xd;\r\n\t    y.e = getBase10Exponent(xd, e);\r\n\r\n\t    return external ? finalise(y, pr, rm) : y;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   *   n % 0 =  N\r\n\t   *   n % N =  N\r\n\t   *   n % I =  n\r\n\t   *   0 % n =  0\r\n\t   *  -0 % n = -0\r\n\t   *   0 % 0 =  N\r\n\t   *   0 % N =  N\r\n\t   *   0 % I =  0\r\n\t   *   N % n =  N\r\n\t   *   N % 0 =  N\r\n\t   *   N % N =  N\r\n\t   *   N % I =  N\r\n\t   *   I % n =  N\r\n\t   *   I % 0 =  N\r\n\t   *   I % N =  N\r\n\t   *   I % I =  N\r\n\t   *\r\n\t   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * The result depends on the modulo mode.\r\n\t   *\r\n\t   */\r\n\t  P.modulo = P.mod = function (y) {\r\n\t    var q,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    y = new Ctor(y);\r\n\r\n\t    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n\t    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n\t    // Return x if y is ±Infinity or x is ±0.\r\n\t    if (!y.d || x.d && !x.d[0]) {\r\n\t      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n\t    }\r\n\r\n\t    // Prevent rounding of intermediate calculations.\r\n\t    external = false;\r\n\r\n\t    if (Ctor.modulo == 9) {\r\n\r\n\t      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n\t      // result = x - q * y    where  0 <= result < abs(y)\r\n\t      q = divide(x, y.abs(), 0, 3, 1);\r\n\t      q.s *= y.s;\r\n\t    } else {\r\n\t      q = divide(x, y, 0, Ctor.modulo, 1);\r\n\t    }\r\n\r\n\t    q = q.times(y);\r\n\r\n\t    external = true;\r\n\r\n\t    return x.minus(q);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n\t   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.naturalExponential = P.exp = function () {\r\n\t    return naturalExponential(this);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n\t   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.naturalLogarithm = P.ln = function () {\r\n\t    return naturalLogarithm(this);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n\t   * -1.\r\n\t   *\r\n\t   */\r\n\t  P.negated = P.neg = function () {\r\n\t    var x = new this.constructor(this);\r\n\t    x.s = -x.s;\r\n\t    return finalise(x);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   *  n + 0 = n\r\n\t   *  n + N = N\r\n\t   *  n + I = I\r\n\t   *  0 + n = n\r\n\t   *  0 + 0 = 0\r\n\t   *  0 + N = N\r\n\t   *  0 + I = I\r\n\t   *  N + n = N\r\n\t   *  N + 0 = N\r\n\t   *  N + N = N\r\n\t   *  N + I = N\r\n\t   *  I + n = I\r\n\t   *  I + 0 = I\r\n\t   *  I + N = N\r\n\t   *  I + I = I\r\n\t   *\r\n\t   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.plus = P.add = function (y) {\r\n\t    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    y = new Ctor(y);\r\n\r\n\t    // If either is not finite...\r\n\t    if (!x.d || !y.d) {\r\n\r\n\t      // Return NaN if either is NaN.\r\n\t      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n\t      // Return x if y is finite and x is ±Infinity.\r\n\t      // Return x if both are ±Infinity with the same sign.\r\n\t      // Return NaN if both are ±Infinity with different signs.\r\n\t      // Return y if x is finite and y is ±Infinity.\r\n\t      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n\t      return y;\r\n\t    }\r\n\r\n\t     // If signs differ...\r\n\t    if (x.s != y.s) {\r\n\t      y.s = -y.s;\r\n\t      return x.minus(y);\r\n\t    }\r\n\r\n\t    xd = x.d;\r\n\t    yd = y.d;\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\r\n\t    // If either is zero...\r\n\t    if (!xd[0] || !yd[0]) {\r\n\r\n\t      // Return x if y is zero.\r\n\t      // Return y if y is non-zero.\r\n\t      if (!yd[0]) y = new Ctor(x);\r\n\r\n\t      return external ? finalise(y, pr, rm) : y;\r\n\t    }\r\n\r\n\t    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n\t    // Calculate base 1e7 exponents.\r\n\t    k = mathfloor(x.e / LOG_BASE);\r\n\t    e = mathfloor(y.e / LOG_BASE);\r\n\r\n\t    xd = xd.slice();\r\n\t    i = k - e;\r\n\r\n\t    // If base 1e7 exponents differ...\r\n\t    if (i) {\r\n\r\n\t      if (i < 0) {\r\n\t        d = xd;\r\n\t        i = -i;\r\n\t        len = yd.length;\r\n\t      } else {\r\n\t        d = yd;\r\n\t        e = k;\r\n\t        len = xd.length;\r\n\t      }\r\n\r\n\t      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n\t      k = Math.ceil(pr / LOG_BASE);\r\n\t      len = k > len ? k + 1 : len + 1;\r\n\r\n\t      if (i > len) {\r\n\t        i = len;\r\n\t        d.length = 1;\r\n\t      }\r\n\r\n\t      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n\t      d.reverse();\r\n\t      for (; i--;) d.push(0);\r\n\t      d.reverse();\r\n\t    }\r\n\r\n\t    len = xd.length;\r\n\t    i = yd.length;\r\n\r\n\t    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n\t    if (len - i < 0) {\r\n\t      i = len;\r\n\t      d = yd;\r\n\t      yd = xd;\r\n\t      xd = d;\r\n\t    }\r\n\r\n\t    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n\t    for (carry = 0; i;) {\r\n\t      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n\t      xd[i] %= BASE;\r\n\t    }\r\n\r\n\t    if (carry) {\r\n\t      xd.unshift(carry);\r\n\t      ++e;\r\n\t    }\r\n\r\n\t    // Remove trailing zeros.\r\n\t    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\t    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n\t    y.d = xd;\r\n\t    y.e = getBase10Exponent(xd, e);\r\n\r\n\t    return external ? finalise(y, pr, rm) : y;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return the number of significant digits of the value of this Decimal.\r\n\t   *\r\n\t   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n\t   *\r\n\t   */\r\n\t  P.precision = P.sd = function (z) {\r\n\t    var k,\r\n\t      x = this;\r\n\r\n\t    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n\t    if (x.d) {\r\n\t      k = getPrecision(x.d);\r\n\t      if (z && x.e + 1 > k) k = x.e + 1;\r\n\t    } else {\r\n\t      k = NaN;\r\n\t    }\r\n\r\n\t    return k;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n\t   * rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.round = function () {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-1, 1]\r\n\t   *\r\n\t   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n\t   *\r\n\t   * sin(0)         = 0\r\n\t   * sin(-0)        = -0\r\n\t   * sin(Infinity)  = NaN\r\n\t   * sin(-Infinity) = NaN\r\n\t   * sin(NaN)       = NaN\r\n\t   *\r\n\t   */\r\n\t  P.sine = P.sin = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (!x.isFinite()) return new Ctor(NaN);\r\n\t    if (x.isZero()) return new Ctor(x);\r\n\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n\t    Ctor.rounding = 1;\r\n\r\n\t    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\r\n\t    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   *  sqrt(-n) =  N\r\n\t   *  sqrt(N)  =  N\r\n\t   *  sqrt(-I) =  N\r\n\t   *  sqrt(I)  =  I\r\n\t   *  sqrt(0)  =  0\r\n\t   *  sqrt(-0) = -0\r\n\t   *\r\n\t   */\r\n\t  P.squareRoot = P.sqrt = function () {\r\n\t    var m, n, sd, r, rep, t,\r\n\t      x = this,\r\n\t      d = x.d,\r\n\t      e = x.e,\r\n\t      s = x.s,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    // Negative/NaN/Infinity/zero?\r\n\t    if (s !== 1 || !d || !d[0]) {\r\n\t      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n\t    }\r\n\r\n\t    external = false;\r\n\r\n\t    // Initial estimate.\r\n\t    s = Math.sqrt(+x);\r\n\r\n\t    // Math.sqrt underflow/overflow?\r\n\t    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n\t    if (s == 0 || s == 1 / 0) {\r\n\t      n = digitsToString(d);\r\n\r\n\t      if ((n.length + e) % 2 == 0) n += '0';\r\n\t      s = Math.sqrt(n);\r\n\t      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n\t      if (s == 1 / 0) {\r\n\t        n = '1e' + e;\r\n\t      } else {\r\n\t        n = s.toExponential();\r\n\t        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n\t      }\r\n\r\n\t      r = new Ctor(n);\r\n\t    } else {\r\n\t      r = new Ctor(s.toString());\r\n\t    }\r\n\r\n\t    sd = (e = Ctor.precision) + 3;\r\n\r\n\t    // Newton-Raphson iteration.\r\n\t    for (;;) {\r\n\t      t = r;\r\n\t      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n\t      // TODO? Replace with for-loop and checkRoundingDigits.\r\n\t      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n\t        n = n.slice(sd - 3, sd + 1);\r\n\r\n\t        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n\t        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n\t        if (n == '9999' || !rep && n == '4999') {\r\n\r\n\t          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n\t          // nines may infinitely repeat.\r\n\t          if (!rep) {\r\n\t            finalise(t, e + 1, 0);\r\n\r\n\t            if (t.times(t).eq(x)) {\r\n\t              r = t;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\r\n\t          sd += 4;\r\n\t          rep = 1;\r\n\t        } else {\r\n\r\n\t          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n\t          // If not, then there are further digits and m will be truthy.\r\n\t          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n\t            // Truncate to the first rounding digit.\r\n\t            finalise(r, e + 1, 1);\r\n\t            m = !r.times(r).eq(x);\r\n\t          }\r\n\r\n\t          break;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\r\n\t    external = true;\r\n\r\n\t    return finalise(r, e, Ctor.rounding, m);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-Infinity, Infinity]\r\n\t   *\r\n\t   * tan(0)         = 0\r\n\t   * tan(-0)        = -0\r\n\t   * tan(Infinity)  = NaN\r\n\t   * tan(-Infinity) = NaN\r\n\t   * tan(NaN)       = NaN\r\n\t   *\r\n\t   */\r\n\t  P.tangent = P.tan = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (!x.isFinite()) return new Ctor(NaN);\r\n\t    if (x.isZero()) return new Ctor(x);\r\n\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + 10;\r\n\t    Ctor.rounding = 1;\r\n\r\n\t    x = x.sin();\r\n\t    x.s = 1;\r\n\t    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\r\n\t    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   *  n * 0 = 0\r\n\t   *  n * N = N\r\n\t   *  n * I = I\r\n\t   *  0 * n = 0\r\n\t   *  0 * 0 = 0\r\n\t   *  0 * N = N\r\n\t   *  0 * I = N\r\n\t   *  N * n = N\r\n\t   *  N * 0 = N\r\n\t   *  N * N = N\r\n\t   *  N * I = N\r\n\t   *  I * n = I\r\n\t   *  I * 0 = N\r\n\t   *  I * N = N\r\n\t   *  I * I = I\r\n\t   *\r\n\t   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.times = P.mul = function (y) {\r\n\t    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n\t      x = this,\r\n\t      Ctor = x.constructor,\r\n\t      xd = x.d,\r\n\t      yd = (y = new Ctor(y)).d;\r\n\r\n\t    y.s *= x.s;\r\n\r\n\t     // If either is NaN, ±Infinity or ±0...\r\n\t    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n\t      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n\t        // Return NaN if either is NaN.\r\n\t        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n\t        ? NaN\r\n\r\n\t        // Return ±Infinity if either is ±Infinity.\r\n\t        // Return ±0 if either is ±0.\r\n\t        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n\t    }\r\n\r\n\t    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n\t    xdL = xd.length;\r\n\t    ydL = yd.length;\r\n\r\n\t    // Ensure xd points to the longer array.\r\n\t    if (xdL < ydL) {\r\n\t      r = xd;\r\n\t      xd = yd;\r\n\t      yd = r;\r\n\t      rL = xdL;\r\n\t      xdL = ydL;\r\n\t      ydL = rL;\r\n\t    }\r\n\r\n\t    // Initialise the result array with zeros.\r\n\t    r = [];\r\n\t    rL = xdL + ydL;\r\n\t    for (i = rL; i--;) r.push(0);\r\n\r\n\t    // Multiply!\r\n\t    for (i = ydL; --i >= 0;) {\r\n\t      carry = 0;\r\n\t      for (k = xdL + i; k > i;) {\r\n\t        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n\t        r[k--] = t % BASE | 0;\r\n\t        carry = t / BASE | 0;\r\n\t      }\r\n\r\n\t      r[k] = (r[k] + carry) % BASE | 0;\r\n\t    }\r\n\r\n\t    // Remove trailing zeros.\r\n\t    for (; !r[--rL];) r.pop();\r\n\r\n\t    if (carry) ++e;\r\n\t    else r.shift();\r\n\r\n\t    // Remove trailing zeros.\r\n\t    for (i = r.length; !r[--i];) r.pop();\r\n\r\n\t    y.d = r;\r\n\t    y.e = getBase10Exponent(r, e);\r\n\r\n\t    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n\t   * digits using rounding mode `rm`.\r\n\t   *\r\n\t   * If the optional `sd` argument is present then return binary exponential notation.\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toBinary = function (sd, rm) {\r\n\t    return toStringBinary(this, 2, sd, rm);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n\t   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n\t   *\r\n\t   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n\t   *\r\n\t   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    x = new Ctor(x);\r\n\t    if (dp === void 0) return x;\r\n\r\n\t    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n\t    if (rm === void 0) rm = Ctor.rounding;\r\n\t    else checkInt32(rm, 0, 8);\r\n\r\n\t    return finalise(x, dp + x.e + 1, rm);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n\t   * `dp` fixed decimal places using rounding mode `rounding`.\r\n\t   *\r\n\t   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toExponential = function (dp, rm) {\r\n\t    var str,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (dp === void 0) {\r\n\t      str = finiteToString(x, true);\r\n\t    } else {\r\n\t      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n\t      if (rm === void 0) rm = Ctor.rounding;\r\n\t      else checkInt32(rm, 0, 8);\r\n\r\n\t      x = finalise(new Ctor(x), dp + 1, rm);\r\n\t      str = finiteToString(x, true, dp + 1);\r\n\t    }\r\n\r\n\t    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n\t   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n\t   * omitted.\r\n\t   *\r\n\t   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n\t   *\r\n\t   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n\t   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n\t   * (-0).toFixed(3) is '0.000'.\r\n\t   * (-0.5).toFixed(0) is '-0'.\r\n\t   *\r\n\t   */\r\n\t  P.toFixed = function (dp, rm) {\r\n\t    var str, y,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (dp === void 0) {\r\n\t      str = finiteToString(x);\r\n\t    } else {\r\n\t      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n\t      if (rm === void 0) rm = Ctor.rounding;\r\n\t      else checkInt32(rm, 0, 8);\r\n\r\n\t      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n\t      str = finiteToString(y, false, dp + y.e + 1);\r\n\t    }\r\n\r\n\t    // To determine whether to add the minus sign look at the value before it was rounded,\r\n\t    // i.e. look at `x` rather than `y`.\r\n\t    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n\t   * numerator and an integer denominator.\r\n\t   *\r\n\t   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n\t   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n\t   * value necessary to represent the number exactly.\r\n\t   *\r\n\t   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n\t   *\r\n\t   */\r\n\t  P.toFraction = function (maxD) {\r\n\t    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n\t      x = this,\r\n\t      xd = x.d,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (!xd) return new Ctor(x);\r\n\r\n\t    n1 = d0 = new Ctor(1);\r\n\t    d1 = n0 = new Ctor(0);\r\n\r\n\t    d = new Ctor(d1);\r\n\t    e = d.e = getPrecision(xd) - x.e - 1;\r\n\t    k = e % LOG_BASE;\r\n\t    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n\t    if (maxD == null) {\r\n\r\n\t      // d is 10**e, the minimum max-denominator needed.\r\n\t      maxD = e > 0 ? d : n1;\r\n\t    } else {\r\n\t      n = new Ctor(maxD);\r\n\t      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n\t      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n\t    }\r\n\r\n\t    external = false;\r\n\t    n = new Ctor(digitsToString(xd));\r\n\t    pr = Ctor.precision;\r\n\t    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n\t    for (;;)  {\r\n\t      q = divide(n, d, 0, 1, 1);\r\n\t      d2 = d0.plus(q.times(d1));\r\n\t      if (d2.cmp(maxD) == 1) break;\r\n\t      d0 = d1;\r\n\t      d1 = d2;\r\n\t      d2 = n1;\r\n\t      n1 = n0.plus(q.times(d2));\r\n\t      n0 = d2;\r\n\t      d2 = d;\r\n\t      d = n.minus(q.times(d2));\r\n\t      n = d2;\r\n\t    }\r\n\r\n\t    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n\t    n0 = n0.plus(d2.times(n1));\r\n\t    d0 = d0.plus(d2.times(d1));\r\n\t    n0.s = n1.s = x.s;\r\n\r\n\t    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n\t    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n\t        ? [n1, d1] : [n0, d0];\r\n\r\n\t    Ctor.precision = pr;\r\n\t    external = true;\r\n\r\n\t    return r;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n\t   * digits using rounding mode `rm`.\r\n\t   *\r\n\t   * If the optional `sd` argument is present then return binary exponential notation.\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n\t    return toStringBinary(this, 16, sd, rm);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a string representing the exact value of this Decimal in a compact base-88 based format.\r\n\t   *\r\n\t   * The number of characters of the string will always be equal to or less than the number of\r\n\t   * characters returned by `toString` or `toExponential` - usually just over half as many.\r\n\t   *\r\n\t   * The original Decimal value can be recreated by passing the string to `Decimal.fromJSON`.\r\n\t   *\r\n\t   * Base 88 alphabet:\r\n\t   * 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./:;=?@[]^_`{|}~\r\n\t   *\r\n\t   * The following 7 printable ASCII characters are not used\r\n\t   * (space) \\ \" & ' < >\r\n\t   * so the return value is safe for strings, HTML, JSON, and XML.\r\n\t   *\r\n\t   *     0   0     g  16    w  32    M  48    $  64    ]  80\r\n\t   *     1   1     h  17    x  33    N  49    %  65    ^  81\r\n\t   *     2   2     i  18    y  34    O  50    (  66    _  82\r\n\t   *     3   3     j  19    z  35    P  51    )  67    `  83\r\n\t   *     4   4     k  20    A  36    Q  52    *  68    {  84\r\n\t   *     5   5     l  21    B  37    R  53    +  69    |  85\r\n\t   *     6   6     m  22    C  38    S  54    ,  70    }  86\r\n\t   *     7   7     n  23    D  39    T  55    -  71    ~  87\r\n\t   *     8   8     o  24    E  40    U  56    .  72\r\n\t   *     9   9     p  25    F  41    V  57    /  73\r\n\t   *     a  10     q  26    G  42    W  58    :  74\r\n\t   *     b  11     r  27    H  43    X  59    ;  75\r\n\t   *     c  12     s  28    I  44    Y  60    =  76\r\n\t   *     d  13     t  29    J  45    Z  61    ?  77\r\n\t   *     e  14     u  30    K  46    !  62    @  78\r\n\t   *     f  15     v  31    L  47    #  63    [  79\r\n\t   *\r\n\t   * If the return value is just one character, it represents:\r\n\t   * 0-81  [[0, 40][-0, -40]]\r\n\t   * 82    -Infinity\r\n\t   * 83    +Infinity\r\n\t   * 84    NaN\r\n\t   * 85-87 free\r\n\t   *\r\n\t   *   64 32 16  8  4  2  1\r\n\t   *    1  0  1  0  1  1  1 = 87\r\n\t   *\r\n\t   */\r\n\t   P.toJSON = function () {\r\n\t    var arr, e, i, k, len, n, r, str,\r\n\t      x = this,\r\n\t      isNeg = x.s < 0;\r\n\r\n\t    // -Infinity/Infinity/NaN.\r\n\t    if (!x.d) return NUMERALS.charAt(x.s ? isNeg ? 82 : 83 : 84);\r\n\t    e = x.e;\r\n\r\n\t    // Small integer.\r\n\t    if (x.d.length === 1 && e < 4 && e >= 0) {\r\n\t      n = x.d[0];\r\n\r\n\t      if (n < 2857) {\r\n\r\n\t        // One character.\r\n\t        // [[0, 40][-0, -40]]\r\n\t        if (n < 41) return NUMERALS.charAt(isNeg ? n + 41 : n);\r\n\r\n\t        // Two characters. High bit of first character unset.\r\n\t        // 0XXXXXX\r\n\t        // 63*88 + 87 = 5631 = 5632 values, 5632/2 = 2816\r\n\t        // [[0, 2815][2816, 5631]]  (2816 * 2 = 5632 values)\r\n\t        // [[0, 2815][-0, -2815]]\r\n\t        // [[41, 2856][-41, -2856]]\r\n\t        n -= 41;\r\n\t        if (isNeg) n += 2816;\r\n\t        k = n / 88 | 0;\r\n\r\n\t        return NUMERALS.charAt(k) + NUMERALS.charAt(n - k * 88);\r\n\t      }\r\n\t    }\r\n\r\n\t    str = digitsToString(x.d);\r\n\t    r = '';\r\n\r\n\t    // Values with a small exponent. Set high bit.\r\n\t    // Positive value: 100XXXX\r\n\t    // 1 0 0 {exponent [0, 15] -> [-7, 8]}\r\n\t    if (!isNeg && e <= 8 && e >= -7) {\r\n\t      k = 64 + e + 7;\r\n\r\n\t    // Negative value: 1010XXX\r\n\t    // 1 0 1 0 {exponent [0, 7] -> [-3, 4]}\r\n\t    } else if (isNeg && e <= 4 && e >= -3) {\r\n\t      k = 64 + 16 + e + 3;\r\n\r\n\t    // Integer without trailing zeros: 0X00000\r\n\t    // 0 {is negative} 0 0 0 0 0\r\n\t    } else if (str.length === e + 1) {\r\n\t      k = 32 * isNeg;\r\n\r\n\t    // All remaining values: 0XXXXXX\r\n\t    // Result will have at least 3 characters.\r\n\t    // 0 {is negative} {is exponent negative} {exponent character count [1, 15]}\r\n\t    } else {\r\n\t      k = 32 * isNeg + 16 * (e < 0);\r\n\t      e = Math.abs(e);\r\n\r\n\t      // One character to represent the exponent.\r\n\t      if (e < 88)  {\r\n\t        k += 1;\r\n\t        r = NUMERALS.charAt(e);\r\n\r\n\t      // Two characters to represent the exponent.\r\n\t      // 87*88 + 87 = 7743\r\n\t      } else if (e < 7744) {\r\n\t        k += 2;\r\n\t        n = e / 88 | 0;\r\n\t        r = NUMERALS.charAt(n) + NUMERALS.charAt(e - n * 88);\r\n\r\n\t      // More than two characters to represent the exponent.\r\n\t      } else {\r\n\t        arr = convertBase(String(e), 10, 88);\r\n\t        len = arr.length;\r\n\t        k += len;\r\n\t        for (i = 0; i < len; i++) r += NUMERALS.charAt(arr[i]);\r\n\t      }\r\n\t    }\r\n\r\n\t    // At this point r contains the characters in base 88 representing the exponent value.\r\n\t    // Prepend the first character, which describes the sign, the exponent sign, and the number of\r\n\t    // characters that follow which represent the exponent value.\r\n\t    r = NUMERALS.charAt(k) + r;\r\n\t    arr = convertBase(str, 10, 88);\r\n\t    len = arr.length;\r\n\r\n\t    // Add the base 88 characters that represent the significand.\r\n\t    for (i = 0; i < len; i++) r += NUMERALS.charAt(arr[i]);\r\n\r\n\t    return r;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value\r\n\t   * of this Decimal.\r\n\t   *\r\n\t   * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,\r\n\t   * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.\r\n\t   *\r\n\t   * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0\r\n\t   * (ROUND_UP), and so on.\r\n\t   *\r\n\t   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n\t   * or `y` is NaN, in which case the return value will be also be NaN.\r\n\t   *\r\n\t   * The return value is not affected by the value of `precision`.\r\n\t   *\r\n\t   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   * 'toNearest() rounding mode not an integer: {rm}'\r\n\t   * 'toNearest() rounding mode out of range: {rm}'\r\n\t   *\r\n\t   */\r\n\t  P.toNearest = function (y, rm) {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    x = new Ctor(x);\r\n\r\n\t    if (y == null) {\r\n\r\n\t      // If x is not finite, return x.\r\n\t      if (!x.d) return x;\r\n\r\n\t      y = new Ctor(1);\r\n\t      rm = Ctor.rounding;\r\n\t    } else {\r\n\t      y = new Ctor(y);\r\n\t      if (rm !== void 0) checkInt32(rm, 0, 8);\r\n\r\n\t      // If x is not finite, return x if y is not NaN, else NaN.\r\n\t      if (!x.d) return y.s ? x : y;\r\n\r\n\t      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n\t      if (!y.d) {\r\n\t        if (y.s) y.s = x.s;\r\n\t        return y;\r\n\t      }\r\n\t    }\r\n\r\n\t    // If y is not zero, calculate the nearest multiple of y to x.\r\n\t    if (y.d[0]) {\r\n\t      external = false;\r\n\t      if (rm < 4) rm = [4, 5, 7, 8][rm];\r\n\t      x = divide(x, y, 0, rm, 1).times(y);\r\n\t      external = true;\r\n\t      finalise(x);\r\n\r\n\t    // If y is zero, return zero with the sign of x.\r\n\t    } else {\r\n\t      y.s = x.s;\r\n\t      x = y;\r\n\t    }\r\n\r\n\t    return x;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return the value of this Decimal converted to a number primitive.\r\n\t   * Zero keeps its sign.\r\n\t   *\r\n\t   */\r\n\t  P.toNumber = function () {\r\n\t    return +this;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n\t   * digits using rounding mode `rm`.\r\n\t   *\r\n\t   * If the optional `sd` argument is present then return binary exponential notation.\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toOctal = function (sd, rm) {\r\n\t    return toStringBinary(this, 8, sd, rm);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n\t   * to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * ECMAScript compliant.\r\n\t   *\r\n\t   *   pow(x, NaN)                           = NaN\r\n\t   *   pow(x, ±0)                            = 1\r\n\r\n\t   *   pow(NaN, non-zero)                    = NaN\r\n\t   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n\t   *   pow(abs(x) > 1, -Infinity)            = +0\r\n\t   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n\t   *   pow(abs(x) < 1, +Infinity)            = +0\r\n\t   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n\t   *   pow(+Infinity, y > 0)                 = +Infinity\r\n\t   *   pow(+Infinity, y < 0)                 = +0\r\n\t   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n\t   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n\t   *   pow(-Infinity, odd integer < 0)       = -0\r\n\t   *   pow(-Infinity, even integer < 0)      = +0\r\n\t   *   pow(+0, y > 0)                        = +0\r\n\t   *   pow(+0, y < 0)                        = +Infinity\r\n\t   *   pow(-0, odd integer > 0)              = -0\r\n\t   *   pow(-0, even integer > 0)             = +0\r\n\t   *   pow(-0, odd integer < 0)              = -Infinity\r\n\t   *   pow(-0, even integer < 0)             = +Infinity\r\n\t   *   pow(finite x < 0, finite non-integer) = NaN\r\n\t   *\r\n\t   * For non-integer or very large exponents pow(x, y) is calculated using\r\n\t   *\r\n\t   *   x^y = exp(y*ln(x))\r\n\t   *\r\n\t   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n\t   * probability of an incorrectly rounded result\r\n\t   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n\t   * i.e. 1 in 250,000,000,000,000\r\n\t   *\r\n\t   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n\t   *\r\n\t   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n\t   *\r\n\t   */\r\n\t  P.toPower = P.pow = function (y) {\r\n\t    var e, k, pr, r, rm, sign, yIsInt,\r\n\t      x = this,\r\n\t      Ctor = x.constructor,\r\n\t      yn = +(y = new Ctor(y));\r\n\r\n\t    // Either ±Infinity, NaN or ±0?\r\n\t    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return  new Ctor(mathpow(+x, yn));\r\n\r\n\t    x = new Ctor(x);\r\n\r\n\t    if (x.eq(1)) return x;\r\n\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\r\n\t    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n\t    e = mathfloor(y.e / LOG_BASE);\r\n\t    k = y.d.length - 1;\r\n\t    yIsInt = e >= k;\r\n\t    sign = x.s;\r\n\r\n\t    if (!yIsInt) {\r\n\t      if (sign < 0) return new Ctor(NaN);\r\n\r\n\t    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n\t    } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n\t      r = intPow(Ctor, x, k, pr);\r\n\t      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n\t    }\r\n\r\n\t    // Result is negative if x is negative and the last digit of integer y is odd.\r\n\t    sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n\t    // Estimate result exponent.\r\n\t    // x^y = 10^e,  where e = y * log10(x)\r\n\t    // log10(x) = log10(x_significand) + x_exponent\r\n\t    // log10(x_significand) = ln(x_significand) / ln(10)\r\n\t    k = mathpow(+x, yn);\r\n\t    e = k == 0 || !isFinite(k)\r\n\t      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n\t      : new Ctor(k + '').e;\r\n\r\n\t    // Estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n\t    // Overflow/underflow?\r\n\t    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? sign / 0 : 0);\r\n\r\n\t    external = false;\r\n\t    Ctor.rounding = x.s = 1;\r\n\r\n\t    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n\t    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n\t    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n\t    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n\t    k = Math.min(12, (e + '').length);\r\n\r\n\t    // r = x^y = exp(y*ln(x))\r\n\t    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n\t    // Truncate to the required precision plus five rounding digits.\r\n\t    r = finalise(r, pr + 5, 1);\r\n\r\n\t    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n\t    // the result.\r\n\t    if (checkRoundingDigits(r.d, pr, rm)) {\r\n\t      e = pr + 10;\r\n\r\n\t      // Truncate to the increased precision plus five rounding digits.\r\n\t      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n\t      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n\t      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n\t        r = finalise(r, pr + 1, 0);\r\n\t      }\r\n\t    }\r\n\r\n\t    r.s = sign;\r\n\t    external = true;\r\n\t    Ctor.rounding = rm;\r\n\r\n\t    return finalise(r, pr, rm);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n\t   * using rounding mode `rounding`.\r\n\t   *\r\n\t   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n\t   * the integer part of the value in normal notation.\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toPrecision = function (sd, rm) {\r\n\t    var str,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (sd === void 0) {\r\n\t      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\t    } else {\r\n\t      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n\t      if (rm === void 0) rm = Ctor.rounding;\r\n\t      else checkInt32(rm, 0, 8);\r\n\r\n\t      x = finalise(new Ctor(x), sd, rm);\r\n\t      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n\t    }\r\n\r\n\t    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n\t   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n\t   * omitted.\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   * 'toSD() digits out of range: {sd}'\r\n\t   * 'toSD() digits not an integer: {sd}'\r\n\t   * 'toSD() rounding mode not an integer: {rm}'\r\n\t   * 'toSD() rounding mode out of range: {rm}'\r\n\t   *\r\n\t   */\r\n\t  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    if (sd === void 0) {\r\n\t      sd = Ctor.precision;\r\n\t      rm = Ctor.rounding;\r\n\t    } else {\r\n\t      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n\t      if (rm === void 0) rm = Ctor.rounding;\r\n\t      else checkInt32(rm, 0, 8);\r\n\t    }\r\n\r\n\t    return finalise(new Ctor(x), sd, rm);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal.\r\n\t   *\r\n\t   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n\t   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n\t   *\r\n\t   */\r\n\t  P.toString = function () {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor,\r\n\t      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n\t    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n\t   *\r\n\t   */\r\n\t  P.truncated = P.trunc = function () {\r\n\t    return finalise(new this.constructor(this), this.e + 1, 1);\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal.\r\n\t   * Unlike `toString`, negative zero will include the minus sign.\r\n\t   *\r\n\t   */\r\n\t  P.valueOf = function () {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor,\r\n\t      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n\t    return x.isNeg() ? '-' + str : str;\r\n\t  };\r\n\r\n\r\n\t  /*\r\n\t  // Add aliases to match BigDecimal method names.\r\n\t  // P.add = P.plus;\r\n\t  P.subtract = P.minus;\r\n\t  P.multiply = P.times;\r\n\t  P.divide = P.div;\r\n\t  P.remainder = P.mod;\r\n\t  P.compareTo = P.cmp;\r\n\t  P.negate = P.neg;\r\n\t   */\r\n\r\n\r\n\t  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n\t  /*\r\n\t   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toJSON,\r\n\t   *                           P.toPower, finiteToString, naturalExponential, naturalLogarithm\r\n\t   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n\t   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n\t   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n\t   *  convertBase              P.toJSON, toStringBinary, fromJSON, parseOther\r\n\t   *  cos                      P.cos\r\n\t   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n\t   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n\t   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n\t   *                           taylorSeries, atan2, parseOther\r\n\t   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n\t   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n\t   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n\t   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n\t   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n\t   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n\t   *                           naturalLogarithm, ceil, floor, round, trunc\r\n\t   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n\t   *                           toStringBinary\r\n\t   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n\t   *  getLn10                  P.logarithm, naturalLogarithm\r\n\t   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n\t   *  getPrecision             P.precision, P.toFraction\r\n\t   *  getZeroString            digitsToString, finiteToString\r\n\t   *  intPow                   P.toPower, parseOther\r\n\t   *  isOdd                    toLessThanHalfPi\r\n\t   *  maxOrMin                 max, min\r\n\t   *  naturalExponential       P.naturalExponential, P.toPower\r\n\t   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n\t   *                           P.toPower, naturalExponential\r\n\t   *  nonFiniteToString        finiteToString, toStringBinary\r\n\t   *  parseDecimal             Decimal\r\n\t   *  parseOther               Decimal\r\n\t   *  sin                      P.sin\r\n\t   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n\t   *  toLessThanHalfPi         P.cos, P.sin\r\n\t   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n\t   *  truncate                 intPow\r\n\t   *\r\n\t   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n\t   *                           naturalLogarithm, config, fromJSON, parseOther, random, Decimal           *\r\n\t   */\r\n\r\n\r\n\t  function digitsToString(d) {\r\n\t    var i, k, ws,\r\n\t      indexOfLastWord = d.length - 1,\r\n\t      str = '',\r\n\t      w = d[0];\r\n\r\n\t    if (indexOfLastWord > 0) {\r\n\t      str += w;\r\n\t      for (i = 1; i < indexOfLastWord; i++) {\r\n\t        ws = d[i] + '';\r\n\t        k = LOG_BASE - ws.length;\r\n\t        if (k) str += getZeroString(k);\r\n\t        str += ws;\r\n\t      }\r\n\r\n\t      w = d[i];\r\n\t      ws = w + '';\r\n\t      k = LOG_BASE - ws.length;\r\n\t      if (k) str += getZeroString(k);\r\n\t    } else if (w === 0) {\r\n\t      return '0';\r\n\t    }\r\n\r\n\t    // Remove trailing zeros of last w.\r\n\t    for (; w % 10 === 0;) w /= 10;\r\n\r\n\t    return str + w;\r\n\t  }\r\n\r\n\r\n\t  function checkInt32(i, min, max) {\r\n\t    if (i !== ~~i || i < min || i > max) {\r\n\t      throw Error(invalidArgument + i);\r\n\t    }\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n\t   * `repeating == null` if caller is `log` or `pow`,\r\n\t   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n\t   */\r\n\t  function checkRoundingDigits(d, i, rm, repeating) {\r\n\t    var di, k, r, rd;\r\n\r\n\t    // Get the length of the first word of the array d.\r\n\t    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n\t    // Is the rounding digit in the first word of d?\r\n\t    if (--i < 0) {\r\n\t      i += LOG_BASE;\r\n\t      di = 0;\r\n\t    } else {\r\n\t      di = Math.ceil((i + 1) / LOG_BASE);\r\n\t      i %= LOG_BASE;\r\n\t    }\r\n\r\n\t    // i is the index (0 - 6) of the rounding digit.\r\n\t    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n\t    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n\t    k = mathpow(10, LOG_BASE - i);\r\n\t    rd = d[di] % k | 0;\r\n\r\n\t    if (repeating == null) {\r\n\t      if (i < 3) {\r\n\t        if (i == 0) rd = rd / 100 | 0;\r\n\t        else if (i == 1) rd = rd / 10 | 0;\r\n\t        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n\t      } else {\r\n\t        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n\t          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n\t            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n\t      }\r\n\t    } else {\r\n\t      if (i < 4) {\r\n\t        if (i == 0) rd = rd / 1000 | 0;\r\n\t        else if (i == 1) rd = rd / 100 | 0;\r\n\t        else if (i == 2) rd = rd / 10 | 0;\r\n\t        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n\t      } else {\r\n\t        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n\t        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n\t          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n\t      }\r\n\t    }\r\n\r\n\t    return r;\r\n\t  }\r\n\r\n\r\n\t  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n\t  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n\t  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n\t  function convertBase(str, baseIn, baseOut) {\r\n\t    var j,\r\n\t      arr = [0],\r\n\t      arrL,\r\n\t      i = 0,\r\n\t      strL = str.length;\r\n\r\n\t    for (; i < strL;) {\r\n\t      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n\t      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n\t      for (j = 0; j < arr.length; j++) {\r\n\t        if (arr[j] > baseOut - 1) {\r\n\t          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n\t          arr[j + 1] += arr[j] / baseOut | 0;\r\n\t          arr[j] %= baseOut;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\r\n\t    return arr.reverse();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n\t   * |x| < pi/2\r\n\t   *\r\n\t   */\r\n\t  function cosine(Ctor, x) {\r\n\t    var k, y,\r\n\t      len = x.d.length;\r\n\r\n\t    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n\t    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n\t    // Estimate the optimum number of times to use the argument reduction.\r\n\t    if (len < 32) {\r\n\t      k = Math.ceil(len / 3);\r\n\t      y = Math.pow(4, -k).toString();\r\n\t    } else {\r\n\t      k = 16;\r\n\t      y = '2.3283064365386962890625e-10';\r\n\t    }\r\n\r\n\t    Ctor.precision += k;\r\n\r\n\t    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n\t    // Reverse argument reduction\r\n\t    for (var i = k; i--;) {\r\n\t      var cos2x = x.times(x);\r\n\t      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n\t    }\r\n\r\n\t    Ctor.precision -= k;\r\n\r\n\t    return x;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Perform division in the specified base.\r\n\t   */\r\n\t  var divide = (function () {\r\n\r\n\t    // Assumes non-zero x and k, and hence non-zero result.\r\n\t    function multiplyInteger(x, k, base) {\r\n\t      var temp,\r\n\t        carry = 0,\r\n\t        i = x.length;\r\n\r\n\t      for (x = x.slice(); i--;) {\r\n\t        temp = x[i] * k + carry;\r\n\t        x[i] = temp % base | 0;\r\n\t        carry = temp / base | 0;\r\n\t      }\r\n\r\n\t      if (carry) x.unshift(carry);\r\n\r\n\t      return x;\r\n\t    }\r\n\r\n\t    function compare(a, b, aL, bL) {\r\n\t      var i, r;\r\n\r\n\t      if (aL != bL) {\r\n\t        r = aL > bL ? 1 : -1;\r\n\t      } else {\r\n\t        for (i = r = 0; i < aL; i++) {\r\n\t          if (a[i] != b[i]) {\r\n\t            r = a[i] > b[i] ? 1 : -1;\r\n\t            break;\r\n\t          }\r\n\t        }\r\n\t      }\r\n\r\n\t      return r;\r\n\t    }\r\n\r\n\t    function subtract(a, b, aL, base) {\r\n\t      var i = 0;\r\n\r\n\t      // Subtract b from a.\r\n\t      for (; aL--;) {\r\n\t        a[aL] -= i;\r\n\t        i = a[aL] < b[aL] ? 1 : 0;\r\n\t        a[aL] = i * base + a[aL] - b[aL];\r\n\t      }\r\n\r\n\t      // Remove leading zeros.\r\n\t      for (; !a[0] && a.length > 1;) a.shift();\r\n\t    }\r\n\r\n\t    return function (x, y, pr, rm, dp, base) {\r\n\t      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n\t        yL, yz,\r\n\t        Ctor = x.constructor,\r\n\t        sign = x.s == y.s ? 1 : -1,\r\n\t        xd = x.d,\r\n\t        yd = y.d;\r\n\r\n\t      // Either NaN, Infinity or 0?\r\n\t      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n\t        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n\t          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n\t          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n\t          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n\t      }\r\n\r\n\t      if (base) {\r\n\t        logBase = 1;\r\n\t        e = x.e - y.e;\r\n\t      } else {\r\n\t        base = BASE;\r\n\t        logBase = LOG_BASE;\r\n\t        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n\t      }\r\n\r\n\t      yL = yd.length;\r\n\t      xL = xd.length;\r\n\t      q = new Ctor(sign);\r\n\t      qd = q.d = [];\r\n\r\n\t      // Result exponent may be one less than e.\r\n\t      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n\t      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n\t      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n\t      if (pr == null) {\r\n\t        sd = pr = Ctor.precision;\r\n\t        rm = Ctor.rounding;\r\n\t      } else if (dp) {\r\n\t        sd = pr + (x.e - y.e) + 1;\r\n\t      } else {\r\n\t        sd = pr;\r\n\t      }\r\n\r\n\t      if (sd < 0) {\r\n\t        qd.push(1);\r\n\t        more = true;\r\n\t      } else {\r\n\r\n\t        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n\t        sd = sd / logBase + 2 | 0;\r\n\t        i = 0;\r\n\r\n\t        // divisor < 1e7\r\n\t        if (yL == 1) {\r\n\t          k = 0;\r\n\t          yd = yd[0];\r\n\t          sd++;\r\n\r\n\t          // k is the carry.\r\n\t          for (; (i < xL || k) && sd--; i++) {\r\n\t            t = k * base + (xd[i] || 0);\r\n\t            qd[i] = t / yd | 0;\r\n\t            k = t % yd | 0;\r\n\t          }\r\n\r\n\t          more = k || i < xL;\r\n\r\n\t        // divisor >= 1e7\r\n\t        } else {\r\n\r\n\t          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n\t          k = base / (yd[0] + 1) | 0;\r\n\r\n\t          if (k > 1) {\r\n\t            yd = multiplyInteger(yd, k, base);\r\n\t            xd = multiplyInteger(xd, k, base);\r\n\t            yL = yd.length;\r\n\t            xL = xd.length;\r\n\t          }\r\n\r\n\t          xi = yL;\r\n\t          rem = xd.slice(0, yL);\r\n\t          remL = rem.length;\r\n\r\n\t          // Add zeros to make remainder as long as divisor.\r\n\t          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n\t          yz = yd.slice();\r\n\t          yz.unshift(0);\r\n\t          yd0 = yd[0];\r\n\r\n\t          if (yd[1] >= base / 2) ++yd0;\r\n\r\n\t          do {\r\n\t            k = 0;\r\n\r\n\t            // Compare divisor and remainder.\r\n\t            cmp = compare(yd, rem, yL, remL);\r\n\r\n\t            // If divisor < remainder.\r\n\t            if (cmp < 0) {\r\n\r\n\t              // Calculate trial digit, k.\r\n\t              rem0 = rem[0];\r\n\t              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n\t              // k will be how many times the divisor goes into the current remainder.\r\n\t              k = rem0 / yd0 | 0;\r\n\r\n\t              //  Algorithm:\r\n\t              //  1. product = divisor * trial digit (k)\r\n\t              //  2. if product > remainder: product -= divisor, k--\r\n\t              //  3. remainder -= product\r\n\t              //  4. if product was < remainder at 2:\r\n\t              //    5. compare new remainder and divisor\r\n\t              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n\t              if (k > 1) {\r\n\t                if (k >= base) k = base - 1;\r\n\r\n\t                // product = divisor * trial digit.\r\n\t                prod = multiplyInteger(yd, k, base);\r\n\t                prodL = prod.length;\r\n\t                remL = rem.length;\r\n\r\n\t                // Compare product and remainder.\r\n\t                cmp = compare(prod, rem, prodL, remL);\r\n\r\n\t                // product > remainder.\r\n\t                if (cmp == 1) {\r\n\t                  k--;\r\n\r\n\t                  // Subtract divisor from product.\r\n\t                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n\t                }\r\n\t              } else {\r\n\r\n\t                // cmp is -1.\r\n\t                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n\t                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n\t                if (k == 0) cmp = k = 1;\r\n\t                prod = yd.slice();\r\n\t              }\r\n\r\n\t              prodL = prod.length;\r\n\t              if (prodL < remL) prod.unshift(0);\r\n\r\n\t              // Subtract product from remainder.\r\n\t              subtract(rem, prod, remL, base);\r\n\r\n\t              // If product was < previous remainder.\r\n\t              if (cmp == -1) {\r\n\t                remL = rem.length;\r\n\r\n\t                // Compare divisor and new remainder.\r\n\t                cmp = compare(yd, rem, yL, remL);\r\n\r\n\t                // If divisor < new remainder, subtract divisor from remainder.\r\n\t                if (cmp < 1) {\r\n\t                  k++;\r\n\r\n\t                  // Subtract divisor from remainder.\r\n\t                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n\t                }\r\n\t              }\r\n\r\n\t              remL = rem.length;\r\n\t            } else if (cmp === 0) {\r\n\t              k++;\r\n\t              rem = [0];\r\n\t            }    // if cmp === 1, k will be 0\r\n\r\n\t            // Add the next digit, k, to the result array.\r\n\t            qd[i++] = k;\r\n\r\n\t            // Update the remainder.\r\n\t            if (cmp && rem[0]) {\r\n\t              rem[remL++] = xd[xi] || 0;\r\n\t            } else {\r\n\t              rem = [xd[xi]];\r\n\t              remL = 1;\r\n\t            }\r\n\r\n\t          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n\t          more = rem[0] !== void 0;\r\n\t        }\r\n\r\n\t        // Leading zero?\r\n\t        if (!qd[0]) qd.shift();\r\n\t      }\r\n\r\n\t      // logBase is 1 when divide is being used for base conversion.\r\n\t      if (logBase == 1) {\r\n\t        q.e = e;\r\n\t        inexact = more;\r\n\t      } else {\r\n\r\n\t        // To calculate q.e, first get the number of digits of qd[0].\r\n\t        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n\t        q.e = i + e * logBase - 1;\r\n\r\n\t        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n\t      }\r\n\r\n\t      return q;\r\n\t    };\r\n\t  })();\r\n\r\n\r\n\t  /*\r\n\t   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n\t   * Check for over/under-flow.\r\n\t   */\r\n\t   function finalise(x, sd, rm, isTruncated) {\r\n\t    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n\t      Ctor = x.constructor;\r\n\r\n\t    // Don't round if sd is null or undefined.\r\n\t    out: if (sd != null) {\r\n\t      xd = x.d;\r\n\r\n\t      // Infinity/NaN.\r\n\t      if (!xd) return x;\r\n\r\n\t      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n\t      // w: the word of xd containing rd, a base 1e7 number.\r\n\t      // xdi: the index of w within xd.\r\n\t      // digits: the number of digits of w.\r\n\t      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n\t      // they had leading zeros)\r\n\t      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n\t      // Get the length of the first word of the digits array xd.\r\n\t      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n\t      i = sd - digits;\r\n\r\n\t      // Is the rounding digit in the first word of xd?\r\n\t      if (i < 0) {\r\n\t        i += LOG_BASE;\r\n\t        j = sd;\r\n\t        w = xd[xdi = 0];\r\n\r\n\t        // Get the rounding digit at index j of w.\r\n\t        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n\t      } else {\r\n\t        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n\t        k = xd.length;\r\n\t        if (xdi >= k) {\r\n\t          if (isTruncated) {\r\n\r\n\t            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n\t            for (; k++ <= xdi;) xd.push(0);\r\n\t            w = rd = 0;\r\n\t            digits = 1;\r\n\t            i %= LOG_BASE;\r\n\t            j = i - LOG_BASE + 1;\r\n\t          } else {\r\n\t            break out;\r\n\t          }\r\n\t        } else {\r\n\t          w = k = xd[xdi];\r\n\r\n\t          // Get the number of digits of w.\r\n\t          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n\t          // Get the index of rd within w.\r\n\t          i %= LOG_BASE;\r\n\r\n\t          // Get the index of rd within w, adjusted for leading zeros.\r\n\t          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n\t          j = i - LOG_BASE + digits;\r\n\r\n\t          // Get the rounding digit at index j of w.\r\n\t          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n\t        }\r\n\t      }\r\n\r\n\t      // Are there any non-zero digits after the rounding digit?\r\n\t      isTruncated = isTruncated || sd < 0 ||\r\n\t        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n\t      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n\t      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n\t      // will give 714.\r\n\r\n\t      roundUp = rm < 4\r\n\t        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n\t        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n\t          // Check whether the digit to the left of the rounding digit is odd.\r\n\t          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n\t            rm == (x.s < 0 ? 8 : 7));\r\n\r\n\t      if (sd < 1 || !xd[0]) {\r\n\t        xd.length = 0;\r\n\t        if (roundUp) {\r\n\r\n\t          // Convert sd to decimal places.\r\n\t          sd -= x.e + 1;\r\n\r\n\t          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n\t          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n\t          x.e = -sd || 0;\r\n\t        } else {\r\n\r\n\t          // Zero.\r\n\t          xd[0] = x.e = 0;\r\n\t        }\r\n\r\n\t        return x;\r\n\t      }\r\n\r\n\t      // Remove excess digits.\r\n\t      if (i == 0) {\r\n\t        xd.length = xdi;\r\n\t        k = 1;\r\n\t        xdi--;\r\n\t      } else {\r\n\t        xd.length = xdi + 1;\r\n\t        k = mathpow(10, LOG_BASE - i);\r\n\r\n\t        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n\t        // j > 0 means i > number of leading zeros of w.\r\n\t        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n\t      }\r\n\r\n\t      if (roundUp) {\r\n\t        for (;;) {\r\n\r\n\t          // Is the digit to be rounded up in the first word of xd?\r\n\t          if (xdi == 0) {\r\n\r\n\t            // i will be the length of xd[0] before k is added.\r\n\t            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n\t            j = xd[0] += k;\r\n\t            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n\t            // if i != k the length has increased.\r\n\t            if (i != k) {\r\n\t              x.e++;\r\n\t              if (xd[0] == BASE) xd[0] = 1;\r\n\t            }\r\n\r\n\t            break;\r\n\t          } else {\r\n\t            xd[xdi] += k;\r\n\t            if (xd[xdi] != BASE) break;\r\n\t            xd[xdi--] = 0;\r\n\t            k = 1;\r\n\t          }\r\n\t        }\r\n\t      }\r\n\r\n\t      // Remove trailing zeros.\r\n\t      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\t    }\r\n\r\n\t    if (external) {\r\n\r\n\t      // Overflow?\r\n\t      if (x.e > Ctor.maxE) {\r\n\r\n\t        // Infinity.\r\n\t        x.d = null;\r\n\t        x.e = NaN;\r\n\r\n\t      // Underflow?\r\n\t      } else if (x.e < Ctor.minE) {\r\n\r\n\t        // Zero.\r\n\t        x.e = 0;\r\n\t        x.d = [0];\r\n\t        // Ctor.underflow = true;\r\n\t      } // else Ctor.underflow = false;\r\n\t    }\r\n\r\n\t    return x;\r\n\t  }\r\n\r\n\r\n\t  function finiteToString(x, isExp, sd) {\r\n\t    if (!x.isFinite()) return nonFiniteToString(x);\r\n\t    var k,\r\n\t      e = x.e,\r\n\t      str = digitsToString(x.d),\r\n\t      len = str.length;\r\n\r\n\t    if (isExp) {\r\n\t      if (sd && (k = sd - len) > 0) {\r\n\t        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n\t      } else if (len > 1) {\r\n\t        str = str.charAt(0) + '.' + str.slice(1);\r\n\t      }\r\n\r\n\t      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n\t    } else if (e < 0) {\r\n\t      str = '0.' + getZeroString(-e - 1) + str;\r\n\t      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n\t    } else if (e >= len) {\r\n\t      str += getZeroString(e + 1 - len);\r\n\t      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n\t    } else {\r\n\t      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n\t      if (sd && (k = sd - len) > 0) {\r\n\t        if (e + 1 === len) str += '.';\r\n\t        str += getZeroString(k);\r\n\t      }\r\n\t    }\r\n\r\n\t    return str;\r\n\t  }\r\n\r\n\r\n\t  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n\t  function getBase10Exponent(digits, e) {\r\n\r\n\t    // First get the number of digits of the first word of the digits array.\r\n\t    for (var i = 1, w = digits[0]; w >= 10; w /= 10) i++;\r\n\t    return i + e * LOG_BASE - 1;\r\n\t  }\r\n\r\n\r\n\t   function getLn10(Ctor, sd, pr) {\r\n\t    if (sd > LN10_PRECISION) {\r\n\r\n\t      // Reset global state in case the exception is caught.\r\n\t      external = true;\r\n\t      if (pr) Ctor.precision = pr;\r\n\t      throw Error(precisionLimitExceeded);\r\n\t    }\r\n\t    return finalise(new Ctor(LN10), sd, 1, true);\r\n\t  }\r\n\r\n\r\n\t  function getPi(Ctor, sd, rm) {\r\n\t    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n\t    return finalise(new Ctor(PI), sd, rm, true);\r\n\t  }\r\n\r\n\r\n\t  function getPrecision(digits) {\r\n\t    var w = digits.length - 1,\r\n\t      len = w * LOG_BASE + 1;\r\n\r\n\t    w = digits[w];\r\n\r\n\t    // If non-zero...\r\n\t    if (w) {\r\n\r\n\t      // Subtract the number of trailing zeros of the last word.\r\n\t      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n\t      // Add the number of digits of the first word.\r\n\t      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n\t    }\r\n\r\n\t    return len;\r\n\t  }\r\n\r\n\r\n\t  function getZeroString(k) {\r\n\t    var zs = '';\r\n\t    for (; k--;) zs += '0';\r\n\t    return zs;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n\t   * integer of type number.\r\n\t   *\r\n\t   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n\t   *\r\n\t   */\r\n\t  function intPow(Ctor, x, n, pr) {\r\n\t    var isTruncated,\r\n\t      r = new Ctor(1),\r\n\r\n\t      // Max n of 9007199254740991 takes 53 loop iterations.\r\n\t      // Maximum digits array length; leaves [28, 34] guard digits.\r\n\t      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n\t    external = false;\r\n\r\n\t    for (;;) {\r\n\t      if (n % 2) {\r\n\t        r = r.times(x);\r\n\t        if (truncate(r.d, k)) isTruncated = true;\r\n\t      }\r\n\r\n\t      n = mathfloor(n / 2);\r\n\t      if (n === 0) {\r\n\r\n\t        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n\t        n = r.d.length - 1;\r\n\t        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n\t        break;\r\n\t      }\r\n\r\n\t      x = x.times(x);\r\n\t      truncate(x.d, k);\r\n\t    }\r\n\r\n\t    external = true;\r\n\r\n\t    return r;\r\n\t  }\r\n\r\n\r\n\t  function isOdd(n) {\r\n\t    return n.d[n.d.length - 1] & 1;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n\t   */\r\n\t  function maxOrMin(Ctor, args, ltgt) {\r\n\t    var y,\r\n\t      x = new Ctor(args[0]),\r\n\t      i = 0;\r\n\r\n\t    for (; ++i < args.length;) {\r\n\t      y = new Ctor(args[i]);\r\n\t      if (!y.s) {\r\n\t        x = y;\r\n\t        break;\r\n\t      } else if (x[ltgt](y)) {\r\n\t        x = y;\r\n\t      }\r\n\t    }\r\n\r\n\t    return x;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n\t   * digits.\r\n\t   *\r\n\t   * Taylor/Maclaurin series.\r\n\t   *\r\n\t   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n\t   *\r\n\t   * Argument reduction:\r\n\t   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n\t   *   exp(x) = exp(x / 2^k)^(2^k)\r\n\t   *\r\n\t   * Previously, the argument was initially reduced by\r\n\t   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n\t   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n\t   * found to be slower than just dividing repeatedly by 32 as above.\r\n\t   *\r\n\t   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n\t   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n\t   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n\t   *\r\n\t   *  exp(Infinity)  = Infinity\r\n\t   *  exp(-Infinity) = 0\r\n\t   *  exp(NaN)       = NaN\r\n\t   *  exp(±0)        = 1\r\n\t   *\r\n\t   *  exp(x) is non-terminating for any finite, non-zero x.\r\n\t   *\r\n\t   *  The result will always be correctly rounded.\r\n\t   *\r\n\t   */\r\n\t  function naturalExponential(x, sd) {\r\n\t    var denominator, guard, j, pow, sum, t, wpr,\r\n\t      rep = 0,\r\n\t      i = 0,\r\n\t      k = 0,\r\n\t      Ctor = x.constructor,\r\n\t      rm = Ctor.rounding,\r\n\t      pr = Ctor.precision;\r\n\r\n\t    // 0/NaN/Infinity?\r\n\t    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n\t      return new Ctor(x.d\r\n\t        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n\t        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n\t    }\r\n\r\n\t    if (sd == null) {\r\n\t      external = false;\r\n\t      wpr = pr;\r\n\t    } else {\r\n\t      wpr = sd;\r\n\t    }\r\n\r\n\t    t = new Ctor(0.03125);\r\n\r\n\t    // while abs(x) >= 0.1\r\n\t    while (x.e > -2) {\r\n\r\n\t      // x = x / 2^5\r\n\t      x = x.times(t);\r\n\t      k += 5;\r\n\t    }\r\n\r\n\t    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n\t    // necessary to ensure the first 4 rounding digits are correct.\r\n\t    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n\t    wpr += guard;\r\n\t    denominator = pow = sum = new Ctor(1);\r\n\t    Ctor.precision = wpr;\r\n\r\n\t    for (;;) {\r\n\t      pow = finalise(pow.times(x), wpr, 1);\r\n\t      denominator = denominator.times(++i);\r\n\t      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n\t      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n\t        j = k;\r\n\t        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n\t        // Check to see if the first 4 rounding digits are [49]999.\r\n\t        // If so, repeat the summation with a higher precision, otherwise\r\n\t        // e.g. with precision: 18, rounding: 1\r\n\t        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n\t        // `wpr - guard` is the index of first rounding digit.\r\n\t        if (sd == null) {\r\n\r\n\t          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n\t            Ctor.precision = wpr += 10;\r\n\t            denominator = pow = t = new Ctor(1);\r\n\t            i = 0;\r\n\t            rep++;\r\n\t          } else {\r\n\t            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n\t          }\r\n\t        } else {\r\n\t          Ctor.precision = pr;\r\n\t          return sum;\r\n\t        }\r\n\t      }\r\n\r\n\t      sum = t;\r\n\t    }\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n\t   * digits.\r\n\t   *\r\n\t   *  ln(-n)        = NaN\r\n\t   *  ln(0)         = -Infinity\r\n\t   *  ln(-0)        = -Infinity\r\n\t   *  ln(1)         = 0\r\n\t   *  ln(Infinity)  = Infinity\r\n\t   *  ln(-Infinity) = NaN\r\n\t   *  ln(NaN)       = NaN\r\n\t   *\r\n\t   *  ln(n) (n != 1) is non-terminating.\r\n\t   *\r\n\t   */\r\n\t  function naturalLogarithm(y, sd) {\r\n\t    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n\t      n = 1,\r\n\t      guard = 10,\r\n\t      x = y,\r\n\t      xd = x.d,\r\n\t      Ctor = x.constructor,\r\n\t      rm = Ctor.rounding,\r\n\t      pr = Ctor.precision;\r\n\r\n\t    // Is x negative or Infinity, NaN, 0 or 1?\r\n\t    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n\t      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n\t    }\r\n\r\n\t    if (sd == null) {\r\n\t      external = false;\r\n\t      wpr = pr;\r\n\t    } else {\r\n\t      wpr = sd;\r\n\t    }\r\n\r\n\t    Ctor.precision = wpr += guard;\r\n\t    c = digitsToString(xd);\r\n\t    c0 = c.charAt(0);\r\n\r\n\t    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n\t      // Argument reduction.\r\n\t      // The series converges faster the closer the argument is to 1, so using\r\n\t      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n\t      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n\t      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n\t      // later be divided by this number, then separate out the power of 10 using\r\n\t      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n\t      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n\t      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n\t      // max n is 6 (gives 0.7 - 1.3)\r\n\t      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n\t        x = x.times(y);\r\n\t        c = digitsToString(x.d);\r\n\t        c0 = c.charAt(0);\r\n\t        n++;\r\n\t      }\r\n\r\n\t      e = x.e;\r\n\r\n\t      if (c0 > 1) {\r\n\t        x = new Ctor('0.' + c);\r\n\t        e++;\r\n\t      } else {\r\n\t        x = new Ctor(c0 + '.' + c.slice(1));\r\n\t      }\r\n\t    } else {\r\n\r\n\t      // The argument reduction method above may result in overflow if the argument y is a massive\r\n\t      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n\t      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n\t      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n\t      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\t      Ctor.precision = pr;\r\n\r\n\t      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n\t    }\r\n\r\n\t    // x1 is x reduced to a value near 1.\r\n\t    x1 = x;\r\n\r\n\t    // Taylor series.\r\n\t    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n\t    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n\t    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n\t    x2 = finalise(x.times(x), wpr, 1);\r\n\t    denominator = 3;\r\n\r\n\t    for (;;) {\r\n\t      numerator = finalise(numerator.times(x2), wpr, 1);\r\n\t      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n\t      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n\t        sum = sum.times(2);\r\n\r\n\t        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n\t        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n\t        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n\t        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n\t        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n\t        // been repeated previously) and the first 4 rounding digits 9999?\r\n\t        // If so, restart the summation with a higher precision, otherwise\r\n\t        // e.g. with precision: 12, rounding: 1\r\n\t        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n\t        // `wpr - guard` is the index of first rounding digit.\r\n\t        if (sd == null) {\r\n\t          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n\t            Ctor.precision = wpr += guard;\r\n\t            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n\t            x2 = finalise(x.times(x), wpr, 1);\r\n\t            denominator = rep = 1;\r\n\t          } else {\r\n\t            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n\t          }\r\n\t        } else {\r\n\t          Ctor.precision = pr;\r\n\t          return sum;\r\n\t        }\r\n\t      }\r\n\r\n\t      sum = t;\r\n\t      denominator += 2;\r\n\t    }\r\n\t  }\r\n\r\n\r\n\t  // ±Infinity, NaN.\r\n\t  function nonFiniteToString(x) {\r\n\t    // Unsigned.\r\n\t    return String(x.s * x.s / 0);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Parse the value of a new Decimal `x` from string `str`.\r\n\t   */\r\n\t  function parseDecimal(x, str) {\r\n\t    var e, i, len;\r\n\r\n\t    // Decimal point?\r\n\t    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n\t    // Exponential form?\r\n\t    if ((i = str.search(/e/i)) > 0) {\r\n\r\n\t      // Determine exponent.\r\n\t      if (e < 0) e = i;\r\n\t      e += +str.slice(i + 1);\r\n\t      str = str.substring(0, i);\r\n\t    } else if (e < 0) {\r\n\r\n\t      // Integer.\r\n\t      e = str.length;\r\n\t    }\r\n\r\n\t    // Determine leading zeros.\r\n\t    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n\t    // Determine trailing zeros.\r\n\t    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n\t    str = str.slice(i, len);\r\n\r\n\t    if (str) {\r\n\t      len -= i;\r\n\t      x.e = e = e - i - 1;\r\n\t      x.d = [];\r\n\r\n\t      // Transform base\r\n\r\n\t      // e is the base 10 exponent.\r\n\t      // i is where to slice str to get the first word of the digits array.\r\n\t      i = (e + 1) % LOG_BASE;\r\n\t      if (e < 0) i += LOG_BASE;\r\n\r\n\t      if (i < len) {\r\n\t        if (i) x.d.push(+str.slice(0, i));\r\n\t        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n\t        str = str.slice(i);\r\n\t        i = LOG_BASE - str.length;\r\n\t      } else {\r\n\t        i -= len;\r\n\t      }\r\n\r\n\t      for (; i--;) str += '0';\r\n\t      x.d.push(+str);\r\n\r\n\t      if (external) {\r\n\r\n\t        // Overflow?\r\n\t        if (x.e > x.constructor.maxE) {\r\n\r\n\t          // Infinity.\r\n\t          x.d = null;\r\n\t          x.e = NaN;\r\n\r\n\t        // Underflow?\r\n\t        } else if (x.e < x.constructor.minE) {\r\n\r\n\t          // Zero.\r\n\t          x.e = 0;\r\n\t          x.d = [0];\r\n\t          // x.constructor.underflow = true;\r\n\t        } // else x.constructor.underflow = false;\r\n\t      }\r\n\t    } else {\r\n\r\n\t      // Zero.\r\n\t      x.e = 0;\r\n\t      x.d = [0];\r\n\t    }\r\n\r\n\t    return x;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n\t   */\r\n\t  function parseOther(x, str) {\r\n\t    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n\t    if (str === 'Infinity' || str === 'NaN') {\r\n\t      if (!+str) x.s = NaN;\r\n\t      x.e = NaN;\r\n\t      x.d = null;\r\n\t      return x;\r\n\t    }\r\n\r\n\t    if (isHex.test(str))  {\r\n\t      base = 16;\r\n\t      str = str.toLowerCase();\r\n\t    } else if (isBinary.test(str))  {\r\n\t      base = 2;\r\n\t    } else if (isOctal.test(str))  {\r\n\t      base = 8;\r\n\t    } else {\r\n\t      throw Error(invalidArgument + str);\r\n\t    }\r\n\r\n\t    // Is there a binary exponent part?\r\n\t    i = str.search(/p/i);\r\n\r\n\t    if (i > 0) {\r\n\t      p = +str.slice(i + 1);\r\n\t      str = str.substring(2, i);\r\n\t    } else {\r\n\t      str = str.slice(2);\r\n\t    }\r\n\r\n\t    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n\t    // fraction part will be restored.\r\n\t    i = str.indexOf('.');\r\n\t    isFloat = i >= 0;\r\n\t    Ctor = x.constructor;\r\n\r\n\t    if (isFloat) {\r\n\t      str = str.replace('.', '');\r\n\t      len = str.length;\r\n\t      i = len - i;\r\n\r\n\t      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n\t      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n\t    }\r\n\r\n\t    xd = convertBase(str, base, BASE);\r\n\t    xe = xd.length - 1;\r\n\r\n\t    // Remove trailing zeros.\r\n\t    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n\t    if (i < 0) return new Ctor(x.s * 0);\r\n\t    x.e = getBase10Exponent(xd, xe);\r\n\t    x.d = xd;\r\n\t    external = false;\r\n\r\n\t    // At what precision to perform the division to ensure exact conversion?\r\n\t    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n\t    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n\t    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n\t    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n\t    // Therefore using 4 * the number of digits of str will always be enough.\r\n\t    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n\t    // Multiply by the binary exponent part if present.\r\n\t    if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));\r\n\t    external = true;\r\n\r\n\t    return x;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n\t   * |x| < pi/2\r\n\t   *\r\n\t   */\r\n\t  function sine(Ctor, x) {\r\n\t    var k,\r\n\t      len = x.d.length;\r\n\r\n\t    if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n\t    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n\t    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n\t    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n\t    // Estimate the optimum number of times to use the argument reduction.\r\n\t    k = 1.4 * Math.sqrt(len);\r\n\t    k = k > 16 ? 16 : k | 0;\r\n\r\n\t    // Max k before Math.pow precision loss is 22\r\n\t    x = x.times(Math.pow(5, -k));\r\n\t    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n\t    // Reverse argument reduction\r\n\t    var sin2_x,\r\n\t      d5 = new Ctor(5),\r\n\t      d16 = new Ctor(16),\r\n\t      d20 = new Ctor(20);\r\n\t    for (; k--;) {\r\n\t      sin2_x = x.times(x);\r\n\t      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n\t    }\r\n\r\n\t    return x;\r\n\t  }\r\n\r\n\r\n\t  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n\t  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n\t    var j, t, u, x2,\r\n\t      i = 1,\r\n\t      pr = Ctor.precision,\r\n\t      k = Math.ceil(pr / LOG_BASE);\r\n\r\n\t    external = false;\r\n\t    x2 = x.times(x);\r\n\t    u = new Ctor(y);\r\n\r\n\t    for (;;) {\r\n\t      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n\t      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n\t      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n\t      t = u.plus(y);\r\n\r\n\t      if (t.d[k] !== void 0) {\r\n\t        for (j = k; t.d[j] === u.d[j] && j--;);\r\n\t        if (j == -1) break;\r\n\t      }\r\n\r\n\t      j = u;\r\n\t      u = y;\r\n\t      y = t;\r\n\t      t = j;\r\n\t      i++;\r\n\t    }\r\n\r\n\t    external = true;\r\n\t    t.d.length = k + 1;\r\n\r\n\t    return t;\r\n\t  }\r\n\r\n\r\n\t  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n\t  function toLessThanHalfPi(Ctor, x) {\r\n\t    var t,\r\n\t      isNeg = x.s < 0,\r\n\t      pi = getPi(Ctor, Ctor.precision, 1),\r\n\t      halfPi = pi.times(0.5);\r\n\r\n\t    x = x.abs();\r\n\r\n\t    if (x.lte(halfPi)) {\r\n\t      quadrant = isNeg ? 4 : 1;\r\n\t      return x;\r\n\t    }\r\n\r\n\t    t = x.divToInt(pi);\r\n\r\n\t    if (t.isZero()) {\r\n\t      quadrant = isNeg ? 3 : 2;\r\n\t    } else {\r\n\t      x = x.minus(t.times(pi));\r\n\r\n\t      // 0 <= x < pi\r\n\t      if (x.lte(halfPi)) {\r\n\t        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n\t        return x;\r\n\t      }\r\n\r\n\t      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n\t    }\r\n\r\n\t    return x.minus(pi).abs();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n\t   *\r\n\t   * If the optional `sd` argument is present include a binary exponent suffix.\r\n\t   */\r\n\t  function toStringBinary(x, baseOut, sd, rm) {\r\n\t    var base, e, i, k, len, roundUp, str, xd, y,\r\n\t      Ctor = x.constructor,\r\n\t      isExp = sd !== void 0;\r\n\r\n\t    if (isExp) {\r\n\t      checkInt32(sd, 1, MAX_DIGITS);\r\n\t      if (rm === void 0) rm = Ctor.rounding;\r\n\t      else checkInt32(rm, 0, 8);\r\n\t    } else {\r\n\t      sd = Ctor.precision;\r\n\t      rm = Ctor.rounding;\r\n\t    }\r\n\r\n\t    if (!x.isFinite()) {\r\n\t      str = nonFiniteToString(x);\r\n\t    } else {\r\n\t      str = finiteToString(x);\r\n\t      i = str.indexOf('.');\r\n\r\n\t      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n\t      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n\t      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n\t      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n\t      if (isExp) {\r\n\t        base = 2;\r\n\t        if (baseOut == 16) {\r\n\t          sd = sd * 4 - 3;\r\n\t        } else if (baseOut == 8) {\r\n\t          sd = sd * 3 - 2;\r\n\t        }\r\n\t      } else {\r\n\t        base = baseOut;\r\n\t      }\r\n\r\n\t      // Convert the number as an integer then divide the result by its base raised to a power such\r\n\t      // that the fraction part will be restored.\r\n\r\n\t      // Non-integer.\r\n\t      if (i >= 0) {\r\n\t        str = str.replace('.', '');\r\n\t        y = new Ctor(1);\r\n\t        y.e = str.length - i;\r\n\t        y.d = convertBase(finiteToString(y), 10, base);\r\n\t        y.e = y.d.length;\r\n\t      }\r\n\r\n\t      xd = convertBase(str, 10, base);\r\n\t      e = len = xd.length;\r\n\r\n\t      // Remove trailing zeros.\r\n\t      for (; xd[--len] == 0;) xd.pop();\r\n\r\n\t      if (!xd[0]) {\r\n\t        str = isExp ? '0p+0' : '0';\r\n\t      } else {\r\n\t        if (i < 0) {\r\n\t          e--;\r\n\t        } else {\r\n\t          x = new Ctor(x);\r\n\t          x.d = xd;\r\n\t          x.e = e;\r\n\t          x = divide(x, y, sd, rm, 0, base);\r\n\t          xd = x.d;\r\n\t          e = x.e;\r\n\t          roundUp = inexact;\r\n\t        }\r\n\r\n\t        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n\t        i = xd[sd];\r\n\t        k = base / 2;\r\n\t        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n\t        roundUp = rm < 4\r\n\t          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n\t          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n\t            rm === (x.s < 0 ? 8 : 7));\r\n\r\n\t        xd.length = sd;\r\n\r\n\t        if (roundUp) {\r\n\r\n\t          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n\t          for (; ++xd[--sd] > base - 1;) {\r\n\t            xd[sd] = 0;\r\n\t            if (!sd) {\r\n\t              ++e;\r\n\t              xd.unshift(1);\r\n\t            }\r\n\t          }\r\n\t        }\r\n\r\n\t        // Determine trailing zeros.\r\n\t        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n\t        // E.g. [4, 11, 15] becomes 4bf.\r\n\t        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n\t        // Add binary exponent suffix?\r\n\t        if (isExp) {\r\n\t          if (len > 1) {\r\n\t            if (baseOut == 16 || baseOut == 8) {\r\n\t              i = baseOut == 16 ? 4 : 3;\r\n\t              for (--len; len % i; len++) str += '0';\r\n\t              xd = convertBase(str, base, baseOut);\r\n\t              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n\t              // xd[0] will always be be 1\r\n\t              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\t            } else {\r\n\t              str = str.charAt(0) + '.' + str.slice(1);\r\n\t            }\r\n\t          }\r\n\r\n\t          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n\t        } else if (e < 0) {\r\n\t          for (; ++e;) str = '0' + str;\r\n\t          str = '0.' + str;\r\n\t        } else {\r\n\t          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n\t          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n\t        }\r\n\t      }\r\n\r\n\t      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n\t    }\r\n\r\n\t    return x.s < 0 ? '-' + str : str;\r\n\t  }\r\n\r\n\r\n\t  // Does not strip trailing zeros.\r\n\t  function truncate(arr, len) {\r\n\t    if (arr.length > len) {\r\n\t      arr.length = len;\r\n\t      return true;\r\n\t    }\r\n\t  }\r\n\r\n\r\n\t  // Decimal methods\r\n\r\n\r\n\t  /*\r\n\t   *  abs\r\n\t   *  acos\r\n\t   *  acosh\r\n\t   *  add\r\n\t   *  asin\r\n\t   *  asinh\r\n\t   *  atan\r\n\t   *  atanh\r\n\t   *  atan2\r\n\t   *  cbrt\r\n\t   *  ceil\r\n\t   *  clone\r\n\t   *  config\r\n\t   *  cos\r\n\t   *  cosh\r\n\t   *  div\r\n\t   *  exp\r\n\t   *  floor\r\n\t   *  fromJSON\r\n\t   *  hypot\r\n\t   *  ln\r\n\t   *  log\r\n\t   *  log2\r\n\t   *  log10\r\n\t   *  max\r\n\t   *  min\r\n\t   *  mod\r\n\t   *  mul\r\n\t   *  pow\r\n\t   *  random\r\n\t   *  round\r\n\t   *  sign\r\n\t   *  sin\r\n\t   *  sinh\r\n\t   *  sqrt\r\n\t   *  sub\r\n\t   *  tan\r\n\t   *  tanh\r\n\t   *  trunc\r\n\t   */\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the absolute value of `x`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function abs(x) {\r\n\t    return new this(x).abs();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function acos(x) {\r\n\t    return new this(x).acos();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function acosh(x) {\r\n\t    return new this(x).acosh();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   * y {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function add(x, y) {\r\n\t    return new this(x).plus(y);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function asin(x) {\r\n\t    return new this(x).asin();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function asinh(x) {\r\n\t    return new this(x).asinh();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function atan(x) {\r\n\t    return new this(x).atan();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function atanh(x) {\r\n\t    return new this(x).atanh();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n\t   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-pi, pi]\r\n\t   *\r\n\t   * y {number|string|Decimal} The y-coordinate.\r\n\t   * x {number|string|Decimal} The x-coordinate.\r\n\t   *\r\n\t   * atan2(±0, -0)               = ±pi\r\n\t   * atan2(±0, +0)               = ±0\r\n\t   * atan2(±0, -x)               = ±pi for x > 0\r\n\t   * atan2(±0, x)                = ±0 for x > 0\r\n\t   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n\t   * atan2(y, ±0)                = pi/2 for y > 0\r\n\t   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n\t   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n\t   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n\t   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n\t   * atan2(±Infinity, +Infinity) = ±pi/4\r\n\t   * atan2(NaN, x) = NaN\r\n\t   * atan2(y, NaN) = NaN\r\n\t   *\r\n\t   */\r\n\t  function atan2(y, x) {\r\n\t    y = new this(y);\r\n\t    x = new this(x);\r\n\t    var r,\r\n\t      pr = this.precision,\r\n\t      rm = this.rounding,\r\n\t      wpr = pr + 4;\r\n\r\n\t    // Either NaN\r\n\t    if (!y.s || !x.s) {\r\n\t      r = new this(NaN);\r\n\r\n\t    // Both ±Infinity\r\n\t    } else if (!y.d && !x.d) {\r\n\t      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n\t      r.s = y.s;\r\n\r\n\t    // x is ±Infinity or y is ±0\r\n\t    } else if (!x.d || y.isZero()) {\r\n\t      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n\t      r.s = y.s;\r\n\r\n\t    // y is ±Infinity or x is ±0\r\n\t    } else if (!y.d || x.isZero()) {\r\n\t      r = getPi(this, wpr, 1).times(0.5);\r\n\t      r.s = y.s;\r\n\r\n\t    // Both non-zero and finite\r\n\t    } else if (x.s < 0) {\r\n\t      this.precision = wpr;\r\n\t      this.rounding = 1;\r\n\t      r = this.atan(divide(y, x, wpr, 1));\r\n\t      x = getPi(this, wpr, 1);\r\n\t      this.precision = pr;\r\n\t      this.rounding = rm;\r\n\t      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n\t    } else {\r\n\t      r = this.atan(divide(y, x, wpr, 1));\r\n\t    }\r\n\r\n\t    return r;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function cbrt(x) {\r\n\t    return new this(x).cbrt();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function ceil(x) {\r\n\t    return finalise(x = new this(x), x.e + 1, 2);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Configure global settings for a Decimal constructor.\r\n\t   *\r\n\t   * `obj` is an object with one or more of the following properties,\r\n\t   *\r\n\t   *   precision  {number}\r\n\t   *   rounding   {number}\r\n\t   *   toExpNeg   {number}\r\n\t   *   toExpPos   {number}\r\n\t   *   maxE       {number}\r\n\t   *   minE       {number}\r\n\t   *   modulo     {number}\r\n\t   *   crypto     {boolean|number|undefined}\r\n\t   *\r\n\t   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n\t   *\r\n\t   */\r\n\t  function config(obj) {\r\n\t    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n\t    var i, p, v,\r\n\t      ps = [\r\n\t        'precision', 1, MAX_DIGITS,\r\n\t        'rounding', 0, 8,\r\n\t        'toExpNeg', -EXP_LIMIT, 0,\r\n\t        'toExpPos', 0, EXP_LIMIT,\r\n\t        'maxE', 0, EXP_LIMIT,\r\n\t        'minE', -EXP_LIMIT, 0,\r\n\t        'modulo', 0, 9\r\n\t      ];\r\n\r\n\t    for (i = 0; i < ps.length; i += 3) {\r\n\t      if ((v = obj[p = ps[i]]) !== void 0) {\r\n\t        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n\t        else throw Error(invalidArgument + p + ': ' + v);\r\n\t      }\r\n\t    }\r\n\r\n\t    if (obj.hasOwnProperty(p = 'crypto')) {\r\n\t      if ((v = obj[p]) === void 0) {\r\n\t        this[p] = v;\r\n\t      } else if (v === true || v === false || v === 0 || v === 1) {\r\n\t        this[p] = !!(v && cryptoObject &&\r\n\t            (cryptoObject.getRandomValues || cryptoObject.randomBytes));\r\n\t      } else {\r\n\t        throw Error(invalidArgument + p + ': ' + v);\r\n\t      }\r\n\t    }\r\n\r\n\t    return this;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function cos(x) {\r\n\t    return new this(x).cos();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function cosh(x) {\r\n\t    return new this(x).cosh();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n\t   * constructor.\r\n\t   *\r\n\t   */\r\n\t  function clone(obj) {\r\n\t    var i, p, ps;\r\n\r\n\t    /*\r\n\t     * The Decimal constructor and exported function.\r\n\t     * Return a new Decimal instance.\r\n\t     *\r\n\t     * v {number|string|Decimal} A numeric value.\r\n\t     *\r\n\t     */\r\n\t    function Decimal(v) {\r\n\t      var e, i, t,\r\n\t        x = this;\r\n\r\n\t      // Decimal called without new.\r\n\t      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n\t      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n\t      // which points to Object.\r\n\t      x.constructor = Decimal;\r\n\r\n\t      // Duplicate.\r\n\t      if (v instanceof Decimal) {\r\n\t        x.s = v.s;\r\n\t        x.e = v.e;\r\n\t        x.d = (v = v.d) ? v.slice() : v;\r\n\t        return;\r\n\t      }\r\n\r\n\t      t = typeof v;\r\n\r\n\t      if (t === 'number') {\r\n\t        if (v === 0) {\r\n\t          x.s = 1 / v < 0 ? -1 : 1;\r\n\t          x.e = 0;\r\n\t          x.d = [0];\r\n\t          return;\r\n\t        }\r\n\r\n\t        if (v < 0) {\r\n\t          v = -v;\r\n\t          x.s = -1;\r\n\t        } else {\r\n\t          x.s = 1;\r\n\t        }\r\n\r\n\t        // Fast path for small integers.\r\n\t        if (v === ~~v && v < 1e7) {\r\n\t          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\t          x.e = e;\r\n\t          x.d = [v];\r\n\t          return;\r\n\r\n\t        // Infinity, NaN.\r\n\t        } else if (v * 0 !== 0) {\r\n\t          if (!v) x.s = NaN;\r\n\t          x.e = NaN;\r\n\t          x.d = null;\r\n\t          return;\r\n\t        }\r\n\r\n\t        return parseDecimal(x, v.toString());\r\n\r\n\t      } else if (t !== 'string') {\r\n\t        throw Error(invalidArgument + v);\r\n\t      }\r\n\r\n\t      // Minus sign?\r\n\t      if (v.charCodeAt(0) === 45) {\r\n\t        v = v.slice(1);\r\n\t        x.s = -1;\r\n\t      } else {\r\n\t        x.s = 1;\r\n\t      }\r\n\r\n\t      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n\t    }\r\n\r\n\t    Decimal.prototype = P;\r\n\r\n\t    Decimal.ROUND_UP = 0;\r\n\t    Decimal.ROUND_DOWN = 1;\r\n\t    Decimal.ROUND_CEIL = 2;\r\n\t    Decimal.ROUND_FLOOR = 3;\r\n\t    Decimal.ROUND_HALF_UP = 4;\r\n\t    Decimal.ROUND_HALF_DOWN = 5;\r\n\t    Decimal.ROUND_HALF_EVEN = 6;\r\n\t    Decimal.ROUND_HALF_CEIL = 7;\r\n\t    Decimal.ROUND_HALF_FLOOR = 8;\r\n\t    Decimal.EUCLID = 9;\r\n\r\n\t    Decimal.config = config;\r\n\t    Decimal.clone = clone;\r\n\r\n\t    Decimal.abs = abs;\r\n\t    Decimal.acos = acos;\r\n\t    Decimal.acosh = acosh;        // ES6\r\n\t    Decimal.add = add;\r\n\t    Decimal.asin = asin;\r\n\t    Decimal.asinh = asinh;        // ES6\r\n\t    Decimal.atan = atan;\r\n\t    Decimal.atanh = atanh;        // ES6\r\n\t    Decimal.atan2 = atan2;\r\n\t    Decimal.cbrt = cbrt;          // ES6\r\n\t    Decimal.ceil = ceil;\r\n\t    Decimal.cos = cos;\r\n\t    Decimal.cosh = cosh;          // ES6\r\n\t    Decimal.div = div;\r\n\t    Decimal.exp = exp;\r\n\t    Decimal.floor = floor;\r\n\t    Decimal.fromJSON = fromJSON;\r\n\t    Decimal.hypot = hypot;        // ES6\r\n\t    Decimal.ln = ln;\r\n\t    Decimal.log = log;\r\n\t    Decimal.log10 = log10;        // ES6\r\n\t    Decimal.log2 = log2;          // ES6\r\n\t    Decimal.max = max;\r\n\t    Decimal.min = min;\r\n\t    Decimal.mod = mod;\r\n\t    Decimal.mul = mul;\r\n\t    Decimal.pow = pow;\r\n\t    Decimal.random = random;\r\n\t    Decimal.round = round;\r\n\t    Decimal.sign = sign;          // ES6\r\n\t    Decimal.sin = sin;\r\n\t    Decimal.sinh = sinh;          // ES6\r\n\t    Decimal.sqrt = sqrt;\r\n\t    Decimal.sub = sub;\r\n\t    Decimal.tan = tan;\r\n\t    Decimal.tanh = tanh;          // ES6\r\n\t    Decimal.trunc = trunc;        // ES6\r\n\r\n\t    if (obj === void 0) obj = {};\r\n\t    if (obj) {\r\n\t      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n\t      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n\t    }\r\n\r\n\t    Decimal.config(obj);\r\n\r\n\t    return Decimal;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   * y {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function div(x, y) {\r\n\t    return new this(x).div(y);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n\t   *\r\n\t   */\r\n\t  function exp(x) {\r\n\t    return new this(x).exp();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function floor(x) {\r\n\t    return finalise(x = new this(x), x.e + 1, 3);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal from `str`, a string value created by `toJSON`.\r\n\t   *\r\n\t   * Base 88 alphabet:\r\n\t   * 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./:;=?@[]^_`{|}~\r\n\t   *\r\n\t   * If `str` is just one character:\r\n\t   * 0-81  [[0, 40][-0, -40]]\r\n\t   * 82    -Infinity\r\n\t   * 83    +Infinity\r\n\t   * 84    NaN\r\n\t   *\r\n\t   *   64 32 16  8  4  2  1\r\n\t   *    1  0  1  0  1  1  1 = 87\r\n\t   *\r\n\t   */\r\n\t  function fromJSON(str) {\r\n\t    var e, isNeg, k, n;\r\n\r\n\t    if (typeof str !== 'string' || !str) throw Error(invalidArgument + str);\r\n\t    k = str.length;\r\n\t    n = NUMERALS.indexOf(str.charAt(0));\r\n\r\n\t    //  [0, 81] -> [[0, 40][-0, -40]]\r\n\t    if (k === 1) {\r\n\t      return new this(n > 81 ? [-1 / 0, 1 / 0, 0 / 0][n - 82] : n > 40 ? -(n - 41) : n);\r\n\t    } else if (n & 64) {\r\n\t      isNeg = n & 16;\r\n\r\n\t      // e = isNeg ? [-3, 4] : [-7, 8]\r\n\t      e = isNeg ? (n & 7) - 3 : (n & 15) - 7;\r\n\t      k = 1;\r\n\t    } else if (k === 2) {\r\n\t      n = n * 88 + NUMERALS.indexOf(str.charAt(1));\r\n\r\n\t      // [0, 5631] -> [[0, 2815][-0, -2815]] -> [[41, 2856][-41, -2856]]\r\n\t      return new this(n >= 2816 ? -(n - 2816) - 41 : n + 41);\r\n\t    } else {\r\n\r\n\t      // 0XXXXXX\r\n\t      // 0 {is negative} {is exponent negative} {exponent digit count [0, 15]}\r\n\t      isNeg = n & 32;\r\n\r\n\t      // Has an exponent been specified?\r\n\t      if (n & 31) {\r\n\t        e = n & 15;    // Exponent character count [1, 15]\r\n\t        k = e + 1;     // Index of first character of the significand.\r\n\r\n\t        if (e === 1)  {\r\n\t          e = NUMERALS.indexOf(str.charAt(1));\r\n\t        } else if (e === 2) {\r\n\t          e = NUMERALS.indexOf(str.charAt(1)) * 88 +\r\n\t            NUMERALS.indexOf(str.charAt(2));\r\n\t        } else {\r\n\t          e = +convertBase(str.slice(1, k), 88, 10).join('');\r\n\t        }\r\n\r\n\t        // Negative exponent?\r\n\t        if (n & 16) e = -e;\r\n\t      } else {\r\n\r\n\t        // Integer without trailing zeros.\r\n\t        // 0X00000\r\n\t        // 0 {is negative} 0 0 0 0 0\r\n\t        str = convertBase(str.slice(1), 88, 10).join('');\r\n\t        return new this(isNeg ? '-' + str : str);\r\n\t      }\r\n\t    }\r\n\r\n\t    str = convertBase(str.slice(k), 88, 10).join('');\r\n\t    e = e - str.length + 1;\r\n\t    str = str + 'e' + e;\r\n\r\n\t    return new this(isNeg ? '-' + str : str);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n\t   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n\t   *\r\n\t   */\r\n\t  function hypot() {\r\n\t    var i, n,\r\n\t      t = new this(0);\r\n\r\n\t    external = false;\r\n\r\n\t    for (i = 0; i < arguments.length;) {\r\n\t      n = new this(arguments[i++]);\r\n\t      if (!n.d) {\r\n\t        if (n.s) {\r\n\t          external = true;\r\n\t          return new this(1 / 0);\r\n\t        }\r\n\t        t = n;\r\n\t      } else if (t.d) {\r\n\t        t = t.plus(n.times(n));\r\n\t      }\r\n\t    }\r\n\r\n\t    external = true;\r\n\r\n\t    return t.sqrt();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function ln(x) {\r\n\t    return new this(x).ln();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n\t   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * log[y](x)\r\n\t   *\r\n\t   * x {number|string|Decimal} The argument of the logarithm.\r\n\t   * y {number|string|Decimal} The base of the logarithm.\r\n\t   *\r\n\t   */\r\n\t  function log(x, y) {\r\n\t    return new this(x).log(y);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function log2(x) {\r\n\t    return new this(x).log(2);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function log10(x) {\r\n\t    return new this(x).log(10);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the maximum of the arguments.\r\n\t   *\r\n\t   * arguments {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function max() {\r\n\t    return maxOrMin(this, arguments, 'lt');\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the minimum of the arguments.\r\n\t   *\r\n\t   * arguments {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function min() {\r\n\t    return maxOrMin(this, arguments, 'gt');\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n\t   * using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   * y {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function mod(x, y) {\r\n\t    return new this(x).mod(y);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   * y {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function mul(x, y) {\r\n\t    return new this(x).mul(y);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} The base.\r\n\t   * y {number|string|Decimal} The exponent.\r\n\t   *\r\n\t   */\r\n\t  function pow(x, y) {\r\n\t    return new this(x).pow(y);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n\t   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n\t   * are produced).\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n\t   *\r\n\t   */\r\n\t  function random(sd) {\r\n\t    var d, e, k, n,\r\n\t      i = 0,\r\n\t      r = new this(1),\r\n\t      rd = [];\r\n\r\n\t    if (sd === void 0) sd = this.precision;\r\n\t    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n\t    k = Math.ceil(sd / LOG_BASE);\r\n\r\n\t    if (this.crypto === false) {\r\n\t      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n\t    // Browsers supporting crypto.getRandomValues.\r\n\t    } else if (cryptoObject && cryptoObject.getRandomValues) {\r\n\t      d = cryptoObject.getRandomValues(new Uint32Array(k));\r\n\r\n\t      for (; i < k;) {\r\n\t        n = d[i];\r\n\r\n\t        // 0 <= n < 4294967296\r\n\t        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n\t        if (n >= 4.29e9) {\r\n\t          d[i] = cryptoObject.getRandomValues(new Uint32Array(1))[0];\r\n\t        } else {\r\n\r\n\t          // 0 <= n <= 4289999999\r\n\t          // 0 <= (n % 1e7) <= 9999999\r\n\t          rd[i++] = n % 1e7;\r\n\t        }\r\n\t      }\r\n\r\n\t    // Node.js supporting crypto.randomBytes.\r\n\t    } else if (cryptoObject && cryptoObject.randomBytes) {\r\n\r\n\t      // buffer\r\n\t      d = cryptoObject.randomBytes(k *= 4);\r\n\r\n\t      for (; i < k;) {\r\n\r\n\t        // 0 <= n < 2147483648\r\n\t        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n\t        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n\t        if (n >= 2.14e9) {\r\n\t          cryptoObject.randomBytes(4).copy(d, i);\r\n\t        } else {\r\n\r\n\t          // 0 <= n <= 2139999999\r\n\t          // 0 <= (n % 1e7) <= 9999999\r\n\t          rd.push(n % 1e7);\r\n\t          i += 4;\r\n\t        }\r\n\t      }\r\n\r\n\t      i = k / 4;\r\n\t    } else if (this.crypto) {\r\n\t      throw Error(decimalError + 'crypto unavailable');\r\n\t    } else {\r\n\t      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\t    }\r\n\r\n\t    k = rd[--i];\r\n\t    sd %= LOG_BASE;\r\n\r\n\t    // Convert trailing digits to zeros according to sd.\r\n\t    if (k && sd) {\r\n\t      n = mathpow(10, LOG_BASE - sd);\r\n\t      rd[i] = (k / n | 0) * n;\r\n\t    }\r\n\r\n\t    // Remove trailing words which are zero.\r\n\t    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n\t    // Zero?\r\n\t    if (i < 0) {\r\n\t      e = 0;\r\n\t      rd = [0];\r\n\t    } else {\r\n\t      e = -1;\r\n\r\n\t      // Remove leading words which are zero and adjust exponent accordingly.\r\n\t      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n\t      // Count the digits of the first word of rd to determine leading zeros.\r\n\t      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n\t      // Adjust the exponent for leading zeros of the first word of rd.\r\n\t      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n\t    }\r\n\r\n\t    r.e = e;\r\n\t    r.d = rd;\r\n\r\n\t    return r;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n\t   *\r\n\t   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function round(x) {\r\n\t    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return\r\n\t   *   1    if x > 0,\r\n\t   *  -1    if x < 0,\r\n\t   *   0    if x is 0,\r\n\t   *  -0    if x is -0,\r\n\t   *   NaN  otherwise\r\n\t   *\r\n\t   */\r\n\t  function sign(x) {\r\n\t    x = new this(x);\r\n\t    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n\t   * using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function sin(x) {\r\n\t    return new this(x).sin();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function sinh(x) {\r\n\t    return new this(x).sinh();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function sqrt(x) {\r\n\t    return new this(x).sqrt();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n\t   * using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   * y {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function sub(x, y) {\r\n\t    return new this(x).sub(y);\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function tan(x) {\r\n\t    return new this(x).tan();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function tanh(x) {\r\n\t    return new this(x).tanh();\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` truncated to an integer.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function trunc(x) {\r\n\t    return finalise(x = new this(x), x.e + 1, 1);\r\n\t  }\r\n\r\n\r\n\t  // Create and configure initial Decimal constructor.\r\n\t  Decimal = clone(Decimal);\r\n\r\n\t  // Create the internal constants from their string values.\r\n\t  LN10 = new Decimal(LN10);\r\n\t  PI = new Decimal(PI);\r\n\r\n\r\n\t  // Export.\r\n\r\n\r\n\t  // AMD.\r\n\t  if (true) {\r\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\r\n\t      return Decimal;\r\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\t  // Node and other environments that support module.exports.\r\n\t  } else if (typeof module != 'undefined' && module.exports) {\r\n\t    module.exports = Decimal;\r\n\r\n\t    if (!cryptoObject) {\r\n\t      try {\r\n\t        cryptoObject = require('cry' + 'pto');\r\n\t      } catch (e) {\r\n\t        // Ignore.\r\n\t      }\r\n\t    }\r\n\r\n\t  // Browser.\r\n\t  } else {\r\n\t    if (!globalScope) {\r\n\t      globalScope = typeof self != 'undefined' && self && self.self == self\r\n\t        ? self : Function('return this')();\r\n\t    }\r\n\r\n\t    noConflict = globalScope.Decimal;\r\n\t    Decimal.noConflict = function () {\r\n\t      globalScope.Decimal = noConflict;\r\n\t      return Decimal;\r\n\t    };\r\n\r\n\t    globalScope.Decimal = Decimal;\r\n\t  }\r\n\t})(this);\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a BigNumber, which can store numbers with arbitrary precision.\n\t   * When a matrix is provided, all elements will be converted to BigNumber.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bignumber(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    0.1 + 0.2;                                  // returns number 0.30000000000000004\n\t   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3\n\t   *\n\t   *\n\t   *    7.2e500;                                    // returns number Infinity\n\t   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500\n\t   *\n\t   * See also:\n\t   *\n\t   *    boolean, complex, index, matrix, string, unit\n\t   *\n\t   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n\t   *                                                    0 by default.\n\t   * @returns {BigNumber} The created bignumber\n\t   */\n\t  var bignumber = typed('bignumber', {\n\t    '': function () {\n\t      return new type.BigNumber(0);\n\t    },\n\n\t    'number': function (x) {\n\t      // convert to string to prevent errors in case of >15 digits\n\t      return new type.BigNumber(x + '');\n\t    },\n\n\t    'string': function (x) {\n\t      return new type.BigNumber(x);\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      // we assume a BigNumber is immutable\n\t      return x;\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return new type.BigNumber(x.n).div(x.d);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, bignumber);\n\t    }\n\t  });\n\n\t  bignumber.toTex = {\n\t    0: '0',\n\t    1: '\\\\left(${args[0]}\\\\right)'\n\t  };\n\n\t  return bignumber;\n\t}\n\n\texports.name = 'bignumber';\n\texports.factory = factory;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/**\n\t * Execute the callback function element wise for each element in array and any\n\t * nested array\n\t * Returns an array with the results\n\t * @param {Array | Matrix} array\n\t * @param {Function} callback   The callback is called with two parameters:\n\t *                              value1 and value2, which contain the current\n\t *                              element of both arrays.\n\t * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n\t *\n\t * @return {Array | Matrix} res\n\t */\n\tmodule.exports = function deepMap(array, callback, skipZeros) {\n\t  if (array && (typeof array.map === 'function')) {\n\t    // TODO: replace array.map with a for loop to improve performance\n\t    return array.map(function (x) {\n\t      return deepMap(x, callback, skipZeros);\n\t    });\n\t  }\n\t  else {\n\t    return callback(array);\n\t  }\n\t};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a boolean or convert a string or number to a boolean.\n\t   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n\t   * case of zero.\n\t   * Strings can be `'true'` or `'false'`, or can contain a number.\n\t   * When value is a matrix, all elements will be converted to boolean.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.boolean(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.boolean(0);     // returns false\n\t   *    math.boolean(1);     // returns true\n\t   *    math.boolean(-3);     // returns true\n\t   *    math.boolean('true');     // returns true\n\t   *    math.boolean('false');     // returns false\n\t   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, complex, index, matrix, string, unit\n\t   *\n\t   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n\t   * @return {boolean | Array | Matrix} The boolean value\n\t   */\n\t  var bool = typed('bool', {\n\t    '': function () {\n\t      return false;\n\t    },\n\n\t    'boolean': function (x) {\n\t      return x;\n\t    },\n\n\t    'number': function (x) {\n\t      return !!x;\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return !x.isZero();\n\t    },\n\n\t    'string': function (x) {\n\t      // try case insensitive\n\t      var lcase = x.toLowerCase();\n\t      if (lcase === 'true') {\n\t        return true;\n\t      }\n\t      else if (lcase === 'false') {\n\t        return false;\n\t      }\n\n\t      // test whether value is a valid number\n\t      var num = Number(x);\n\t      if (x != '' && !isNaN(num)) {\n\t        return !!num;\n\t      }\n\n\t      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, bool);\n\t    }\n\t  });\n\n\t  return bool;\n\t}\n\n\texports.name = 'boolean';\n\texports.factory = factory;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  // type\n\t  __webpack_require__(22),\n\n\t  // construction function\n\t  __webpack_require__(25)\n\t];\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar format = __webpack_require__(23).format;\n\tvar lazy = __webpack_require__(3).lazy;\n\n\tfunction factory (type, config, load, typed, math) {\n\t  /**\n\t   * @constructor Chain\n\t   * Wrap any value in a chain, allowing to perform chained operations on\n\t   * the value.\n\t   *\n\t   * All methods available in the math.js library can be called upon the chain,\n\t   * and then will be evaluated with the value itself as first argument.\n\t   * The chain can be closed by executing chain.done(), which will return\n\t   * the final value.\n\t   *\n\t   * The Chain has a number of special functions:\n\t   * - done()             Finalize the chained operation and return the\n\t   *                      chain's value.\n\t   * - valueOf()          The same as done()\n\t   * - toString()         Returns a string representation of the chain's value.\n\t   *\n\t   * @param {*} [value]\n\t   */\n\t  function Chain (value) {\n\t    if (!(this instanceof Chain)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    if (value && value.isChain) {\n\t      this.value = value.value;\n\t    }\n\t    else {\n\t      this.value = value;\n\t    }\n\t  }\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  Chain.prototype.type = 'Chain';\n\t  Chain.prototype.isChain = true;\n\n\t  /**\n\t   * Close the chain. Returns the final value.\n\t   * Does the same as method valueOf()\n\t   * @returns {*} value\n\t   */\n\t  Chain.prototype.done = function () {\n\t    return this.value;\n\t  };\n\n\t  /**\n\t   * Close the chain. Returns the final value.\n\t   * Does the same as method done()\n\t   * @returns {*} value\n\t   */\n\t  Chain.prototype.valueOf = function () {\n\t    return this.value;\n\t  };\n\n\t  /**\n\t   * Get a string representation of the value in the chain\n\t   * @returns {string}\n\t   */\n\t  Chain.prototype.toString = function () {\n\t    return format(this.value);\n\t  };\n\n\t  /**\n\t   * Create a proxy method for the chain\n\t   * @param {string} name\n\t   * @param {Function} fn      The function to be proxied\n\t   *                           If fn is no function, it is silently ignored.\n\t   * @private\n\t   */\n\t  function createProxy(name, fn) {\n\t    if (typeof fn === 'function') {\n\t      Chain.prototype[name] = chainify(fn);\n\t    }\n\t  }\n\n\t  /**\n\t   * Create a proxy method for the chain\n\t   * @param {string} name\n\t   * @param {function} resolver   The function resolving with the\n\t   *                              function to be proxied\n\t   * @private\n\t   */\n\t  function createLazyProxy(name, resolver) {\n\t    lazy(Chain.prototype, name, function outerResolver() {\n\t      var fn = resolver();\n\t      if (typeof fn === 'function') {\n\t        return chainify(fn);\n\t      }\n\n\t      return undefined; // if not a function, ignore\n\t    });\n\t  }\n\n\t  /**\n\t   * Make a function chainable\n\t   * @param {function} fn\n\t   * @return {Function} chain function\n\t   * @private\n\t   */\n\t  function chainify (fn) {\n\t    return function () {\n\t      var args = [this.value];  // `this` will be the context of a Chain instance\n\t      for (var i = 0; i < arguments.length; i++) {\n\t        args[i + 1] = arguments[i];\n\t      }\n\n\t      return new Chain(fn.apply(fn, args));\n\t    }\n\t  }\n\n\t  /**\n\t   * Create a proxy for a single method, or an object with multiple methods.\n\t   * Example usage:\n\t   *\n\t   *   Chain.createProxy('add', function add (x, y) {...});\n\t   *   Chain.createProxy({\n\t   *     add:      function add (x, y) {...},\n\t   *     subtract: function subtract (x, y) {...}\n\t   *   }\n\t   *\n\t   * @param {string | Object} arg0   A name (string), or an object with\n\t   *                                 functions\n\t   * @param {*} [arg1]               A function, when arg0 is a name\n\t   */\n\t  Chain.createProxy = function (arg0, arg1) {\n\t    if (typeof arg0 === 'string') {\n\t      // createProxy(name, value)\n\t      createProxy(arg0, arg1);\n\t    }\n\t    else {\n\t      // createProxy(values)\n\t      for (var prop in arg0) {\n\t        if (arg0.hasOwnProperty(prop)) {\n\t          createProxy(prop, arg0[prop]);\n\t        }\n\t      }\n\t    }\n\t  };\n\n\t  // create proxy for everything that is in math.js\n\t  Chain.createProxy(math);\n\n\t  // register on the import event, automatically add a proxy for every imported function.\n\t  math.on('import', function (name, resolver, path) {\n\t    if (path === undefined) {\n\t      // an imported function (not a data type or something special)\n\t      createLazyProxy(name, resolver);\n\t    }\n\t  });\n\n\t  return Chain;\n\t}\n\n\texports.name = 'Chain';\n\texports.path = 'type';\n\texports.factory = factory;\n\texports.math = true;  // require providing the math namespace as 5th argument\n\texports.lazy = false; // we need to register a listener on the import events, so no lazy loading\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar formatNumber = __webpack_require__(6).format;\n\tvar formatBigNumber = __webpack_require__(24).format;\n\n\t/**\n\t * Test whether value is a string\n\t * @param {*} value\n\t * @return {boolean} isString\n\t */\n\texports.isString = function(value) {\n\t  return typeof value === 'string';\n\t};\n\n\t/**\n\t * Check if a text ends with a certain string.\n\t * @param {string} text\n\t * @param {string} search\n\t */\n\texports.endsWith = function(text, search) {\n\t  var start = text.length - search.length;\n\t  var end = text.length;\n\t  return (text.substring(start, end) === search);\n\t};\n\n\t/**\n\t * Format a value of any type into a string.\n\t *\n\t * Usage:\n\t *     math.format(value)\n\t *     math.format(value, precision)\n\t *\n\t * When value is a function:\n\t *\n\t * - When the function has a property `syntax`, it returns this\n\t *   syntax description.\n\t * - In other cases, a string `'function'` is returned.\n\t *\n\t * When `value` is an Object:\n\t *\n\t * - When the object contains a property `format` being a function, this\n\t *   function is invoked as `value.format(options)` and the result is returned.\n\t * - When the object has its own `toString` method, this method is invoked\n\t *   and the result is returned.\n\t * - In other cases the function will loop over all object properties and\n\t *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n\t *\n\t * Example usage:\n\t *     math.format(2/7);                // '0.2857142857142857'\n\t *     math.format(math.pi, 3);         // '3.14'\n\t *     math.format(new Complex(2, 3));  // '2 + 3i'\n\t *     math.format('hello');            // '\"hello\"'\n\t *\n\t * @param {*} value             Value to be stringified\n\t * @param {Object | number | Function} [options]  Formatting options. See\n\t *                                                lib/utils/number:format for a\n\t *                                                description of the available\n\t *                                                options.\n\t * @return {string} str\n\t */\n\texports.format = function(value, options) {\n\t  if (typeof value === 'number') {\n\t    return formatNumber(value, options);\n\t  }\n\n\t  if (value && value.isBigNumber === true) {\n\t    return formatBigNumber(value, options);\n\t  }\n\n\t  if (value && value.isFraction === true) {\n\t    if (!options || options.fraction !== 'decimal') {\n\t      // output as ratio, like '1/3'\n\t      return (value.s * value.n) + '/' + value.d;\n\t    }\n\t    else {\n\t      // output as decimal, like '0.(3)'\n\t      return value.toString();\n\t    }\n\t  }\n\n\t  if (Array.isArray(value)) {\n\t    return formatArray(value, options);\n\t  }\n\n\t  if (exports.isString(value)) {\n\t    return '\"' + value + '\"';\n\t  }\n\n\t  if (typeof value === 'function') {\n\t    return value.syntax ? String(value.syntax) : 'function';\n\t  }\n\n\t  if (value && typeof value === 'object') {\n\t    if (typeof value.format === 'function') {\n\t      return value.format(options);\n\t    }\n\t    else if (value && value.toString() !== {}.toString()) {\n\t      // this object has a non-native toString method, use that one\n\t      return value.toString();\n\t    }\n\t    else {\n\t      var entries = [];\n\n\t      for (var key in value) {\n\t        if (value.hasOwnProperty(key)) {\n\t          entries.push('\"' + key + '\": ' + exports.format(value[key], options));\n\t        }\n\t      }\n\n\t      return '{' + entries.join(', ') + '}';\n\t    }\n\t  }\n\n\t  return String(value);\n\t};\n\n\t/**\n\t * Recursively format an n-dimensional matrix\n\t * Example output: \"[[1, 2], [3, 4]]\"\n\t * @param {Array} array\n\t * @param {Object | number | Function} [options]  Formatting options. See\n\t *                                                lib/utils/number:format for a\n\t *                                                description of the available\n\t *                                                options.\n\t * @returns {string} str\n\t */\n\tfunction formatArray (array, options) {\n\t  if (Array.isArray(array)) {\n\t    var str = '[';\n\t    var len = array.length;\n\t    for (var i = 0; i < len; i++) {\n\t      if (i != 0) {\n\t        str += ', ';\n\t      }\n\t      str += formatArray(array[i], options);\n\t    }\n\t    str += ']';\n\t    return str;\n\t  }\n\t  else {\n\t    return exports.format(array, options);\n\t  }\n\t}\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Convert a BigNumber to a formatted string representation.\n\t *\n\t * Syntax:\n\t *\n\t *    format(value)\n\t *    format(value, options)\n\t *    format(value, precision)\n\t *    format(value, fn)\n\t *\n\t * Where:\n\t *\n\t *    {number} value   The value to be formatted\n\t *    {Object} options An object with formatting options. Available options:\n\t *                     {string} notation\n\t *                         Number notation. Choose from:\n\t *                         'fixed'          Always use regular number notation.\n\t *                                          For example '123.40' and '14000000'\n\t *                         'exponential'    Always use exponential notation.\n\t *                                          For example '1.234e+2' and '1.4e+7'\n\t *                         'auto' (default) Regular number notation for numbers\n\t *                                          having an absolute value between\n\t *                                          `lower` and `upper` bounds, and uses\n\t *                                          exponential notation elsewhere.\n\t *                                          Lower bound is included, upper bound\n\t *                                          is excluded.\n\t *                                          For example '123.4' and '1.4e7'.\n\t *                     {number} precision   A number between 0 and 16 to round\n\t *                                          the digits of the number.\n\t *                                          In case of notations 'exponential' and\n\t *                                          'auto', `precision` defines the total\n\t *                                          number of significant digits returned\n\t *                                          and is undefined by default.\n\t *                                          In case of notation 'fixed',\n\t *                                          `precision` defines the number of\n\t *                                          significant digits after the decimal\n\t *                                          point, and is 0 by default.\n\t *                     {Object} exponential An object containing two parameters,\n\t *                                          {number} lower and {number} upper,\n\t *                                          used by notation 'auto' to determine\n\t *                                          when to return exponential notation.\n\t *                                          Default values are `lower=1e-3` and\n\t *                                          `upper=1e5`.\n\t *                                          Only applicable for notation `auto`.\n\t *    {Function} fn    A custom formatting function. Can be used to override the\n\t *                     built-in notations. Function `fn` is called with `value` as\n\t *                     parameter and must return a string. Is useful for example to\n\t *                     format all values inside a matrix in a particular way.\n\t *\n\t * Examples:\n\t *\n\t *    format(6.4);                                        // '6.4'\n\t *    format(1240000);                                    // '1.24e6'\n\t *    format(1/3);                                        // '0.3333333333333333'\n\t *    format(1/3, 3);                                     // '0.333'\n\t *    format(21385, 2);                                   // '21000'\n\t *    format(12.071, {notation: 'fixed'});                // '12'\n\t *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n\t *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n\t *\n\t * @param {BigNumber} value\n\t * @param {Object | Function | number} [options]\n\t * @return {string} str The formatted value\n\t */\n\texports.format = function (value, options) {\n\t  if (typeof options === 'function') {\n\t    // handle format(value, fn)\n\t    return options(value);\n\t  }\n\n\t  // handle special cases\n\t  if (!value.isFinite()) {\n\t    return value.isNaN() ? 'NaN' : (value.gt(0) ? 'Infinity' : '-Infinity');\n\t  }\n\n\t  // default values for options\n\t  var notation = 'auto';\n\t  var precision = undefined;\n\n\t  if (options !== undefined) {\n\t    // determine notation from options\n\t    if (options.notation) {\n\t      notation = options.notation;\n\t    }\n\n\t    // determine precision from options\n\t    if (typeof options === 'number') {\n\t      precision = options;\n\t    }\n\t    else if (options.precision) {\n\t      precision = options.precision;\n\t    }\n\t  }\n\n\t  // handle the various notations\n\t  switch (notation) {\n\t    case 'fixed':\n\t      return exports.toFixed(value, precision);\n\n\t    case 'exponential':\n\t      return exports.toExponential(value, precision);\n\n\t    case 'auto':\n\t      // determine lower and upper bound for exponential notation.\n\t      // TODO: implement support for upper and lower to be BigNumbers themselves\n\t      var lower = 1e-3;\n\t      var upper = 1e5;\n\t      if (options && options.exponential) {\n\t        if (options.exponential.lower !== undefined) {\n\t          lower = options.exponential.lower;\n\t        }\n\t        if (options.exponential.upper !== undefined) {\n\t          upper = options.exponential.upper;\n\t        }\n\t      }\n\n\t      // adjust the configuration of the BigNumber constructor (yeah, this is quite tricky...)\n\t      var oldConfig = {\n\t        toExpNeg: value.constructor.toExpNeg,\n\t        toExpPos: value.constructor.toExpPos\n\t      };\n\n\t      value.constructor.config({\n\t        toExpNeg: Math.round(Math.log(lower) / Math.LN10),\n\t        toExpPos: Math.round(Math.log(upper) / Math.LN10)\n\t      });\n\n\t      // handle special case zero\n\t      if (value.isZero()) return '0';\n\n\t      // determine whether or not to output exponential notation\n\t      var str;\n\t      var abs = value.abs();\n\t      if (abs.gte(lower) && abs.lt(upper)) {\n\t        // normal number notation\n\t        str = value.toSignificantDigits(precision).toFixed();\n\t      }\n\t      else {\n\t        // exponential notation\n\t        str = exports.toExponential(value, precision);\n\t      }\n\n\t      // remove trailing zeros after the decimal point\n\t      return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n\t        var digits = arguments[2];\n\t        var e = arguments[4];\n\t        return (digits !== '.') ? digits + e : e;\n\t      });\n\n\t    default:\n\t      throw new Error('Unknown notation \"' + notation + '\". ' +\n\t          'Choose \"auto\", \"exponential\", or \"fixed\".');\n\t  }\n\t};\n\n\t/**\n\t * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n\t * @param {BigNumber} value\n\t * @param {number} [precision]  Number of digits in formatted output.\n\t *                              If not provided, the maximum available digits\n\t *                              is used.\n\t * @returns {string} str\n\t */\n\texports.toExponential = function (value, precision) {\n\t  if (precision !== undefined) {\n\t    return value.toExponential(precision - 1); // Note the offset of one\n\t  }\n\t  else {\n\t    return value.toExponential();\n\t  }\n\t};\n\n\t/**\n\t * Format a number with fixed notation.\n\t * @param {BigNumber} value\n\t * @param {number} [precision=0]        Optional number of decimals after the\n\t *                                      decimal point. Zero by default.\n\t */\n\texports.toFixed = function (value, precision) {\n\t  return value.toFixed(precision || 0);\n\t  // Note: the (precision || 0) is needed as the toFixed of BigNumber has an\n\t  // undefined default precision instead of 0.\n\t};\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Wrap any value in a chain, allowing to perform chained operations on\n\t   * the value.\n\t   *\n\t   * All methods available in the math.js library can be called upon the chain,\n\t   * and then will be evaluated with the value itself as first argument.\n\t   * The chain can be closed by executing `chain.done()`, which returns\n\t   * the final value.\n\t   *\n\t   * The chain has a number of special functions:\n\t   *\n\t   * - `done()`     Finalize the chain and return the chain's value.\n\t   * - `valueOf()`  The same as `done()`\n\t   * - `toString()` Executes `math.format()` onto the chain's value, returning\n\t   *                a string representation of the value.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.chain(value)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.chain(3)\n\t   *         .add(4)\n\t   *         .subtract(2)\n\t   *         .done();     // 5\n\t   *\n\t   *     math.chain( [[1, 2], [3, 4]] )\n\t   *         .subset(math.index(0, 0), 8)\n\t   *         .multiply(3)\n\t   *         .done();     // [[24, 6], [9, 12]]\n\t   *\n\t   * @param {*} [value]   A value of any type on which to start a chained operation.\n\t   * @return {math.type.Chain} The created chain\n\t   */\n\t  return typed('chain', {\n\t    '': function() {\n\t      return new type.Chain();\n\t    },\n\n\t    'any': function(value) {\n\t      return new type.Chain(value);\n\t    }\n\t  });\n\t}\n\n\texports.name = 'chain';\n\texports.factory = factory;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  // type\n\t  __webpack_require__(27),\n\n\t  // construction function\n\t  __webpack_require__(31)\n\t];\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Complex = __webpack_require__(28);\n\tvar format = __webpack_require__(6).format;\n\tvar isNumber = __webpack_require__(6).isNumber;\n\n\tfunction factory (type, config, load, typed, math) {\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  Complex.prototype.type = 'Complex';\n\t  Complex.prototype.isComplex = true;\n\n\n\t  /**\n\t   * Get a JSON representation of the complex number\n\t   * @returns {Object} Returns a JSON object structured as:\n\t   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n\t   */\n\t  Complex.prototype.toJSON = function () {\n\t    return {\n\t      mathjs: 'Complex',\n\t      re: this.re,\n\t      im: this.im\n\t    };\n\t  };\n\n\t  /*\n\t   * Return the value of the complex number in polar notation\n\t   * The angle phi will be set in the interval of [-pi, pi].\n\t   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n\t   */\n\t  Complex.prototype.toPolar = function () {\n\t    return {\n\t      r: this.abs(),\n\t      phi: this.arg()\n\t    };\n\t  };\n\n\t  /**\n\t   * Get a string representation of the complex number,\n\t   * with optional formatting options.\n\t   * @param {Object | number | Function} [options]  Formatting options. See\n\t   *                                                lib/utils/number:format for a\n\t   *                                                description of the available\n\t   *                                                options.\n\t   * @return {string} str\n\t   */\n\t  Complex.prototype.format = function (options) {\n\t    var str = '';\n\t    var im = this.im;\n\t    var re = this.re;\n\t    var strRe = format(this.re, options);\n\t    var strIm = format(this.im, options);\n\n\t    // round either re or im when smaller than the configured precision\n\t    var precision = isNumber(options) ? options : options ? options.precision : null;\n\t    if (precision !== null) {\n\t      var epsilon = Math.pow(10, -precision);\n\t      if (Math.abs(re / im) < epsilon) {\n\t        re = 0;\n\t      }\n\t      if (Math.abs(im / re) < epsilon) {\n\t        im = 0;\n\t      }\n\t    }\n\n\t    if (im == 0) {\n\t      // real value\n\t      str = strRe;\n\t    } else if (re == 0) {\n\t      // purely complex value\n\t      if (im == 1) {\n\t        str = 'i';\n\t      } else if (im == -1) {\n\t        str = '-i';\n\t      } else {\n\t        str = strIm + 'i';\n\t      }\n\t    } else {\n\t      // complex value\n\t      if (im > 0) {\n\t        if (im == 1) {\n\t          str = strRe + ' + i';\n\t        } else {\n\t          str = strRe + ' + ' + strIm + 'i';\n\t        }\n\t      } else {\n\t        if (im == -1) {\n\t          str = strRe + ' - i';\n\t        } else {\n\t          str = strRe + ' - ' + strIm.substring(1) + 'i';\n\t        }\n\t      }\n\t    }\n\t    return str;\n\t  };\n\n\t  /**\n\t   * Create a complex number from polar coordinates\n\t   *\n\t   * Usage:\n\t   *\n\t   *     Complex.fromPolar(r: number, phi: number) : Complex\n\t   *     Complex.fromPolar({r: number, phi: number}) : Complex\n\t   *\n\t   * @param {*} args...\n\t   * @return {Complex}\n\t   */\n\t  Complex.fromPolar = function (args) {\n\t    switch (arguments.length) {\n\t      case 1:\n\t        var arg = arguments[0];\n\t        if (typeof arg === 'object') {\n\t          return Complex(arg);\n\t        }\n\t        throw new TypeError('Input has to be an object with r and phi keys.');\n\n\t      case 2:\n\t        var r = arguments[0],\n\t            phi = arguments[1];\n\t        if (isNumber(r)) {\n\t          if (phi && phi.isUnit && phi.hasBase('ANGLE')) {\n\t            // convert unit to a number in radians\n\t            phi = phi.toNumber('rad');\n\t          }\n\n\t          if (isNumber(phi)) {\n\t            return new Complex({r: r, phi: phi});\n\t          }\n\n\t          throw new TypeError('Phi is not a number nor an angle unit.');\n\t        } else {\n\t          throw new TypeError('Radius r is not a number.');\n\t        }\n\n\t      default:\n\t        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n\t    }\n\t  };\n\n\n\t  Complex.prototype.valueOf = Complex.prototype.toString;\n\n\t  /**\n\t   * Create a Complex number from a JSON object\n\t   * @param {Object} json  A JSON Object structured as\n\t   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n\t   *                       All properties are optional, default values\n\t   *                       for `re` and `im` are 0.\n\t   * @return {Complex} Returns a new Complex number\n\t   */\n\t  Complex.fromJSON = function (json) {\n\t    return new Complex(json);\n\t  };\n\n\t  // apply the current epsilon\n\t  Complex.EPSILON = config.epsilon;\n\n\t  // listen for changed in the configuration, automatically apply changed epsilon\n\t  math.on('config', function (curr, prev) {\n\t    if (curr.epsilon !== prev.epsilon) {\n\t      Complex.EPSILON = curr.epsilon;\n\t    }\n\t  });\n\n\t  return Complex;\n\t}\n\n\texports.name = 'Complex';\n\texports.path = 'type';\n\texports.factory = factory;\n\texports.math = true; // request access to the math namespace\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**\n\t * @license Complex.js v2.0.1 11/02/2016\n\t *\n\t * Copyright (c) 2016, Robert Eisele (robert@xarg.org)\n\t * Dual licensed under the MIT or GPL Version 2 licenses.\n\t **/\n\n\t/**\n\t *\n\t * This class allows the manipilation of complex numbers.\n\t * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n\t *\n\t * Object form\n\t * { re: <real>, im: <imaginary> }\n\t * { arg: <angle>, abs: <radius> }\n\t * { phi: <angle>, r: <radius> }\n\t *\n\t * Double form\n\t * 99.3 - Single double value\n\t *\n\t * String form\n\t * \"23.1337\" - Simple real number\n\t * \"15+3i\" - a simple complex number\n\t * \"3-i\" - a simple complex number\n\t *\n\t * Example:\n\t *\n\t * var c = new Complex(\"99.3+8i\");\n\t * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n\t *\n\t */\n\n\t(function(root) {\n\n\t  \"use strict\";\n\n\t  var P = {'re': 0, 'im': 0};\n\n\t  Math.cosh = Math.cosh || function(x) {\n\t    return (Math.exp(x) + Math.exp(-x)) * 0.5;\n\t  };\n\n\t  Math.sinh = Math.sinh || function(x) {\n\t    return (Math.exp(x) - Math.exp(-x)) * 0.5;\n\t  };\n\n\t  var parser_exit = function() {\n\t    throw SyntaxError(\"Invalid Param\");\n\t  };\n\n\t  /**\n\t   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n\t   *\n\t   * @param {number} a\n\t   * @param {number} b\n\t   * @returns {number}\n\t   */\n\t  function logHypot(a, b) {\n\n\t    var _a = Math.abs(a);\n\t    var _b = Math.abs(b);\n\n\t    if (a === 0) {\n\t      return Math.log(_b);\n\t    }\n\n\t    if (b === 0) {\n\t      return Math.log(_a);\n\t    }\n\n\t    if (_a < 3000 && _b < 3000) {\n\t      return Math.log(a * a + b * b) * 0.5;\n\t    }\n\n\t    /* I got 4 ideas to compute this property without overflow:\n\t     *\n\t     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n\t     *\n\t     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n\t     Math.log(a * a + b * b) / 2\n\n\t     *\n\t     *\n\t     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n\t     var fn = function(a, b) {\n\t     a = Math.abs(a);\n\t     b = Math.abs(b);\n\t     var t = Math.min(a, b);\n\t     a = Math.max(a, b);\n\t     t = t / a;\n\n\t     return Math.log(a) + Math.log(1 + t * t) / 2;\n\t     };\n\n\t     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n\t     Math.log(a / Math.cos(Math.atan2(b, a)))\n\n\t     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n\t     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n\t     */\n\n\t    return Math.log(a / Math.cos(Math.atan2(b, a)));\n\t  }\n\n\t  var parse = function(a, b) {\n\n\t    if (a === undefined || a === null) {\n\t      P[\"re\"] =\n\t      P[\"im\"] = 0;\n\t    } else if (b !== undefined) {\n\t      P[\"re\"] = a;\n\t      P[\"im\"] = b;\n\t    } else switch (typeof a) {\n\n\t      case \"object\":\n\n\t        if (\"im\" in a && \"re\" in a) {\n\t          P[\"re\"] = a[\"re\"];\n\t          P[\"im\"] = a[\"im\"];\n\t        } else if (\"abs\" in a && \"arg\" in a) {\n\t          P[\"re\"] = a[\"abs\"] * Math.cos(a[\"arg\"]);\n\t          P[\"im\"] = a[\"abs\"] * Math.sin(a[\"arg\"]);\n\t        } else if (\"r\" in a && \"phi\" in a) {\n\t          P[\"re\"] = a[\"r\"] * Math.cos(a[\"phi\"]);\n\t          P[\"im\"] = a[\"r\"] * Math.sin(a[\"phi\"]);\n\t        } else {\n\t          parser_exit();\n\t        }\n\t        break;\n\n\t      case \"string\":\n\n\t        P[\"im\"] = /* void */\n\t        P[\"re\"] = 0;\n\n\t        var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n\t        var plus = 1;\n\t        var minus = 0;\n\n\t        if (tokens === null) {\n\t          parser_exit();\n\t        }\n\n\t        for (var i = 0; i < tokens.length; i++) {\n\n\t          var c = tokens[i];\n\n\t          if (c === ' ' || c === '\\t' || c === '\\n') {\n\t            /* void */\n\t          } else if (c === '+') {\n\t            plus++;\n\t          } else if (c === '-') {\n\t            minus++;\n\t          } else if (c === 'i' || c === 'I') {\n\n\t            if (plus + minus === 0) {\n\t              parser_exit();\n\t            }\n\n\t            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n\t              P[\"im\"]+= parseFloat((minus % 2 ? \"-\" : \"\") + tokens[i + 1]);\n\t              i++;\n\t            } else {\n\t              P[\"im\"]+= parseFloat((minus % 2 ? \"-\" : \"\") + \"1\");\n\t            }\n\t            plus = minus = 0;\n\n\t          } else {\n\n\t            if (plus + minus === 0 || isNaN(c)) {\n\t              parser_exit();\n\t            }\n\n\t            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n\t              P[\"im\"]+= parseFloat((minus % 2 ? \"-\" : \"\") + c);\n\t              i++;\n\t            } else {\n\t              P[\"re\"]+= parseFloat((minus % 2 ? \"-\" : \"\") + c);\n\t            }\n\t            plus = minus = 0;\n\t          }\n\t        }\n\n\t        // Still something on the stack\n\t        if (plus + minus > 0) {\n\t          parser_exit();\n\t        }\n\t        break;\n\n\t      case \"number\":\n\t        P[\"im\"] = 0;\n\t        P[\"re\"] = a;\n\t        break;\n\n\t      default:\n\t        parser_exit();\n\t    }\n\n\t    if (isNaN(P[\"re\"]) || isNaN(P[\"im\"])) {\n\t      // If a calculation is NaN, we treat it as NaN and don't throw\n\t      //parser_exit();\n\t    }\n\t  };\n\n\t  /**\n\t   * @constructor\n\t   * @returns {Complex}\n\t   */\n\t  function Complex(a, b) {\n\n\t    if (!(this instanceof Complex)) {\n\t      return new Complex(a, b);\n\t    }\n\n\t    parse(a, b); // mutates P\n\n\t    this[\"re\"] = P[\"re\"];\n\t    this[\"im\"] = P[\"im\"];\n\t  }\n\n\t  Complex.prototype = {\n\n\t    \"re\": 0,\n\t    \"im\": 0,\n\n\t    /**\n\t     * Calculates the sign of a complex number\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"sign\": function() {\n\n\t      var abs = this[\"abs\"]();\n\n\t      return new Complex(\n\t              this[\"re\"] / abs,\n\t              this[\"im\"] / abs);\n\t    },\n\n\t    /**\n\t     * Adds two complex numbers\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"add\": function(a, b) {\n\n\t      parse(a, b); // mutates P\n\n\t      return new Complex(\n\t              this[\"re\"] + P[\"re\"],\n\t              this[\"im\"] + P[\"im\"]);\n\t    },\n\n\t    /**\n\t     * Subtracts two complex numbers\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"sub\": function(a, b) {\n\n\t      parse(a, b); // mutates P\n\n\t      return new Complex(\n\t              this[\"re\"] - P[\"re\"],\n\t              this[\"im\"] - P[\"im\"]);\n\t    },\n\n\t    /**\n\t     * Multiplies two complex numbers\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"mul\": function(a, b) {\n\n\t      parse(a, b); // mutates P\n\n\t      // Besides the addition/subtraction, this helps having a solution for rational Infinity\n\t      if (P['im'] === 0 && this['im'] === 0) {\n\t        return new Complex(this['re'] * P['re'], 0);\n\t      }\n\n\t      return new Complex(\n\t              this[\"re\"] * P[\"re\"] - this[\"im\"] * P[\"im\"],\n\t              this[\"re\"] * P[\"im\"] + this[\"im\"] * P[\"re\"]);\n\t    },\n\n\t    /**\n\t     * Divides two complex numbers\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"div\": function(a, b) {\n\n\t      parse(a, b); // mutates P\n\n\t      a = this[\"re\"];\n\t      b = this[\"im\"];\n\n\t      var c = P[\"re\"];\n\t      var d = P[\"im\"];\n\t      var t, x;\n\n\t      // Divisor is zero\n\t      if (0 === c && 0 === d) {\n\t        return new Complex(\n\t                (a !== 0) ? (a / 0) : 0,\n\t                (b !== 0) ? (b / 0) : 0);\n\t      }\n\n\t      // Divisor is rational\n\t      if (0 === d) {\n\t        return new Complex(a / c, b / c);\n\t      }\n\n\t      if (Math.abs(c) < Math.abs(d)) {\n\n\t        x = c / d;\n\t        t = c * x + d;\n\n\t        return new Complex(\n\t                (a * x + b) / t,\n\t                (b * x - a) / t);\n\n\t      } else {\n\n\t        x = d / c;\n\t        t = d * x + c;\n\n\t        return new Complex(\n\t                (a + b * x) / t,\n\t                (b - a * x) / t);\n\t      }\n\t    },\n\n\t    /**\n\t     * Calculate the power of two complex numbers\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"pow\": function(a, b) {\n\n\t      parse(a, b); // mutates P\n\n\t      a = this[\"re\"];\n\t      b = this[\"im\"];\n\n\t      if (a === 0 && b === 0) {\n\t        return new Complex(0, 0);\n\t      }\n\n\t      var arg = Math.atan2(b, a);\n\t      var loh = logHypot(a, b);\n\n\t      if (P[\"im\"] === 0) {\n\n\t        if (b === 0 && a >= 0) {\n\n\t          return new Complex(Math.pow(a, P[\"re\"]), 0);\n\n\t        } else if (a === 0) {\n\n\t          switch (P[\"re\"] % 4) {\n\t            case 0:\n\t              return new Complex(Math.pow(b, P[\"re\"]), 0);\n\t            case 1:\n\t              return new Complex(0, Math.pow(b, P[\"re\"]));\n\t            case 2:\n\t              return new Complex(-Math.pow(b, P[\"re\"]), 0);\n\t            case 3:\n\t              return new Complex(0, -Math.pow(b, P[\"re\"]));\n\t          }\n\t        }\n\t      }\n\n\t      /* I couldn\"t find a good formula, so here is a derivation and optimization\n\t       *\n\t       * z_1^z_2 = (a + bi)^(c + di)\n\t       *         = exp((c + di) * log(a + bi)\n\t       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n\t       * =>...\n\t       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n\t       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n\t       *\n\t       * =>...\n\t       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n\t       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n\t       *\n\t       * =>\n\t       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n\t       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n\t       *\n\t       */\n\n\t      a = Math.exp(P[\"re\"] * loh - P[\"im\"] * arg);\n\t      b = P[\"im\"] * loh + P[\"re\"] * arg;\n\t      return new Complex(\n\t              a * Math.cos(b),\n\t              a * Math.sin(b));\n\t    },\n\n\t    /**\n\t     * Calculate the complex square root\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"sqrt\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\t      var r = this[\"abs\"]();\n\n\t      var re, im;\n\n\t      if (a >= 0 && b === 0) {\n\t        return new Complex(Math.sqrt(a), 0);\n\t      }\n\n\t      if (a >= 0) {\n\t        re = 0.5 * Math.sqrt(2.0 * (r + a));\n\t      } else {\n\t        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n\t      }\n\n\t      if (a <= 0) {\n\t        im = 0.5 * Math.sqrt(2.0 * (r - a));\n\t      } else {\n\t        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n\t      }\n\n\t      return new Complex(re, b >= 0 ? im : -im);\n\t    },\n\n\t    /**\n\t     * Calculate the complex exponent\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"exp\": function() {\n\n\t      var tmp = Math.exp(this[\"re\"]);\n\n\t      if (this[\"im\"] === 0) {\n\t        //return new Complex(tmp, 0);\n\t      }\n\t      return new Complex(\n\t              tmp * Math.cos(this[\"im\"]),\n\t              tmp * Math.sin(this[\"im\"]));\n\t    },\n\n\t    /**\n\t     * Calculate the natural log\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"log\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\t      \n\t      if (b === 0 && a > 0) {\n\t        //return new Complex(Math.log(a), 0);\n\t      }\n\n\t      return new Complex(\n\t              logHypot(a, b),\n\t              Math.atan2(b, a));\n\t    },\n\n\t    /**\n\t     * Calculate the magniture of the complex number\n\t     *\n\t     * @returns {number}\n\t     */\n\t    \"abs\": function() {\n\n\t      var a = Math.abs(this[\"re\"]);\n\t      var b = Math.abs(this[\"im\"]);\n\n\t      if (a < 3000 && b < 3000) {\n\t        return Math.sqrt(a * a + b * b);\n\t      }\n\n\t      if (a < b) {\n\t        a = b;\n\t        b = this[\"re\"] / this[\"im\"];\n\t      } else {\n\t        b = this[\"im\"] / this[\"re\"];\n\t      }\n\t      return a * Math.sqrt(1 + b * b);\n\t    },\n\n\t    /**\n\t     * Calculate the angle of the complex number\n\t     *\n\t     * @returns {number}\n\t     */\n\t    \"arg\": function() {\n\n\t      return Math.atan2(this[\"im\"], this[\"re\"]);\n\t    },\n\n\t    /**\n\t     * Calculate the sine of the complex number\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"sin\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      return new Complex(\n\t              Math.sin(a) * Math.cosh(b),\n\t              Math.cos(a) * Math.sinh(b));\n\t    },\n\n\t    /**\n\t     * Calculate the cosine\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"cos\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      return new Complex(\n\t              Math.cos(a) * Math.cosh(b),\n\t             -Math.sin(a) * Math.sinh(b));\n\t    },\n\n\t    /**\n\t     * Calculate the tangent\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"tan\": function() {\n\n\t      var a = 2 * this[\"re\"];\n\t      var b = 2 * this[\"im\"];\n\t      var d = Math.cos(a) + Math.cosh(b);\n\n\t      return new Complex(\n\t              Math.sin(a) / d,\n\t              Math.sinh(b) / d);\n\t    },\n\n\t    /**\n\t     * Calculate the cotangent\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"cot\": function() {\n\n\t      var a = 2 * this[\"re\"];\n\t      var b = 2 * this[\"im\"];\n\t      var d = Math.cos(a) - Math.cosh(b);\n\n\t      return new Complex(\n\t             -Math.sin(a) / d,\n\t              Math.sinh(b) / d);\n\t    },\n\n\t    /**\n\t     * Calculate the secant\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"sec\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\t      var d = 0.5 * Math.cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n\t      return new Complex(\n\t              Math.cos(a) * Math.cosh(b) / d,\n\t              Math.sin(a) * Math.sinh(b) / d);\n\t    },\n\n\t    /**\n\t     * Calculate the cosecans\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"csc\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\t      var d = 0.5 * Math.cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n\t      return new Complex(\n\t              Math.sin(a) * Math.cosh(b) / d,\n\t             -Math.cos(a) * Math.sinh(b) / d);\n\t    },\n\n\t    /**\n\t     * Calculate the complex arcus sinus\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"asin\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      var t1 = new Complex(\n\t               b * b - a * a + 1,\n\t              -2 * a * b)['sqrt']();\n\n\t      var t2 = new Complex(\n\t              t1['re'] - b,\n\t              t1['im'] + a)['log']();\n\n\t      return new Complex(t2['im'], -t2['re']);\n\t    },\n\n\t    /**\n\t     * Calculate the complex arcus cosinus\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"acos\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      var t1 = new Complex(\n\t               b * b - a * a + 1,\n\t              -2 * a * b)['sqrt']();\n\n\t      var t2 = new Complex(\n\t              t1[\"re\"] - b,\n\t              t1[\"im\"] + a)['log']();\n\n\t      return new Complex(Math.PI / 2 - t2[\"im\"], t2[\"re\"]);\n\t    },\n\n\t    /**\n\t     * Calculate the complex arcus tangent\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"atan\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      if (a === 0) {\n\n\t        if (b === 1) {\n\t          return new Complex(0, Infinity);\n\t        }\n\n\t        if (b === -1) {\n\t          return new Complex(0, -Infinity);\n\t        }\n\t      }\n\n\t      var d = a * a + (1.0 - b) * (1.0 - b);\n\n\t      var t1 = new Complex(\n\t              (1 - b * b - a * a) / d,\n\t              -2 * a / d).log();\n\n\t      return new Complex(-0.5 * t1[\"im\"], 0.5 * t1[\"re\"]);\n\t    },\n\n\t    /**\n\t     * Calculate the complex arcus cotangent\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"acot\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      if (b === 0) {\n\t        return new Complex(Math.atan2(1, a), 0);\n\t      }\n\n\t      var d = a * a + b * b;\n\t      return (d !== 0)\n\t              ? new Complex(\n\t                      a / d,\n\t                     -b / d).atan()\n\t              : new Complex(\n\t                      (a !== 0) ? a / 0 : 0,\n\t                      (b !== 0) ?-b / 0 : 0).atan();\n\t    },\n\n\t    /**\n\t     * Calculate the complex arcus secant\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"asec\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      if (a === 0 && b === 0) {\n\t        return new Complex(0, Infinity);\n\t      }\n\n\t      var d = a * a + b * b;\n\t      return (d !== 0)\n\t              ? new Complex(\n\t                      a / d,\n\t                      -b / d).acos()\n\t              : new Complex(\n\t                      (a !== 0) ? a / 0 : 0,\n\t                      (b !== 0) ?-b / 0 : 0).acos();\n\t    },\n\n\t    /**\n\t     * Calculate the complex arcus cosecans\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"acsc\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      if (a === 0 && b === 0) {\n\t        return new Complex(Math.PI / 2, Infinity);\n\t      }\n\n\t      var d = a * a + b * b;\n\t      return (d !== 0)\n\t              ? new Complex(\n\t                      a / d,\n\t                     -b / d).asin()\n\t              : new Complex(\n\t                      (a !== 0) ? a / 0 : 0,\n\t                      (b !== 0) ?-b / 0 : 0).asin();\n\t    },\n\n\t    /**\n\t     * Calculate the complex sinh\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"sinh\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      return new Complex(\n\t              Math.sinh(a) * Math.cos(b),\n\t              Math.cosh(a) * Math.sin(b));\n\t    },\n\n\t    /**\n\t     * Calculate the complex cosh\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"cosh\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      return new Complex(\n\t              Math.cosh(a) * Math.cos(b),\n\t              Math.sinh(a) * Math.sin(b));\n\t    },\n\n\t    /**\n\t     * Calculate the complex tanh\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"tanh\": function() {\n\n\t      var a = 2 * this[\"re\"];\n\t      var b = 2 * this[\"im\"];\n\t      var d = Math.cosh(a) + Math.cos(b);\n\n\t      return new Complex(\n\t              Math.sinh(a) / d,\n\t              Math.sin(b) / d);\n\t    },\n\n\t    /**\n\t     * Calculate the complex coth\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"coth\": function() {\n\n\t      var a = 2 * this[\"re\"];\n\t      var b = 2 * this[\"im\"];\n\t      var d = Math.cosh(a) - Math.cos(b);\n\n\t      return new Complex(\n\t              Math.sinh(a) / d,\n\t             -Math.sin(b) / d);\n\t    },\n\n\t    /**\n\t     * Calculate the complex coth\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"csch\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\t      var d = Math.cos(2 * b) - Math.cosh(2 * a);\n\n\t      return new Complex(\n\t           -2 * Math.sinh(a) * Math.cos(b) / d, \n\t            2 * Math.cosh(a) * Math.sin(b) / d);\n\t    },\n\n\t    /**\n\t     * Calculate the complex sech\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"sech\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\t      var d = Math.cos(2 * b) + Math.cosh(2 * a);\n\n\t      return new Complex(\n\t              2 * Math.cosh(a) * Math.cos(b) / d, \n\t             -2 * Math.sinh(a) * Math.sin(b) / d);\n\t    },\n\n\t    /**\n\t     * Calculate the complex asinh\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"asinh\": function() {\n\n\t      var tmp = this[\"im\"];\n\t      this[\"im\"] = -this[\"re\"];\n\t      this[\"re\"] = tmp;\n\t      var res = this[\"asin\"]();\n\n\t      this[\"re\"] = -this[\"im\"];\n\t      this[\"im\"] = tmp;\n\t      tmp = res[\"re\"];\n\n\t      res[\"re\"] = -res[\"im\"];\n\t      res[\"im\"] = tmp;\n\t      return res;\n\t    },\n\n\t    /**\n\t     * Calculate the complex asinh\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"acosh\": function() {\n\n\t      var tmp;\n\t      var res = this[\"acos\"]();\n\t      if (res[\"im\"] <= 0) {\n\t        tmp = res[\"re\"];\n\t        res[\"re\"] = -res[\"im\"];\n\t        res[\"im\"] = tmp;\n\t      } else {\n\t        tmp = res[\"im\"];\n\t        res[\"im\"] = -res[\"re\"];\n\t        res[\"re\"] = tmp;\n\t      }\n\t      return res;\n\t    },\n\n\t    /**\n\t     * Calculate the complex atanh\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"atanh\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      var noIM = a > 1 && b === 0;\n\t      var oneMinus = 1 - a;\n\t      var onePlus = 1 + a;\n\t      var d = oneMinus * oneMinus + b * b;\n\n\t      var x = (d !== 0)\n\t              ? new Complex(\n\t                      (onePlus * oneMinus - b * b) / d,\n\t                      (b * oneMinus + onePlus * b) / d)\n\t              : new Complex(\n\t                      (a !== -1) ? (a / 0) : 0,\n\t                      (b !== 0) ? (b / 0) : 0);\n\n\t      var temp = x[\"re\"];\n\t      x[\"re\"] = logHypot(x[\"re\"], x[\"im\"]) / 2;\n\t      x[\"im\"] = Math.atan2(x[\"im\"], temp) / 2;\n\t      if (noIM) {\n\t        x[\"im\"] = -x[\"im\"];\n\t      }\n\t      return x;\n\t    },\n\n\t    /**\n\t     * Calculate the complex acoth\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"acoth\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      if (a === 0 && b === 0) {\n\n\t        return new Complex(0, Math.PI / 2);\n\t      }\n\n\t      var d = a * a + b * b;\n\t      return (d !== 0)\n\t              ? new Complex(\n\t                      a / d,\n\t                     -b / d).atanh()\n\t              : new Complex(\n\t                      (a !== 0) ? a / 0 : 0,\n\t                      (b !== 0) ?-b / 0 : 0).atanh();\n\t    },\n\n\t    /**\n\t     * Calculate the complex acsch\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"acsch\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      if (b === 0) {\n\n\t        return new Complex(\n\t                (a !== 0)\n\t                ? Math.log(a + Math.sqrt(a * a + 1))\n\t                : Infinity, 0);\n\t      }\n\n\t      var d = a * a + b * b;\n\t      return (d !== 0)\n\t              ? new Complex(\n\t                      a / d,\n\t                      -b / d).asinh()\n\t              : new Complex(\n\t                      (a !== 0) ? a / 0 : 0,\n\t                      (b !== 0) ?-b / 0 : 0).asinh();\n\t    },\n\n\t    /**\n\t     * Calculate the complex asech\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"asech\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      if (a === 0 && b === 0) {\n\t        return new Complex(Infinity, 0);\n\t      }\n\n\t      var d = a * a + b * b;\n\t      return (d !== 0)\n\t              ? new Complex(\n\t                      a / d,\n\t                     -b / d).acosh()\n\t              : new Complex(\n\t                      (a !== 0) ? a / 0 : 0,\n\t                      (b !== 0) ?-b / 0 : 0).acosh();\n\t    },\n\n\t    /**\n\t     * Calculate the complex inverse 1/z\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"inverse\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\n\t      var d = a * a + b * b;\n\n\t      return new Complex(\n\t              a !== 0 ? a / d : 0,\n\t              b !== 0 ?-b / d : 0);\n\t    },\n\n\t    /**\n\t     * Returns the complex conjugate\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"conjugate\": function() {\n\n\t      return new Complex(this[\"re\"], -this[\"im\"]);\n\t    },\n\n\t    /**\n\t     * Gets the negated complex number\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"neg\": function() {\n\n\t      return new Complex(-this[\"re\"], -this[\"im\"]);\n\t    },\n\n\t    /**\n\t     * Ceils the actual complex number\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"ceil\": function(places) {\n\n\t      places = Math.pow(10, places || 0);\n\n\t      return new Complex(\n\t              Math.ceil(this[\"re\"] * places) / places,\n\t              Math.ceil(this[\"im\"] * places) / places);\n\t    },\n\n\t    /**\n\t     * Floors the actual complex number\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"floor\": function(places) {\n\n\t      places = Math.pow(10, places || 0);\n\n\t      return new Complex(\n\t              Math.floor(this[\"re\"] * places) / places,\n\t              Math.floor(this[\"im\"] * places) / places);\n\t    },\n\n\t    /**\n\t     * Ceils the actual complex number\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"round\": function(places) {\n\n\t      places = Math.pow(10, places || 0);\n\n\t      return new Complex(\n\t              Math.round(this[\"re\"] * places) / places,\n\t              Math.round(this[\"im\"] * places) / places);\n\t    },\n\n\t    /**\n\t     * Compares two complex numbers\n\t     *\n\t     * @returns {boolean}\n\t     */\n\t    \"equals\": function(a, b) {\n\n\t      parse(a, b); // mutates P\n\n\t      return Math.abs(P[\"re\"] - this[\"re\"]) <= Complex[\"EPSILON\"] &&\n\t             Math.abs(P[\"im\"] - this[\"im\"]) <= Complex[\"EPSILON\"];\n\t    },\n\n\t    /**\n\t     * Clones the actual object\n\t     *\n\t     * @returns {Complex}\n\t     */\n\t    \"clone\": function() {\n\n\t      return new Complex(this[\"re\"], this[\"im\"]);\n\t    },\n\n\t    /**\n\t     * Gets a string of the actual complex number\n\t     *\n\t     * @returns {string}\n\t     */\n\t    \"toString\": function() {\n\n\t      var a = this[\"re\"];\n\t      var b = this[\"im\"];\n\t      var ret = \"\";\n\n\t      if (isNaN(a) || isNaN(b)) {\n\t        return \"NaN\";\n\t      }\n\n\t      if (a !== 0) {\n\t        ret+= a;\n\t      }\n\n\t      if (b !== 0) {\n\n\t        if (a !== 0) {\n\t          ret+= b < 0 ? \" - \" : \" + \";\n\t        } else if (b < 0) {\n\t          ret+= \"-\";\n\t        }\n\n\t        b = Math.abs(b);\n\n\t        if (1 !== b) {\n\t          ret+= b;\n\t        }\n\t        ret+= \"i\";\n\t      }\n\n\t      if (!ret)\n\t        return \"0\";\n\n\t      return ret;\n\t    },\n\n\t    /**\n\t     * Returns the actual number as a vector\n\t     *\n\t     * @returns {Array}\n\t     */\n\t    \"toVector\": function() {\n\n\t      return [this[\"re\"], this[\"im\"]];\n\t    },\n\n\t    /**\n\t     * Returns the actual real value of the current object\n\t     *\n\t     * @returns {number|null}\n\t     */\n\t    \"valueOf\": function() {\n\n\t      if (this[\"im\"] === 0) {\n\t        return this[\"re\"];\n\t      }\n\t      return null;\n\t    },\n\n\t    /**\n\t     * Checks if the given complex number is not a number\n\t     *\n\t     * @returns {boolean}\n\t     */\n\t    isNaN: function() {\n\t      return isNaN(this['re']) || isNaN(this['im']);\n\t    }\n\t  };\n\n\t  Complex[\"ZERO\"] = new Complex(0, 0);\n\t  Complex[\"ONE\"] = new Complex(1, 0);\n\t  Complex[\"I\"] = new Complex(0, 1);\n\t  Complex[\"PI\"] = new Complex(Math.PI, 0);\n\t  Complex[\"E\"] = new Complex(Math.E, 0);\n\t  Complex['EPSILON'] = 1e-16;\n\n\t  if (\"function\" === \"function\" && __webpack_require__(30)[\"amd\"]) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return Complex;\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (true) {\n\t    module[\"exports\"] = Complex;\n\t  } else {\n\t    root[\"Complex\"] = Complex;\n\t  }\n\t  \n\t})(this);\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(29)(module)))\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Create a complex value or convert a value to a complex value.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.complex()                           // creates a complex value with zero\n\t   *                                              // as real and imaginary part.\n\t   *     math.complex(re : number, im : string)   // creates a complex value with provided\n\t   *                                              // values for real and imaginary part.\n\t   *     math.complex(re : number)                // creates a complex value with provided\n\t   *                                              // real value and zero imaginary part.\n\t   *     math.complex(complex : Complex)          // clones the provided complex value.\n\t   *     math.complex(arg : string)               // parses a string into a complex value.\n\t   *     math.complex(array : Array)              // converts the elements of the array\n\t   *                                              // or matrix element wise into a\n\t   *                                              // complex value.\n\t   *     math.complex({re: number, im: number})   // creates a complex value with provided\n\t   *                                              // values for real an imaginary part.\n\t   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n\t   *                                              // polar coordinates\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i\n\t   *    a.re = 5;                        // a = Complex 5 - 4i\n\t   *    var i = a.im;                    // Number -4;\n\t   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i\n\t   *    var c = math.complex();          // Complex 0 + 0i\n\t   *    var d = math.add(a, b);          // Complex 5 + 2i\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, index, matrix, number, string, unit\n\t   *\n\t   * @param {* | Array | Matrix} [args]\n\t   *            Arguments specifying the real and imaginary part of the complex number\n\t   * @return {Complex | Array | Matrix} Returns a complex value\n\t   */\n\t  var complex = typed('complex', {\n\t    '': function () {\n\t      return type.Complex.ZERO;\n\t    },\n\n\t    'number': function (x) {\n\t      return new type.Complex(x, 0);\n\t    },\n\n\t    'number, number': function (re, im) {\n\t      return new type.Complex(re, im);\n\t    },\n\n\t    // TODO: this signature should be redundant\n\t    'BigNumber, BigNumber': function (re, im) {\n\t      return new type.Complex(re.toNumber(), im.toNumber());\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.clone();\n\t    },\n\n\t    'string': function (x) {\n\t      return type.Complex(x); // for example '2 + 3i'\n\t    },\n\n\t    'Object': function (x) {\n\t      if('re' in x && 'im' in x) {\n\t        return new type.Complex(x.re, x.im);\n\t      }\n\n\t      if ('r' in x && 'phi' in x) {\n\t        return new type.Complex(x);\n\t      }\n\n\t      throw new Error('Expected object with either properties re and im, or properties r and phi.');\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, complex);\n\t    }\n\t  });\n\n\t  complex.toTex = {\n\t    0: '0',\n\t    1: '\\\\left(${args[0]}\\\\right)',\n\t    2: '\\\\left(\\\\left(${args[0]}\\\\right)+'\n\t      + latex.symbols['i'] + '\\\\cdot\\\\left(${args[1]}\\\\right)\\\\right)'\n\t  };\n\n\t  return complex;\n\t}\n\n\texports.name = 'complex';\n\texports.factory = factory;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\texports.symbols = {\n\t  // GREEK LETTERS\n\t  Alpha: 'A',     alpha: '\\\\alpha',\n\t  Beta: 'B',      beta: '\\\\beta',\n\t  Gamma: '\\\\Gamma',    gamma: '\\\\gamma',\n\t  Delta: '\\\\Delta',    delta: '\\\\delta',\n\t  Epsilon: 'E',   epsilon: '\\\\epsilon',  varepsilon: '\\\\varepsilon',\n\t  Zeta: 'Z',      zeta: '\\\\zeta',\n\t  Eta: 'H',       eta: '\\\\eta',\n\t  Theta: '\\\\Theta',    theta: '\\\\theta',    vartheta: '\\\\vartheta',\n\t  Iota: 'I',      iota: '\\\\iota',\n\t  Kappa: 'K',     kappa: '\\\\kappa',    varkappa: '\\\\varkappa',\n\t  Lambda: '\\\\Lambda',   lambda: '\\\\lambda',\n\t  Mu: 'M',        mu: '\\\\mu',\n\t  Nu: 'N',        nu: '\\\\nu',\n\t  Xi: '\\\\Xi',       xi: '\\\\xi',\n\t  Omicron: 'O',   omicron: 'o',\n\t  Pi: '\\\\Pi',       pi: '\\\\pi',       varpi: '\\\\varpi',\n\t  Rho: 'P',       rho: '\\\\rho',      varrho: '\\\\varrho',\n\t  Sigma: '\\\\Sigma',    sigma: '\\\\sigma',    varsigma: '\\\\varsigma',\n\t  Tau: 'T',       tau: '\\\\tau',\n\t  Upsilon: '\\\\Upsilon',  upsilon: '\\\\upsilon',\n\t  Phi: '\\\\Phi',      phi: '\\\\phi',      varphi: '\\\\varphi',\n\t  Chi: 'X',       chi: '\\\\chi',\n\t  Psi: '\\\\Psi',      psi: '\\\\psi',\n\t  Omega: '\\\\Omega',    omega: '\\\\omega',\n\t  //logic\n\t  'true': '\\\\mathrm{True}',\n\t  'false': '\\\\mathrm{False}',\n\t  //other\n\t  i: 'i', //TODO use \\i ??\n\t  inf: '\\\\infty',\n\t  Inf: '\\\\infty',\n\t  infinity: '\\\\infty',\n\t  Infinity: '\\\\infty',\n\t  oo: '\\\\infty',\n\t  lim: '\\\\lim',\n\t  'undefined': '\\\\mathbf{?}'\n\t};\n\n\texports.operators = {\n\t  'transpose': '^\\\\top',\n\t  'factorial': '!',\n\t  'pow': '^',\n\t  'dotPow': '.^\\\\wedge', //TODO find ideal solution\n\t  'unaryPlus': '+',\n\t  'unaryMinus': '-',\n\t  'bitNot': '~', //TODO find ideal solution\n\t  'not': '\\\\neg',\n\t  'multiply': '\\\\cdot',\n\t  'divide': '\\\\frac', //TODO how to handle that properly?\n\t  'dotMultiply': '.\\\\cdot', //TODO find ideal solution\n\t  'dotDivide': '.:', //TODO find ideal solution\n\t  'mod': '\\\\mod',\n\t  'add': '+',\n\t  'subtract': '-',\n\t  'to': '\\\\rightarrow',\n\t  'leftShift': '<<',\n\t  'rightArithShift': '>>',\n\t  'rightLogShift': '>>>',\n\t  'equal': '=',\n\t  'unequal': '\\\\neq',\n\t  'smaller': '<',\n\t  'larger': '>',\n\t  'smallerEq': '\\\\leq',\n\t  'largerEq': '\\\\geq',\n\t  'bitAnd': '\\\\&',\n\t  'bitXor': '\\\\underline{|}',\n\t  'bitOr': '|',\n\t  'and': '\\\\wedge',\n\t  'xor': '\\\\veebar',\n\t  'or': '\\\\vee'\n\t};\n\n\texports.defaultTemplate = '\\\\mathrm{${name}}\\\\left(${args}\\\\right)';\n\n\tvar units = {\n\t  deg: '^\\\\circ'\n\t};\n\n\t//@param {string} name\n\t//@param {boolean} isUnit\n\texports.toSymbol = function (name, isUnit) {\n\t  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n\t  if (isUnit) {\n\t    if (units.hasOwnProperty(name)) {\n\t      return units[name];\n\t    }\n\t    return '\\\\mathrm{' + name + '}';\n\t  }\n\n\t  if (exports.symbols.hasOwnProperty(name)) {\n\t    return exports.symbols[name];\n\t  }\n\t  else if (name.indexOf('_') !== -1) {\n\t    //symbol with index (eg. alpha_1)\n\t    var index = name.indexOf('_');\n\t    return exports.toSymbol(name.substring(0, index)) + '_{'\n\t      + exports.toSymbol(name.substring(index + 1)) + '}';\n\t  }\n\t  return name;\n\t};\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  // type\n\t  __webpack_require__(34),\n\n\t  // construction function\n\t  __webpack_require__(36)\n\t];\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Fraction = __webpack_require__(35);\n\n\t/**\n\t * Attach type information\n\t */\n\tFraction.prototype.type = 'Fraction';\n\tFraction.prototype.isFraction = true;\n\n\t/**\n\t * Get a JSON representation of a Fraction containing type information\n\t * @returns {Object} Returns a JSON object structured as:\n\t *                   `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n\t */\n\tFraction.prototype.toJSON = function () {\n\t  return {\n\t    mathjs: 'Fraction',\n\t    n: this.s * this.n,\n\t    d: this.d\n\t  };\n\t};\n\n\t/**\n\t * Instantiate a Fraction from a JSON object\n\t * @param {Object} json  a JSON object structured as:\n\t *                       `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n\t * @return {BigNumber}\n\t */\n\tFraction.fromJSON = function (json) {\n\t  return new Fraction(json);\n\t};\n\n\n\tfunction factory (type, config, load, typed) {\n\t  return Fraction;\n\t}\n\n\texports.name = 'Fraction';\n\texports.path = 'type';\n\texports.factory = factory;\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**\n\t * @license Fraction.js v3.3.1 09/09/2015\n\t * http://www.xarg.org/2014/03/precise-calculations-in-javascript/\n\t *\n\t * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n\t * Dual licensed under the MIT or GPL Version 2 licenses.\n\t **/\n\n\n\t/**\n\t *\n\t * This class offers the possibility to calculate fractions.\n\t * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n\t *\n\t * Array/Object form\n\t * [ 0 => <nominator>, 1 => <denominator> ]\n\t * [ n => <nominator>, d => <denominator> ]\n\t *\n\t * Integer form\n\t * - Single integer value\n\t *\n\t * Double form\n\t * - Single double value\n\t *\n\t * String form\n\t * 123.456 - a simple double\n\t * 123/456 - a string fraction\n\t * 123.'456' - a double with repeating decimal places\n\t * 123.(456) - synonym\n\t * 123.45'6' - a double with repeating last place\n\t * 123.45(6) - synonym\n\t *\n\t * Example:\n\t *\n\t * var f = new Fraction(\"9.4'31'\");\n\t * f.mul([-4, 3]).div(4.9);\n\t *\n\t */\n\n\t(function(root) {\n\n\t  \"use strict\";\n\n\t  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough. \n\t  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n\t  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n\t  var MAX_CYCLE_LEN = 2000;\n\n\t  // Parsed data to avoid calling \"new\" all the time\n\t  var P = {\n\t    \"s\": 1,\n\t    \"n\": 0,\n\t    \"d\": 1\n\t  };\n\n\t  function assign(n, s) {\n\n\t    if (isNaN(n = parseInt(n, 10))) {\n\t      throwInvalidParam();\n\t    }\n\t    return n * s;\n\t  }\n\n\t  function throwInvalidParam() {\n\t    throw \"Invalid Param\";\n\t  }\n\n\t  var parse = function(p1, p2) {\n\n\t    var n = 0, d = 1, s = 1;\n\t    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n\t    var A = 0, B = 1;\n\t    var C = 1, D = 1;\n\n\t    var N = 10000000;\n\t    var M;\n\n\t    if (p1 === undefined || p1 === null) {\n\t      /* void */\n\t    } else if (p2 !== undefined) {\n\t      n = p1;\n\t      d = p2;\n\t      s = n * d;\n\t    } else\n\t      switch (typeof p1) {\n\n\t        case \"object\":\n\t        {\n\t          if (\"d\" in p1 && \"n\" in p1) {\n\t            n = p1[\"n\"];\n\t            d = p1[\"d\"];\n\t            if (\"s\" in p1)\n\t              n*= p1[\"s\"];\n\t          } else if (0 in p1) {\n\t            n = p1[0];\n\t            if (1 in p1)\n\t              d = p1[1];\n\t          } else {\n\t            throwInvalidParam();\n\t          }\n\t          s = n * d;\n\t          break;\n\t        }\n\t        case \"number\":\n\t        {\n\t          if (p1 < 0) {\n\t            s = p1;\n\t            p1 = -p1;\n\t          }\n\n\t          if (p1 % 1 === 0) {\n\t            n = p1;\n\t          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n\t            if (p1 >= 1) {\n\t              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n\t              p1/= z;\n\t            }\n\n\t            // Using Farey Sequences\n\t            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n\t            while (B <= N && D <= N) {\n\t              M = (A + C) / (B + D);\n\n\t              if (p1 === M) {\n\t                if (B + D <= N) {\n\t                  n = A + C;\n\t                  d = B + D;\n\t                } else if (D > B) {\n\t                  n = C;\n\t                  d = D;\n\t                } else {\n\t                  n = A;\n\t                  d = B;\n\t                }\n\t                break;\n\n\t              } else {\n\n\t                if (p1 > M) {\n\t                  A+= C;\n\t                  B+= D;\n\t                } else {\n\t                  C+= A;\n\t                  D+= B;\n\t                }\n\n\t                if (B > N) {\n\t                  n = C;\n\t                  d = D;\n\t                } else {\n\t                  n = A;\n\t                  d = B;\n\t                }\n\t              }\n\t            }\n\t            n*= z;\n\t          } else if (isNaN(p1) || isNaN(p2)) {\n\t            d = n = NaN;\n\t          }\n\t          break;\n\t        }\n\t        case \"string\":\n\t        {\n\t          B = p1.match(/\\d+|./g);\n\n\t          if (B[A] === '-') {// Check for minus sign at the beginning\n\t            s = -1;\n\t            A++;\n\t          } else if (B[A] === '+') {// Check for plus sign at the beginning\n\t            A++;\n\t          }\n\n\t          if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n\t            w = assign(B[A++], s);\n\t          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n\t            if (B[A] !== '.') { // Handle 0.5 and .5\n\t              v = assign(B[A++], s);\n\t            }\n\t            A++;\n\n\t            // Check for decimal places\n\t            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n\t              w = assign(B[A], s);\n\t              y = Math.pow(10, B[A].length);\n\t              A++;\n\t            }\n\n\t            // Check for repeating places\n\t            if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n\t              x = assign(B[A + 1], s);\n\t              z = Math.pow(10, B[A + 1].length) - 1;\n\t              A+= 3;\n\t            }\n\n\t          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n\t            w = assign(B[A], s);\n\t            y = assign(B[A + 2], 1);\n\t            A+= 3;\n\t          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n\t            v = assign(B[A], s);\n\t            w = assign(B[A + 2], s);\n\t            y = assign(B[A + 4], 1);\n\t            A+= 5;\n\t          }\n\n\t          if (B.length <= A) { // Check for more tokens on the stack\n\t            d = y * z;\n\t            s = /* void */\n\t                    n = x + d * v + z * w;\n\t            break;\n\t          }\n\n\t          /* Fall through on error */\n\t        }\n\t        default:\n\t          throwInvalidParam();\n\t      }\n\n\t    if (d === 0) {\n\t      throw \"DIV/0\";\n\t    }\n\n\t    P[\"s\"] = s < 0 ? -1 : 1;\n\t    P[\"n\"] = Math.abs(n);\n\t    P[\"d\"] = Math.abs(d);\n\t  };\n\n\t  var modpow = function(b, e, m) {\n\n\t    for (var r = 1; e > 0; b = (b * b) % m, e >>= 1) {\n\n\t      if (e & 1) {\n\t        r = (r * b) % m;\n\t      }\n\t    }\n\t    return r;\n\t  };\n\n\t  var cycleLen = function(n, d) {\n\n\t    for (; d % 2 === 0;\n\t            d/= 2) {}\n\n\t    for (; d % 5 === 0;\n\t            d/= 5) {}\n\n\t    if (d === 1) // Catch non-cyclic numbers\n\t      return 0;\n\n\t    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n\t    // 10^(d-1) % d == 1\n\t    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone, \n\t    // as we want to translate the numbers to strings.\n\n\t    var rem = 10 % d;\n\n\t    for (var t = 1; rem !== 1; t++) {\n\t      rem = rem * 10 % d;\n\n\t      if (t > MAX_CYCLE_LEN)\n\t        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n\t    }\n\t    return t;\n\t  };\n\n\t  var cycleStart = function(n, d, len) {\n\n\t    var rem1 = 1;\n\t    var rem2 = modpow(10, len, d);\n\n\t    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n\t      // Solve 10^s == 10^(s+t) (mod d)\n\n\t      if (rem1 === rem2)\n\t        return t;\n\n\t      rem1 = rem1 * 10 % d;\n\t      rem2 = rem2 * 10 % d;\n\t    }\n\t    return 0;\n\t  };\n\n\t  var gcd = function(a, b) {\n\n\t    if (!a) return b;\n\t    if (!b) return a;\n\n\t    while (1) {\n\t      a%= b;\n\t      if (!a) return b;\n\t      b%= a;\n\t      if (!b) return a;\n\t    }\n\t  };\n\n\t  /**\n\t   * Module constructor\n\t   *\n\t   * @constructor\n\t   * @param {number|Fraction} a\n\t   * @param {number=} b\n\t   */\n\t  function Fraction(a, b) {\n\n\t    if (!(this instanceof Fraction)) {\n\t      return new Fraction(a, b);\n\t    }\n\n\t    parse(a, b);\n\n\t    if (Fraction['REDUCE']) {\n\t      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n\t    } else {\n\t      a = 1;\n\t    }\n\n\t    this[\"s\"] = P[\"s\"];\n\t    this[\"n\"] = P[\"n\"] / a;\n\t    this[\"d\"] = P[\"d\"] / a;\n\t  }\n\n\t  /**\n\t   * Boolean global variable to be able to disable automatic reduction of the fraction\n\t   *\n\t   */\n\t  Fraction['REDUCE'] = 1;\n\n\t  Fraction.prototype = {\n\n\t    \"s\": 1,\n\t    \"n\": 0,\n\t    \"d\": 1,\n\n\t    /**\n\t     * Calculates the absolute value\n\t     *\n\t     * Ex: new Fraction(-4).abs() => 4\n\t     **/\n\t    \"abs\": function() {\n\n\t      return new Fraction(this[\"n\"], this[\"d\"]);\n\t    },\n\n\t    /**\n\t     * Inverts the sign of the current fraction\n\t     *\n\t     * Ex: new Fraction(-4).neg() => 4\n\t     **/\n\t    \"neg\": function() {\n\n\t      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n\t    },\n\n\t    /**\n\t     * Adds two rational numbers\n\t     *\n\t     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n\t     **/\n\t    \"add\": function(a, b) {\n\n\t      parse(a, b);\n\t      return new Fraction(\n\t              this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n\t              this[\"d\"] * P[\"d\"]\n\t              );\n\t    },\n\n\t    /**\n\t     * Subtracts two rational numbers\n\t     *\n\t     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n\t     **/\n\t    \"sub\": function(a, b) {\n\n\t      parse(a, b);\n\t      return new Fraction(\n\t              this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n\t              this[\"d\"] * P[\"d\"]\n\t              );\n\t    },\n\n\t    /**\n\t     * Multiplies two rational numbers\n\t     *\n\t     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n\t     **/\n\t    \"mul\": function(a, b) {\n\n\t      parse(a, b);\n\t      return new Fraction(\n\t              this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n\t              this[\"d\"] * P[\"d\"]\n\t              );\n\t    },\n\n\t    /**\n\t     * Divides two rational numbers\n\t     *\n\t     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n\t     **/\n\t    \"div\": function(a, b) {\n\n\t      parse(a, b);\n\t      return new Fraction(\n\t              this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n\t              this[\"d\"] * P[\"n\"]\n\t              );\n\t    },\n\n\t    /**\n\t     * Clones the actual object\n\t     *\n\t     * Ex: new Fraction(\"-17.(345)\").clone()\n\t     **/\n\t    \"clone\": function() {\n\t      return new Fraction(this);\n\t    },\n\n\t    /**\n\t     * Calculates the modulo of two rational numbers - a more precise fmod\n\t     *\n\t     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n\t     **/\n\t    \"mod\": function(a, b) {\n\n\t      if (isNaN(this['n']) || isNaN(this['d'])) {\n\t        return new Fraction(NaN);\n\t      }\n\n\t      if (a === undefined) {\n\t        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n\t      }\n\n\t      parse(a, b);\n\t      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n\t        Fraction(0, 0); // Throw div/0\n\t      }\n\n\t      /*\n\t       * First silly attempt, kinda slow\n\t       *\n\t       return that[\"sub\"]({\n\t       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n\t       \"d\": num[\"d\"],\n\t       \"s\": this[\"s\"]\n\t       });*/\n\n\t      /*\n\t       * New attempt: a1 / b1 = a2 / b2 * q + r\n\t       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n\t       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n\t       */\n\t      return new Fraction(\n\t              (this[\"s\"] * P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n\t              P[\"d\"] * this[\"d\"]\n\t              );\n\t    },\n\n\t    /**\n\t     * Calculates the fractional gcd of two rational numbers\n\t     *\n\t     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n\t     */\n\t    \"gcd\": function(a, b) {\n\n\t      parse(a, b);\n\n\t      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n\t      return new Fraction(gcd(P[\"n\"], this[\"n\"]), P[\"d\"] * this[\"d\"] / gcd(P[\"d\"], this[\"d\"]));\n\t    },\n\n\t    /**\n\t     * Calculates the fractional lcm of two rational numbers\n\t     *\n\t     * Ex: new Fraction(5,8).lcm(3,7) => 15\n\t     */\n\t    \"lcm\": function(a, b) {\n\n\t      parse(a, b);\n\n\t      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n\t      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n\t        return new Fraction;\n\t      }\n\t      return new Fraction(P[\"n\"] * this[\"n\"] / gcd(P[\"n\"], this[\"n\"]), gcd(P[\"d\"], this[\"d\"]));\n\t    },\n\n\t    /**\n\t     * Calculates the ceil of a rational number\n\t     *\n\t     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n\t     **/\n\t    \"ceil\": function(places) {\n\n\t      places = Math.pow(10, places || 0);\n\n\t      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n\t        return new Fraction(NaN);\n\t      }\n\t      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n\t    },\n\n\t    /**\n\t     * Calculates the floor of a rational number\n\t     *\n\t     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n\t     **/\n\t    \"floor\": function(places) {\n\n\t      places = Math.pow(10, places || 0);\n\n\t      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n\t        return new Fraction(NaN);\n\t      }\n\t      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n\t    },\n\n\t    /**\n\t     * Rounds a rational numbers\n\t     *\n\t     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n\t     **/\n\t    \"round\": function(places) {\n\n\t      places = Math.pow(10, places || 0);\n\n\t      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n\t        return new Fraction(NaN);\n\t      }\n\t      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n\t    },\n\n\t    /**\n\t     * Gets the inverse of the fraction, means numerator and denumerator are exchanged\n\t     *\n\t     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n\t     **/\n\t    \"inverse\": function() {\n\n\t      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n\t    },\n\n\t    /**\n\t     * Calculates the fraction to some integer exponent\n\t     *\n\t     * Ex: new Fraction(-1,2).pow(-3) => -8\n\t     */\n\t    \"pow\": function(m) {\n\n\t      if (m < 0) {\n\t        return new Fraction(Math.pow(this['s'] * this[\"d\"],-m), Math.pow(this[\"n\"],-m));\n\t      } else {\n\t        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\n\t      }\n\t    },\n\n\t    /**\n\t     * Check if two rational numbers are the same\n\t     *\n\t     * Ex: new Fraction(19.6).equals([98, 5]);\n\t     **/\n\t    \"equals\": function(a, b) {\n\n\t      parse(a, b);\n\t      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n\t    },\n\n\t    /**\n\t     * Check if two rational numbers are the same\n\t     *\n\t     * Ex: new Fraction(19.6).equals([98, 5]);\n\t     **/\n\t    \"compare\": function(a, b) {\n\n\t      parse(a, b);\n\t      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n\t      return (0 < t) - (t < 0);\n\t    },\n\n\t    /**\n\t     * Check if two rational numbers are divisible\n\t     *\n\t     * Ex: new Fraction(19.6).divisible(1.5);\n\t     */\n\t    \"divisible\": function(a, b) {\n\n\t      parse(a, b);\n\t      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n\t    },\n\n\t    /**\n\t     * Returns a decimal representation of the fraction\n\t     *\n\t     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n\t     **/\n\t    'valueOf': function() {\n\n\t      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n\t    },\n\n\t    /**\n\t     * Returns a string-fraction representation of a Fraction object\n\t     *\n\t     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n\t     **/\n\t    'toFraction': function(excludeWhole) {\n\n\t      var whole, str = \"\";\n\t      var n = this[\"n\"];\n\t      var d = this[\"d\"];\n\t      if (this[\"s\"] < 0) {\n\t        str+= '-';\n\t      }\n\n\t      if (d === 1) {\n\t        str+= n;\n\t      } else {\n\n\t        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n\t          str+= whole;\n\t          str+= \" \";\n\t          n%= d;\n\t        }\n\n\t        str+= n;\n\t        str+= '/';\n\t        str+= d;\n\t      }\n\t      return str;\n\t    },\n\n\t    /**\n\t     * Returns a latex representation of a Fraction object\n\t     *\n\t     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n\t     **/\n\t    'toLatex': function(excludeWhole) {\n\n\t      var whole, str = \"\";\n\t      var n = this[\"n\"];\n\t      var d = this[\"d\"];\n\t      if (this[\"s\"] < 0) {\n\t        str+= '-';\n\t      }\n\n\t      if (d === 1) {\n\t        str+= n;\n\t      } else {\n\n\t        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n\t          str+= whole;\n\t          n%= d;\n\t        }\n\n\t        str+= \"\\\\frac{\";\n\t        str+= n;\n\t        str+= '}{';\n\t        str+= d;\n\t        str+= '}';\n\t      }\n\t      return str;\n\t    },\n\n\t    /**\n\t     * Returns an array of continued fraction elements\n\t     * \n\t     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n\t     */\n\t    'toContinued': function() {\n\n\t      var t;\n\t      var a = this['n'];\n\t      var b = this['d'];\n\t      var res = [];\n\n\t      do {\n\t        res.push(Math.floor(a / b));\n\t        t = a % b;\n\t        a = b;\n\t        b = t;\n\t      } while (a !== 1);\n\n\t      return res;\n\t    },\n\n\t    /**\n\t     * Creates a string representation of a fraction with all digits\n\t     *\n\t     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n\t     **/\n\t    'toString': function() {\n\n\t      var g;\n\t      var N = this[\"n\"];\n\t      var D = this[\"d\"];\n\n\t      if (isNaN(N) || isNaN(D)) {\n\t        return \"NaN\";\n\t      }\n\n\t      if (!Fraction['REDUCE']) {\n\t        g = gcd(N, D);\n\t        N/= g;\n\t        D/= g;\n\t      }\n\n\t      var p = String(N).split(\"\"); // Numerator chars\n\t      var t = 0; // Tmp var\n\n\t      var ret = [~this[\"s\"] ? \"\" : \"-\", \"\", \"\"]; // Return array, [0] is zero sign, [1] before comma, [2] after\n\t      var zeros = \"\"; // Collection variable for zeros\n\n\t      var cycLen = cycleLen(N, D); // Cycle length\n\t      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n\t      var j = -1;\n\t      var n = 1; // str index\n\n\t      // rough estimate to fill zeros\n\t      var length = 15 + cycLen + cycOff + p.length; // 15 = decimal places when no repitation\n\n\t      for (var i = 0; i < length; i++, t*= 10) {\n\n\t        if (i < p.length) {\n\t          t+= Number(p[i]);\n\t        } else {\n\t          n = 2;\n\t          j++; // Start now => after comma\n\t        }\n\n\t        if (cycLen > 0) { // If we have a repeating part\n\t          if (j === cycOff) {\n\t            ret[n]+= zeros + \"(\";\n\t            zeros = \"\";\n\t          } else if (j === cycLen + cycOff) {\n\t            ret[n]+= zeros + \")\";\n\t            break;\n\t          }\n\t        }\n\n\t        if (t >= D) {\n\t          ret[n]+= zeros + ((t / D) | 0); // Flush zeros, Add current digit\n\t          zeros = \"\";\n\t          t = t % D;\n\t        } else if (n > 1) { // Add zeros to the zero buffer\n\t          zeros+= \"0\";\n\t        } else if (ret[n]) { // If before comma, add zero only if already something was added\n\t          ret[n]+= \"0\";\n\t        }\n\t      }\n\n\t      // If it's empty, it's a leading zero only\n\t      ret[0]+= ret[1] || \"0\";\n\n\t      // If there is something after the comma, add the comma sign\n\t      if (ret[2]) {\n\t        return ret[0] + \".\" + ret[2];\n\t      }\n\t      return ret[0];\n\t    }\n\t  };\n\n\t  if (\"function\" === \"function\" && __webpack_require__(30)[\"amd\"]) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return Fraction;\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (true) {\n\t    module[\"exports\"] = Fraction;\n\t  } else {\n\t    root['Fraction'] = Fraction;\n\t  }\n\n\t})(this);\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(29)(module)))\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a fraction convert a value to a fraction.\n\t   *\n\t   * Syntax:\n\t   *     math.fraction(numerator, denominator)\n\t   *     math.fraction({n: numerator, d: denominator})\n\t   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n\t   *                                                   into fractions\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.fraction(1, 3);\n\t   *     math.fraction('2/3');\n\t   *     math.fraction({n: 2, d: 3});\n\t   *     math.fraction([0.2, 0.25, 1.25]);\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, number, string, unit\n\t   *\n\t   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n\t   *            Arguments specifying the numerator and denominator of\n\t   *            the fraction\n\t   * @return {Fraction | Array | Matrix} Returns a fraction\n\t   */\n\t  var fraction = typed('fraction', {\n\t    'number': function (x) {\n\t      if (!isFinite(x) || isNaN(x)) {\n\t        throw new Error(x + ' cannot be represented as a fraction');\n\t      }\n\n\t      return new type.Fraction(x);\n\t    },\n\n\t    'string': function (x) {\n\t      return new type.Fraction(x);\n\t    },\n\n\t    'number, number': function (numerator, denominator) {\n\t      return new type.Fraction(numerator, denominator);\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.Fraction(x.toString());\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x; // fractions are immutable\n\t    },\n\n\t    'Object': function (x) {\n\t      return new type.Fraction(x);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, fraction);\n\t    }\n\t  });\n\n\t  return fraction;\n\t}\n\n\texports.name = 'fraction';\n\texports.factory = factory;\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  // types\n\t  __webpack_require__(38),\n\t  __webpack_require__(46),\n\t  __webpack_require__(47),\n\t  __webpack_require__(50),\n\t  __webpack_require__(59),\n\t  __webpack_require__(65),\n\t  __webpack_require__(66),\n\t  __webpack_require__(67),\n\n\t  // construction functions\n\t  __webpack_require__(68),\n\t  __webpack_require__(52),\n\t  __webpack_require__(69)\n\t];\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar util = __webpack_require__(39);\n\n\tvar string = util.string;\n\n\tvar isString = string.isString;\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * @constructor Matrix\n\t   *\n\t   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n\t   * array. A matrix can be constructed as:\n\t   *     var matrix = math.matrix(data)\n\t   *\n\t   * Matrix contains the functions to resize, get and set values, get the size,\n\t   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n\t   * Furthermore, one can iterate over the matrix using map and forEach.\n\t   * The internal Array of the Matrix can be accessed using the function valueOf.\n\t   *\n\t   * Example usage:\n\t   *     var matrix = math.matrix([[1, 2], [3, 4]]);\n\t   *     matix.size();              // [2, 2]\n\t   *     matrix.resize([3, 2], 5);\n\t   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]\n\t   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n\t   *\n\t   */\n\t  function Matrix() {\n\t    if (!(this instanceof Matrix)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\t  }\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  Matrix.prototype.type = 'Matrix';\n\t  Matrix.prototype.isMatrix = true;\n\n\t  /**\n\t   * Get the Matrix storage constructor for the given format.\n\t   *\n\t   * @param {string} format       The Matrix storage format.\n\t   *\n\t   * @return {Function}           The Matrix storage constructor.\n\t   */\n\t  Matrix.storage = function (format) {\n\t    // check storage format is a string\n\t    if (!isString(format)) {\n\t      throw new TypeError('format must be a string value');\n\t    }\n\n\t    // get storage format constructor\n\t    var constructor = Matrix._storage[format];\n\t    if (!constructor) {\n\t      throw new SyntaxError('Unsupported matrix storage format: ' + format);\n\t    }\n\n\t    // return storage constructor\n\t    return constructor;\n\t  };\n\n\t  // a map with all constructors for all storage types\n\t  Matrix._storage = {};\n\n\t  /**\n\t   * Get the storage format used by the matrix.\n\t   *\n\t   * Usage:\n\t   *     var format = matrix.storage()                   // retrieve storage format\n\t   *\n\t   * @return {string}           The storage format.\n\t   */\n\t  Matrix.prototype.storage = function () {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke storage on a Matrix interface');\n\t  };\n\t  \n\t  /**\n\t   * Get the datatype of the data stored in the matrix.\n\t   *\n\t   * Usage:\n\t   *     var format = matrix.datatype()                   // retrieve matrix datatype\n\t   *\n\t   * @return {string}           The datatype.\n\t   */\n\t  Matrix.prototype.datatype = function () {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke datatype on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Create a new Matrix With the type of the current matrix instance\n\t   * @param {Array | Object} data\n\t   * @param {string} [datatype]\n\t   */\n\t  Matrix.prototype.create = function (data, datatype) {\n\t    throw new Error('Cannot invoke create on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Get a subset of the matrix, or replace a subset of the matrix.\n\t   *\n\t   * Usage:\n\t   *     var subset = matrix.subset(index)               // retrieve subset\n\t   *     var value = matrix.subset(index, replacement)   // replace subset\n\t   *\n\t   * @param {Index} index\n\t   * @param {Array | Matrix | *} [replacement]\n\t   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n\t   *                                  the matrix is resized. If not provided,\n\t   *                                  new matrix elements will be filled with zeros.\n\t   */\n\t  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke subset on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Get a single element from the matrix.\n\t   * @param {number[]} index   Zero-based index\n\t   * @return {*} value\n\t   */\n\t  Matrix.prototype.get = function (index) {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke get on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Replace a single element in the matrix.\n\t   * @param {number[]} index   Zero-based index\n\t   * @param {*} value\n\t   * @param {*} [defaultValue]        Default value, filled in on new entries when\n\t   *                                  the matrix is resized. If not provided,\n\t   *                                  new matrix elements will be left undefined.\n\t   * @return {Matrix} self\n\t   */\n\t  Matrix.prototype.set = function (index, value, defaultValue) {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke set on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Resize the matrix to the given size. Returns a copy of the matrix when \n\t   * `copy=true`, otherwise return the matrix itself (resize in place).\n\t   *\n\t   * @param {number[]} size           The new size the matrix should have.\n\t   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n\t   *                                  If not provided, the matrix elements will\n\t   *                                  be filled with zeros.\n\t   * @param {boolean} [copy]          Return a resized copy of the matrix\n\t   *\n\t   * @return {Matrix}                 The resized matrix\n\t   */\n\t  Matrix.prototype.resize = function (size, defaultValue) {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke resize on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Create a clone of the matrix\n\t   * @return {Matrix} clone\n\t   */\n\t  Matrix.prototype.clone = function () {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke clone on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Retrieve the size of the matrix.\n\t   * @returns {number[]} size\n\t   */\n\t  Matrix.prototype.size = function() {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke size on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Create a new matrix with the results of the callback function executed on\n\t   * each entry of the matrix.\n\t   * @param {Function} callback   The callback function is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the Matrix being traversed.\n\t   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n\t   *\n\t   * @return {Matrix} matrix\n\t   */\n\t  Matrix.prototype.map = function (callback, skipZeros) {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke map on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Execute a callback function on each entry of the matrix.\n\t   * @param {Function} callback   The callback function is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the Matrix being traversed.\n\t   */\n\t  Matrix.prototype.forEach = function (callback) {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke forEach on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Create an Array with a copy of the data of the Matrix\n\t   * @returns {Array} array\n\t   */\n\t  Matrix.prototype.toArray = function () {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke toArray on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Get the primitive value of the Matrix: a multidimensional array\n\t   * @returns {Array} array\n\t   */\n\t  Matrix.prototype.valueOf = function () {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke valueOf on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Get a string representation of the matrix, with optional formatting options.\n\t   * @param {Object | number | Function} [options]  Formatting options. See\n\t   *                                                lib/utils/number:format for a\n\t   *                                                description of the available\n\t   *                                                options.\n\t   * @returns {string} str\n\t   */\n\t  Matrix.prototype.format = function (options) {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke format on a Matrix interface');\n\t  };\n\n\t  /**\n\t   * Get a string representation of the matrix\n\t   * @returns {string} str\n\t   */\n\t  Matrix.prototype.toString = function () {\n\t    // must be implemented by each of the Matrix implementations\n\t    throw new Error('Cannot invoke toString on a Matrix interface');\n\t  };\n\t   \n\t  // exports\n\t  return Matrix;\n\t}\n\n\texports.name = 'Matrix';\n\texports.path = 'type';\n\texports.factory = factory;\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.array = __webpack_require__(40);\n\texports['boolean'] = __webpack_require__(44);\n\texports['function'] = __webpack_require__(45);\n\texports.number = __webpack_require__(6);\n\texports.object = __webpack_require__(3);\n\texports.string = __webpack_require__(23);\n\texports.types = __webpack_require__(41);\n\texports.emitter = __webpack_require__(8);\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar number = __webpack_require__(6);\n\tvar string = __webpack_require__(23);\n\tvar object = __webpack_require__(3);\n\tvar types = __webpack_require__(41);\n\n\tvar DimensionError = __webpack_require__(42);\n\tvar IndexError = __webpack_require__(43);\n\n\t/**\n\t * Calculate the size of a multi dimensional array.\n\t * This function checks the size of the first entry, it does not validate\n\t * whether all dimensions match. (use function `validate` for that)\n\t * @param {Array} x\n\t * @Return {Number[]} size\n\t */\n\texports.size = function (x) {\n\t  var s = [];\n\n\t  while (Array.isArray(x)) {\n\t    s.push(x.length);\n\t    x = x[0];\n\t  }\n\n\t  return s;\n\t};\n\n\t/**\n\t * Recursively validate whether each element in a multi dimensional array\n\t * has a size corresponding to the provided size array.\n\t * @param {Array} array    Array to be validated\n\t * @param {number[]} size  Array with the size of each dimension\n\t * @param {number} dim   Current dimension\n\t * @throws DimensionError\n\t * @private\n\t */\n\tfunction _validate(array, size, dim) {\n\t  var i;\n\t  var len = array.length;\n\n\t  if (len != size[dim]) {\n\t    throw new DimensionError(len, size[dim]);\n\t  }\n\n\t  if (dim < size.length - 1) {\n\t    // recursively validate each child array\n\t    var dimNext = dim + 1;\n\t    for (i = 0; i < len; i++) {\n\t      var child = array[i];\n\t      if (!Array.isArray(child)) {\n\t        throw new DimensionError(size.length - 1, size.length, '<');\n\t      }\n\t      _validate(array[i], size, dimNext);\n\t    }\n\t  }\n\t  else {\n\t    // last dimension. none of the childs may be an array\n\t    for (i = 0; i < len; i++) {\n\t      if (Array.isArray(array[i])) {\n\t        throw new DimensionError(size.length + 1, size.length, '>');\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/**\n\t * Validate whether each element in a multi dimensional array has\n\t * a size corresponding to the provided size array.\n\t * @param {Array} array    Array to be validated\n\t * @param {number[]} size  Array with the size of each dimension\n\t * @throws DimensionError\n\t */\n\texports.validate = function(array, size) {\n\t  var isScalar = (size.length == 0);\n\t  if (isScalar) {\n\t    // scalar\n\t    if (Array.isArray(array)) {\n\t      throw new DimensionError(array.length, 0);\n\t    }\n\t  }\n\t  else {\n\t    // array\n\t    _validate(array, size, 0);\n\t  }\n\t};\n\n\t/**\n\t * Test whether index is an integer number with index >= 0 and index < length\n\t * when length is provided\n\t * @param {number} index    Zero-based index\n\t * @param {number} [length] Length of the array\n\t */\n\texports.validateIndex = function(index, length) {\n\t  if (!number.isNumber(index) || !number.isInteger(index)) {\n\t    throw new TypeError('Index must be an integer (value: ' + index + ')');\n\t  }\n\t  if (index < 0 || (typeof length === 'number' && index >= length)) {\n\t    throw new IndexError(index, length);\n\t  }\n\t};\n\n\t// a constant used to specify an undefined defaultValue\n\texports.UNINITIALIZED = {};\n\n\t/**\n\t * Resize a multi dimensional array. The resized array is returned.\n\t * @param {Array} array         Array to be resized\n\t * @param {Array.<number>} size Array with the size of each dimension\n\t * @param {*} [defaultValue=0]  Value to be filled in in new entries,\n\t *                              zero by default. To leave new entries undefined,\n\t *                              specify array.UNINITIALIZED as defaultValue\n\t * @return {Array} array         The resized array\n\t */\n\texports.resize = function(array, size, defaultValue) {\n\t  // TODO: add support for scalars, having size=[] ?\n\n\t  // check the type of the arguments\n\t  if (!Array.isArray(array) || !Array.isArray(size)) {\n\t    throw new TypeError('Array expected');\n\t  }\n\t  if (size.length === 0) {\n\t    throw new Error('Resizing to scalar is not supported');\n\t  }\n\n\t  // check whether size contains positive integers\n\t  size.forEach(function (value) {\n\t    if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {\n\t      throw new TypeError('Invalid size, must contain positive integers ' +\n\t          '(size: ' + string.format(size) + ')');\n\t    }\n\t  });\n\n\t  // recursively resize the array\n\t  var _defaultValue = (defaultValue !== undefined) ? defaultValue : 0;\n\t  _resize(array, size, 0, _defaultValue);\n\n\t  return array;\n\t};\n\n\t/**\n\t * Recursively resize a multi dimensional array\n\t * @param {Array} array         Array to be resized\n\t * @param {number[]} size       Array with the size of each dimension\n\t * @param {number} dim          Current dimension\n\t * @param {*} [defaultValue]    Value to be filled in in new entries,\n\t *                              undefined by default.\n\t * @private\n\t */\n\tfunction _resize (array, size, dim, defaultValue) {\n\t  var i;\n\t  var elem;\n\t  var oldLen = array.length;\n\t  var newLen = size[dim];\n\t  var minLen = Math.min(oldLen, newLen);\n\n\t  // apply new length\n\t  array.length = newLen;\n\n\t  if (dim < size.length - 1) {\n\t    // non-last dimension\n\t    var dimNext = dim + 1;\n\n\t    // resize existing child arrays\n\t    for (i = 0; i < minLen; i++) {\n\t      // resize child array\n\t      elem = array[i];\n\t      if (!Array.isArray(elem)) {\n\t        elem = [elem]; // add a dimension\n\t        array[i] = elem;\n\t      }\n\t      _resize(elem, size, dimNext, defaultValue);\n\t    }\n\n\t    // create new child arrays\n\t    for (i = minLen; i < newLen; i++) {\n\t      // get child array\n\t      elem = [];\n\t      array[i] = elem;\n\n\t      // resize new child array\n\t      _resize(elem, size, dimNext, defaultValue);\n\t    }\n\t  }\n\t  else {\n\t    // last dimension\n\n\t    // remove dimensions of existing values\n\t    for (i = 0; i < minLen; i++) {\n\t      while (Array.isArray(array[i])) {\n\t        array[i] = array[i][0];\n\t      }\n\t    }\n\n\t    if(defaultValue !== exports.UNINITIALIZED) {\n\t      // fill new elements with the default value\n\t      for (i = minLen; i < newLen; i++) {\n\t        array[i] = defaultValue;\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/**\n\t * Squeeze a multi dimensional array\n\t * @param {Array} array\n\t * @param {Array} [size]\n\t * @returns {Array} returns the array itself\n\t */\n\texports.squeeze = function(array, size) {\n\t  var s = size || exports.size(array);\n\n\t  // squeeze outer dimensions\n\t  while (Array.isArray(array) && array.length === 1) {\n\t    array = array[0];\n\t    s.shift();\n\t  }\n\n\t  // find the first dimension to be squeezed\n\t  var dims = s.length;\n\t  while (s[dims - 1] === 1) {\n\t    dims--;\n\t  }\n\n\t  // squeeze inner dimensions\n\t  if (dims < s.length) {\n\t    array = _squeeze(array, dims, 0);\n\t    s.length = dims;\n\t  }\n\n\t  return array;\n\t};\n\n\t/**\n\t * Recursively squeeze a multi dimensional array\n\t * @param {Array} array\n\t * @param {number} dims Required number of dimensions\n\t * @param {number} dim  Current dimension\n\t * @returns {Array | *} Returns the squeezed array\n\t * @private\n\t */\n\tfunction _squeeze (array, dims, dim) {\n\t  var i, ii;\n\n\t  if (dim < dims) {\n\t    var next = dim + 1;\n\t    for (i = 0, ii = array.length; i < ii; i++) {\n\t      array[i] = _squeeze(array[i], dims, next);\n\t    }\n\t  }\n\t  else {\n\t    while (Array.isArray(array)) {\n\t      array = array[0];\n\t    }\n\t  }\n\n\t  return array;\n\t}\n\n\t/**\n\t * Unsqueeze a multi dimensional array: add dimensions when missing\n\t * \n\t * Paramter `size` will be mutated to match the new, unqueezed matrix size.\n\t * \n\t * @param {Array} array\n\t * @param {number} dims     Desired number of dimensions of the array\n\t * @param {number} [outer]  Number of outer dimensions to be added\n\t * @param {Array} [size]    Current size of array.\n\t * @returns {Array} returns the array itself\n\t * @private\n\t */\n\texports.unsqueeze = function(array, dims, outer, size) {\n\t  var s = size || exports.size(array);\n\n\t  // unsqueeze outer dimensions\n\t  if (outer) {\n\t    for (var i = 0; i < outer; i++) {\n\t      array = [array];\n\t      s.unshift(1);\n\t    }\n\t  }\n\n\t  // unsqueeze inner dimensions\n\t  array = _unsqueeze(array, dims, 0);\n\t  while (s.length < dims) {\n\t    s.push(1);\n\t  }\n\n\t  return array;\n\t};\n\n\t/**\n\t * Recursively unsqueeze a multi dimensional array\n\t * @param {Array} array\n\t * @param {number} dims Required number of dimensions\n\t * @param {number} dim  Current dimension\n\t * @returns {Array | *} Returns the squeezed array\n\t * @private\n\t */\n\tfunction _unsqueeze (array, dims, dim) {\n\t  var i, ii;\n\n\t  if (Array.isArray(array)) {\n\t    var next = dim + 1;\n\t    for (i = 0, ii = array.length; i < ii; i++) {\n\t      array[i] = _unsqueeze(array[i], dims, next);\n\t    }\n\t  }\n\t  else {\n\t    for (var d = dim; d < dims; d++) {\n\t      array = [array];\n\t    }\n\t  }\n\n\t  return array;\n\t}\n\t/**\n\t * Flatten a multi dimensional array, put all elements in a one dimensional\n\t * array\n\t * @param {Array} array   A multi dimensional array\n\t * @return {Array}        The flattened array (1 dimensional)\n\t */\n\texports.flatten = function(array) {\n\t  if (!Array.isArray(array)) {\n\t    //if not an array, return as is\n\t    return array;\n\t  }\n\t  var flat = [];\n\n\t  array.forEach(function callback(value) {\n\t    if (Array.isArray(value)) {\n\t      value.forEach(callback);  //traverse through sub-arrays recursively\n\t    }\n\t    else {\n\t      flat.push(value);\n\t    }\n\t  });\n\n\t  return flat;\n\t};\n\n\t/**\n\t * Test whether an object is an array\n\t * @param {*} value\n\t * @return {boolean} isArray\n\t */\n\texports.isArray = Array.isArray;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/**\n\t * Determine the type of a variable\n\t *\n\t *     type(x)\n\t *\n\t * The following types are recognized:\n\t *\n\t *     'undefined'\n\t *     'null'\n\t *     'boolean'\n\t *     'number'\n\t *     'string'\n\t *     'Array'\n\t *     'Function'\n\t *     'Date'\n\t *     'RegExp'\n\t *     'Object'\n\t *\n\t * @param {*} x\n\t * @return {string} Returns the name of the type. Primitive types are lower case,\n\t *                  non-primitive types are upper-camel-case.\n\t *                  For example 'number', 'string', 'Array', 'Date'.\n\t */\n\texports.type = function(x) {\n\t  var type = typeof x;\n\n\t  if (type === 'object') {\n\t    if (x === null)           return 'null';\n\t    if (x instanceof Boolean) return 'boolean';\n\t    if (x instanceof Number)  return 'number';\n\t    if (x instanceof String)  return 'string';\n\t    if (Array.isArray(x))     return 'Array';\n\t    if (x instanceof Date)    return 'Date';\n\t    if (x instanceof RegExp)  return 'RegExp';\n\n\t    return 'Object';\n\t  }\n\n\t  if (type === 'function')    return 'Function';\n\n\t  return type;\n\t};\n\n\t/**\n\t * Test whether a value is a scalar\n\t * @param x\n\t * @return {boolean} Returns true when x is a scalar, returns false when\n\t *                   x is a Matrix or Array.\n\t */\n\texports.isScalar = function (x) {\n\t  return !((x && x.isMatrix) || Array.isArray(x));\n\t};\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/**\n\t * Create a range error with the message:\n\t *     'Dimension mismatch (<actual size> != <expected size>)'\n\t * @param {number | number[]} actual        The actual size\n\t * @param {number | number[]} expected      The expected size\n\t * @param {string} [relation='!=']          Optional relation between actual\n\t *                                          and expected size: '!=', '<', etc.\n\t * @extends RangeError\n\t */\n\tfunction DimensionError(actual, expected, relation) {\n\t  if (!(this instanceof DimensionError)) {\n\t    throw new SyntaxError('Constructor must be called with the new operator');\n\t  }\n\n\t  this.actual   = actual;\n\t  this.expected = expected;\n\t  this.relation = relation;\n\n\t  this.message = 'Dimension mismatch (' +\n\t      (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) +\n\t      ' ' + (this.relation || '!=') + ' ' +\n\t      (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) +\n\t      ')';\n\n\t  this.stack = (new Error()).stack;\n\t}\n\n\tDimensionError.prototype = new RangeError();\n\tDimensionError.prototype.constructor = RangeError;\n\tDimensionError.prototype.name = 'DimensionError';\n\tDimensionError.prototype.isDimensionError = true;\n\n\tmodule.exports = DimensionError;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/**\n\t * Create a range error with the message:\n\t *     'Index out of range (index < min)'\n\t *     'Index out of range (index < max)'\n\t *\n\t * @param {number} index     The actual index\n\t * @param {number} [min=0]   Minimum index (included)\n\t * @param {number} [max]     Maximum index (excluded)\n\t * @extends RangeError\n\t */\n\tfunction IndexError(index, min, max) {\n\t  if (!(this instanceof IndexError)) {\n\t    throw new SyntaxError('Constructor must be called with the new operator');\n\t  }\n\n\t  this.index = index;\n\t  if (arguments.length < 3) {\n\t    this.min = 0;\n\t    this.max = min;\n\t  }\n\t  else {\n\t    this.min = min;\n\t    this.max = max;\n\t  }\n\n\t  if (this.min !== undefined && this.index < this.min) {\n\t    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n\t  }\n\t  else if (this.max !== undefined && this.index >= this.max) {\n\t    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n\t  }\n\t  else {\n\t    this.message = 'Index out of range (' + this.index + ')';\n\t  }\n\n\t  this.stack = (new Error()).stack;\n\t}\n\n\tIndexError.prototype = new RangeError();\n\tIndexError.prototype.constructor = RangeError;\n\tIndexError.prototype.name = 'IndexError';\n\tIndexError.prototype.isIndexError = true;\n\n\tmodule.exports = IndexError;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/**\n\t * Test whether value is a boolean\n\t * @param {*} value\n\t * @return {boolean} isBoolean\n\t */\n\texports.isBoolean = function(value) {\n\t  return typeof value == 'boolean';\n\t};\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports) {\n\n\t// function utils\n\n\t/*\n\t * Memoize a given function by caching the computed result.\n\t * The cache of a memoized function can be cleared by deleting the `cache`\n\t * property of the function.\n\t *\n\t * @param {function} fn                     The function to be memoized.\n\t *                                          Must be a pure function.\n\t * @param {function(args: Array)} [hasher]  A custom hash builder.\n\t *                                          Is JSON.stringify by default.\n\t * @return {function}                       Returns the memoized function\n\t */\n\texports.memoize = function(fn, hasher) {\n\t  return function memoize() {\n\t    if (typeof memoize.cache !== 'object') {\n\t      memoize.cache = {};\n\t    }\n\n\t    var args = [];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t      args[i] = arguments[i];\n\t    }\n\n\t    var hash = hasher ? hasher(args) : JSON.stringify(args);\n\t    if (!(hash in memoize.cache)) {\n\t      return memoize.cache[hash] = fn.apply(fn, args);\n\t    }\n\t    return memoize.cache[hash];\n\t  };\n\t};\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar util = __webpack_require__(39);\n\tvar DimensionError = __webpack_require__(42);\n\n\tvar string = util.string;\n\tvar array = util.array;\n\tvar object = util.object;\n\tvar number = util.number;\n\n\tvar isArray = Array.isArray;\n\tvar isNumber = number.isNumber;\n\tvar isInteger = number.isInteger;\n\tvar isString = string.isString;\n\n\tvar validateIndex = array.validateIndex;\n\n\tfunction factory (type, config, load, typed) {\n\t  var Matrix = load(__webpack_require__(38)); // force loading Matrix (do not use via type.Matrix)\n\n\t  /**\n\t   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n\t   * @class DenseMatrix\n\t   */\n\t  function DenseMatrix(data, datatype) {\n\t    if (!(this instanceof DenseMatrix))\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    if (datatype && !isString(datatype))\n\t      throw new Error('Invalid datatype: ' + datatype);\n\n\t    if (data && data.isMatrix === true) {\n\t      // check data is a DenseMatrix\n\t      if (data.type === 'DenseMatrix') {\n\t        // clone data & size\n\t        this._data = object.clone(data._data);\n\t        this._size = object.clone(data._size);\n\t        this._datatype = datatype || data._datatype;\n\t      }\n\t      else {\n\t        // build data from existing matrix\n\t        this._data = data.toArray();\n\t        this._size = data.size();\n\t        this._datatype = datatype || data._datatype;\n\t      }\n\t    }\n\t    else if (data && isArray(data.data) && isArray(data.size)) {\n\t      // initialize fields from JSON representation\n\t      this._data = data.data;\n\t      this._size = data.size;\n\t      this._datatype = datatype || data.datatype;\n\t    }\n\t    else if (isArray(data)) {\n\t      // replace nested Matrices with Arrays\n\t      this._data = preprocess(data);\n\t      // get the dimensions of the array\n\t      this._size = array.size(this._data);\n\t      // verify the dimensions of the array, TODO: compute size while processing array\n\t      array.validate(this._data, this._size);\n\t      // data type unknown\n\t      this._datatype = datatype;\n\t    }\n\t    else if (data) {\n\t      // unsupported type\n\t      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n\t    }\n\t    else {\n\t      // nothing provided\n\t      this._data = [];\n\t      this._size = [0];\n\t      this._datatype = datatype;\n\t    }\n\t  }\n\t  \n\t  DenseMatrix.prototype = new Matrix();\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  DenseMatrix.prototype.type = 'DenseMatrix';\n\t  DenseMatrix.prototype.isDenseMatrix = true;\n\n\t  /**\n\t   * Get the storage format used by the matrix.\n\t   *\n\t   * Usage:\n\t   *     var format = matrix.storage()                   // retrieve storage format\n\t   *\n\t   * @memberof DenseMatrix\n\t   * @return {string}           The storage format.\n\t   */\n\t  DenseMatrix.prototype.storage = function () {\n\t    return 'dense';\n\t  };\n\n\t  /**\n\t   * Get the datatype of the data stored in the matrix.\n\t   *\n\t   * Usage:\n\t   *     var format = matrix.datatype()                   // retrieve matrix datatype\n\t   *\n\t   * @memberof DenseMatrix\n\t   * @return {string}           The datatype.\n\t   */\n\t  DenseMatrix.prototype.datatype = function () {\n\t    return this._datatype;\n\t  };\n\n\t  /**\n\t   * Create a new DenseMatrix\n\t   * @memberof DenseMatrix\n\t   * @param {Array} data\n\t   * @param {string} [datatype]\n\t   */\n\t  DenseMatrix.prototype.create = function (data, datatype) {\n\t    return new DenseMatrix(data, datatype);\n\t  };\n\n\t  /**\n\t   * Get a subset of the matrix, or replace a subset of the matrix.\n\t   *\n\t   * Usage:\n\t   *     var subset = matrix.subset(index)               // retrieve subset\n\t   *     var value = matrix.subset(index, replacement)   // replace subset\n\t   *\n\t   * @memberof DenseMatrix\n\t   * @param {Index} index\n\t   * @param {Array | DenseMatrix | *} [replacement]\n\t   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n\t   *                                  the matrix is resized. If not provided,\n\t   *                                  new matrix elements will be filled with zeros.\n\t   */\n\t  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n\t    switch (arguments.length) {\n\t      case 1:\n\t        return _get(this, index);\n\n\t        // intentional fall through\n\t      case 2:\n\t      case 3:\n\t        return _set(this, index, replacement, defaultValue);\n\n\t      default:\n\t        throw new SyntaxError('Wrong number of arguments');\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Get a single element from the matrix.\n\t   * @memberof DenseMatrix\n\t   * @param {number[]} index   Zero-based index\n\t   * @return {*} value\n\t   */\n\t  DenseMatrix.prototype.get = function (index) {\n\t    if (!isArray(index))\n\t      throw new TypeError('Array expected');\n\t    if (index.length != this._size.length)\n\t      throw new DimensionError(index.length, this._size.length);\n\n\t    // check index\n\t    for (var x = 0; x < index.length; x++)\n\t      validateIndex(index[x], this._size[x]);\n\n\t    var data = this._data;\n\t    for (var i = 0, ii = index.length; i < ii; i++) {\n\t      var index_i = index[i];\n\t      validateIndex(index_i, data.length);\n\t      data = data[index_i];\n\t    }\n\n\t    return data;\n\t  };\n\t  \n\t  /**\n\t   * Replace a single element in the matrix.\n\t   * @memberof DenseMatrix\n\t   * @param {number[]} index   Zero-based index\n\t   * @param {*} value\n\t   * @param {*} [defaultValue]        Default value, filled in on new entries when\n\t   *                                  the matrix is resized. If not provided,\n\t   *                                  new matrix elements will be left undefined.\n\t   * @return {DenseMatrix} self\n\t   */\n\t  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n\t    if (!isArray(index))\n\t      throw new TypeError('Array expected');\n\t    if (index.length < this._size.length)\n\t      throw new DimensionError(index.length, this._size.length, '<');\n\n\t    var i, ii, index_i;\n\n\t    // enlarge matrix when needed\n\t    var size = index.map(function (i) {\n\t      return i + 1;\n\t    });\n\t    _fit(this, size, defaultValue);\n\n\t    // traverse over the dimensions\n\t    var data = this._data;\n\t    for (i = 0, ii = index.length - 1; i < ii; i++) {\n\t      index_i = index[i];\n\t      validateIndex(index_i, data.length);\n\t      data = data[index_i];\n\t    }\n\n\t    // set new value\n\t    index_i = index[index.length - 1];\n\t    validateIndex(index_i, data.length);\n\t    data[index_i] = value;\n\n\t    return this;\n\t  };\n\t  \n\t  /**\n\t   * Get a submatrix of this matrix\n\t   * @memberof DenseMatrix\n\t   * @param {DenseMatrix} matrix\n\t   * @param {Index} index   Zero-based index\n\t   * @private\n\t   */\n\t  function _get (matrix, index) {\n\t    if (!index || index.isIndex !== true) {\n\t      throw new TypeError('Invalid index');\n\t    }\n\n\t    var isScalar = index.isScalar();\n\t    if (isScalar) {\n\t      // return a scalar\n\t      return matrix.get(index.min());\n\t    }\n\t    else {\n\t      // validate dimensions\n\t      var size = index.size();\n\t      if (size.length != matrix._size.length) {\n\t        throw new DimensionError(size.length, matrix._size.length);\n\t      }\n\n\t      // validate if any of the ranges in the index is out of range\n\t      var min = index.min();\n\t      var max = index.max();\n\t      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n\t        validateIndex(min[i], matrix._size[i]);\n\t        validateIndex(max[i], matrix._size[i]);\n\t      }\n\n\t      // retrieve submatrix\n\t      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n\t      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n\t    }\n\t  }\n\t  \n\t  /**\n\t   * Recursively get a submatrix of a multi dimensional matrix.\n\t   * Index is not checked for correct number or length of dimensions.\n\t   * @memberof DenseMatrix\n\t   * @param {Array} data\n\t   * @param {Index} index\n\t   * @param {number} dims   Total number of dimensions\n\t   * @param {number} dim    Current dimension\n\t   * @return {Array} submatrix\n\t   * @private\n\t   */\n\t  function _getSubmatrix (data, index, dims, dim) {\n\t    var last = (dim == dims - 1);\n\t    var range = index.dimension(dim);\n\n\t    if (last) {\n\t      return range.map(function (i) {\n\t        return data[i];\n\t      }).valueOf();\n\t    }\n\t    else {\n\t      return range.map(function (i) {\n\t        var child = data[i];\n\t        return _getSubmatrix(child, index, dims, dim + 1);\n\t      }).valueOf();\n\t    }\n\t  }\n\t  \n\t  /**\n\t   * Replace a submatrix in this matrix\n\t   * Indexes are zero-based.\n\t   * @memberof DenseMatrix\n\t   * @param {DenseMatrix} matrix\n\t   * @param {Index} index\n\t   * @param {DenseMatrix | Array | *} submatrix\n\t   * @param {*} defaultValue          Default value, filled in on new entries when\n\t   *                                  the matrix is resized.\n\t   * @return {DenseMatrix} matrix\n\t   * @private\n\t   */\n\t  function _set (matrix, index, submatrix, defaultValue) {\n\t    if (!index || index.isIndex !== true) {\n\t      throw new TypeError('Invalid index');\n\t    }\n\n\t    // get index size and check whether the index contains a single value\n\t    var iSize = index.size(),\n\t        isScalar = index.isScalar();\n\n\t    // calculate the size of the submatrix, and convert it into an Array if needed\n\t    var sSize;\n\t    if (submatrix && submatrix.isMatrix === true) {\n\t      sSize = submatrix.size();\n\t      submatrix = submatrix.valueOf();\n\t    }\n\t    else {\n\t      sSize = array.size(submatrix);\n\t    }\n\n\t    if (isScalar) {\n\t      // set a scalar\n\n\t      // check whether submatrix is a scalar\n\t      if (sSize.length !== 0) {\n\t        throw new TypeError('Scalar expected');\n\t      }\n\n\t      matrix.set(index.min(), submatrix, defaultValue);\n\t    }\n\t    else {\n\t      // set a submatrix\n\n\t      // validate dimensions\n\t      if (iSize.length < matrix._size.length) {\n\t        throw new DimensionError(iSize.length, matrix._size.length, '<');\n\t      }\n\n\t      if (sSize.length < iSize.length) {\n\t        // calculate number of missing outer dimensions\n\t        var i = 0;\n\t        var outer = 0;\n\t        while (iSize[i] === 1 && sSize[i] === 1) {\n\t          i++;\n\t        }\n\t        while (iSize[i] === 1) {\n\t          outer++;\n\t          i++;\n\t        }\n\n\t        // unsqueeze both outer and inner dimensions\n\t        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);\n\t      }\n\n\t      // check whether the size of the submatrix matches the index size\n\t      if (!object.deepEqual(iSize, sSize)) {\n\t        throw new DimensionError(iSize, sSize, '>');\n\t      }\n\n\t      // enlarge matrix when needed\n\t      var size = index.max().map(function (i) {\n\t        return i + 1;\n\t      });\n\t      _fit(matrix, size, defaultValue);\n\n\t      // insert the sub matrix\n\t      var dims = iSize.length,\n\t          dim = 0;\n\t      _setSubmatrix (matrix._data, index, submatrix, dims, dim);\n\t    }\n\n\t    return matrix;\n\t  }\n\t  \n\t  /**\n\t   * Replace a submatrix of a multi dimensional matrix.\n\t   * @memberof DenseMatrix\n\t   * @param {Array} data\n\t   * @param {Index} index\n\t   * @param {Array} submatrix\n\t   * @param {number} dims   Total number of dimensions\n\t   * @param {number} dim\n\t   * @private\n\t   */\n\t  function _setSubmatrix (data, index, submatrix, dims, dim) {\n\t    var last = (dim == dims - 1),\n\t        range = index.dimension(dim);\n\n\t    if (last) {\n\t      range.forEach(function (dataIndex, subIndex) {\n\t        validateIndex(dataIndex);\n\t        data[dataIndex] = submatrix[subIndex[0]];\n\t      });\n\t    }\n\t    else {\n\t      range.forEach(function (dataIndex, subIndex) {\n\t        validateIndex(dataIndex);\n\t        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n\t      });\n\t    }\n\t  }\n\t  \n\t  /**\n\t   * Resize the matrix to the given size. Returns a copy of the matrix when\n\t   * `copy=true`, otherwise return the matrix itself (resize in place).\n\t   *\n\t   * @memberof DenseMatrix\n\t   * @param {number[]} size           The new size the matrix should have.\n\t   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n\t   *                                  If not provided, the matrix elements will\n\t   *                                  be filled with zeros.\n\t   * @param {boolean} [copy]          Return a resized copy of the matrix\n\t   *\n\t   * @return {Matrix}                 The resized matrix\n\t   */\n\t  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n\t    // validate arguments\n\t    if (!isArray(size))\n\t      throw new TypeError('Array expected');\n\n\t    // matrix to resize\n\t    var m = copy ? this.clone() : this;\n\t    // resize matrix\n\t    return _resize(m, size, defaultValue);\n\t  };\n\t  \n\t  var _resize = function (matrix, size, defaultValue) {\n\t    // check size\n\t    if (size.length === 0) {\n\t      // first value in matrix\n\t      var v = matrix._data;\n\t      // go deep\n\t      while (isArray(v)) {\n\t        v = v[0];\n\t      }\n\t      return v;\n\t    }\n\t    // resize matrix\n\t    matrix._size = size.slice(0); // copy the array\n\t    matrix._data = array.resize(matrix._data, matrix._size, defaultValue);\n\t    // return matrix\n\t    return matrix;\n\t  };\n\t  \n\t  /**\n\t   * Enlarge the matrix when it is smaller than given size.\n\t   * If the matrix is larger or equal sized, nothing is done.\n\t   * @memberof DenseMatrix\n\t   * @param {DenseMatrix} matrix           The matrix to be resized\n\t   * @param {number[]} size\n\t   * @param {*} defaultValue          Default value, filled in on new entries.\n\t   * @private\n\t   */\n\t  function _fit(matrix, size, defaultValue) {\n\t    var newSize = matrix._size.slice(0), // copy the array\n\t        changed = false;\n\n\t    // add dimensions when needed\n\t    while (newSize.length < size.length) {\n\t      newSize.push(0);\n\t      changed = true;\n\t    }\n\n\t    // enlarge size when needed\n\t    for (var i = 0, ii = size.length; i < ii; i++) {\n\t      if (size[i] > newSize[i]) {\n\t        newSize[i] = size[i];\n\t        changed = true;\n\t      }\n\t    }\n\n\t    if (changed) {\n\t      // resize only when size is changed\n\t      _resize(matrix, newSize, defaultValue);\n\t    }\n\t  }\n\t  \n\t  /**\n\t   * Create a clone of the matrix\n\t   * @memberof DenseMatrix\n\t   * @return {DenseMatrix} clone\n\t   */\n\t  DenseMatrix.prototype.clone = function () {\n\t    var m = new DenseMatrix({\n\t      data: object.clone(this._data),\n\t      size: object.clone(this._size),\n\t      datatype: this._datatype\n\t    });\n\t    return m;\n\t  };\n\t  \n\t  /**\n\t   * Retrieve the size of the matrix.\n\t   * @memberof DenseMatrix\n\t   * @returns {number[]} size\n\t   */\n\t  DenseMatrix.prototype.size = function() {\n\t    return this._size.slice(0); // return a clone of _size\n\t  };\n\t  \n\t  /**\n\t   * Create a new matrix with the results of the callback function executed on\n\t   * each entry of the matrix.\n\t   * @memberof DenseMatrix\n\t   * @param {Function} callback   The callback function is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the Matrix being traversed.\n\t   *\n\t   * @return {DenseMatrix} matrix\n\t   */\n\t  DenseMatrix.prototype.map = function (callback) {\n\t    // matrix instance\n\t    var me = this;\n\t    var recurse = function (value, index) {\n\t      if (isArray(value)) {\n\t        return value.map(function (child, i) {\n\t          return recurse(child, index.concat(i));\n\t        });\n\t      }\n\t      else {\n\t        return callback(value, index, me);\n\t      }\n\t    };\n\t    // return dense format\n\t    return new DenseMatrix({\n\t      data: recurse(this._data, []),\n\t      size: object.clone(this._size),\n\t      datatype: this._datatype\n\t    });\n\t  };\n\t  \n\t  /**\n\t   * Execute a callback function on each entry of the matrix.\n\t   * @memberof DenseMatrix\n\t   * @param {Function} callback   The callback function is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the Matrix being traversed.\n\t   */\n\t  DenseMatrix.prototype.forEach = function (callback) {\n\t    // matrix instance\n\t    var me = this;\n\t    var recurse = function (value, index) {\n\t      if (isArray(value)) {\n\t        value.forEach(function (child, i) {\n\t          recurse(child, index.concat(i));\n\t        });\n\t      }\n\t      else {\n\t        callback(value, index, me);\n\t      }\n\t    };\n\t    recurse(this._data, []);\n\t  };\n\t  \n\t  /**\n\t   * Create an Array with a copy of the data of the DenseMatrix\n\t   * @memberof DenseMatrix\n\t   * @returns {Array} array\n\t   */\n\t  DenseMatrix.prototype.toArray = function () {\n\t    return object.clone(this._data);\n\t  };\n\t  \n\t  /**\n\t   * Get the primitive value of the DenseMatrix: a multidimensional array\n\t   * @memberof DenseMatrix\n\t   * @returns {Array} array\n\t   */\n\t  DenseMatrix.prototype.valueOf = function () {\n\t    return this._data;\n\t  };\n\t  \n\t  /**\n\t   * Get a string representation of the matrix, with optional formatting options.\n\t   * @memberof DenseMatrix\n\t   * @param {Object | number | Function} [options]  Formatting options. See\n\t   *                                                lib/utils/number:format for a\n\t   *                                                description of the available\n\t   *                                                options.\n\t   * @returns {string} str\n\t   */\n\t  DenseMatrix.prototype.format = function (options) {\n\t    return string.format(this._data, options);\n\t  };\n\t  \n\t  /**\n\t   * Get a string representation of the matrix\n\t   * @memberof DenseMatrix\n\t   * @returns {string} str\n\t   */\n\t  DenseMatrix.prototype.toString = function () {\n\t    return string.format(this._data);\n\t  };\n\t  \n\t  /**\n\t   * Get a JSON representation of the matrix\n\t   * @memberof DenseMatrix\n\t   * @returns {Object}\n\t   */\n\t  DenseMatrix.prototype.toJSON = function () {\n\t    return {\n\t      mathjs: 'DenseMatrix',\n\t      data: this._data,\n\t      size: this._size,\n\t      datatype: this._datatype\n\t    };\n\t  };\n\t  \n\t  /**\n\t   * Get the kth Matrix diagonal.\n\t   *\n\t   * @memberof DenseMatrix\n\t   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n\t   *\n\t   * @returns {Array}                      The array vector with the diagonal values.\n\t   */\n\t  DenseMatrix.prototype.diagonal = function(k) {\n\t    // validate k if any\n\t    if (k) {\n\t      // convert BigNumber to a number\n\t      if (k.isBigNumber === true)\n\t        k = k.toNumber();\n\t      // is must be an integer\n\t      if (!isNumber(k) || !isInteger(k)) {\n\t        throw new TypeError ('The parameter k must be an integer number');\n\t      }\n\t    }\n\t    else {\n\t      // default value\n\t      k = 0;\n\t    }\n\n\t    var kSuper = k > 0 ? k : 0;\n\t    var kSub = k < 0 ? -k : 0;\n\n\t    // rows & columns\n\t    var rows = this._size[0];\n\t    var columns = this._size[1];\n\n\t    // number diagonal values\n\t    var n = Math.min(rows - kSub, columns -  kSuper);\n\t    \n\t    // x is a matrix get diagonal from matrix\n\t    var data = [];\n\t    \n\t    // loop rows\n\t    for (var i = 0; i < n; i++) {\n\t      data[i] = this._data[i + kSub][i + kSuper];\n\t    }\n\n\t    // create DenseMatrix\n\t    return new DenseMatrix({\n\t      data: data,\n\t      size: [n],\n\t      datatype: this._datatype\n\t    });\n\t  };\n\t  \n\t  /**\n\t   * Create a diagonal matrix.\n\t   *\n\t   * @memberof DenseMatrix\n\t   * @param {Array} size                   The matrix size.\n\t   * @param {number | Array} value          The values for the diagonal.\n\t   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.\n\t   * @param {number} [defaultValue]        The default value for non-diagonal\n\t   *\n\t   * @returns {DenseMatrix}\n\t   */\n\t  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n\t    if (!isArray(size))\n\t      throw new TypeError('Array expected, size parameter');\n\t    if (size.length !== 2)\n\t      throw new Error('Only two dimensions matrix are supported');\n\n\t    // map size & validate\n\t    size = size.map(function (s) {\n\t      // check it is a big number\n\t      if (s && s.isBigNumber === true) {\n\t        // convert it\n\t        s = s.toNumber();\n\t      }\n\t      // validate arguments\n\t      if (!isNumber(s) || !isInteger(s) || s < 1) {\n\t        throw new Error('Size values must be positive integers');\n\t      } \n\t      return s;\n\t    });\n\n\t    // validate k if any\n\t    if (k) {\n\t      // convert BigNumber to a number\n\t      if (k && k.isBigNumber === true)\n\t        k = k.toNumber();\n\t      // is must be an integer\n\t      if (!isNumber(k) || !isInteger(k)) {\n\t        throw new TypeError ('The parameter k must be an integer number');\n\t      }\n\t    }\n\t    else {\n\t      // default value\n\t      k = 0;\n\t    }\n\t    \n\t    if (defaultValue && isString(datatype)) {\n\t      // convert defaultValue to the same datatype\n\t      defaultValue = typed.convert(defaultValue, datatype);\n\t    }\n\n\t    var kSuper = k > 0 ? k : 0;\n\t    var kSub = k < 0 ? -k : 0;\n\t    \n\t    // rows and columns\n\t    var rows = size[0];\n\t    var columns = size[1];\n\n\t    // number of non-zero items\n\t    var n = Math.min(rows - kSub, columns -  kSuper);\n\n\t    // value extraction function\n\t    var _value;\n\n\t    // check value\n\t    if (isArray(value)) {\n\t      // validate array\n\t      if (value.length !== n) {\n\t        // number of values in array must be n\n\t        throw new Error('Invalid value array length');\n\t      }\n\t      // define function\n\t      _value = function (i) {\n\t        // return value @ i\n\t        return value[i];\n\t      };      \n\t    }\n\t    else if (value && value.isMatrix === true) {\n\t      // matrix size\n\t      var ms = value.size();\n\t      // validate matrix\n\t      if (ms.length !== 1 || ms[0] !== n) {\n\t        // number of values in array must be n\n\t        throw new Error('Invalid matrix length');\n\t      }\n\t      // define function\n\t      _value = function (i) {\n\t        // return value @ i\n\t        return value.get([i]);\n\t      };\n\t    }\n\t    else {\n\t      // define function\n\t      _value = function () {\n\t        // return value\n\t        return value;\n\t      };\n\t    }\n\t    \n\t    // discover default value if needed\n\t    if (!defaultValue) {\n\t      // check first value in array\n\t      defaultValue = (_value(0) && _value(0).isBigNumber === true) ? new type.BigNumber(0) : 0;\n\t    }\n\n\t    // empty array\n\t    var data = [];\n\n\t    // check we need to resize array\n\t    if (size.length > 0) {\n\t      // resize array\n\t      data = array.resize(data, size, defaultValue);\n\t      // fill diagonal\n\t      for (var d = 0; d < n; d++) {\n\t        data[d + kSub][d + kSuper] = _value(d);\n\t      }\n\t    }\n\t    \n\t    // create DenseMatrix\n\t    return new DenseMatrix({\n\t      data: data,\n\t      size: [rows, columns]\n\t    });\n\t  };\n\n\t  /**\n\t   * Generate a matrix from a JSON object\n\t   * @memberof DenseMatrix\n\t   * @param {Object} json  An object structured like\n\t   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n\t   *                       where mathjs is optional\n\t   * @returns {DenseMatrix}\n\t   */\n\t  DenseMatrix.fromJSON = function (json) {\n\t    return new DenseMatrix(json);\n\t  };\n\t  \n\t  /**\n\t   * Swap rows i and j in Matrix.\n\t   *\n\t   * @memberof DenseMatrix\n\t   * @param {number} i       Matrix row index 1\n\t   * @param {number} j       Matrix row index 2\n\t   *\n\t   * @return {Matrix}        The matrix reference\n\t   */\n\t  DenseMatrix.prototype.swapRows = function (i, j) {\n\t    // check index\n\t    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n\t      throw new Error('Row index must be positive integers');\n\t    }\n\t    // check dimensions\n\t    if (this._size.length !== 2) {\n\t      throw new Error('Only two dimensional matrix is supported');\n\t    }\n\t    // validate index\n\t    validateIndex(i, this._size[0]);\n\t    validateIndex(j, this._size[0]);\n\n\t    // swap rows\n\t    DenseMatrix._swapRows(i, j, this._data);\n\t    // return current instance\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Swap rows i and j in Dense Matrix data structure.\n\t   *\n\t   * @param {number} i       Matrix row index 1\n\t   * @param {number} j       Matrix row index 2\n\t   */\n\t  DenseMatrix._swapRows = function (i, j, data) {\n\t    // swap values i <-> j\n\t    var vi = data[i];\n\t    data[i] = data[j];\n\t    data[j] = vi;\n\t  };\n\t   \n\t  /**\n\t   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n\t   * Matrices. Replaces all nested Matrices with Arrays\n\t   * @memberof DenseMatrix\n\t   * @param {Array} data\n\t   * @return {Array} data\n\t   */\n\t  function preprocess(data) {\n\t    for (var i = 0, ii = data.length; i < ii; i++) {\n\t      var elem = data[i];\n\t      if (isArray(elem)) {\n\t        data[i] = preprocess(elem);\n\t      }\n\t      else if (elem && elem.isMatrix === true) {\n\t        data[i] = preprocess(elem.valueOf());\n\t      }\n\t    }\n\n\t    return data;\n\t  }\n\n\t  // register this type in the base class Matrix\n\t  type.Matrix._storage.dense = DenseMatrix;\n\t  type.Matrix._storage['default'] = DenseMatrix;\n\n\t  // exports\n\t  return DenseMatrix;\n\t}\n\n\texports.name = 'DenseMatrix';\n\texports.path = 'type';\n\texports.factory = factory;\n\texports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar util = __webpack_require__(39);\n\tvar DimensionError = __webpack_require__(42);\n\n\tvar array = util.array;\n\tvar object = util.object;\n\tvar string = util.string;\n\tvar number = util.number;\n\n\tvar isArray = Array.isArray;\n\tvar isNumber = number.isNumber;\n\tvar isInteger = number.isInteger;\n\tvar isString = string.isString;\n\n\tvar validateIndex = array.validateIndex;\n\n\tfunction factory (type, config, load, typed) {\n\t  var Matrix = load(__webpack_require__(38)); // force loading Matrix (do not use via type.Matrix)\n\t  var equalScalar = load(__webpack_require__(48));\n\n\t  /**\n\t   * Sparse Matrix implementation. This type implements a Compressed Column Storage format\n\t   * for sparse matrices.\n\t   * @class SparseMatrix\n\t   */\n\t  function SparseMatrix(data, datatype) {\n\t    if (!(this instanceof SparseMatrix))\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    if (datatype && !isString(datatype))\n\t      throw new Error('Invalid datatype: ' + datatype);\n\t    \n\t    if (data && data.isMatrix === true) {\n\t      // create from matrix\n\t      _createFromMatrix(this, data, datatype);\n\t    }\n\t    else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {\n\t      // initialize fields\n\t      this._values = data.values;\n\t      this._index = data.index;\n\t      this._ptr = data.ptr;\n\t      this._size = data.size;\n\t      this._datatype = datatype || data.datatype;\n\t    }\n\t    else if (isArray(data)) {\n\t      // create from array\n\t      _createFromArray(this, data, datatype);\n\t    }\n\t    else if (data) {\n\t      // unsupported type\n\t      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n\t    }\n\t    else {\n\t      // nothing provided\n\t      this._values = [];\n\t      this._index = [];\n\t      this._ptr = [0];\n\t      this._size = [0, 0];\n\t      this._datatype = datatype;\n\t    }\n\t  }\n\t  \n\t  var _createFromMatrix = function (matrix, source, datatype) {\n\t    // check matrix type\n\t    if (source.type === 'SparseMatrix') {\n\t      // clone arrays\n\t      matrix._values = source._values ? object.clone(source._values) : undefined;\n\t      matrix._index = object.clone(source._index);\n\t      matrix._ptr = object.clone(source._ptr);\n\t      matrix._size = object.clone(source._size);\n\t      matrix._datatype = datatype || source._datatype;\n\t    }\n\t    else {\n\t      // build from matrix data\n\t      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n\t    }\n\t  };\n\t  \n\t  var _createFromArray = function (matrix, data, datatype) {\n\t    // initialize fields\n\t    matrix._values = [];\n\t    matrix._index = [];\n\t    matrix._ptr = [];\n\t    matrix._datatype = datatype;\n\t    // discover rows & columns, do not use math.size() to avoid looping array twice\n\t    var rows = data.length;\n\t    var columns = 0;\n\t    \n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\t    \n\t    if (isString(datatype)) {\n\t      // find signature that matches (datatype, datatype)\n\t      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, datatype);\n\t    }\n\n\t    // check we have rows (empty array)\n\t    if (rows > 0) {\n\t      // column index\n\t      var j = 0;\n\t      do {\n\t        // store pointer to values index\n\t        matrix._ptr.push(matrix._index.length);\n\t        // loop rows\n\t        for (var i = 0; i < rows; i++) {\n\t          // current row\n\t          var row = data[i];\n\t          // check row is an array\n\t          if (isArray(row)) {\n\t            // update columns if needed (only on first column)\n\t            if (j === 0 && columns < row.length)\n\t              columns = row.length;\n\t            // check row has column\n\t            if (j < row.length) {\n\t              // value\n\t              var v = row[j];\n\t              // check value != 0\n\t              if (!eq(v, zero)) {\n\t                // store value\n\t                matrix._values.push(v);\n\t                // index\n\t                matrix._index.push(i);\n\t              }\n\t            }\n\t          }\n\t          else {\n\t            // update columns if needed (only on first column)\n\t            if (j === 0 && columns < 1)\n\t              columns = 1;\n\t            // check value != 0 (row is a scalar)\n\t            if (!eq(row, zero)) {\n\t              // store value\n\t              matrix._values.push(row);\n\t              // index\n\t              matrix._index.push(i);\n\t            }\n\t          }\n\t        }\n\t        // increment index\n\t        j++;      \n\t      }\n\t      while (j < columns);\n\t    }\n\t    // store number of values in ptr\n\t    matrix._ptr.push(matrix._index.length);\n\t    // size\n\t    matrix._size = [rows, columns];\n\t  };\n\t  \n\t  SparseMatrix.prototype = new Matrix();\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  SparseMatrix.prototype.type = 'SparseMatrix';\n\t  SparseMatrix.prototype.isSparseMatrix = true;\n\n\t  /**\n\t   * Get the storage format used by the matrix.\n\t   *\n\t   * Usage:\n\t   *     var format = matrix.storage()                   // retrieve storage format\n\t   *\n\t   * @memberof SparseMatrix\n\t   * @return {string}           The storage format.\n\t   */\n\t  SparseMatrix.prototype.storage = function () {\n\t    return 'sparse';\n\t  };\n\n\t  /**\n\t   * Get the datatype of the data stored in the matrix.\n\t   *\n\t   * Usage:\n\t   *     var format = matrix.datatype()                   // retrieve matrix datatype\n\t   *\n\t   * @memberof SparseMatrix\n\t   * @return {string}           The datatype.\n\t   */\n\t  SparseMatrix.prototype.datatype = function () {\n\t    return this._datatype;\n\t  };\n\n\t  /**\n\t   * Create a new SparseMatrix\n\t   * @memberof SparseMatrix\n\t   * @param {Array} data\n\t   * @param {string} [datatype]\n\t   */\n\t  SparseMatrix.prototype.create = function (data, datatype) {\n\t    return new SparseMatrix(data, datatype);\n\t  };\n\n\t  /**\n\t   * Get the matrix density.\n\t   *\n\t   * Usage:\n\t   *     var density = matrix.density()                   // retrieve matrix density\n\t   *\n\t   * @memberof SparseMatrix\n\t   * @return {number}           The matrix density.\n\t   */\n\t  SparseMatrix.prototype.density = function () {\n\t    // rows & columns\n\t    var rows = this._size[0];\n\t    var columns = this._size[1];\n\t    // calculate density\n\t    return rows !== 0 && columns !== 0 ? (this._index.length / (rows * columns)) : 0;\n\t  };\n\t  \n\t  /**\n\t   * Get a subset of the matrix, or replace a subset of the matrix.\n\t   *\n\t   * Usage:\n\t   *     var subset = matrix.subset(index)               // retrieve subset\n\t   *     var value = matrix.subset(index, replacement)   // replace subset\n\t   *\n\t   * @memberof SparseMatrix\n\t   * @param {Index} index\n\t   * @param {Array | Maytrix | *} [replacement]\n\t   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n\t   *                                  the matrix is resized. If not provided,\n\t   *                                  new matrix elements will be filled with zeros.\n\t   */\n\t  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) { // check it is a pattern matrix\n\t    if (!this._values)\n\t      throw new Error('Cannot invoke subset on a Pattern only matrix');\n\n\t    // check arguments\n\t    switch (arguments.length) {\n\t      case 1:\n\t        return _getsubset(this, index);\n\n\t        // intentional fall through\n\t      case 2:\n\t      case 3:\n\t        return _setsubset(this, index, replacement, defaultValue);\n\n\t      default:\n\t        throw new SyntaxError('Wrong number of arguments');\n\t    }\n\t  };\n\t  \n\t  var _getsubset = function (matrix, idx) {\n\t    // check idx\n\t    if (!idx || idx.isIndex !== true) {\n\t      throw new TypeError('Invalid index');\n\t    }\n\n\t    var isScalar = idx.isScalar();\n\t    if (isScalar) {\n\t      // return a scalar\n\t      return matrix.get(idx.min());\n\t    }\n\t    // validate dimensions\n\t    var size = idx.size();\n\t    if (size.length != matrix._size.length) {\n\t      throw new DimensionError(size.length, matrix._size.length);\n\t    }\n\n\t    // vars\n\t    var i, ii, k, kk;\n\t    \n\t    // validate if any of the ranges in the index is out of range\n\t    var min = idx.min();\n\t    var max = idx.max();\n\t    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n\t      validateIndex(min[i], matrix._size[i]);\n\t      validateIndex(max[i], matrix._size[i]);\n\t    }\n\t    \n\t    // matrix arrays\n\t    var mvalues = matrix._values;\n\t    var mindex = matrix._index;\n\t    var mptr = matrix._ptr;\n\t        \n\t    // rows & columns dimensions for result matrix\n\t    var rows = idx.dimension(0);\n\t    var columns = idx.dimension(1);\n\t    \n\t    // workspace & permutation vector\n\t    var w = [];\n\t    var pv = [];\n\t    \n\t    // loop rows in resulting matrix\n\t    rows.forEach(function (i, r) {\n\t      // update permutation vector\n\t      pv[i] = r[0];  \n\t      // mark i in workspace\n\t      w[i] = true;\n\t    });\n\n\t    // result matrix arrays\n\t    var values = mvalues ? [] : undefined;\n\t    var index = [];\n\t    var ptr = [];\n\t        \n\t    // loop columns in result matrix\n\t    columns.forEach(function (j) {\n\t      // update ptr\n\t      ptr.push(index.length);\n\t      // loop values in column j\n\t      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n\t        // row\n\t        i = mindex[k];\n\t        // check row is in result matrix\n\t        if (w[i] === true) {\n\t          // push index\n\t          index.push(pv[i]);\n\t          // check we need to process values\n\t          if (values)\n\t            values.push(mvalues[k]);\n\t        }\n\t      }\n\t    });\n\t    // update ptr\n\t    ptr.push(index.length);\n\t    \n\t    // return matrix\n\t    return new SparseMatrix({\n\t      values: values,\n\t      index: index,\n\t      ptr: ptr,\n\t      size: size,\n\t      datatype: matrix._datatype\n\t    });\n\t  };\n\t  \n\t  var _setsubset = function (matrix, index, submatrix, defaultValue) {\n\t    // check index\n\t    if (!index || index.isIndex !== true) {\n\t      throw new TypeError('Invalid index');\n\t    }\n\t    \n\t    // get index size and check whether the index contains a single value\n\t    var iSize = index.size(),\n\t        isScalar = index.isScalar();\n\t    \n\t    // calculate the size of the submatrix, and convert it into an Array if needed\n\t    var sSize;\n\t    if (submatrix && submatrix.isMatrix === true) {\n\t      // submatrix size\n\t      sSize = submatrix.size();\n\t      // use array representation\n\t      submatrix = submatrix.toArray();\n\t    }\n\t    else {\n\t      // get submatrix size (array, scalar)\n\t      sSize = array.size(submatrix);\n\t    }\n\t    \n\t    // check index is a scalar\n\t    if (isScalar) {\n\t      // verify submatrix is a scalar\n\t      if (sSize.length !== 0) {\n\t        throw new TypeError('Scalar expected');\n\t      }\n\t      // set value\n\t      matrix.set(index.min(), submatrix, defaultValue);\n\t    }\n\t    else {\n\t      // validate dimensions, index size must be one or two dimensions\n\t      if (iSize.length !== 1 && iSize.length !== 2) {\n\t        throw new DimensionError(iSize.length, matrix._size.length, '<');\n\t      }\n\t      \n\t      // check submatrix and index have the same dimensions\n\t      if (sSize.length < iSize.length) {\n\t        // calculate number of missing outer dimensions\n\t        var i = 0;\n\t        var outer = 0;\n\t        while (iSize[i] === 1 && sSize[i] === 1) {\n\t          i++;\n\t        }\n\t        while (iSize[i] === 1) {\n\t          outer++;\n\t          i++;\n\t        }\n\t        // unsqueeze both outer and inner dimensions\n\t        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);\n\t      }\n\t      \n\t      // check whether the size of the submatrix matches the index size\n\t      if (!object.deepEqual(iSize, sSize)) {\n\t        throw new DimensionError(iSize, sSize, '>');\n\t      }\n\t      \n\t      // offsets\n\t      var x0 = index.min()[0];\n\t      var y0 = index.min()[1];      \n\t      \n\t      // submatrix rows and columns\n\t      var m = sSize[0];\n\t      var n = sSize[1];\n\n\t      // loop submatrix\n\t      for (var x = 0; x < m; x++) {\n\t        // loop columns\n\t        for (var y = 0; y < n; y++) {\n\t          // value at i, j\n\t          var v = submatrix[x][y];\n\t          // invoke set (zero value will remove entry from matrix)\n\t          matrix.set([x + x0, y + y0], v, defaultValue);\n\t        }\n\t      }\n\t    }\n\t    return matrix;\n\t  };\n\n\t  /**\n\t   * Get a single element from the matrix.\n\t   * @memberof SparseMatrix\n\t   * @param {number[]} index   Zero-based index\n\t   * @return {*} value\n\t   */\n\t  SparseMatrix.prototype.get = function (index) {\n\t    if (!isArray(index))\n\t      throw new TypeError('Array expected');\n\t    if (index.length != this._size.length)\n\t      throw new DimensionError(index.length, this._size.length);\n\n\t    // check it is a pattern matrix\n\t    if (!this._values)\n\t      throw new Error('Cannot invoke get on a Pattern only matrix');\n\n\t    // row and column\n\t    var i = index[0];\n\t    var j = index[1];\n\n\t    // check i, j are valid\n\t    validateIndex(i, this._size[0]);\n\t    validateIndex(j, this._size[1]);\n\n\t    // find value index\n\t    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n\t    // check k is prior to next column k and it is in the correct row\n\t    if (k < this._ptr[j + 1] && this._index[k] === i)\n\t      return this._values[k];\n\n\t    return 0;\n\t  };\n\t  \n\t  /**\n\t   * Replace a single element in the matrix.\n\t   * @memberof SparseMatrix\n\t   * @param {number[]} index   Zero-based index\n\t   * @param {*} value\n\t   * @param {*} [defaultValue]        Default value, filled in on new entries when\n\t   *                                  the matrix is resized. If not provided,\n\t   *                                  new matrix elements will be set to zero.\n\t   * @return {SparseMatrix} self\n\t   */\n\t  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n\t    if (!isArray(index))\n\t      throw new TypeError('Array expected');\n\t    if (index.length != this._size.length)\n\t      throw new DimensionError(index.length, this._size.length);\n\n\t    // check it is a pattern matrix\n\t    if (!this._values)\n\t      throw new Error('Cannot invoke set on a Pattern only matrix');\n\t      \n\t    // row and column\n\t    var i = index[0];\n\t    var j = index[1];\n\n\t    // rows & columns\n\t    var rows = this._size[0];\n\t    var columns = this._size[1];\n\t    \n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\n\t    if (isString(this._datatype)) {\n\t      // find signature that matches (datatype, datatype)\n\t      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, this._datatype);\n\t    }\n\n\t    // check we need to resize matrix\n\t    if (i > rows - 1 || j > columns - 1) {\n\t      // resize matrix\n\t      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);\n\t      // update rows & columns\n\t      rows = this._size[0];\n\t      columns = this._size[1];\n\t    }\n\n\t    // check i, j are valid\n\t    validateIndex(i, rows);\n\t    validateIndex(j, columns);\n\n\t    // find value index\n\t    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n\t    // check k is prior to next column k and it is in the correct row\n\t    if (k < this._ptr[j + 1] && this._index[k] === i) {\n\t      // check value != 0\n\t      if (!eq(v, zero)) {\n\t        // update value\n\t        this._values[k] = v;\n\t      }\n\t      else {\n\t        // remove value from matrix\n\t        _remove(k, j, this._values, this._index, this._ptr);\n\t      }\n\t    }\n\t    else {\n\t      // insert value @ (i, j)\n\t      _insert(k, i, j, v, this._values, this._index, this._ptr);\n\t    }\n\n\t    return this;\n\t  };\n\t  \n\t  var _getValueIndex = function(i, top, bottom, index) {\n\t    // check row is on the bottom side\n\t    if (bottom - top === 0)\n\t      return bottom;\n\t    // loop rows [top, bottom[\n\t    for (var r = top; r < bottom; r++) {\n\t      // check we found value index\n\t      if (index[r] === i)\n\t        return r;\n\t    }\n\t    // we did not find row\n\t    return top;\n\t  };\n\n\t  var _remove = function (k, j, values, index, ptr) {\n\t    // remove value @ k\n\t    values.splice(k, 1);\n\t    index.splice(k, 1);\n\t    // update pointers\n\t    for (var x = j + 1; x < ptr.length; x++)\n\t      ptr[x]--;\n\t  };\n\n\t  var _insert = function (k, i, j, v, values, index, ptr) {\n\t    // insert value\n\t    values.splice(k, 0, v);\n\t    // update row for k\n\t    index.splice(k, 0, i);\n\t    // update column pointers\n\t    for (var x = j + 1; x < ptr.length; x++)\n\t      ptr[x]++;\n\t  };\n\t  \n\t  /**\n\t   * Resize the matrix to the given size. Returns a copy of the matrix when \n\t   * `copy=true`, otherwise return the matrix itself (resize in place).\n\t   *\n\t   * @memberof SparseMatrix\n\t   * @param {number[]} size           The new size the matrix should have.\n\t   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n\t   *                                  If not provided, the matrix elements will\n\t   *                                  be filled with zeros.\n\t   * @param {boolean} [copy]          Return a resized copy of the matrix\n\t   *\n\t   * @return {Matrix}                 The resized matrix\n\t   */\n\t  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {    \n\t    // validate arguments\n\t    if (!isArray(size))\n\t      throw new TypeError('Array expected');\n\t    if (size.length !== 2)\n\t      throw new Error('Only two dimensions matrix are supported');\n\n\t    // check sizes\n\t    size.forEach(function (value) {\n\t      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {\n\t        throw new TypeError('Invalid size, must contain positive integers ' +\n\t                            '(size: ' + string.format(size) + ')');\n\t      }\n\t    });\n\t    \n\t    // matrix to resize\n\t    var m = copy ? this.clone() : this;\n\t    // resize matrix\n\t    return _resize(m, size[0], size[1], defaultValue);\n\t  };\n\t  \n\t  var _resize = function (matrix, rows, columns, defaultValue) {\n\t    // value to insert at the time of growing matrix\n\t    var value = defaultValue || 0;\n\t    \n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\n\t    if (isString(matrix._datatype)) {\n\t      // find signature that matches (datatype, datatype)\n\t      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, matrix._datatype);\n\t      // convert value to the same datatype\n\t      value = typed.convert(value, matrix._datatype);\n\t    }\n\t    \n\t    // should we insert the value?\n\t    var ins = !eq(value, zero);\n\n\t    // old columns and rows\n\t    var r = matrix._size[0];\n\t    var c = matrix._size[1];\n\n\t    var i, j, k;\n\n\t    // check we need to increase columns\n\t    if (columns > c) {\n\t      // loop new columns\n\t      for (j = c; j < columns; j++) {\n\t        // update matrix._ptr for current column\n\t        matrix._ptr[j] = matrix._values.length;\n\t        // check we need to insert matrix._values\n\t        if (ins) {\n\t          // loop rows\n\t          for (i = 0; i < r; i++) {\n\t            // add new matrix._values\n\t            matrix._values.push(value);\n\t            // update matrix._index\n\t            matrix._index.push(i);\n\t          }\n\t        }        \n\t      }\n\t      // store number of matrix._values in matrix._ptr\n\t      matrix._ptr[columns] = matrix._values.length;\n\t    }\n\t    else if (columns < c) {\n\t      // truncate matrix._ptr\n\t      matrix._ptr.splice(columns + 1, c - columns);\n\t      // truncate matrix._values and matrix._index\n\t      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n\t      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n\t    }\n\t    // update columns\n\t    c = columns;\n\n\t    // check we need to increase rows\n\t    if (rows > r) {\n\t      // check we have to insert values\n\t      if (ins) {\n\t        // inserts\n\t        var n = 0;\n\t        // loop columns\n\t        for (j = 0; j < c; j++) {\n\t          // update matrix._ptr for current column\n\t          matrix._ptr[j] = matrix._ptr[j] + n;\n\t          // where to insert matrix._values\n\t          k = matrix._ptr[j + 1] + n;\n\t          // pointer\n\t          var p = 0;\n\t          // loop new rows, initialize pointer\n\t          for (i = r; i < rows; i++, p++) {\n\t            // add value\n\t            matrix._values.splice(k + p, 0, value);\n\t            // update matrix._index\n\t            matrix._index.splice(k + p, 0, i);\n\t            // increment inserts\n\t            n++;\n\t          }\n\t        }\n\t        // store number of matrix._values in matrix._ptr\n\t        matrix._ptr[c] = matrix._values.length;\n\t      }\n\t    }\n\t    else if (rows < r) {\n\t      // deletes\n\t      var d = 0;\n\t      // loop columns\n\t      for (j = 0; j < c; j++) {\n\t        // update matrix._ptr for current column\n\t        matrix._ptr[j] = matrix._ptr[j] - d;\n\t        // where matrix._values start for next column\n\t        var k0 = matrix._ptr[j];\n\t        var k1 = matrix._ptr[j + 1] - d;\n\t        // loop matrix._index\n\t        for (k = k0; k < k1; k++) {\n\t          // row\n\t          i = matrix._index[k];\n\t          // check we need to delete value and matrix._index\n\t          if (i > rows - 1) {\n\t            // remove value\n\t            matrix._values.splice(k, 1);\n\t            // remove item from matrix._index\n\t            matrix._index.splice(k, 1);\n\t            // increase deletes\n\t            d++;\n\t          }\n\t        }\n\t      }\n\t      // update matrix._ptr for current column\n\t      matrix._ptr[j] = matrix._values.length;\n\t    }\n\t    // update matrix._size\n\t    matrix._size[0] = rows;\n\t    matrix._size[1] = columns;\n\t    // return matrix\n\t    return matrix;\n\t  };\n\t  \n\t  /**\n\t   * Create a clone of the matrix\n\t   * @memberof SparseMatrix\n\t   * @return {SparseMatrix} clone\n\t   */\n\t  SparseMatrix.prototype.clone = function () {\n\t    var m = new SparseMatrix({\n\t      values: this._values ? object.clone(this._values) : undefined,\n\t      index: object.clone(this._index),\n\t      ptr: object.clone(this._ptr),\n\t      size: object.clone(this._size),\n\t      datatype: this._datatype\n\t    });\n\t    return m;\n\t  };\n\t  \n\t  /**\n\t   * Retrieve the size of the matrix.\n\t   * @memberof SparseMatrix\n\t   * @returns {number[]} size\n\t   */\n\t  SparseMatrix.prototype.size = function() {\n\t    return this._size.slice(0); // copy the Array\n\t  };\n\t  \n\t  /**\n\t   * Create a new matrix with the results of the callback function executed on\n\t   * each entry of the matrix.\n\t   * @memberof SparseMatrix\n\t   * @param {Function} callback   The callback function is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the Matrix being traversed.\n\t   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n\t   *\n\t   * @return {SparseMatrix} matrix\n\t   */\n\t  SparseMatrix.prototype.map = function (callback, skipZeros) {\n\t    // check it is a pattern matrix\n\t    if (!this._values)\n\t      throw new Error('Cannot invoke map on a Pattern only matrix');\n\t    // matrix instance\n\t    var me = this;\n\t    // rows and columns\n\t    var rows = this._size[0];\n\t    var columns = this._size[1];\n\t    // invoke callback\n\t    var invoke = function (v, i, j) {\n\t      // invoke callback\n\t      return callback(v, [i, j], me);\n\t    };\n\t    // invoke _map\n\t    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n\t  };\n\n\t  /**\n\t   * Create a new matrix with the results of the callback function executed on the interval\n\t   * [minRow..maxRow, minColumn..maxColumn].\n\t   */\n\t  var _map = function (matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n\t    // result arrays\n\t    var values = [];\n\t    var index = [];\n\t    var ptr = [];\n\t    \n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\n\t    if (isString(matrix._datatype)) {\n\t      // find signature that matches (datatype, datatype)\n\t      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, matrix._datatype);\n\t    }\n\t    \n\t    // invoke callback\n\t    var invoke = function (v, x, y) {\n\t      // invoke callback\n\t      v = callback(v, x, y);\n\t      // check value != 0\n\t      if (!eq(v, zero)) {\n\t        // store value\n\t        values.push(v);\n\t        // index\n\t        index.push(x);\n\t      }\n\t    };\n\t    // loop columns\n\t    for (var j = minColumn; j <= maxColumn; j++) {\n\t      // store pointer to values index\n\t      ptr.push(values.length);\n\t      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\t      var k0 = matrix._ptr[j];\n\t      var k1 = matrix._ptr[j + 1];\n\t      // row pointer\n\t      var p = minRow;\n\t      // loop k within [k0, k1[\n\t      for (var k = k0; k < k1; k++) {\n\t        // row index\n\t        var i = matrix._index[k];\n\t        // check i is in range\n\t        if (i >= minRow && i <= maxRow) {\n\t          // zero values\n\t          if (!skipZeros) {\n\t           for (var x = p; x < i; x++)\n\t             invoke(0, x - minRow, j - minColumn);\n\t          }\n\t          // value @ k\n\t          invoke(matrix._values[k], i - minRow, j - minColumn);\n\t        }\n\t        // update pointer\n\t        p = i + 1;\n\t      }\n\t      // zero values\n\t      if (!skipZeros) {\n\t        for (var y = p; y <= maxRow; y++)\n\t          invoke(0, y - minRow, j - minColumn);\n\t      }\n\t    }\n\t    // store number of values in ptr\n\t    ptr.push(values.length);\n\t    // return sparse matrix\n\t    return new SparseMatrix({\n\t      values: values,\n\t      index: index,\n\t      ptr: ptr,\n\t      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n\t    });\n\t  };\n\t  \n\t  /**\n\t   * Execute a callback function on each entry of the matrix.\n\t   * @memberof SparseMatrix\n\t   * @param {Function} callback   The callback function is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the Matrix being traversed.\n\t   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n\t   */\n\t  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n\t    // check it is a pattern matrix\n\t    if (!this._values)\n\t      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n\t    // matrix instance\n\t    var me = this;\n\t    // rows and columns\n\t    var rows = this._size[0];\n\t    var columns = this._size[1];\n\t    // loop columns\n\t    for (var j = 0; j < columns; j++) {\n\t      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\t      var k0 = this._ptr[j];\n\t      var k1 = this._ptr[j + 1];\n\t      // column pointer\n\t      var p = 0;\n\t      // loop k within [k0, k1[\n\t      for (var k = k0; k < k1; k++) {\n\t        // row index\n\t        var i = this._index[k];\n\t        // check we need to process zeros\n\t        if (!skipZeros) {\n\t          // zero values\n\t          for (var x = p; x < i; x++)\n\t            callback(0, [x, j], me);\n\t        }\n\t        // value @ k\n\t        callback(this._values[k], [i, j], me);\n\t        // update pointer\n\t        p = i + 1;\n\t      }\n\t      // check we need to process zeros\n\t      if (!skipZeros) {\n\t        // zero values\n\t        for (var y = p; y < rows; y++)\n\t          callback(0, [y, j], me);\n\t      }\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Create an Array with a copy of the data of the SparseMatrix\n\t   * @memberof SparseMatrix\n\t   * @returns {Array} array\n\t   */\n\t  SparseMatrix.prototype.toArray = function () {\n\t    return _toArray(this._values, this._index, this._ptr, this._size, true);\n\t  };\n\n\t  /**\n\t   * Get the primitive value of the SparseMatrix: a two dimensions array\n\t   * @memberof SparseMatrix\n\t   * @returns {Array} array\n\t   */\n\t  SparseMatrix.prototype.valueOf = function () {\n\t    return _toArray(this._values, this._index, this._ptr, this._size, false);\n\t  };\n\t  \n\t  var _toArray = function (values, index, ptr, size, copy) {    \n\t    // rows and columns\n\t    var rows = size[0];\n\t    var columns = size[1];\n\t    // result\n\t    var a = [];\n\t    // vars\n\t    var i, j;\n\t    // initialize array\n\t    for (i = 0; i < rows; i++) {\n\t      a[i] = [];\n\t      for (j = 0; j < columns; j++)\n\t        a[i][j] = 0;\n\t    }\n\n\t    // loop columns\n\t    for (j = 0; j < columns; j++) {\n\t      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\t      var k0 = ptr[j];\n\t      var k1 = ptr[j + 1];\n\t      // loop k within [k0, k1[\n\t      for (var k = k0; k < k1; k++) {\n\t        // row index\n\t        i = index[k];\n\t        // set value (use one for pattern matrix)\n\t        a[i][j] = values ? (copy ? object.clone(values[k]) : values[k]) : 1;\n\t      }\n\t    }\n\t    return a;\n\t  };\n\t  \n\t  /**\n\t   * Get a string representation of the matrix, with optional formatting options.\n\t   * @memberof SparseMatrix\n\t   * @param {Object | number | Function} [options]  Formatting options. See\n\t   *                                                lib/utils/number:format for a\n\t   *                                                description of the available\n\t   *                                                options.\n\t   * @returns {string} str\n\t   */\n\t  SparseMatrix.prototype.format = function (options) {\n\t    // rows and columns\n\t    var rows = this._size[0];\n\t    var columns = this._size[1];\n\t    // density\n\t    var density = this.density();\n\t    // rows & columns\n\t    var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\\n';\n\t    // loop columns\n\t    for (var j = 0; j < columns; j++) {\n\t      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\t      var k0 = this._ptr[j];\n\t      var k1 = this._ptr[j + 1];\n\t      // loop k within [k0, k1[\n\t      for (var k = k0; k < k1; k++) {\n\t        // row index\n\t        var i = this._index[k];\n\t        // append value\n\t        str += '\\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');\n\t      }\n\t    }\n\t    return str;\n\t  };\n\t  \n\t  /**\n\t   * Get a string representation of the matrix\n\t   * @memberof SparseMatrix\n\t   * @returns {string} str\n\t   */\n\t  SparseMatrix.prototype.toString = function () {\n\t    return string.format(this.toArray());\n\t  };\n\t  \n\t  /**\n\t   * Get a JSON representation of the matrix\n\t   * @memberof SparseMatrix\n\t   * @returns {Object}\n\t   */\n\t  SparseMatrix.prototype.toJSON = function () {\n\t    return {\n\t      mathjs: 'SparseMatrix',\n\t      values: this._values,\n\t      index: this._index,\n\t      ptr: this._ptr,\n\t      size: this._size,\n\t      datatype: this._datatype\n\t    };\n\t  };\n\n\t  /**\n\t   * Get the kth Matrix diagonal.\n\t   *\n\t   * @memberof SparseMatrix\n\t   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n\t   *\n\t   * @returns {Matrix}                     The matrix vector with the diagonal values.\n\t   */\n\t  SparseMatrix.prototype.diagonal = function(k) {\n\t    // validate k if any\n\t    if (k) {\n\t      // convert BigNumber to a number\n\t      if (k.isBigNumber === true)\n\t        k = k.toNumber();\n\t      // is must be an integer\n\t      if (!isNumber(k) || !isInteger(k)) {\n\t        throw new TypeError ('The parameter k must be an integer number');\n\t      }\n\t    }\n\t    else {\n\t      // default value\n\t      k = 0;\n\t    }\n\n\t    var kSuper = k > 0 ? k : 0;\n\t    var kSub = k < 0 ? -k : 0;\n\t    \n\t    // rows & columns\n\t    var rows = this._size[0];\n\t    var columns = this._size[1];\n\t    \n\t    // number diagonal values\n\t    var n = Math.min(rows - kSub, columns -  kSuper);\n\t    \n\t    // diagonal arrays\n\t    var values = [];\n\t    var index = [];\n\t    var ptr = [];\n\t    // initial ptr value\n\t    ptr[0] = 0;\n\t    // loop columns\n\t    for (var j = kSuper; j < columns && values.length < n; j++) {\n\t      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\t      var k0 = this._ptr[j];\n\t      var k1 = this._ptr[j + 1];\n\t      // loop x within [k0, k1[\n\t      for (var x = k0; x < k1; x++) {\n\t        // row index\n\t        var i = this._index[x];\n\t        // check row\n\t        if (i === j - kSuper + kSub) {\n\t          // value on this column\n\t          values.push(this._values[x]);\n\t          // store row\n\t          index[values.length - 1] = i - kSub;\n\t          // exit loop\n\t          break;\n\t        }\n\t      }\n\t    }\n\t    // close ptr\n\t    ptr.push(values.length);\n\t    // return matrix\n\t    return new SparseMatrix({\n\t      values: values,\n\t      index: index,\n\t      ptr: ptr,\n\t      size: [n, 1]\n\t    });\n\t  };\n\t  \n\t  /**\n\t   * Generate a matrix from a JSON object\n\t   * @memberof SparseMatrix\n\t   * @param {Object} json  An object structured like\n\t   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n\t   *                       where mathjs is optional\n\t   * @returns {SparseMatrix}\n\t   */\n\t  SparseMatrix.fromJSON = function (json) {\n\t    return new SparseMatrix(json);\n\t  };\n\n\t  /**\n\t   * Create a diagonal matrix.\n\t   *\n\t   * @memberof SparseMatrix\n\t   * @param {Array} size                       The matrix size.\n\t   * @param {number | Array | Matrix } value   The values for the diagonal.\n\t   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n\t   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n\t   *\n\t   * @returns {SparseMatrix}\n\t   */\n\t  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n\t    if (!isArray(size))\n\t      throw new TypeError('Array expected, size parameter');\n\t    if (size.length !== 2)\n\t      throw new Error('Only two dimensions matrix are supported');\n\t    \n\t    // map size & validate\n\t    size = size.map(function (s) {\n\t      // check it is a big number\n\t      if (s && s.isBigNumber === true) {\n\t        // convert it\n\t        s = s.toNumber();\n\t      }\n\t      // validate arguments\n\t      if (!isNumber(s) || !isInteger(s) || s < 1) {\n\t        throw new Error('Size values must be positive integers');\n\t      } \n\t      return s;\n\t    });\n\t    \n\t    // validate k if any\n\t    if (k) {\n\t      // convert BigNumber to a number\n\t      if (k.isBigNumber === true)\n\t        k = k.toNumber();\n\t      // is must be an integer\n\t      if (!isNumber(k) || !isInteger(k)) {\n\t        throw new TypeError ('The parameter k must be an integer number');\n\t      }\n\t    }\n\t    else {\n\t      // default value\n\t      k = 0;\n\t    }\n\n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\n\t    if (isString(datatype)) {\n\t      // find signature that matches (datatype, datatype)\n\t      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, datatype);\n\t    }\n\t    \n\t    var kSuper = k > 0 ? k : 0;\n\t    var kSub = k < 0 ? -k : 0;\n\t    \n\t    // rows and columns\n\t    var rows = size[0];\n\t    var columns = size[1];\n\t    \n\t    // number of non-zero items\n\t    var n = Math.min(rows - kSub, columns -  kSuper);\n\t    \n\t    // value extraction function\n\t    var _value;\n\t      \n\t    // check value\n\t    if (isArray(value)) {\n\t      // validate array\n\t      if (value.length !== n) {\n\t        // number of values in array must be n\n\t        throw new Error('Invalid value array length');\n\t      }\n\t      // define function\n\t      _value = function (i) {\n\t        // return value @ i\n\t        return value[i];\n\t      };\n\t    }\n\t    else if (value && value.isMatrix === true) {\n\t      // matrix size\n\t      var ms = value.size();\n\t      // validate matrix\n\t      if (ms.length !== 1 || ms[0] !== n) {\n\t        // number of values in array must be n\n\t        throw new Error('Invalid matrix length');\n\t      }\n\t      // define function\n\t      _value = function (i) {\n\t        // return value @ i\n\t        return value.get([i]);\n\t      };\n\t    }\n\t    else {\n\t      // define function\n\t      _value = function () {\n\t        // return value\n\t        return value;\n\t      };\n\t    }\n\t    \n\t    // create arrays\n\t    var values = [];\n\t    var index = [];\n\t    var ptr = [];\n\t    \n\t    // loop items\n\t    for (var j = 0; j < columns; j++) {\n\t      // number of rows with value\n\t      ptr.push(values.length);\n\t      // diagonal index\n\t      var i = j - kSuper;      \n\t      // check we need to set diagonal value\n\t      if (i >= 0 && i < n) {\n\t        // get value @ i\n\t        var v = _value(i);\n\t        // check for zero\n\t        if (!eq(v, zero)) {\n\t          // column\n\t          index.push(i + kSub);\n\t          // add value\n\t          values.push(v);\n\t        }\n\t      }\n\t    }\n\t    // last value should be number of values\n\t    ptr.push(values.length);\n\t    // create SparseMatrix\n\t    return new SparseMatrix({\n\t      values: values,\n\t      index: index,\n\t      ptr: ptr,\n\t      size: [rows, columns]\n\t    });\n\t  };\n\t  \n\t  /**\n\t   * Swap rows i and j in Matrix.\n\t   *\n\t   * @memberof SparseMatrix\n\t   * @param {number} i       Matrix row index 1\n\t   * @param {number} j       Matrix row index 2\n\t   *\n\t   * @return {Matrix}        The matrix reference\n\t   */\n\t  SparseMatrix.prototype.swapRows = function (i, j) {\n\t    // check index\n\t    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n\t      throw new Error('Row index must be positive integers');\n\t    }\n\t    // check dimensions\n\t    if (this._size.length !== 2) {\n\t      throw new Error('Only two dimensional matrix is supported');\n\t    }\n\t    // validate index\n\t    validateIndex(i, this._size[0]);\n\t    validateIndex(j, this._size[0]);\n\t    \n\t    // swap rows\n\t    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);\n\t    // return current instance\n\t    return this;\n\t  };\n\t  \n\t  /**\n\t   * Loop rows with data in column j.\n\t   *\n\t   * @param {number} j            Column\n\t   * @param {Array} values        Matrix values\n\t   * @param {Array} index         Matrix row indeces\n\t   * @param {Array} ptr           Matrix column pointers\n\t   * @param {Function} callback   Callback function invoked for every row in column j\n\t   */\n\t  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n\t    // indeces for column j\n\t    var k0 = ptr[j];\n\t    var k1 = ptr[j + 1];\n\t    // loop\n\t    for (var k = k0; k < k1; k++) {\n\t      // invoke callback\n\t      callback(index[k], values[k]);\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Swap rows x and y in Sparse Matrix data structures.\n\t   *\n\t   * @param {number} x         Matrix row index 1\n\t   * @param {number} y         Matrix row index 2\n\t   * @param {number} columns   Number of columns in matrix\n\t   * @param {Array} values     Matrix values\n\t   * @param {Array} index      Matrix row indeces\n\t   * @param {Array} ptr        Matrix column pointers\n\t   */\n\t  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n\t    // loop columns\n\t    for (var j = 0; j < columns; j++) {\n\t      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\t      var k0 = ptr[j];\n\t      var k1 = ptr[j + 1];\n\t      // find value index @ x\n\t      var kx = _getValueIndex(x, k0, k1, index);\n\t      // find value index @ x\n\t      var ky = _getValueIndex(y, k0, k1, index);\n\t      // check both rows exist in matrix\n\t      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n\t        // swap values (check for pattern matrix)\n\t        if (values) {\n\t          var v = values[kx];\n\t          values[kx] = values[ky];\n\t          values[ky] = v;\n\t        }\n\t        // next column\n\t        continue;\n\t      }\n\t      // check x row exist & no y row\n\t      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n\t        // value @ x (check for pattern matrix)\n\t        var vx = values ? values[kx] : undefined;\n\t        // insert value @ y\n\t        index.splice(ky, 0, y);\n\t        if (values)\n\t          values.splice(ky, 0, vx);        \n\t        // remove value @ x (adjust array index if needed)\n\t        index.splice(ky <= kx ? kx + 1 : kx, 1);\n\t        if (values)\n\t          values.splice(ky <= kx ? kx + 1 : kx, 1);\n\t        // next column\n\t        continue;\n\t      }\n\t      // check y row exist & no x row\n\t      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n\t        // value @ y (check for pattern matrix)\n\t        var vy = values ? values[ky] : undefined;\n\t        // insert value @ x\n\t        index.splice(kx, 0, x);\n\t        if (values)\n\t          values.splice(kx, 0, vy);\n\t        // remove value @ y (adjust array index if needed)\n\t        index.splice(kx <= ky ? ky + 1 : ky, 1);\n\t        if (values)\n\t          values.splice(kx <= ky ? ky + 1 : ky, 1);\n\t      }\n\t    }\n\t  };\n\n\t  // register this type in the base class Matrix\n\t  type.Matrix._storage.sparse = SparseMatrix;\n\n\t  return SparseMatrix;\n\t}\n\n\texports.name = 'SparseMatrix';\n\texports.path = 'type';\n\texports.factory = factory;\n\texports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\n\n\tfunction factory (type, config, load, typed) {\n\t  \n\t  /**\n\t   * Test whether two values are equal.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n\t   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n\t   * @private\n\t   */\n\t  var equalScalar = typed('equalScalar', {\n\n\t    'boolean, boolean': function (x, y) {\n\t      return x === y;\n\t    },\n\n\t    'number, number': function (x, y) {\n\t      return x === y || nearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return x.equals(y);\n\t    },\n\n\t    'Complex, Complex': function (x, y) {\n\t      return x.equals(y);\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      if (!x.equalBase(y)) {\n\t        throw new Error('Cannot compare units with different base');\n\t      }\n\t      return equalScalar(x.value, y.value);\n\t    },\n\n\t    'string, string': function (x, y) {\n\t      return x === y;\n\t    }\n\t  });\n\t  \n\t  return equalScalar;\n\t}\n\n\texports.factory = factory;\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/**\n\t * Compares two BigNumbers.\n\t * @param {BigNumber} x       First value to compare\n\t * @param {BigNumber} y       Second value to compare\n\t * @param {number} [epsilon]  The maximum relative difference between x and y\n\t *                            If epsilon is undefined or null, the function will\n\t *                            test whether x and y are exactly equal.\n\t * @return {boolean} whether the two numbers are nearly equal\n\t */\n\tmodule.exports = function nearlyEqual(x, y, epsilon) {\n\t  // if epsilon is null or undefined, test whether x and y are exactly equal\n\t  if (epsilon == null) {\n\t    return x.eq(y);\n\t  }\n\n\n\t  // use \"==\" operator, handles infinities\n\t  if (x.eq(y)) {\n\t    return true;\n\t  }\n\n\t  // NaN\n\t  if (x.isNaN() || y.isNaN()) {\n\t    return false;\n\t  }\n\n\t  // at this point x and y should be finite\n\t  if(x.isFinite() && y.isFinite()) {\n\t    // check numbers are very close, needed when comparing numbers near zero\n\t    var diff = x.minus(y).abs();\n\t    if (diff.isZero()) {\n\t      return true;\n\t    }\n\t    else {\n\t      // use relative error\n\t      var max = x.constructor.max(x.abs(), y.abs());\n\t      return diff.lte(max.times(epsilon));\n\t    }\n\t  }\n\n\t  // Infinite and Number or negative Infinite and positive Infinite cases\n\t  return false;\n\t};\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load) {\n\t  \n\t  var add = load(__webpack_require__(51));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  \n\t  /**\n\t   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array \n\t   * of the vector elements and an ordered list of non-zero elements.\n\t   */\n\t  function Spa() {\n\t    if (!(this instanceof Spa))\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    \n\t    // allocate vector, TODO use typed arrays\n\t    this._values = [];\n\t    this._heap = new type.FibonacciHeap();\n\t  }\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  Spa.prototype.type = 'Spa';\n\t  Spa.prototype.isSpa = true;\n\n\t  /**\n\t   * Set the value for index i.\n\t   *\n\t   * @param {number} i                       The index\n\t   * @param {number | BigNumber | Complex}   The value at index i\n\t   */\n\t  Spa.prototype.set = function (i, v) {\n\t    // check we have a value @ i\n\t    if (!this._values[i]) {\n\t      // insert in heap\n\t      var node = this._heap.insert(i, v);\n\t      // set the value @ i\n\t      this._values[i] = node;\n\t    }\n\t    else {\n\t      // update the value @ i\n\t      this._values[i].value = v;\n\t    }\n\t  };\n\t  \n\t  Spa.prototype.get = function (i) {\n\t    var node = this._values[i];\n\t    if (node)\n\t      return node.value;\n\t    return 0;\n\t  };\n\t  \n\t  Spa.prototype.accumulate = function (i, v) {\n\t    // node @ i\n\t    var node = this._values[i];\n\t    if (!node) {\n\t      // insert in heap\n\t      node = this._heap.insert(i, v);\n\t      // initialize value\n\t      this._values[i] = node;\n\t    }\n\t    else {\n\t      // accumulate value\n\t      node.value = add(node.value, v);\n\t    }\n\t  };\n\t  \n\t  Spa.prototype.forEach = function (from, to, callback) {\n\t    // references\n\t    var heap = this._heap;\n\t    var values = this._values;\n\t    // nodes\n\t    var nodes = [];\n\t    // node with minimum key, save it\n\t    var node = heap.extractMinimum();\n\t    if (node)\n\t      nodes.push(node);\n\t    // extract nodes from heap (ordered)\n\t    while (node && node.key <= to) {\n\t      // check it is in range\n\t      if (node.key >= from) {\n\t        // check value is not zero\n\t        if (!equalScalar(node.value, 0)) {\n\t          // invoke callback\n\t          callback(node.key, node.value, this);\n\t        }\n\t      }\n\t      // extract next node, save it\n\t      node = heap.extractMinimum();\n\t      if (node)\n\t        nodes.push(node);\n\t    }\n\t    // reinsert all nodes in heap\n\t    for (var i = 0; i < nodes.length; i++) {\n\t      // current node\n\t      var n = nodes[i];\n\t      // insert node in heap\n\t      node = heap.insert(n.key, n.value);\n\t      // update values\n\t      values[node.key] = node;\n\t    }\n\t  };\n\t  \n\t  Spa.prototype.swap = function (i, j) {\n\t    // node @ i and j\n\t    var nodei = this._values[i];\n\t    var nodej = this._values[j];\n\t    // check we need to insert indeces\n\t    if (!nodei && nodej) {\n\t      // insert in heap\n\t      nodei = this._heap.insert(i, nodej.value);\n\t      // remove from heap\n\t      this._heap.remove(nodej);\n\t      // set values\n\t      this._values[i] = nodei;\n\t      this._values[j] = undefined;\n\t    }\n\t    else if (nodei && !nodej) {\n\t      // insert in heap\n\t      nodej = this._heap.insert(j, nodei.value);\n\t      // remove from heap\n\t      this._heap.remove(nodei);\n\t      // set values\n\t      this._values[j] = nodej;\n\t      this._values[i] = undefined;\n\t    }\n\t    else if (nodei && nodej) {\n\t      // swap values\n\t      var v = nodei.value;\n\t      nodei.value = nodej.value;\n\t      nodej.value = v;\n\t    }\n\t  };\n\t  \n\t  return Spa;\n\t}\n\n\texports.name = 'Spa';\n\texports.path = 'type';\n\texports.factory = factory;\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar extend = __webpack_require__(3).extend;\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var latex = __webpack_require__(32);\n\t  \n\t  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm04 = load(__webpack_require__(55));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Add two values, `x + y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.add(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.add(2, 3);               // returns number 5\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    var b = math.complex(-4, 1);\n\t   *    math.add(a, b);               // returns Complex -2 + 4i\n\t   *\n\t   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\t   *\n\t   *    var c = math.unit('5 cm');\n\t   *    var d = math.unit('2.1 mm');\n\t   *    math.add(c, d);               // returns Unit 52.1 mm\n\t   *\n\t   *    math.add(\"2.3\", \"4\");         // returns number 6.3\n\t   *\n\t   * See also:\n\t   *\n\t   *    subtract\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n\t   */\n\t  var add = typed('add', extend({\n\t    // we extend the signatures of addScalar with signatures dealing with matrices\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      \n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm04(x, y, addScalar);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm01(y, x, addScalar, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm01(x, y, addScalar, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, addScalar);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\t    \n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return add(matrix(x), matrix(y)).valueOf();\n\t    },\n\t    \n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return add(matrix(x), y);\n\t    },\n\t    \n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return add(x, matrix(y));\n\t    },\n\t    \n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm10(x, y, addScalar, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, addScalar, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\t    \n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm10(y, x, addScalar, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, addScalar, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\t    \n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, addScalar, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, addScalar, true).valueOf();\n\t    }\n\t  }, addScalar.signatures));\n\n\t  add.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\\\right)'\n\t  };\n\t  \n\t  return add;\n\t}\n\n\texports.name = 'add';\n\texports.factory = factory;\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a Matrix. The function creates a new `math.type.Matrix` object from\n\t   * an `Array`. A Matrix has utility functions to manipulate the data in the\n\t   * matrix, like getting the size and getting or setting values in the matrix.\n\t   * Supported storage formats are 'dense' and 'sparse'.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n\t   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n\t   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n\t   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n\t   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n\t   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var m = math.matrix([[1, 2], [3, 4]]);\n\t   *    m.size();                        // Array [2, 2]\n\t   *    m.resize([3, 2], 5);\n\t   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n\t   *    m.get([1, 0])                    // number 3\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, number, string, unit, sparse\n\t   *\n\t   * @param {Array | Matrix} [data]    A multi dimensional array\n\t   * @param {string} [format]          The Matrix storage format\n\t   *\n\t   * @return {Matrix} The created matrix\n\t   */\n\t  var matrix = typed('matrix', {\n\t    '': function () {\n\t      return _create([]);\n\t    },\n\n\t    'string': function (format) {\n\t      return _create([], format);\n\t    },\n\t    \n\t    'string, string': function (format, datatype) {\n\t      return _create([], format, datatype);\n\t    },\n\n\t    'Array': function (data) {\n\t      return _create(data);\n\t    },\n\t      \n\t    'Matrix': function (data) {\n\t      return _create(data, data.storage());\n\t    },\n\t    \n\t    'Array | Matrix, string': _create,\n\t    \n\t    'Array | Matrix, string, string': _create\n\t  });\n\n\t  matrix.toTex = {\n\t    0: '\\\\begin{bmatrix}\\\\end{bmatrix}',\n\t    1: '\\\\left(${args[0]}\\\\right)',\n\t    2: '\\\\left(${args[0]}\\\\right)'\n\t  };\n\n\t  return matrix;\n\n\t  /**\n\t   * Create a new Matrix with given storage format\n\t   * @param {Array} data\n\t   * @param {string} [format]\n\t   * @param {string} [datatype]\n\t   * @returns {Matrix} Returns a new Matrix\n\t   * @private\n\t   */\n\t  function _create(data, format, datatype) {\n\t    // get storage format constructor\n\t    var M = type.Matrix.storage(format || 'default');\n\n\t    // create instance\n\t    return new M(data, datatype);\n\t  }\n\t}\n\n\texports.name = 'matrix';\n\texports.factory = factory;\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory(type, config, load, typed) {\n\n\t  /**\n\t   * Add two scalar values, `x + y`.\n\t   * This function is meant for internal use: it is used by the public function\n\t   * `add`\n\t   *\n\t   * This function does not support collections (Array or Matrix), and does\n\t   * not validate the number of of inputs.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n\t   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`\n\t   * @private\n\t   */\n\t  var add = typed('add', {\n\n\t    'number, number': function (x, y) {\n\t      return x + y;\n\t    },\n\n\t    'Complex, Complex': function (x, y) {\n\t      return x.add(y);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return x.plus(y);\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return x.add(y);\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      if (x.value == null) throw new Error('Parameter x contains a unit with undefined value');\n\t      if (y.value == null) throw new Error('Parameter y contains a unit with undefined value');\n\t      if (!x.equalBase(y)) throw new Error('Units do not match');\n\n\t      var res = x.clone();\n\t      res.value = add(res.value, y.value);\n\t      res.fixPrefix = false;\n\t      return res;\n\t    }\n\t  });\n\n\t  return add;\n\t}\n\n\texports.factory = factory;\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var DenseMatrix = type.DenseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n\t   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n\t   *\n\t   *\n\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤\n\t   *          └  Dij          ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n\t   */\n\t  var algorithm01 = function (denseMatrix, sparseMatrix, callback, inverse) {\n\t    // dense matrix arrays\n\t    var adata = denseMatrix._data;\n\t    var asize = denseMatrix._size;\n\t    var adt = denseMatrix._datatype;\n\t    // sparse matrix arrays\n\t    var bvalues = sparseMatrix._values;\n\t    var bindex = sparseMatrix._index;\n\t    var bptr = sparseMatrix._ptr;\n\t    var bsize = sparseMatrix._size;\n\t    var bdt = sparseMatrix._datatype;\n\n\t    // validate dimensions\n\t    if (asize.length !== bsize.length)\n\t      throw new DimensionError(asize.length, bsize.length);\n\n\t    // check rows & columns\n\t    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n\t      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n\t    // sparse matrix cannot be a Pattern matrix\n\t    if (!bvalues)\n\t      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\n\t    // process data types\n\t    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;\n\t    // callback function\n\t    var cf = dt ? typed.find(callback, [dt, dt]) : callback;\n\n\t    // vars\n\t    var i, j;\n\t    \n\t    // result (DenseMatrix)\n\t    var cdata = [];\n\t    // initialize c\n\t    for (i = 0; i < rows; i++)\n\t      cdata[i] = [];      \n\t    \n\t    // workspace\n\t    var x = [];\n\t    // marks indicating we have a value in x for a given column\n\t    var w = [];\n\n\t    // loop columns in b\n\t    for (j = 0; j < columns; j++) {\n\t      // column mark\n\t      var mark = j + 1;\n\t      // values in column j\n\t      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n\t        // row\n\t        i = bindex[k];\n\t        // update workspace\n\t        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n\t        // mark i as updated\n\t        w[i] = mark;\n\t      }\n\t      // loop rows\n\t      for (i = 0; i < rows; i++) {\n\t        // check row is in workspace\n\t        if (w[i] === mark) {\n\t          // c[i][j] was already calculated\n\t          cdata[i][j] = x[i];\n\t        }\n\t        else {\n\t          // item does not exist in S\n\t          cdata[i][j] = adata[i][j];\n\t        }\n\t      }\n\t    }\n\n\t    // return dense matrix\n\t    return new DenseMatrix({\n\t      data: cdata,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\t  };\n\t  \n\t  return algorithm01;\n\t}\n\n\texports.name = 'algorithm01';\n\texports.factory = factory;\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var equalScalar = load(__webpack_require__(48));\n\n\t  var SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n\t   *          └  B(i,j)       ; B(i,j) !== 0\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n\t   */\n\t  var algorithm04 = function (a, b, callback) {\n\t    // sparse matrix arrays\n\t    var avalues = a._values;\n\t    var aindex = a._index;\n\t    var aptr = a._ptr;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // sparse matrix arrays\n\t    var bvalues = b._values;\n\t    var bindex = b._index;\n\t    var bptr = b._ptr;\n\t    var bsize = b._size;\n\t    var bdt = b._datatype;\n\n\t    // validate dimensions\n\t    if (asize.length !== bsize.length)\n\t      throw new DimensionError(asize.length, bsize.length);\n\n\t    // check rows & columns\n\t    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n\t      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string' && adt === bdt) {\n\t      // datatype\n\t      dt = adt;\n\t      // find signature that matches (dt, dt)\n\t      eq = typed.find(equalScalar, [dt, dt]);\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\n\t    // result arrays\n\t    var cvalues = avalues && bvalues ? [] : undefined;\n\t    var cindex = [];\n\t    var cptr = [];\n\t    // matrix\n\t    var c = new SparseMatrix({\n\t      values: cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\n\t    // workspace\n\t    var xa = avalues && bvalues ? [] : undefined;\n\t    var xb = avalues && bvalues ? [] : undefined;\n\t    // marks indicating we have a value in x for a given column\n\t    var wa = [];\n\t    var wb = [];\n\n\t    // vars \n\t    var i, j, k, k0, k1;\n\t    \n\t    // loop columns\n\t    for (j = 0; j < columns; j++) {\n\t      // update cptr\n\t      cptr[j] = cindex.length;\n\t      // columns mark\n\t      var mark = j + 1;\n\t      // loop A(:,j)\n\t      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t        // row\n\t        i = aindex[k];\n\t        // update c\n\t        cindex.push(i);\n\t        // update workspace\n\t        wa[i] = mark;\n\t        // check we need to process values\n\t        if (xa)\n\t          xa[i] = avalues[k];\n\t      }\n\t      // loop B(:,j)\n\t      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n\t        // row\n\t        i = bindex[k];\n\t        // check row exists in A\n\t        if (wa[i] === mark) {\n\t          // update record in xa @ i\n\t          if (xa) {\n\t            // invoke callback\n\t            var v = cf(xa[i], bvalues[k]);\n\t            // check for zero\n\t            if (!eq(v, zero)) {\n\t              // update workspace\n\t              xa[i] = v;              \n\t            }\n\t            else {\n\t              // remove mark (index will be removed later)\n\t              wa[i] = null;\n\t            }\n\t          }\n\t        }\n\t        else {\n\t          // update c\n\t          cindex.push(i);\n\t          // update workspace\n\t          wb[i] = mark;\n\t          // check we need to process values\n\t          if (xb)\n\t            xb[i] = bvalues[k];\n\t        }\n\t      }\n\t      // check we need to process values (non pattern matrix)\n\t      if (xa && xb) {\n\t        // initialize first index in j\n\t        k = cptr[j];\n\t        // loop index in j\n\t        while (k < cindex.length) {\n\t          // row\n\t          i = cindex[k];\n\t          // check workspace has value @ i\n\t          if (wa[i] === mark) {\n\t            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n\t            cvalues[k] = xa[i];\n\t            // increment pointer\n\t            k++;\n\t          }\n\t          else if (wb[i] === mark) {\n\t            // push value (bij != 0)\n\t            cvalues[k] = xb[i];\n\t            // increment pointer\n\t            k++;\n\t          }\n\t          else {\n\t            // remove index @ k\n\t            cindex.splice(k, 1);\n\t          }\n\t        }\n\t      }\n\t    }\n\t    // update cptr\n\t    cptr[columns] = cindex.length;\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\t  \n\t  return algorithm04;\n\t}\n\n\texports.name = 'algorithm04';\n\texports.factory = factory;\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var DenseMatrix = type.DenseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t   * Callback function invoked NZ times (number of nonzero items in S).\n\t   *\n\t   *\n\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  b          ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n\t   */\n\t  var algorithm10 = function (s, b, callback, inverse) {\n\t    // sparse matrix arrays\n\t    var avalues = s._values;\n\t    var aindex = s._index;\n\t    var aptr = s._ptr;\n\t    var asize = s._size;\n\t    var adt = s._datatype;\n\n\t    // sparse matrix cannot be a Pattern matrix\n\t    if (!avalues)\n\t      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // convert b to the same datatype\n\t      b = typed.convert(b, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\n\t    // result arrays\n\t    var cdata = [];\n\t    // matrix\n\t    var c = new DenseMatrix({\n\t      data: cdata,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\n\t    // workspaces\n\t    var x = [];\n\t    // marks indicating we have a value in x for a given column\n\t    var w = [];\n\n\t    // loop columns\n\t    for (var j = 0; j < columns; j++) {\n\t      // columns mark\n\t      var mark = j + 1;\n\t      // values in j\n\t      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t        // row\n\t        var r = aindex[k];\n\t        // update workspace\n\t        x[r] = avalues[k];\n\t        w[r] = mark;\n\t      }\n\t      // loop rows\n\t      for (var i = 0; i < rows; i++) {\n\t        // initialize C on first column\n\t        if (j === 0) {\n\t          // create row array\n\t          cdata[i] = [];\n\t        }\n\t        // check sparse matrix has a value @ i,j\n\t        if (w[i] === mark) {\n\t          // invoke callback, update C\n\t          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n\t        }\n\t        else {\n\t          // dense matrix value @ i, j\n\t          cdata[i][j] = b;\n\t        }\n\t      }\n\t    }\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\n\t  return algorithm10;\n\t}\n\n\texports.name = 'algorithm10';\n\texports.factory = factory;\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar util = __webpack_require__(39);\n\tvar DimensionError = __webpack_require__(42);\n\n\tvar string = util.string,\n\t    isString = string.isString;\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var DenseMatrix = type.DenseMatrix;\n\n\t  /**\n\t   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   * C(i,j,...z) = f(Aij..z, Bij..z)\n\t   *\n\t   * @param {Matrix}   a                 The DenseMatrix instance (A)\n\t   * @param {Matrix}   b                 The DenseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n\t   */\n\t  var algorithm13 = function (a, b, callback) {\n\t    // a arrays\n\t    var adata = a._data;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // b arrays\n\t    var bdata = b._data;\n\t    var bsize = b._size;\n\t    var bdt = b._datatype;\n\t    // c arrays\n\t    var csize = [];\n\n\t    // validate dimensions\n\t    if (asize.length !== bsize.length)\n\t      throw new DimensionError(asize.length, bsize.length);\n\n\t    // validate each one of the dimension sizes\n\t    for (var s = 0; s < asize.length; s++) {\n\t      // must match\n\t      if (asize[s] !== bsize[s])\n\t        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\t      // update dimension in c\n\t      csize[s] = asize[s];\n\t    }\n\n\t    // datatype\n\t    var dt;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string' && adt === bdt) {\n\t      // datatype\n\t      dt = adt;\n\t      // convert b to the same datatype\n\t      b = typed.convert(b, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\n\t    // populate cdata, iterate through dimensions\n\t    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];\n\t    \n\t    // c matrix\n\t    return new DenseMatrix({\n\t      data: cdata,\n\t      size: csize,\n\t      datatype: dt\n\t    });\n\t  };\n\t  \n\t  // recursive function\n\t  var _iterate = function (f, level, s, n, av, bv) {\n\t    // initialize array for this level\n\t    var cv = [];\n\t    // check we reach the last level\n\t    if (level === s.length - 1) {\n\t      // loop arrays in last level\n\t      for (var i = 0; i < n; i++) {\n\t        // invoke callback and store value\n\t        cv[i] = f(av[i], bv[i]);\n\t      }\n\t    }\n\t    else {\n\t      // iterate current level\n\t      for (var j = 0; j < n; j++) {\n\t        // iterate next level\n\t        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n\t      }\n\t    }\n\t    return cv;\n\t  };\n\t  \n\t  return algorithm13;\n\t}\n\n\texports.name = 'algorithm13';\n\texports.factory = factory;\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar clone = __webpack_require__(3).clone;\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var DenseMatrix = type.DenseMatrix;\n\n\t  /**\n\t   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   * C(i,j,...z) = f(Aij..z, b)\n\t   *\n\t   * @param {Matrix}   a                 The DenseMatrix instance (A)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n\t   */\n\t  var algorithm14 = function (a, b, callback, inverse) {\n\t    // a arrays\n\t    var adata = a._data;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    \n\t    // datatype\n\t    var dt;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // convert b to the same datatype\n\t      b = typed.convert(b, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\t    \n\t    // populate cdata, iterate through dimensions\n\t    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];\n\n\t    // c matrix\n\t    return new DenseMatrix({\n\t      data: cdata,\n\t      size: clone(asize),\n\t      datatype: dt\n\t    });\n\t  };\n\t  \n\t  // recursive function\n\t  var _iterate = function (f, level, s, n, av, bv, inverse) {\n\t    // initialize array for this level\n\t    var cv = [];\n\t    // check we reach the last level\n\t    if (level === s.length - 1) {\n\t      // loop arrays in last level\n\t      for (var i = 0; i < n; i++) {\n\t        // invoke callback and store value\n\t        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n\t      }\n\t    }\n\t    else {\n\t      // iterate current level\n\t      for (var j = 0; j < n; j++) {\n\t        // iterate next level\n\t        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n\t      }\n\t    }\n\t    return cv;\n\t  };\n\n\t  return algorithm14;\n\t}\n\n\texports.name = 'algorithm14';\n\texports.factory = factory;\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  \n\t  var smaller = load(__webpack_require__(60));\n\t  var larger = load(__webpack_require__(64));\n\t  \n\t  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\t  \n\t  /**\n\t   * Fibonacci Heap implementation, used interally for Matrix math.\n\t   * @class FibonacciHeap\n\t   * @constructor FibonacciHeap\n\t   */\n\t  function FibonacciHeap() {\n\t    if (!(this instanceof FibonacciHeap))\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\n\t    // initialize fields\n\t    this._minimum = null;\n\t    this._size = 0;\n\t  }\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  FibonacciHeap.prototype.type = 'FibonacciHeap';\n\t  FibonacciHeap.prototype.isFibonacciHeap = true;\n\n\t  /**\n\t   * Inserts a new data element into the heap. No heap consolidation is\n\t   * performed at this time, the new node is simply inserted into the root\n\t   * list of this heap. Running time: O(1) actual.\n\t   * @memberof FibonacciHeap\n\t   */\n\t  FibonacciHeap.prototype.insert = function (key, value) {\n\t    // create node\n\t    var node = {\n\t      key: key,\n\t      value: value,\n\t      degree: 0\n\t    };\n\t    // check we have a node in the minimum\n\t    if (this._minimum) {\n\t      // minimum node\n\t      var minimum = this._minimum;\n\t      // update left & right of node\n\t      node.left = minimum;\n\t      node.right = minimum.right;\n\t      minimum.right = node;\n\t      node.right.left = node;\n\t      // update minimum node in heap if needed\n\t      if (smaller(key, minimum.key)) {\n\t        // node has a smaller key, use it as minimum\n\t        this._minimum = node;\n\t      }\n\t    }\n\t    else {\n\t      // set left & right\n\t      node.left = node;\n\t      node.right = node;\n\t      // this is the first node\n\t      this._minimum = node;\n\t    }\n\t    // increment number of nodes in heap\n\t    this._size++;\n\t    // return node\n\t    return node;\n\t  };\n\n\t  /**\n\t   * Returns the number of nodes in heap. Running time: O(1) actual.\n\t   * @memberof FibonacciHeap\n\t   */\n\t  FibonacciHeap.prototype.size = function () {\n\t    return this._size;\n\t  };\n\n\t  /**\n\t   * Removes all elements from this heap.\n\t   * @memberof FibonacciHeap\n\t   */\n\t  FibonacciHeap.prototype.clear = function () {\n\t    this._minimum = null;\n\t    this._size = 0;\n\t  };\n\n\t  /**\n\t   * Returns true if the heap is empty, otherwise false.\n\t   * @memberof FibonacciHeap\n\t   */\n\t  FibonacciHeap.prototype.isEmpty = function () {\n\t    return !!this._minimum;\n\t  };\n\t  \n\t  /**\n\t   * Extracts the node with minimum key from heap. Amortized running \n\t   * time: O(log n).\n\t   * @memberof FibonacciHeap\n\t   */\n\t  FibonacciHeap.prototype.extractMinimum = function () {\n\t    // node to remove\n\t    var node = this._minimum;\n\t    // check we have a minimum\n\t    if (node === null)\n\t      return node;\n\t    // current minimum\n\t    var minimum = this._minimum;\n\t    // get number of children\n\t    var numberOfChildren = node.degree;\n\t    // pointer to the first child\n\t    var x = node.child;\n\t    // for each child of node do...\n\t    while (numberOfChildren > 0) {\n\t      // store node in right side\n\t      var tempRight = x.right;\n\t      // remove x from child list\n\t      x.left.right = x.right;\n\t      x.right.left = x.left;\n\t      // add x to root list of heap\n\t      x.left = minimum;\n\t      x.right = minimum.right;\n\t      minimum.right = x;\n\t      x.right.left = x;\n\t      // set Parent[x] to null\n\t      x.parent = null;\n\t      x = tempRight;\n\t      numberOfChildren--;\n\t    }\n\t    // remove node from root list of heap\n\t    node.left.right = node.right;\n\t    node.right.left = node.left;\n\t    // update minimum\n\t    if (node == node.right) {\n\t      // empty\n\t      minimum = null;\n\t    }\n\t    else {\n\t      // update minimum\n\t      minimum = node.right;\n\t      // we need to update the pointer to the root with minimum key\n\t      minimum = _findMinimumNode(minimum, this._size);\n\t    }\n\t    // decrement size of heap\n\t    this._size--;\n\t    // update minimum\n\t    this._minimum = minimum;\n\t    // return node\n\t    return node;\n\t  };\n\t  \n\t  /**\n\t   * Removes a node from the heap given the reference to the node. The trees\n\t   * in the heap will be consolidated, if necessary. This operation may fail\n\t   * to remove the correct element if there are nodes with key value -Infinity.\n\t   * Running time: O(log n) amortized.\n\t   * @memberof FibonacciHeap\n\t   */\n\t  FibonacciHeap.prototype.remove = function (node) {\n\t    // decrease key value\n\t    this._minimum = _decreaseKey(this._minimum, node, -1);\n\t    // remove the smallest\n\t    this.extractMinimum();\n\t  };\n\t  \n\t  /**\n\t   * Decreases the key value for a heap node, given the new value to take on.\n\t   * The structure of the heap may be changed and will not be consolidated. \n\t   * Running time: O(1) amortized.\n\t   * @memberof FibonacciHeap\n\t   */\n\t  var _decreaseKey = function (minimum, node, key) {\n\t    // set node key\n\t    node.key = key;\n\t    // get parent node\n\t    var parent = node.parent;\n\t    if (parent && smaller(node.key, parent.key)) {\n\t      // remove node from parent\n\t      _cut(minimum, node, parent);\n\t      // remove all nodes from parent to the root parent\n\t      _cascadingCut(minimum, parent);\n\t    }\n\t    // update minimum node if needed\n\t    if (smaller(node.key, minimum.key))\n\t      minimum = node;\n\t    // return minimum\n\t    return minimum;\n\t  };\n\t  \n\t  /**\n\t   * The reverse of the link operation: removes node from the child list of parent.\n\t   * This method assumes that min is non-null. Running time: O(1).\n\t   * @memberof FibonacciHeap\n\t   */\n\t  var _cut = function (minimum, node, parent) {\n\t    // remove node from parent children and decrement Degree[parent]\n\t    node.left.right = node.right;\n\t    node.right.left = node.left;\n\t    parent.degree--;\n\t    // reset y.child if necessary\n\t    if (parent.child == node)\n\t      parent.child = node.right;\n\t    // remove child if degree is 0\n\t    if (parent.degree === 0)\n\t      parent.child = null;\n\t    // add node to root list of heap\n\t    node.left = minimum;\n\t    node.right = minimum.right;\n\t    minimum.right = node;\n\t    node.right.left = node;\n\t    // set parent[node] to null\n\t    node.parent = null;\n\t    // set mark[node] to false\n\t    node.mark = false;\n\t  };\n\t  \n\t  /**\n\t   * Performs a cascading cut operation. This cuts node from its parent and then\n\t   * does the same for its parent, and so on up the tree.\n\t   * Running time: O(log n); O(1) excluding the recursion.\n\t   * @memberof FibonacciHeap\n\t   */\n\t  var _cascadingCut= function (minimum, node) {\n\t    // store parent node\n\t    var parent = node.parent;\n\t    // if there's a parent...\n\t    if (!parent)\n\t      return;\n\t    // if node is unmarked, set it marked\n\t    if (!node.mark) {\n\t      node.mark = true;\n\t    }\n\t    else {\n\t      // it's marked, cut it from parent\n\t      _cut(minimum, node, parent);\n\t      // cut its parent as well\n\t      _cascadingCut(parent);\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Make the first node a child of the second one. Running time: O(1) actual.\n\t   * @memberof FibonacciHeap\n\t   */\n\t  var _linkNodes = function (node, parent) {\n\t    // remove node from root list of heap\n\t    node.left.right = node.right;\n\t    node.right.left = node.left;\n\t    // make node a Child of parent\n\t    node.parent = parent;\n\t    if (!parent.child) {\n\t      parent.child = node;\n\t      node.right = node;\n\t      node.left = node;\n\t    }\n\t    else {\n\t      node.left = parent.child;\n\t      node.right = parent.child.right;\n\t      parent.child.right = node;\n\t      node.right.left = node;\n\t    }\n\t    // increase degree[parent]\n\t    parent.degree++;\n\t    // set mark[node] false\n\t    node.mark = false;\n\t  };\n\t  \n\t  var _findMinimumNode = function (minimum, size) {\n\t    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n\t    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;\n\t    // create list with initial capacity\n\t    var array = new Array(arraySize);\n\t    // find the number of root nodes.\n\t    var numRoots = 0;\n\t    var x = minimum;\n\t    if (x) {\n\t      numRoots++;\n\t      x = x.right;\n\t      while (x !== minimum) {\n\t        numRoots++;\n\t        x = x.right;\n\t      }\n\t    }\n\t    // vars\n\t    var y;\n\t    // For each node in root list do...\n\t    while (numRoots > 0) {\n\t      // access this node's degree..\n\t      var d = x.degree;\n\t      // get next node\n\t      var next = x.right;\n\t      // check if there is a node already in array with the same degree\n\t      while (true) {\n\t        // get node with the same degree is any\n\t        y = array[d];\n\t        if (!y)\n\t          break;\n\t        // make one node with the same degree a child of the other, do this based on the key value.\n\t        if (larger(x.key, y.key)) {\n\t          var temp = y;\n\t          y = x;\n\t          x = temp;\n\t        }\n\t        // make y a child of x\n\t        _linkNodes(y, x);\n\t        // we have handled this degree, go to next one.\n\t        array[d] = null;\n\t        d++;\n\t      }\n\t      // save this node for later when we might encounter another of the same degree.\n\t      array[d] = x;\n\t      // move forward through list.\n\t      x = next;\n\t      numRoots--;\n\t    }\n\t    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n\t    minimum = null;\n\t    // loop nodes in array\n\t    for (var i = 0; i < arraySize; i++) {\n\t      // get current node\n\t      y = array[i];\n\t      if (!y)\n\t        continue;\n\t      // check if we have a linked list\n\t      if (minimum) {\n\t        // First remove node from root list.\n\t        y.left.right = y.right;\n\t        y.right.left = y.left;\n\t        // now add to root list, again.\n\t        y.left = minimum;\n\t        y.right = minimum.right;\n\t        minimum.right = y;\n\t        y.right.left = y;\n\t        // check if this is a new min.\n\t        if (smaller(y.key, minimum.key))\n\t          minimum = y;\n\t      }\n\t      else\n\t        minimum = y;\n\t    }\n\t    return minimum;\n\t  };\n\t  \n\t  return FibonacciHeap;\n\t}\n\n\texports.name = 'FibonacciHeap';\n\texports.path = 'type';\n\texports.factory = factory;\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Test whether value x is smaller than y.\n\t   *\n\t   * The function returns true when x is smaller than y and the relative\n\t   * difference between x and y is smaller than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.smaller(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.smaller(2, 3);            // returns true\n\t   *    math.smaller(5, 2 * 2);        // returns false\n\t   *\n\t   *    var a = math.unit('5 cm');\n\t   *    var b = math.unit('2 inch');\n\t   *    math.smaller(a, b);            // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n\t   */\n\t  var smaller = typed('smaller', {\n\n\t    'boolean, boolean': function (x, y) {\n\t      return x < y;\n\t    },\n\n\t    'number, number': function (x, y) {\n\t      return x < y && !nearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return x.compare(y) === -1;\n\t    },\n\n\t    'Complex, Complex': function (x, y) {\n\t      throw new TypeError('No ordering relation is defined for complex numbers');\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      if (!x.equalBase(y)) {\n\t        throw new Error('Cannot compare units with different base');\n\t      }\n\t      return smaller(x.value, y.value);\n\t    },\n\n\t    'string, string': function (x, y) {\n\t      return x < y;\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm07(x, y, smaller);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm03(y, x, smaller, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm03(x, y, smaller, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, smaller);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return smaller(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return smaller(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return smaller(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(x, y, smaller, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, smaller, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, smaller, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, smaller, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, smaller, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, smaller, true).valueOf();\n\t    }\n\t  });\n\n\t  smaller.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return smaller;\n\t}\n\n\texports.name = 'smaller';\n\texports.factory = factory;\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var DenseMatrix = type.DenseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n\t   * Callback function invoked M*N times.\n\t   *\n\t   *\n\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤\n\t   *          └  f(Dij, 0)    ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n\t   */\n\t  var algorithm03 = function (denseMatrix, sparseMatrix, callback, inverse) {\n\t    // dense matrix arrays\n\t    var adata = denseMatrix._data;\n\t    var asize = denseMatrix._size;\n\t    var adt = denseMatrix._datatype;\n\t    // sparse matrix arrays\n\t    var bvalues = sparseMatrix._values;\n\t    var bindex = sparseMatrix._index;\n\t    var bptr = sparseMatrix._ptr;\n\t    var bsize = sparseMatrix._size;\n\t    var bdt = sparseMatrix._datatype;\n\n\t    // validate dimensions\n\t    if (asize.length !== bsize.length)\n\t      throw new DimensionError(asize.length, bsize.length);\n\n\t    // check rows & columns\n\t    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n\t      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n\t    // sparse matrix cannot be a Pattern matrix\n\t    if (!bvalues)\n\t      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // zero value\n\t    var zero = 0;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string' && adt === bdt) {\n\t      // datatype\n\t      dt = adt;\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\n\t    // result (DenseMatrix)\n\t    var cdata = [];\n\n\t    // initialize dense matrix\n\t    for (var z = 0; z < rows; z++) {\n\t      // initialize row\n\t      cdata[z] = [];\n\t    }\n\n\t    // workspace\n\t    var x = [];\n\t    // marks indicating we have a value in x for a given column\n\t    var w = [];\n\n\t    // loop columns in b\n\t    for (var j = 0; j < columns; j++) {\n\t      // column mark\n\t      var mark = j + 1;\n\t      // values in column j\n\t      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n\t        // row\n\t        var i = bindex[k];\n\t        // update workspace\n\t        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n\t        w[i] = mark;\n\t      }\n\t      // process workspace\n\t      for (var y = 0; y < rows; y++) {\n\t        // check we have a calculated value for current row\n\t        if (w[y] === mark) {\n\t          // use calculated value\n\t          cdata[y][j] = x[y];\n\t        }\n\t        else {\n\t          // calculate value\n\t          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n\t        }\n\t      }\n\t    }\n\n\t    // return dense matrix\n\t    return new DenseMatrix({\n\t      data: cdata,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\t  };\n\t  \n\t  return algorithm03;\n\t}\n\n\texports.name = 'algorithm03';\n\texports.factory = factory;\n\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var DenseMatrix = type.DenseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   * C(i,j) = f(Aij, Bij)\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n\t   */\n\t  var algorithm07 = function (a, b, callback) {\n\t    // sparse matrix arrays\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // sparse matrix arrays\n\t    var bsize = b._size;\n\t    var bdt = b._datatype;\n\n\t    // validate dimensions\n\t    if (asize.length !== bsize.length)\n\t      throw new DimensionError(asize.length, bsize.length);\n\n\t    // check rows & columns\n\t    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n\t      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // zero value\n\t    var zero = 0;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string' && adt === bdt) {\n\t      // datatype\n\t      dt = adt;\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\n\t    // vars\n\t    var i, j;\n\t    \n\t    // result arrays\n\t    var cdata = [];\n\t    // initialize c\n\t    for (i = 0; i < rows; i++)\n\t      cdata[i] = [];\n\n\t    // matrix\n\t    var c = new DenseMatrix({\n\t      data: cdata,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\n\t    // workspaces\n\t    var xa = [];\n\t    var xb = [];\n\t    // marks indicating we have a value in x for a given column\n\t    var wa = [];\n\t    var wb = [];\n\n\t    // loop columns\n\t    for (j = 0; j < columns; j++) {\n\t      // columns mark\n\t      var mark = j + 1;\n\t      // scatter the values of A(:,j) into workspace\n\t      _scatter(a, j, wa, xa, mark);\n\t      // scatter the values of B(:,j) into workspace\n\t      _scatter(b, j, wb, xb, mark);\n\t      // loop rows\n\t      for (i = 0; i < rows; i++) {\n\t        // matrix values @ i,j\n\t        var va = wa[i] === mark ? xa[i] : zero;\n\t        var vb = wb[i] === mark ? xb[i] : zero;\n\t        // invoke callback\n\t        cdata[i][j] = cf(va, vb);\n\t      }          \n\t    }\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\t  \n\t  var _scatter = function (m, j, w, x, mark) {\n\t    // a arrays\n\t    var values = m._values;\n\t    var index = m._index;\n\t    var ptr = m._ptr;\n\t    // loop values in column j\n\t    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n\t      // row\n\t      var i = index[k];\n\t      // update workspace\n\t      w[i] = mark;\n\t      x[i] = values[k];\n\t    }\n\t  };\n\t  \n\t  return algorithm07;\n\t}\n\n\texports.name = 'algorithm07';\n\texports.factory = factory;\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var DenseMatrix = type.DenseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   *\n\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  f(0, b)    ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n\t   */\n\t  var algorithm12 = function (s, b, callback, inverse) {\n\t    // sparse matrix arrays\n\t    var avalues = s._values;\n\t    var aindex = s._index;\n\t    var aptr = s._ptr;\n\t    var asize = s._size;\n\t    var adt = s._datatype;\n\n\t    // sparse matrix cannot be a Pattern matrix\n\t    if (!avalues)\n\t      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // convert b to the same datatype\n\t      b = typed.convert(b, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\t    \n\t    // result arrays\n\t    var cdata = [];\n\t    // matrix\n\t    var c = new DenseMatrix({\n\t      data: cdata,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\n\t    // workspaces\n\t    var x = [];\n\t    // marks indicating we have a value in x for a given column\n\t    var w = [];\n\n\t    // loop columns\n\t    for (var j = 0; j < columns; j++) {\n\t      // columns mark\n\t      var mark = j + 1;\n\t      // values in j\n\t      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t        // row\n\t        var r = aindex[k];\n\t        // update workspace\n\t        x[r] = avalues[k];\n\t        w[r] = mark;\n\t      }\n\t      // loop rows\n\t      for (var i = 0; i < rows; i++) {\n\t        // initialize C on first column\n\t        if (j === 0) {\n\t          // create row array\n\t          cdata[i] = [];\n\t        }\n\t        // check sparse matrix has a value @ i,j\n\t        if (w[i] === mark) {\n\t          // invoke callback, update C\n\t          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n\t        }\n\t        else {\n\t          // dense matrix value @ i, j\n\t          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n\t        }\n\t      }\n\t    }\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\t  \n\t  return algorithm12;\n\t}\n\n\texports.name = 'algorithm12';\n\texports.factory = factory;\n\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\n\n\tfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Test whether value x is larger than y.\n\t   *\n\t   * The function returns true when x is larger than y and the relative\n\t   * difference between x and y is larger than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.larger(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.larger(2, 3);             // returns false\n\t   *    math.larger(5, 2 + 2);         // returns true\n\t   *\n\t   *    var a = math.unit('5 cm');\n\t   *    var b = math.unit('2 inch');\n\t   *    math.larger(a, b);             // returns false\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, smallerEq, largerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n\t   */\n\t  var larger = typed('larger', {\n\n\t    'boolean, boolean': function (x, y) {\n\t      return x > y;\n\t    },\n\n\t    'number, number': function (x, y) {\n\t      return x > y && !nearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return x.compare(y) === 1;\n\t    },\n\n\t    'Complex, Complex': function () {\n\t      throw new TypeError('No ordering relation is defined for complex numbers');\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      if (!x.equalBase(y)) {\n\t        throw new Error('Cannot compare units with different base');\n\t      }\n\t      return larger(x.value, y.value);\n\t    },\n\n\t    'string, string': function (x, y) {\n\t      return x > y;\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm07(x, y, larger);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm03(y, x, larger, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm03(x, y, larger, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, larger);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return larger(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return larger(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return larger(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(x, y, larger, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, larger, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, larger, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, larger, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, larger, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, larger, true).valueOf();\n\t    }\n\t  });\n\n\t  larger.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return larger;\n\t}\n\n\texports.name = 'larger';\n\texports.factory = factory;\n\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar util = __webpack_require__(39);\n\n\tvar string = util.string;\n\tvar object = util.object;\n\n\tvar isArray = Array.isArray;\n\tvar isString = string.isString;\n\n\tfunction factory (type, config, load) {\n\n\t  var DenseMatrix = load(__webpack_require__(46));\n\n\t  var smaller = load(__webpack_require__(60));\n\n\t  function ImmutableDenseMatrix(data, datatype) {\n\t    if (!(this instanceof ImmutableDenseMatrix))\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    if (datatype && !isString(datatype))\n\t      throw new Error('Invalid datatype: ' + datatype);\n\n\t    if ((data && data.isMatrix === true) || isArray(data)) {\n\t      // use DenseMatrix implementation\n\t      var matrix = new DenseMatrix(data, datatype);\n\t      // internal structures\n\t      this._data = matrix._data;\n\t      this._size = matrix._size;\n\t      this._datatype = matrix._datatype;\n\t      this._min = null;\n\t      this._max = null;\n\t    }\n\t    else if (data && isArray(data.data) && isArray(data.size)) {\n\t      // initialize fields from JSON representation\n\t      this._data = data.data;\n\t      this._size = data.size;\n\t      this._datatype = data.datatype;\n\t      this._min = typeof data.min !== 'undefined' ? data.min : null;\n\t      this._max = typeof data.max !== 'undefined' ? data.max : null;\n\t    }\n\t    else if (data) {\n\t      // unsupported type\n\t      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n\t    }\n\t    else {\n\t      // nothing provided\n\t      this._data = [];\n\t      this._size = [0];\n\t      this._datatype = datatype;\n\t      this._min = null;\n\t      this._max = null;\n\t    }\n\t  }\n\n\t  ImmutableDenseMatrix.prototype = new DenseMatrix();\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n\t  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n\n\t  /**\n\t   * Get a subset of the matrix, or replace a subset of the matrix.\n\t   *\n\t   * Usage:\n\t   *     var subset = matrix.subset(index)               // retrieve subset\n\t   *     var value = matrix.subset(index, replacement)   // replace subset\n\t   *\n\t   * @param {Index} index\n\t   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n\t   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n\t   *                                  the matrix is resized. If not provided,\n\t   *                                  new matrix elements will be filled with zeros.\n\t   */\n\t  ImmutableDenseMatrix.prototype.subset = function (index) {\n\t    switch (arguments.length) {\n\t      case 1:\n\t        // use base implementation\n\t        var m = DenseMatrix.prototype.subset.call(this, index);\n\t        // check result is a matrix\n\t        if (m.isMatrix) {\n\t          // return immutable matrix\n\t          return new ImmutableDenseMatrix({\n\t            data: m._data,\n\t            size: m._size,\n\t            datatype: m._datatype\n\t          });\n\t        }\n\t        return m;\n\t        \n\t        // intentional fall through\n\t      case 2:\n\t      case 3:\n\t        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n\n\t      default:\n\t        throw new SyntaxError('Wrong number of arguments');\n\t    }\n\t  };\n\n\t  /**\n\t   * Replace a single element in the matrix.\n\t   * @param {Number[]} index   Zero-based index\n\t   * @param {*} value\n\t   * @param {*} [defaultValue]        Default value, filled in on new entries when\n\t   *                                  the matrix is resized. If not provided,\n\t   *                                  new matrix elements will be left undefined.\n\t   * @return {ImmutableDenseMatrix} self\n\t   */\n\t  ImmutableDenseMatrix.prototype.set = function () {\n\t    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n\t  };\n\n\t  /**\n\t   * Resize the matrix to the given size. Returns a copy of the matrix when\n\t   * `copy=true`, otherwise return the matrix itself (resize in place).\n\t   *\n\t   * @param {Number[]} size           The new size the matrix should have.\n\t   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n\t   *                                  If not provided, the matrix elements will\n\t   *                                  be filled with zeros.\n\t   * @param {boolean} [copy]          Return a resized copy of the matrix\n\t   *\n\t   * @return {Matrix}                 The resized matrix\n\t   */\n\t  ImmutableDenseMatrix.prototype.resize = function () {\n\t    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n\t  };\n\n\t  /**\n\t   * Create a clone of the matrix\n\t   * @return {ImmutableDenseMatrix} clone\n\t   */\n\t  ImmutableDenseMatrix.prototype.clone = function () {\n\t    var m = new ImmutableDenseMatrix({\n\t      data: object.clone(this._data),\n\t      size: object.clone(this._size),\n\t      datatype: this._datatype\n\t    });\n\t    return m;\n\t  };\n\n\t  /**\n\t   * Get a JSON representation of the matrix\n\t   * @returns {Object}\n\t   */\n\t  ImmutableDenseMatrix.prototype.toJSON = function () {\n\t    return {\n\t      mathjs: 'ImmutableDenseMatrix',\n\t      data: this._data,\n\t      size: this._size,\n\t      datatype: this._datatype\n\t    };\n\t  };\n\n\t  /**\n\t   * Generate a matrix from a JSON object\n\t   * @param {Object} json  An object structured like\n\t   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n\t   *                       where mathjs is optional\n\t   * @returns {ImmutableDenseMatrix}\n\t   */\n\t  ImmutableDenseMatrix.fromJSON = function (json) {\n\t    return new ImmutableDenseMatrix(json);\n\t  };\n\n\t  /**\n\t   * Swap rows i and j in Matrix.\n\t   *\n\t   * @param {Number} i       Matrix row index 1\n\t   * @param {Number} j       Matrix row index 2\n\t   *\n\t   * @return {Matrix}        The matrix reference\n\t   */\n\t  ImmutableDenseMatrix.prototype.swapRows = function () {\n\t    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n\t  };\n\n\t  /**\n\t   * Calculate the minimum value in the set\n\t   * @return {Number | undefined} min\n\t   */\n\t  ImmutableDenseMatrix.prototype.min = function () {\n\t    // check min has been calculated before\n\t    if (this._min === null) {\n\t      // minimum\n\t      var m = null;\n\t      // compute min\n\t      this.forEach(function (v) {\n\t        if (m === null || smaller(v, m))\n\t          m = v;\n\t      });\n\t      this._min = m !== null ? m : undefined;\n\t    }\n\t    return this._min;\n\t  };\n\n\t  /**\n\t   * Calculate the maximum value in the set\n\t   * @return {Number | undefined} max\n\t   */\n\t  ImmutableDenseMatrix.prototype.max = function () {\n\t    // check max has been calculated before\n\t    if (this._max === null) {\n\t      // maximum\n\t      var m = null;\n\t      // compute max\n\t      this.forEach(function (v) {\n\t        if (m === null || smaller(m, v))\n\t          m = v;\n\t      });\n\t      this._max = m !== null ? m : undefined;\n\t    }\n\t    return this._max;\n\t  };\n\n\t  // exports\n\t  return ImmutableDenseMatrix;\n\t}\n\n\texports.name = 'ImmutableDenseMatrix';\n\texports.path = 'type';\n\texports.factory = factory;\n\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar clone = __webpack_require__(3).clone;\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type) {\n\t  \n\t  /**\n\t   * Create an index. An Index can store ranges and sets for multiple dimensions.\n\t   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n\t   *\n\t   * Usage:\n\t   *     var index = new Index(range1, range2, matrix1, array1, ...);\n\t   *\n\t   * Where each parameter can be any of:\n\t   *     A number\n\t   *     A string (containing a name of an object property)\n\t   *     An instance of Range\n\t   *     An Array with the Set values\n\t   *     A Matrix with the Set values\n\t   *\n\t   * The parameters start, end, and step must be integer numbers.\n\t   *\n\t   * @class Index\n\t   * @Constructor Index\n\t   * @param {...*} ranges\n\t   */\n\t  function Index(ranges) {\n\t    if (!(this instanceof Index)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    this._dimensions = [];\n\t    this._isScalar = true;\n\n\t    for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t      var arg = arguments[i];\n\n\t      if (arg && (arg.isRange === true)) {\n\t        this._dimensions.push(arg);\n\t        this._isScalar = false;\n\t      }\n\t      else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {\n\t        // create matrix\n\t        var m = _createImmutableMatrix(arg.valueOf());\n\t        this._dimensions.push(m);\n\t        // size\n\t        var size = m.size();\n\t        // scalar\n\t        if (size.length !== 1 || size[0] !== 1) {\n\t          this._isScalar = false;\n\t        }\n\t      }\n\t      else if (typeof arg === 'number') {\n\t        this._dimensions.push(_createImmutableMatrix([arg]));\n\t      }\n\t      else if (typeof arg === 'string') {\n\t        // object property (arguments.count should be 1)\n\t        this._dimensions.push(arg);\n\t      }\n\t      // TODO: implement support for wildcard '*'\n\t      else {\n\t        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  Index.prototype.type = 'Index';\n\t  Index.prototype.isIndex = true;\n\n\t  function _createImmutableMatrix(arg) {\n\t    // loop array elements\n\t    for (var i = 0, l = arg.length; i < l; i++) {\n\t      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n\t        throw new TypeError('Index parameters must be positive integer numbers');\n\t      }\n\t    }\n\t    // create matrix\n\t    return new type.ImmutableDenseMatrix(arg);\n\t  }\n\n\t  /**\n\t   * Create a clone of the index\n\t   * @memberof Index\n\t   * @return {Index} clone\n\t   */\n\t  Index.prototype.clone = function () {\n\t    var index = new Index();\n\t    index._dimensions = clone(this._dimensions);\n\t    index._isScalar = this._isScalar;\n\t    return index;\n\t  };\n\n\t  /**\n\t   * Create an index from an array with ranges/numbers\n\t   * @memberof Index\n\t   * @param {Array.<Array | number>} ranges\n\t   * @return {Index} index\n\t   * @private\n\t   */\n\t  Index.create = function (ranges) {\n\t    var index = new Index();\n\t    Index.apply(index, ranges);\n\t    return index;\n\t  };\n\n\t  /**\n\t   * Retrieve the size of the index, the number of elements for each dimension.\n\t   * @memberof Index\n\t   * @returns {number[]} size\n\t   */\n\t  Index.prototype.size = function () {\n\t    var size = [];\n\n\t    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n\t      var d = this._dimensions[i];\n\t      size[i] = (typeof d === 'string') ? 1 : d.size()[0];\n\t    }\n\n\t    return size;\n\t  };\n\n\t  /**\n\t   * Get the maximum value for each of the indexes ranges.\n\t   * @memberof Index\n\t   * @returns {number[]} max\n\t   */\n\t  Index.prototype.max = function () {\n\t    var values = [];\n\n\t    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n\t      var range = this._dimensions[i];\n\t      values[i] = (typeof range === 'string') ? range : range.max();\n\t    }\n\n\t    return values;\n\t  };\n\n\t  /**\n\t   * Get the minimum value for each of the indexes ranges.\n\t   * @memberof Index\n\t   * @returns {number[]} min\n\t   */\n\t  Index.prototype.min = function () {\n\t    var values = [];\n\n\t    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n\t      var range = this._dimensions[i];\n\t      values[i] = (typeof range === 'string') ? range : range.min();\n\t    }\n\n\t    return values;\n\t  };\n\n\t  /**\n\t   * Loop over each of the ranges of the index\n\t   * @memberof Index\n\t   * @param {Function} callback   Called for each range with a Range as first\n\t   *                              argument, the dimension as second, and the\n\t   *                              index object as third.\n\t   */\n\t  Index.prototype.forEach = function (callback) {\n\t    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n\t      callback(this._dimensions[i], i, this);\n\t    }\n\t  };\n\n\t  /**\n\t   * Retrieve the dimension for the given index\n\t   * @memberof Index\n\t   * @param {Number} dim                  Number of the dimension\n\t   * @returns {Range | null} range\n\t   */\n\t  Index.prototype.dimension = function (dim) {\n\t    return this._dimensions[dim] || null;\n\t  };\n\n\t  /**\n\t   * Test whether this index contains an object property\n\t   * @returns {boolean} Returns true if the index is an object property\n\t   */\n\t  Index.prototype.isObjectProperty = function () {\n\t    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n\t  };\n\n\t  /**\n\t   * Returns the object property name when the Index holds a single object property,\n\t   * else returns null\n\t   * @returns {string | null}\n\t   */\n\t  Index.prototype.getObjectProperty = function () {\n\t    return this.isObjectProperty() ? this._dimensions[0] : null;\n\t  };\n\n\t  /**\n\t   * Test whether this index contains only a single value.\n\t   *\n\t   * This is the case when the index is created with only scalar values as ranges,\n\t   * not for ranges resolving into a single value.\n\t   * @memberof Index\n\t   * @return {boolean} isScalar\n\t   */\n\t  Index.prototype.isScalar = function () {\n\t    return this._isScalar;\n\t  };\n\n\t  /**\n\t   * Expand the Index into an array.\n\t   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n\t   * @memberof Index\n\t   * @returns {Array} array\n\t   */\n\t  Index.prototype.toArray = function () {\n\t    var array = [];\n\t    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n\t      var dimension = this._dimensions[i];\n\t      array.push((typeof dimension === 'string') ? dimension : dimension.toArray());\n\t    }\n\t    return array;\n\t  };\n\n\t  /**\n\t   * Get the primitive value of the Index, a two dimensional array.\n\t   * Equivalent to Index.toArray().\n\t   * @memberof Index\n\t   * @returns {Array} array\n\t   */\n\t  Index.prototype.valueOf = Index.prototype.toArray;\n\n\t  /**\n\t   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n\t   * @memberof Index\n\t   * @returns {String} str\n\t   */\n\t  Index.prototype.toString = function () {\n\t    var strings = [];\n\n\t    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n\t      var dimension = this._dimensions[i];\n\t      if (typeof dimension === 'string') {\n\t        strings.push(JSON.stringify(dimension));\n\t      }\n\t      else {\n\t        strings.push(dimension.toString());\n\t      }\n\t    }\n\n\t    return '[' + strings.join(', ') + ']';\n\t  };\n\n\t  /**\n\t   * Get a JSON representation of the Index\n\t   * @memberof Index\n\t   * @returns {Object} Returns a JSON object structured as:\n\t   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n\t   */\n\t  Index.prototype.toJSON = function () {\n\t    return {\n\t      mathjs: 'Index',\n\t      dimensions: this._dimensions\n\t    };\n\t  };\n\n\t  /**\n\t   * Instantiate an Index from a JSON object\n\t   * @memberof Index\n\t   * @param {Object} json A JSON object structured as:\n\t   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n\t   * @return {Index}\n\t   */\n\t  Index.fromJSON = function (json) {\n\t    return Index.create(json.dimensions);\n\t  };\n\n\t  return Index;\n\t}\n\n\texports.name = 'Index';\n\texports.path = 'type';\n\texports.factory = factory;\n\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar number = __webpack_require__(6);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a range. A range has a start, step, and end, and contains functions\n\t   * to iterate over the range.\n\t   *\n\t   * A range can be constructed as:\n\t   *     var range = new Range(start, end);\n\t   *     var range = new Range(start, end, step);\n\t   *\n\t   * To get the result of the range:\n\t   *     range.forEach(function (x) {\n\t   *         console.log(x);\n\t   *     });\n\t   *     range.map(function (x) {\n\t   *         return math.sin(x);\n\t   *     });\n\t   *     range.toArray();\n\t   *\n\t   * Example usage:\n\t   *     var c = new Range(2, 6);         // 2:1:5\n\t   *     c.toArray();                     // [2, 3, 4, 5]\n\t   *     var d = new Range(2, -3, -1);    // 2:-1:-2\n\t   *     d.toArray();                     // [2, 1, 0, -1, -2]\n\t   *\n\t   * @class Range\n\t   * @constructor Range\n\t   * @param {number} start  included lower bound\n\t   * @param {number} end    excluded upper bound\n\t   * @param {number} [step] step size, default value is 1\n\t   */\n\t  function Range(start, end, step) {\n\t    if (!(this instanceof Range)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    if (start != null) {\n\t      if (start.isBigNumber === true)\n\t        start = start.toNumber();\n\t      else if (typeof start !== 'number')\n\t        throw new TypeError('Parameter start must be a number');\n\t    }\n\t    if (end != null) {\n\t      if (end.isBigNumber === true)\n\t        end = end.toNumber();\n\t      else if (typeof end !== 'number')\n\t        throw new TypeError('Parameter end must be a number');\n\t    }\n\t    if (step != null) {\n\t      if (step.isBigNumber === true)\n\t        step = step.toNumber();\n\t      else if (typeof step !== 'number')\n\t        throw new TypeError('Parameter step must be a number');\n\t    }\n\n\t    this.start = (start != null) ? parseFloat(start) : 0;\n\t    this.end   = (end != null)   ? parseFloat(end)   : 0;\n\t    this.step  = (step != null)  ? parseFloat(step)  : 1;\n\t  }\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  Range.prototype.type = 'Range';\n\t  Range.prototype.isRange = true;\n\n\t  /**\n\t   * Parse a string into a range,\n\t   * The string contains the start, optional step, and end, separated by a colon.\n\t   * If the string does not contain a valid range, null is returned.\n\t   * For example str='0:2:11'.\n\t   * @memberof Range\n\t   * @param {string} str\n\t   * @return {Range | null} range\n\t   */\n\t  Range.parse = function (str) {\n\t    if (typeof str !== 'string') {\n\t      return null;\n\t    }\n\n\t    var args = str.split(':');\n\t    var nums = args.map(function (arg) {\n\t      return parseFloat(arg);\n\t    });\n\n\t    var invalid = nums.some(function (num) {\n\t      return isNaN(num);\n\t    });\n\t    if (invalid) {\n\t      return null;\n\t    }\n\n\t    switch (nums.length) {\n\t      case 2:\n\t        return new Range(nums[0], nums[1]);\n\t      case 3:\n\t        return new Range(nums[0], nums[2], nums[1]);\n\t      default:\n\t        return null;\n\t    }\n\t  };\n\n\t  /**\n\t   * Create a clone of the range\n\t   * @return {Range} clone\n\t   */\n\t  Range.prototype.clone = function () {\n\t    return new Range(this.start, this.end, this.step);\n\t  };\n\n\t  /**\n\t   * Retrieve the size of the range.\n\t   * Returns an array containing one number, the number of elements in the range.\n\t   * @memberof Range\n\t   * @returns {number[]} size\n\t   */\n\t  Range.prototype.size = function () {\n\t    var len = 0,\n\t        start = this.start,\n\t        step = this.step,\n\t        end = this.end,\n\t        diff = end - start;\n\n\t    if (number.sign(step) == number.sign(diff)) {\n\t      len = Math.ceil((diff) / step);\n\t    }\n\t    else if (diff == 0) {\n\t      len = 0;\n\t    }\n\n\t    if (isNaN(len)) {\n\t      len = 0;\n\t    }\n\t    return [len];\n\t  };\n\n\t  /**\n\t   * Calculate the minimum value in the range\n\t   * @memberof Range\n\t   * @return {number | undefined} min\n\t   */\n\t  Range.prototype.min = function () {\n\t    var size = this.size()[0];\n\n\t    if (size > 0) {\n\t      if (this.step > 0) {\n\t        // positive step\n\t        return this.start;\n\t      }\n\t      else {\n\t        // negative step\n\t        return this.start + (size - 1) * this.step;\n\t      }\n\t    }\n\t    else {\n\t      return undefined;\n\t    }\n\t  };\n\n\t  /**\n\t   * Calculate the maximum value in the range\n\t   * @memberof Range\n\t   * @return {number | undefined} max\n\t   */\n\t  Range.prototype.max = function () {\n\t    var size = this.size()[0];\n\n\t    if (size > 0) {\n\t      if (this.step > 0) {\n\t        // positive step\n\t        return this.start + (size - 1) * this.step;\n\t      }\n\t      else {\n\t        // negative step\n\t        return this.start;\n\t      }\n\t    }\n\t    else {\n\t      return undefined;\n\t    }\n\t  };\n\n\n\t  /**\n\t   * Execute a callback function for each value in the range.\n\t   * @memberof Range\n\t   * @param {function} callback   The callback method is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the Range being traversed.\n\t   */\n\t  Range.prototype.forEach = function (callback) {\n\t    var x = this.start;\n\t    var step = this.step;\n\t    var end = this.end;\n\t    var i = 0;\n\n\t    if (step > 0) {\n\t      while (x < end) {\n\t        callback(x, [i], this);\n\t        x += step;\n\t        i++;\n\t      }\n\t    }\n\t    else if (step < 0) {\n\t      while (x > end) {\n\t        callback(x, [i], this);\n\t        x += step;\n\t        i++;\n\t      }\n\t    }\n\t  };\n\n\t  /**\n\t   * Execute a callback function for each value in the Range, and return the\n\t   * results as an array\n\t   * @memberof Range\n\t   * @param {function} callback   The callback method is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the Matrix being traversed.\n\t   * @returns {Array} array\n\t   */\n\t  Range.prototype.map = function (callback) {\n\t    var array = [];\n\t    this.forEach(function (value, index, obj) {\n\t      array[index[0]] = callback(value, index, obj);\n\t    });\n\t    return array;\n\t  };\n\n\t  /**\n\t   * Create an Array with a copy of the Ranges data\n\t   * @memberof Range\n\t   * @returns {Array} array\n\t   */\n\t  Range.prototype.toArray = function () {\n\t    var array = [];\n\t    this.forEach(function (value, index) {\n\t      array[index[0]] = value;\n\t    });\n\t    return array;\n\t  };\n\n\t  /**\n\t   * Get the primitive value of the Range, a one dimensional array\n\t   * @memberof Range\n\t   * @returns {Array} array\n\t   */\n\t  Range.prototype.valueOf = function () {\n\t    // TODO: implement a caching mechanism for range.valueOf()\n\t    return this.toArray();\n\t  };\n\n\t  /**\n\t   * Get a string representation of the range, with optional formatting options.\n\t   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'\n\t   * @memberof Range\n\t   * @param {Object | number | function} [options]  Formatting options. See\n\t   *                                                lib/utils/number:format for a\n\t   *                                                description of the available\n\t   *                                                options.\n\t   * @returns {string} str\n\t   */\n\t  Range.prototype.format = function (options) {\n\t    var str = number.format(this.start, options);\n\n\t    if (this.step != 1) {\n\t      str += ':' + number.format(this.step, options);\n\t    }\n\t    str += ':' + number.format(this.end, options);\n\t    return str;\n\t  };\n\n\t  /**\n\t   * Get a string representation of the range.\n\t   * @memberof Range\n\t   * @returns {string}\n\t   */\n\t  Range.prototype.toString = function () {\n\t    return this.format();\n\t  };\n\n\t  /**\n\t   * Get a JSON representation of the range\n\t   * @memberof Range\n\t   * @returns {Object} Returns a JSON object structured as:\n\t   *                   `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n\t   */\n\t  Range.prototype.toJSON = function () {\n\t    return {\n\t      mathjs: 'Range',\n\t      start: this.start,\n\t      end: this.end,\n\t      step: this.step\n\t    };\n\t  };\n\n\t  /**\n\t   * Instantiate a Range from a JSON object\n\t   * @memberof Range\n\t   * @param {Object} json A JSON object structured as:\n\t   *                      `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n\t   * @return {Range}\n\t   */\n\t  Range.fromJSON = function (json) {\n\t    return new Range(json.start, json.end, json.step);\n\t  };\n\n\t  return Range;\n\t}\n\n\texports.name = 'Range';\n\texports.path = 'type';\n\texports.factory = factory;\n\n\n/***/ },\n/* 68 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create an index. An Index can store ranges having start, step, and end\n\t   * for multiple dimensions.\n\t   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.index(range1, range2, ...)\n\t   *\n\t   * Where each range can be any of:\n\t   *\n\t   * - A number\n\t   * - A string for getting/setting an object property\n\t   * - An instance of `Range`\n\t   * - A one-dimensional Array or a Matrix with numbers\n\t   *\n\t   * Indexes must be zero-based, integer numbers.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var math = math.js\n\t   *\n\t   *    var b = [1, 2, 3, 4, 5];\n\t   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]\n\t   *\n\t   *    var a = math.matrix([[1, 2], [3, 4]]);\n\t   *    a.subset(math.index(0, 1));             // returns 2\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, matrix, number, string, unit\n\t   *\n\t   * @param {...*} ranges   Zero or more ranges or numbers.\n\t   * @return {Index}        Returns the created index\n\t   */\n\t  return typed('index', {\n\t    '...number | string | BigNumber | Range | Array | Matrix': function (args) {\n\t      var ranges = args.map(function (arg) {\n\t        if (arg && arg.isBigNumber === true) {\n\t          return arg.toNumber(); // convert BigNumber to Number\n\t        }\n\t        else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {\n\t          return arg.map(function (elem) {\n\t            // convert BigNumber to Number\n\t            return (elem && elem.isBigNumber === true) ? elem.toNumber() : elem;\n\t          });\n\t        }\n\t        else {\n\t          return arg;\n\t        }\n\t      });\n\n\t      var res = new type.Index();\n\t      type.Index.apply(res, ranges);\n\t      return res;\n\t    }\n\t  });\n\t}\n\n\texports.name = 'index';\n\texports.factory = factory;\n\n\n/***/ },\n/* 69 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from\n\t   * an `Array`. A Matrix has utility functions to manipulate the data in the\n\t   * matrix, like getting the size and getting or setting values in the matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sparse()               // creates an empty sparse matrix.\n\t   *    math.sparse(data)           // creates a sparse matrix with initial data.\n\t   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var m = math.sparse([[1, 2], [3, 4]]);\n\t   *    m.size();                        // Array [2, 2]\n\t   *    m.resize([3, 2], 5);\n\t   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n\t   *    m.get([1, 0])                    // number 3\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, number, string, unit, matrix\n\t   *\n\t   * @param {Array | Matrix} [data]    A two dimensional array\n\t   *\n\t   * @return {Matrix} The created matrix\n\t   */\n\t  var sparse = typed('sparse', {\n\t    '': function () {\n\t      return new SparseMatrix([]);\n\t    },\n\t    \n\t    'string': function (datatype) {\n\t      return new SparseMatrix([], datatype);\n\t    },\n\n\t    'Array | Matrix': function (data) {\n\t      return new SparseMatrix(data);\n\t    },\n\t    \n\t    'Array | Matrix, string': function (data, datatype) {\n\t      return new SparseMatrix(data, datatype);\n\t    }\n\t  });\n\n\t  sparse.toTex = {\n\t    0: '\\\\begin{bsparse}\\\\end{bsparse}',\n\t    1: '\\\\left(${args[0]}\\\\right)'\n\t  };\n\n\t  return sparse;\n\t}\n\n\texports.name = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a number or convert a string, boolean, or unit to a number.\n\t   * When value is a matrix, all elements will be converted to number.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.number(value)\n\t   *    math.number(unit, valuelessUnit)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.number(2);                         // returns number 2\n\t   *    math.number('7.2');                     // returns number 7.2\n\t   *    math.number(true);                      // returns number 1\n\t   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]\n\t   *    math.number(math.unit('52cm'), 'm');    // returns 0.52\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, matrix, string, unit\n\t   *\n\t   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n\t   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n\t   * @return {number | Array | Matrix} The created number\n\t   */\n\t  var number = typed('number', {\n\t    '': function () {\n\t      return 0;\n\t    },\n\n\t    'number': function (x) {\n\t      return x;\n\t    },\n\n\t    'string': function (x) {\n\t      var num = Number(x);\n\t      if (isNaN(num)) {\n\t        throw new SyntaxError('String \"' + x + '\" is no valid number');\n\t      }\n\t      return num;\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.toNumber();\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.valueOf();\n\t    },\n\n\t    'Unit': function (x) {\n\t      throw new Error('Second argument with valueless unit expected');\n\t    },\n\n\t    'Unit, string | Unit': function (unit, valuelessUnit) {\n\t      return unit.toNumber(valuelessUnit);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, number);\n\t    }\n\t  });\n\n\t  number.toTex = {\n\t    0: '0',\n\t    1: '\\\\left(${args[0]}\\\\right)',\n\t    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n\t  };\n\n\t  return number;\n\t}\n\n\texports.name = 'number';\n\texports.factory = factory;\n\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  // type\n\t  __webpack_require__(72)\n\t];\n\n\n/***/ },\n/* 72 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * A ResultSet contains a list or results\n\t   * @class ResultSet\n\t   * @param {Array} entries\n\t   * @constructor ResultSet\n\t   */\n\t  function ResultSet(entries) {\n\t    if (!(this instanceof ResultSet)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    this.entries = entries || [];\n\t  }\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  ResultSet.prototype.type = 'ResultSet';\n\t  ResultSet.prototype.isResultSet = true;\n\n\t  /**\n\t   * Returns the array with results hold by this ResultSet\n\t   * @memberof ResultSet\n\t   * @returns {Array} entries\n\t   */\n\t  ResultSet.prototype.valueOf = function () {\n\t    return this.entries;\n\t  };\n\n\t  /**\n\t   * Returns the stringified results of the ResultSet\n\t   * @memberof ResultSet\n\t   * @returns {string} string\n\t   */\n\t  ResultSet.prototype.toString = function () {\n\t    return '[' + this.entries.join(', ') + ']';\n\t  };\n\n\t  /**\n\t   * Get a JSON representation of the ResultSet\n\t   * @memberof ResultSet\n\t   * @returns {Object} Returns a JSON object structured as:\n\t   *                   `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n\t   */\n\t  ResultSet.prototype.toJSON = function () {\n\t    return {\n\t      mathjs: 'ResultSet',\n\t      entries: this.entries\n\t    };\n\t  };\n\n\t  /**\n\t   * Instantiate a ResultSet from a JSON object\n\t   * @memberof ResultSet\n\t   * @param {Object} json  A JSON object structured as:\n\t   *                       `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n\t   * @return {ResultSet}\n\t   */\n\t  ResultSet.fromJSON = function (json) {\n\t    return new ResultSet(json.entries);\n\t  };\n\n\t  return ResultSet;\n\t}\n\n\texports.name = 'ResultSet';\n\texports.path = 'type';\n\texports.factory = factory;\n\n\n/***/ },\n/* 73 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a string or convert any object into a string.\n\t   * Elements of Arrays and Matrices are processed element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.string(value)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.string(4.2);               // returns string '4.2'\n\t   *    math.string(math.complex(3, 2); // returns string '3 + 2i'\n\t   *\n\t   *    var u = math.unit(5, 'km');\n\t   *    math.string(u.to('m'));         // returns string '5000 m'\n\t   *\n\t   *    math.string([true, false]);     // returns ['true', 'false']\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, matrix, number, unit\n\t   *\n\t   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n\t   * @return {string | Array | Matrix} The created string\n\t   */\n\t  var string = typed('string', {\n\t    '': function () {\n\t      return '';\n\t    },\n\n\t    'number': number.format,\n\n\t    'null': function (x) {\n\t      return 'null';\n\t    },\n\n\t    'boolean': function (x) {\n\t      return x + '';\n\t    },\n\n\t    'string': function (x) {\n\t      return x;\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, string);\n\t    },\n\n\t    'any': function (x) {\n\t      return String(x);\n\t    }\n\t  });\n\n\t  string.toTex = {\n\t    0: '\\\\mathtt{\"\"}',\n\t    1: '\\\\mathrm{string}\\\\left(${args[0]}\\\\right)'\n\t  };\n\n\t  return string;\n\t}\n\n\texports.name = 'string';\n\texports.factory = factory;\n\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  // type\n\t  __webpack_require__(75),\n\n\t  // construction function\n\t  __webpack_require__(91),\n\n\t  // physical constants\n\t  __webpack_require__(92)\n\t];\n\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar endsWith = __webpack_require__(23).endsWith;\n\tvar clone = __webpack_require__(3).clone;\n\tvar constants = __webpack_require__(76);\n\n\tfunction factory (type, config, load, typed, math) {\n\t  var add       = load(__webpack_require__(53));\n\t  var subtract  = load(__webpack_require__(77));\n\t  var multiply  = load(__webpack_require__(80));\n\t  var divide    = load(__webpack_require__(81));\n\t  var pow       = load(__webpack_require__(82));\n\t  var abs       = load(__webpack_require__(86));\n\t  var equal     = load(__webpack_require__(87));\n\t  var isNumeric = load(__webpack_require__(88));\n\t  var format    = load(__webpack_require__(89));\n\t  var getTypeOf = load(__webpack_require__(90));\n\t  var toNumber  = load(__webpack_require__(70));\n\t  var Complex   = load(__webpack_require__(27));\n\n\t  /**\n\t   * A unit can be constructed in the following ways:\n\t   *     var a = new Unit(value, name);\n\t   *     var b = new Unit(null, name);\n\t   *     var c = Unit.parse(str);\n\t   *\n\t   * Example usage:\n\t   *     var a = new Unit(5, 'cm');               // 50 mm\n\t   *     var b = Unit.parse('23 kg');             // 23 kg\n\t   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m\n\t   *     var d = new Unit(9.81, \"m/s^2\");         // 9.81 m/s^2\n\t   *\n\t   * @class Unit\n\t   * @constructor Unit\n\t   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n\t   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n\t   */\n\t  function Unit(value, name) {\n\t    if (!(this instanceof Unit)) {\n\t      throw new Error('Constructor must be called with the new operator');\n\t    }\n\n\t    if (!(value === undefined || isNumeric(value) || value.isComplex)) {\n\t      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n\t    }\n\t    if (name != undefined && (typeof name !== 'string' || name == '')) {\n\t      throw new TypeError('Second parameter in Unit constructor must be a string');\n\t    }\n\n\t    if (name != undefined) {\n\t      var u = Unit.parse(name);\n\t      this.units = u.units;\n\t      this.dimensions = u.dimensions;\n\t    }\n\t    else {\n\t      this.units = [\n\t        {\n\t          unit: UNIT_NONE,\n\t          prefix: PREFIXES.NONE,  // link to a list with supported prefixes\n\t          power: 0\n\t        }\n\t      ];\n\t      this.dimensions = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\t    }\n\n\t    this.value = (value != undefined) ? this._normalize(value) : null;\n\n\t    this.fixPrefix = false; // if true, function format will not search for the\n\t                            // best prefix but leave it as initially provided.\n\t                            // fixPrefix is set true by the method Unit.to\n\n\t    // The justification behind this is that if the constructor is explicitly called,\n\t    // the caller wishes the units to be returned exactly as he supplied.\n\t    this.isUnitListSimplified = true;\n\n\t  }\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  Unit.prototype.type = 'Unit';\n\t  Unit.prototype.isUnit = true;\n\n\t  // private variables and functions for the Unit parser\n\t  var text, index, c;\n\n\t  function skipWhitespace() {\n\t    while (c == ' ' || c == '\\t') {\n\t      next();\n\t    }\n\t  }\n\n\t  function isDigitDot(c) {\n\t    return ((c >= '0' && c <= '9') || c == '.');\n\t  }\n\n\t  function isDigit(c) {\n\t    return ((c >= '0' && c <= '9'));\n\t  }\n\n\t  function next() {\n\t    index++;\n\t    c = text.charAt(index);\n\t  }\n\n\t  function revert(oldIndex) {\n\t    index = oldIndex;\n\t    c = text.charAt(index);\n\t  }\n\n\t  function parseNumber() {\n\t    var number = '';\n\t    var oldIndex;\n\t    oldIndex = index;\n\n\t    if (c == '+') {\n\t      next();\n\t    }\n\t    else if (c == '-') {\n\t      number += c;\n\t      next();\n\t    }\n\n\t    if (!isDigitDot(c)) {\n\t      // a + or - must be followed by a digit\n\t      revert(oldIndex);\n\t      return null;\n\t    }\n\n\t    // get number, can have a single dot\n\t    if (c == '.') {\n\t      number += c;\n\t      next();\n\t      if (!isDigit(c)) {\n\t        // this is no legal number, it is just a dot\n\t        revert(oldIndex);\n\t        return null;\n\t      }\n\t    }\n\t    else {\n\t      while (isDigit(c)) {\n\t        number += c;\n\t        next();\n\t      }\n\t      if (c == '.') {\n\t        number += c;\n\t        next();\n\t      }\n\t    }\n\t    while (isDigit(c)) {\n\t      number += c;\n\t      next();\n\t    }\n\n\t    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\t    if (c == 'E' || c == 'e') {\n\t      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n\n\t      var tentativeNumber = '';\n\t      var tentativeIndex = index;\n\n\t      tentativeNumber += c;\n\t      next();\n\n\t      if (c == '+' || c == '-') {\n\t        tentativeNumber += c;\n\t        next();\n\t      }\n\n\t      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\t      if (!isDigit(c)) {\n\t        // The e or E must belong to something else, so return the number without the e or E.\n\t        revert(tentativeIndex);\n\t        return number;\n\t      }\n\t      \n\t      // We can now safely say that this is scientific notation.\n\t      number = number + tentativeNumber;\n\t      while (isDigit(c)) {\n\t        number += c;\n\t        next();\n\t      }\n\t    }\n\n\t    return number;\n\t  }\n\n\t  function parseUnit() {\n\t    var unitName = '';\n\n\t    // Alphanumeric characters only; matches [a-zA-Z0-9]\n\t    var code = text.charCodeAt(index);\n\t    while ( (code >= 48 && code <= 57) ||\n\t            (code >= 65 && code <= 90) ||\n\t            (code >= 97 && code <= 122)) {\n\t      unitName += c;\n\t      next();\n\t      code = text.charCodeAt(index);\n\t    }\n\n\t    // Must begin with [a-zA-Z]\n\t    code = unitName.charCodeAt(0);\n\t    if ((code >= 65 && code <= 90) ||\n\t        (code >= 97 && code <= 122)) {\n\t        return unitName || null;\n\t    } \n\t    else {\n\t      return null;\n\t    }\n\t  }\n\n\t  function parseCharacter(toFind) {\n\t    if (c === toFind) {\n\t      next();\n\t      return toFind;\n\t    }\n\t    else {\n\t      return null;\n\t    }\n\t  }\n\n\t  /**\n\t   * Parse a string into a unit. The value of the unit is parsed as number,\n\t   * BigNumber, or Fraction depending on the math.js config setting `number`.\n\t   *\n\t   * Throws an exception if the provided string does not contain a valid unit or\n\t   * cannot be parsed.\n\t   * @memberof Unit\n\t   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n\t   * @return {Unit} unit\n\t   */\n\t  Unit.parse = function (str) {\n\t    text = str;\n\t    index = -1;\n\t    c = '';\n\n\t    if (typeof text !== 'string') {\n\t      throw new TypeError('Invalid argument in Unit.parse, string expected');\n\t    }\n\n\t    var unit = new Unit();\n\t    unit.units = [];\n\n\t    // A unit should follow this pattern:\n\t    // [number]unit[^number] [unit[^number]]...[/unit[^number] [unit[^number]]]\n\n\t    // Rules:\n\t    // number is any floating point number.\n\t    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n\t    // The string may optionally begin with a number.\n\t    // Each unit may optionally be followed by ^number.\n\t    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n\t    //   2m^2kg/s^2\n\t    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n\t    //   4erg\n\n\t    next();\n\t    skipWhitespace();\n\t    // Optional number at the start of the string\n\t    var valueStr = parseNumber();\n\t    var value = null;\n\t    if(valueStr) {\n\t      if (config.number === 'BigNumber') {\n\t        value = new type.BigNumber(valueStr);\n\t      }\n\t      else if (config.number === 'Fraction') {\n\t        value = new type.Fraction(valueStr);\n\t      }\n\t      else { // number\n\t        value = parseFloat(valueStr);\n\t      }\n\t    }\n\t    skipWhitespace();    // Whitespace is not required here\n\n\t    // Next, we read any number of unit[^number]\n\t    var powerMultiplierCurrent = 1;\n\t    var expectingUnit = false;\n\n\t    // Stack to keep track of powerMultipliers applied to each parentheses group\n\t    var powerMultiplierStack = [];\n\n\t    // Running product of all elements in powerMultiplierStack\n\t    var powerMultiplierStackProduct = 1;\n\n\t    while (true) {\n\t      skipWhitespace();\n\n\t      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n\t      // A '(' will always appear directly before a unit.\n\t      while (c === '(') {\n\t        powerMultiplierStack.push(powerMultiplierCurrent);\n\t        powerMultiplierStackProduct *= powerMultiplierCurrent;\n\t        powerMultiplierCurrent = 1;\n\t        next();\n\t        skipWhitespace();\n\t      }\n\n\t      // Is there something here?\n\t      if(c) {\n\t        var oldC = c;\n\t        var uStr = parseUnit();\n\t        if(uStr == null) {\n\t          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n\t        }\n\t      }\n\t      else {\n\t        // End of input.\n\t        break;\n\t      }\n\n\t      // Verify the unit exists and get the prefix (if any)\n\t      var res = _findUnit(uStr);\n\t      if(res == null) {\n\t        // Unit not found.\n\t        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n\t      }\n\n\t      var power = powerMultiplierCurrent * powerMultiplierStackProduct;\n\t      // Is there a \"^ number\"?\n\t      skipWhitespace();\n\t      if (parseCharacter('^')) {\n\t        skipWhitespace();\n\t        var p = parseNumber();\n\t        if(p == null) {\n\t          // No valid number found for the power!\n\t          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n\t        }\n\t        power *= p;\n\t      }\n\n\t      // Add the unit to the list\n\t      unit.units.push( {\n\t        unit: res.unit,\n\t        prefix: res.prefix,\n\t        power: power\n\t      });\n\t      for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n\t        unit.dimensions[i] += res.unit.dimensions[i] * power;\n\t      }\n\n\t      // Check for and consume closing parentheses, popping from the stack.\n\t      // A ')' will always follow a unit.\n\t      skipWhitespace();\n\t      while (c === ')') {\n\t        if(powerMultiplierStack.length === 0) {\n\t          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n\t        }\n\t        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n\t        next();\n\t        skipWhitespace();\n\t      }\n\n\t      // \"*\" and \"/\" should mean we are expecting something to come next.\n\t      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\t      expectingUnit = false;\n\n\t      if (parseCharacter('*')) {\n\t        // explicit multiplication\n\t        powerMultiplierCurrent = 1;\n\t        expectingUnit = true;\n\t      }\n\t      else if (parseCharacter('/')) {\n\t        // division\n\t        powerMultiplierCurrent = -1;\n\t        expectingUnit = true;\n\t      }\n\t      else {\n\t        // implicit multiplication\n\t        powerMultiplierCurrent = 1;\n\t      }\n\n\t      // Replace the unit into the auto unit system\n\t      var baseDim = res.unit.base.key;\n\t      UNIT_SYSTEMS.auto[baseDim] = {\n\t        unit: res.unit,\n\t        prefix: res.prefix\n\t      };\n\t    }\n\t    \n\t    // Has the string been entirely consumed?\n\t    skipWhitespace();\n\t    if(c) {\n\t      throw new SyntaxError('Could not parse: \"' + str + '\"');\n\t    }\n\n\t    // Is there a trailing slash?\n\t    if(expectingUnit) {\n\t      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n\t    }\n\n\t    // Is the parentheses stack empty?\n\t    if(powerMultiplierStack.length !== 0) {\n\t      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n\t    }\n\n\t    // Are there any units at all?\n\t    if(unit.units.length == 0) {\n\t      throw new SyntaxError('\"' + str + '\" contains no units');\n\t    }\n\n\t    unit.value = (value != undefined) ? unit._normalize(value) : null;\n\t    return unit;\n\t  };\n\n\t  /**\n\t   * create a copy of this unit\n\t   * @memberof Unit\n\t   * @return {Unit} Returns a cloned version of the unit\n\t   */\n\t  Unit.prototype.clone = function () {\n\t    var unit = new Unit();\n\n\t    unit.fixPrefix = this.fixPrefix;\n\t    unit.isUnitListSimplified = this.isUnitListSimplified;\n\n\t    unit.value = clone(this.value);\n\t    unit.dimensions = this.dimensions.slice(0);\n\t    unit.units = [];\n\t    for(var i = 0; i < this.units.length; i++) {\n\t      unit.units[i] = { };\n\t      for (var p in this.units[i]) {\n\t        if (this.units[i].hasOwnProperty(p)) {\n\t          unit.units[i][p] = this.units[i][p];\n\t        }\n\t      }\n\t    }\n\n\t    return unit;\n\t  };\n\n\t  /**\n\t   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n\t   * @memberof Unit\n\t   * @return {boolean} True if the unit is derived\n\t   */\n\t  Unit.prototype._isDerived = function() {\n\t    if(this.units.length === 0) {\n\t      return false;\n\t    }\n\t    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n\t  };\n\n\t  /**\n\t   * Normalize a value, based on its currently set unit(s)\n\t   * @memberof Unit\n\t   * @param {number | BigNumber | Fraction | boolean} value\n\t   * @return {number | BigNumber | Fraction | boolean} normalized value\n\t   * @private\n\t   */\n\t  Unit.prototype._normalize = function (value) {\n\t    var unitValue, unitOffset, unitPower, unitPrefixValue;\n\t    var convert;\n\n\t    if (value == null || this.units.length === 0) {\n\t      return value;\n\t    }\n\t    else if (this._isDerived()) {\n\t      // This is a derived unit, so do not apply offsets.\n\t      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n\t      var res = value;\n\t      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n\t      for(var i=0; i < this.units.length; i++) {\n\t        unitValue       = convert(this.units[i].unit.value);\n\t        unitPrefixValue = convert(this.units[i].prefix.value);\n\t        unitPower       = convert(this.units[i].power);\n\t        res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));\n\t      }\n\n\t      return res;\n\t    }\n\t    else {\n\t      // This is a single unit of power 1, like kg or degC\n\t      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n\t      unitValue       = convert(this.units[0].unit.value);\n\t      unitOffset      = convert(this.units[0].unit.offset);\n\t      unitPrefixValue = convert(this.units[0].prefix.value);\n\n\t      return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));\n\t    }\n\t  };\n\n\t  /**\n\t   * Denormalize a value, based on its currently set unit(s)\n\t   * @memberof Unit\n\t   * @param {number} value\n\t   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n\t   * @return {number} denormalized value\n\t   * @private\n\t   */\n\t  Unit.prototype._denormalize = function (value, prefixValue) {\n\t    var unitValue, unitOffset, unitPower, unitPrefixValue;\n\t    var convert;\n\n\t    if (value == null || this.units.length === 0) {\n\t      return value;\n\t    }\n\t    else if (this._isDerived()) {\n\t      // This is a derived unit, so do not apply offsets.\n\t      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n\t      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.\n\t      var res = value;\n\t      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n\t      for (var i = 0; i < this.units.length; i++) {\n\t        unitValue       = convert(this.units[i].unit.value);\n\t        unitPrefixValue = convert(this.units[i].prefix.value);\n\t        unitPower       = convert(this.units[i].power);\n\t        res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));\n\t      }\n\n\t      return res;\n\t    }\n\t    else {\n\t      // This is a single unit of power 1, like kg or degC\n\t      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n\t      unitValue       = convert(this.units[0].unit.value);\n\t      unitPrefixValue = convert(this.units[0].prefix.value);\n\t      unitOffset      = convert(this.units[0].unit.offset);\n\n\t      if (prefixValue == undefined) {\n\t        return subtract(divide(divide(value, unitValue), unitPrefixValue), unitOffset);\n\t      }\n\t      else {\n\t        return subtract(divide(divide(value, unitValue), prefixValue), unitOffset);\n\t      }\n\t    }\n\t  };\n\n\t  /**\n\t   * Find a unit from a string\n\t   * @memberof Unit\n\t   * @param {string} str              A string like 'cm' or 'inch'\n\t   * @returns {Object | null} result  When found, an object with fields unit and\n\t   *                                  prefix is returned. Else, null is returned.\n\t   * @private\n\t   */\n\t  function _findUnit(str) {\n\t    for (var name in UNITS) {\n\t      if (UNITS.hasOwnProperty(name)) {\n\t        if (endsWith(str, name)) {\n\t          var unit = UNITS[name];\n\t          var prefixLen = (str.length - name.length);\n\t          var prefixName = str.substring(0, prefixLen);\n\t          var prefix = unit.prefixes[prefixName];\n\t          if (prefix !== undefined) {\n\t            // store unit, prefix, and value\n\t            return {\n\t              unit: unit,\n\t              prefix: prefix\n\t            };\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    return null;\n\t  }\n\n\t  /**\n\t   * Test if the given expression is a unit.\n\t   * The unit can have a prefix but cannot have a value.\n\t   * @memberof Unit\n\t   * @param {string} name   A string to be tested whether it is a value less unit.\n\t   *                        The unit can have prefix, like \"cm\"\n\t   * @return {boolean}      true if the given string is a unit\n\t   */\n\t  Unit.isValuelessUnit = function (name) {\n\t    return (_findUnit(name) != null);\n\t  };\n\n\t  /**\n\t   * check if this unit has given base unit\n\t   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n\t   * @memberof Unit\n\t   * @param {BASE_UNITS | string | undefined} base\n\t   */\n\t  Unit.prototype.hasBase = function (base) {\n\n\t    if(typeof(base) === \"string\") {\n\t      base = BASE_UNITS[base];\n\t    }\n\n\t    if(!base)\n\t      return false;\n\n\n\t    // All dimensions must be the same\n\t    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n\t      if (Math.abs(this.dimensions[i] - base.dimensions[i]) > 1e-12) {\n\t        return false;\n\t      }\n\t    }\n\t    return true;\n\n\t  };\n\n\t  /**\n\t   * Check if this unit has a base or bases equal to another base or bases\n\t   * For derived units, the exponent on each base also must match\n\t   * @memberof Unit\n\t   * @param {Unit} other\n\t   * @return {boolean} true if equal base\n\t   */\n\t  Unit.prototype.equalBase = function (other) {\n\t    // All dimensions must be the same\n\t    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n\t      if (Math.abs(this.dimensions[i] - other.dimensions[i]) > 1e-12) {\n\t        return false;\n\t      }\n\t    }\n\t    return true;\n\t  };\n\n\t  /**\n\t   * Check if this unit equals another unit\n\t   * @memberof Unit\n\t   * @param {Unit} other\n\t   * @return {boolean} true if both units are equal\n\t   */\n\t  Unit.prototype.equals = function (other) {\n\t    return (this.equalBase(other) && equal(this.value, other.value));\n\t  };\n\n\t  /**\n\t   * Multiply this unit with another one\n\t   * @memberof Unit\n\t   * @param {Unit} other\n\t   * @return {Unit} product of this unit and the other unit\n\t   */\n\t  Unit.prototype.multiply = function (other) {\n\t    var res = this.clone();\n\t    \n\t    for(var i = 0; i<BASE_DIMENSIONS.length; i++) {\n\t      res.dimensions[i] = this.dimensions[i] + other.dimensions[i];\n\t    }\n\n\t    // Append other's units list onto res (simplify later in Unit.prototype.format)\n\t    for(var i=0; i<other.units.length; i++) {\n\t      var inverted = JSON.parse(JSON.stringify(other.units[i])); \n\t      res.units.push(inverted);\n\t    }\n\n\t    // If at least one operand has a value, then the result should also have a value\n\t    if(this.value != null || other.value != null) {\n\t      var valThis = this.value == null ? this._normalize(1) : this.value;\n\t      var valOther = other.value == null ? other._normalize(1) : other.value;\n\t      res.value = multiply(valThis, valOther);\n\t    }\n\t    else {\n\t      res.value = null;\n\t    }\n\n\t    // Trigger simplification of the unit list at some future time\n\t    res.isUnitListSimplified = false;\n\n\t    return getNumericIfUnitless(res);\n\t  };\n\n\t  /**\n\t   * Divide this unit by another one\n\t   * @memberof Unit\n\t   * @param {Unit} other\n\t   * @return {Unit} result of dividing this unit by the other unit\n\t   */\n\t  Unit.prototype.divide = function (other) {\n\t    var res = this.clone();\n\t    \n\t    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n\t      res.dimensions[i] = this.dimensions[i] - other.dimensions[i];\n\t    }\n\n\t    // Invert and append other's units list onto res (simplify later in Unit.prototype.format)\n\t    for(var i=0; i<other.units.length; i++) {\n\t      // Clone other's unit\n\t      var inverted = JSON.parse(JSON.stringify(other.units[i])); \n\t      inverted.power = -inverted.power;\n\t      res.units.push(inverted);\n\t    }\n\n\t    // If at least one operand has a value, the result should have a value\n\t    if (this.value != null || other.value != null) {\n\t      var valThis = this.value == null ? this._normalize(1) : this.value;\n\t      var valOther = other.value == null ? other._normalize(1) : other.value;\n\t      res.value = divide(valThis, valOther);\n\t    }\n\t    else {\n\t      res.value = null;\n\t    }\n\n\t    // Trigger simplification of the unit list at some future time\n\t    res.isUnitListSimplified = false;\n\n\t    return getNumericIfUnitless(res);\n\t  };\n\n\t  /**\n\t   * Calculate the power of a unit\n\t   * @memberof Unit\n\t   * @param {number | Fraction | BigNumber} p\n\t   * @returns {Unit}      The result: this^p\n\t   */\n\t  Unit.prototype.pow = function (p) {\n\t    var res = this.clone();\n\t    \n\t    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n\t      res.dimensions[i] = this.dimensions[i] * p;\n\t    }\n\n\t    // Adjust the power of each unit in the list\n\t    for(var i=0; i<res.units.length; i++) {\n\t      res.units[i].power *= p;\n\t    }\n\n\t    if(res.value != null) {\n\t      res.value = pow(res.value, p);\n\n\t      // only allow numeric output, we don't want to return a Complex number\n\t      //if (!isNumeric(res.value)) {\n\t      //  res.value = NaN;\n\t      //}\n\t      // Update: Complex supported now\n\t    }\n\t    else {\n\t      res.value = null;\n\t    }\n\n\t    // Trigger lazy evaluation of the unit list\n\t    res.isUnitListSimplified = false;\n\n\t    return getNumericIfUnitless(res);\n\t  };\n\n\t  /**\n\t   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n\t   * @param {Unit} unit\n\t   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n\t   */\n\t  var getNumericIfUnitless = function(unit) {\n\t    if(unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n\t      return unit.value;\n\t    }\n\t    else {\n\t      return unit;\n\t    }\n\t  }\n\t    \n\n\t  /**\n\t   * Calculate the absolute value of a unit\n\t   * @memberof Unit\n\t   * @param {number | Fraction | BigNumber} x\n\t   * @returns {Unit}      The result: |x|, absolute value of x\n\t   */\n\t  Unit.prototype.abs = function () {\n\t    // This gives correct, but unexpected, results for units with an offset.\n\t    // For example, abs(-283.15 degC) = -263.15 degC !!!\n\t    var ret = this.clone();\n\t    ret.value = abs(ret.value);\n\n\t    for(var i in ret.units) {\n\t      if(ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n\t        ret.units[i].unit = UNITS[\"W\"];\n\t      }\n\t    }\n\n\t    return ret;\n\t  };\n\n\t  /**\n\t   * Convert the unit to a specific unit name.\n\t   * @memberof Unit\n\t   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n\t   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n\t   */\n\t  Unit.prototype.to = function (valuelessUnit) {\n\t    var other;\n\t    var value = this.value == null ? this._normalize(1) : this.value;\n\t    if (typeof valuelessUnit === 'string') {\n\t      //other = new Unit(null, valuelessUnit);\n\t      other = Unit.parse(valuelessUnit);\n\t      if (!this.equalBase(other)) {\n\t        throw new Error('Units do not match');\n\t      }\n\t      if (other.value !== null) {\n\t        throw new Error('Cannot convert to a unit with a value');\n\t      }\n\n\t      other.value = clone(value);\n\t      other.fixPrefix = true;\n\t      other.isUnitListSimplified = true;\n\t      return other;\n\t    }\n\t    else if (valuelessUnit && valuelessUnit.isUnit) {\n\t      if (!this.equalBase(valuelessUnit)) {\n\t        throw new Error('Units do not match');\n\t      }\n\t      if (valuelessUnit.value !== null) {\n\t        throw new Error('Cannot convert to a unit with a value');\n\t      }\n\t      other = valuelessUnit.clone();\n\t      other.value = clone(value);\n\t      other.fixPrefix = true;\n\t      other.isUnitListSimplified = true;\n\t      return other;\n\t    }\n\t    else {\n\t      throw new Error('String or Unit expected as parameter');\n\t    }\n\t  };\n\n\t  /**\n\t   * Return the value of the unit when represented with given valueless unit\n\t   * @memberof Unit\n\t   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n\t   * @return {number} Returns the unit value as number.\n\t   */\n\t  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\t  Unit.prototype.toNumber = function (valuelessUnit) {\n\t    return toNumber(this.toNumeric(valuelessUnit));\n\t  };\n\n\t  /**\n\t   * Return the value of the unit in the original numeric type\n\t   * @memberof Unit\n\t   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n\t   * @return {number | BigNumber | Fraction} Returns the unit value\n\t   */\n\t  Unit.prototype.toNumeric = function (valuelessUnit) {\n\t    var other = this.to(valuelessUnit);\n\t    if(other._isDerived()) {\n\t      return other._denormalize(other.value);\n\t    }\n\t    else {\n\t      return other._denormalize(other.value, other.units[0].prefix.value);\n\t    }\n\t  };\n\n\t  /**\n\t   * Get a string representation of the unit.\n\t   * @memberof Unit\n\t   * @return {string}\n\t   */\n\t  Unit.prototype.toString = function () {\n\t    return this.format();\n\t  };\n\n\t  /**\n\t   * Get a JSON representation of the unit\n\t   * @memberof Unit\n\t   * @returns {Object} Returns a JSON object structured as:\n\t   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n\t   */\n\t  Unit.prototype.toJSON = function () {\n\t    return {\n\t      mathjs: 'Unit',\n\t      value: this._denormalize(this.value),\n\t      unit: this.formatUnits(),\n\t      fixPrefix: this.fixPrefix\n\t    };\n\t  };\n\n\t  /**\n\t   * Instantiate a Unit from a JSON object\n\t   * @memberof Unit\n\t   * @param {Object} json  A JSON object structured as:\n\t   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n\t   * @return {Unit}\n\t   */\n\t  Unit.fromJSON = function (json) {\n\t    var unit = new Unit(json.value, json.unit);\n\t    unit.fixPrefix = json.fixPrefix || false;\n\t    return unit;\n\t  };\n\n\t  /**\n\t   * Returns the string representation of the unit.\n\t   * @memberof Unit\n\t   * @return {string}\n\t   */\n\t  Unit.prototype.valueOf = Unit.prototype.toString;\n\n\t  /**\n\t   * Attempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the \"best\" units for formatting.\n\t   * Intended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.\n\t   */\n\t  Unit.prototype.simplifyUnitListLazy = function() {\n\n\t    if (this.isUnitListSimplified || this.value == null) {\n\t      return;\n\t    }\n\n\t    var proposedUnitList = [];\n\n\t    // Search for a matching base\n\t    var matchingBase;\n\t    for(var key in currentUnitSystem) {\n\t      if(this.hasBase(BASE_UNITS[key])) {\n\t        matchingBase = key;\n\t        break;\n\t      }\n\t    }\n\n\t    if(matchingBase === 'NONE')\n\t    {\n\t      this.units = [];\n\t    }\n\t    else {\n\t      var matchingUnit;\n\t      if(matchingBase) {\n\t        // Does the unit system have a matching unit?\n\t        if(currentUnitSystem.hasOwnProperty(matchingBase)) {\n\t          matchingUnit = currentUnitSystem[matchingBase]\n\t        }\n\t      }\n\n\t      var value;\n\t      var str;\n\t      if(matchingUnit) {\n\t        this.units = [{\n\t          unit: matchingUnit.unit,\n\t          prefix: matchingUnit.prefix,\n\t          power: 1.0\n\t        }];\n\t      }\n\t      else {\n\t        // Multiple units or units with powers are formatted like this:\n\t        // 5 (kg m^2) / (s^3 mol)\n\t        // Build an representation from the base units of the current unit system\n\t        for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n\t          var baseDim = BASE_DIMENSIONS[i];\n\t          if(Math.abs(this.dimensions[i]) > 1e-12) {\n\t            proposedUnitList.push({\n\t              unit: currentUnitSystem[baseDim].unit,\n\t              prefix: currentUnitSystem[baseDim].prefix,\n\t              power: this.dimensions[i]\n\t            });\n\t          }\n\t        }\n\n\t        // Is the proposed unit list \"simpler\" than the existing one?\n\t        if(proposedUnitList.length < this.units.length) {\n\t          // Replace this unit list with the proposed list\n\t          this.units = proposedUnitList;\n\t        }\n\t      }\n\t    }\n\n\t    this.isUnitListSimplified = true;\n\t  };\n\n\t  /**\n\t   * Get a string representation of the units of this Unit, without the value.\n\t   * @memberof Unit\n\t   * @return {string}\n\t   */\n\t  Unit.prototype.formatUnits = function () {\n\n\t    // Lazy evaluation of the unit list\n\t    this.simplifyUnitListLazy();\n\n\t    var strNum = \"\";\n\t    var strDen = \"\";\n\t    var nNum = 0;\n\t    var nDen = 0;\n\n\t    for(var i=0; i<this.units.length; i++) {\n\t      if(this.units[i].power > 0) {\n\t        nNum++;\n\t        strNum += \" \" + this.units[i].prefix.name + this.units[i].unit.name;\n\t        if(Math.abs(this.units[i].power - 1.0) > 1e-15) {\n\t          strNum += \"^\" + this.units[i].power;\n\t        }\n\t      }\n\t      else if(this.units[i].power < 0) {\n\t        nDen++;\n\t      }\n\t    }\n\n\t    if(nDen > 0) {\n\t      for(var i=0; i<this.units.length; i++) {\n\t        if(this.units[i].power < 0) {\n\t          if(nNum > 0) {\n\t            strDen += \" \" + this.units[i].prefix.name + this.units[i].unit.name;\n\t            if(Math.abs(this.units[i].power + 1.0) > 1e-15) {\n\t              strDen += \"^\" + (-this.units[i].power);\n\t            }\n\t          }\n\t          else {\n\t            strDen += \" \" + this.units[i].prefix.name + this.units[i].unit.name;\n\t            strDen += \"^\" + (this.units[i].power);\n\t          }\n\t        }\n\t      }\n\t    }\n\t    // Remove leading \" \"\n\t    strNum = strNum.substr(1);\n\t    strDen = strDen.substr(1);\n\n\t    // Add parans for better copy/paste back into the eval, for example, or for better pretty print formatting\n\t    if(nNum > 1 && nDen > 0) {\n\t      strNum = \"(\" + strNum + \")\";\n\t    }\n\t    if(nDen > 1 && nNum > 0) {\n\t      strDen = \"(\" + strDen + \")\";\n\t    }\n\n\t    var str = strNum;\n\t    if(nNum > 0 && nDen > 0) {\n\t      str += \" / \";\n\t    }\n\t    str += strDen;\n\n\t    return str;\n\t  };\n\n\t  /**\n\t   * Get a string representation of the Unit, with optional formatting options.\n\t   * @memberof Unit\n\t   * @param {Object | number | Function} [options]  Formatting options. See\n\t   *                                                lib/utils/number:format for a\n\t   *                                                description of the available\n\t   *                                                options.\n\t   * @return {string}\n\t   */\n\t  Unit.prototype.format = function (options) {\n\n\t    // Simplfy the unit list, if necessary\n\t    this.simplifyUnitListLazy();\n\n\t    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\t    var isImaginary = false;\n\t    var isReal = true;\n\t    if(typeof(this.value) !== 'undefined' && this.value !== null && this.value.isComplex) {\n\t      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n\t      isImaginary = Math.abs(this.value.re) < 1e-14;\n\t      isReal = Math.abs(this.value.im) < 1e-14;\n\t    }\n\t    \n\t    for(var i in this.units) {\n\t      if(this.units[i].unit) {\n\t        if(this.units[i].unit.name === 'VA' && isImaginary) {\n\t          this.units[i].unit = UNITS[\"VAR\"];\n\t        }\n\t        else if(this.units[i].unit.name === 'VAR' && !isImaginary) {\n\t          this.units[i].unit = UNITS[\"VA\"];\n\t        }\n\t      }\n\t    }\n\n\n\t    // Now apply the best prefix\n\t    // Units must have only one unit and not have the fixPrefix flag set\n\t    if (this.units.length === 1 && !this.fixPrefix) {\n\t      // Units must have integer powers, otherwise the prefix will change the\n\t      // outputted value by not-an-integer-power-of-ten\n\t      if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {\n\t        // Apply the best prefix\n\t        this.units[0].prefix = this._bestPrefix();\n\t      }\n\t    }\n\n\t    var value = this._denormalize(this.value);\n\t    var str = (this.value !== null) ? format(value, options || {}) : '';\n\t    var unitStr = this.formatUnits();\n\t    if(this.value && this.value.isComplex) {\n\t      str = \"(\" + str + \")\";    // Surround complex values with ( ) to enable better parsing \n\t    }\n\t    if(unitStr.length > 0 && str.length > 0) {\n\t      str += \" \";\n\t    }\n\t    str += unitStr;\n\n\t    return str;\n\t  };\n\n\t  /**\n\t   * Calculate the best prefix using current value.\n\t   * @memberof Unit\n\t   * @returns {Object} prefix\n\t   * @private\n\t   */\n\t  Unit.prototype._bestPrefix = function () {\n\t    if (this.units.length !== 1) {\n\t      throw new Error(\"Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!\");\n\t    }\n\t    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n\t      throw new Error(\"Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!\");\n\t    }\n\n\t    // find the best prefix value (resulting in the value of which\n\t    // the absolute value of the log10 is closest to zero,\n\t    // though with a little offset of 1.2 for nicer values: you get a\n\t    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n\n\t    // Note: the units value can be any numeric type, but to find the best\n\t    // prefix it's enough to work with limited precision of a regular number\n\t    // Update: using mathjs abs since we also allow complex numbers\n\t    var absValue = abs(this.value);\n\t    var absUnitValue = abs(this.units[0].unit.value);\n\t    var bestPrefix = this.units[0].prefix;\n\t    if (absValue === 0) {\n\t      return bestPrefix;\n\t    }\n\t    var power = this.units[0].power;\n\t    var bestDiff = Math.abs(\n\t        Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n\t    var prefixes = this.units[0].unit.prefixes;\n\t    for (var p in prefixes) {\n\t      if (prefixes.hasOwnProperty(p)) {\n\t        var prefix = prefixes[p];\n\t        if (prefix.scientific) {\n\n\t          var diff = Math.abs(\n\t              Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n\t          if (diff < bestDiff\n\t              || (diff === bestDiff && prefix.name.length < bestPrefix.name.length)) {\n\t                // choose the prefix with the smallest diff, or if equal, choose the one\n\t                // with the shortest name (can happen with SHORTLONG for example)\n\t                bestPrefix = prefix;\n\t                bestDiff = diff;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    return bestPrefix;\n\t  };\n\n\t  var PREFIXES = {\n\t    NONE: {\n\t      '': {name: '', value: 1, scientific: true}\n\t    },\n\t    SHORT: {\n\t      '': {name: '', value: 1, scientific: true},\n\n\t      'da': {name: 'da', value: 1e1, scientific: false},\n\t      'h': {name: 'h', value: 1e2, scientific: false},\n\t      'k': {name: 'k', value: 1e3, scientific: true},\n\t      'M': {name: 'M', value: 1e6, scientific: true},\n\t      'G': {name: 'G', value: 1e9, scientific: true},\n\t      'T': {name: 'T', value: 1e12, scientific: true},\n\t      'P': {name: 'P', value: 1e15, scientific: true},\n\t      'E': {name: 'E', value: 1e18, scientific: true},\n\t      'Z': {name: 'Z', value: 1e21, scientific: true},\n\t      'Y': {name: 'Y', value: 1e24, scientific: true},\n\n\t      'd': {name: 'd', value: 1e-1, scientific: false},\n\t      'c': {name: 'c', value: 1e-2, scientific: false},\n\t      'm': {name: 'm', value: 1e-3, scientific: true},\n\t      'u': {name: 'u', value: 1e-6, scientific: true},\n\t      'n': {name: 'n', value: 1e-9, scientific: true},\n\t      'p': {name: 'p', value: 1e-12, scientific: true},\n\t      'f': {name: 'f', value: 1e-15, scientific: true},\n\t      'a': {name: 'a', value: 1e-18, scientific: true},\n\t      'z': {name: 'z', value: 1e-21, scientific: true},\n\t      'y': {name: 'y', value: 1e-24, scientific: true}\n\t    },\n\t    LONG: {\n\t      '': {name: '', value: 1, scientific: true},\n\n\t      'deca': {name: 'deca', value: 1e1, scientific: false},\n\t      'hecto': {name: 'hecto', value: 1e2, scientific: false},\n\t      'kilo': {name: 'kilo', value: 1e3, scientific: true},\n\t      'mega': {name: 'mega', value: 1e6, scientific: true},\n\t      'giga': {name: 'giga', value: 1e9, scientific: true},\n\t      'tera': {name: 'tera', value: 1e12, scientific: true},\n\t      'peta': {name: 'peta', value: 1e15, scientific: true},\n\t      'exa': {name: 'exa', value: 1e18, scientific: true},\n\t      'zetta': {name: 'zetta', value: 1e21, scientific: true},\n\t      'yotta': {name: 'yotta', value: 1e24, scientific: true},\n\n\t      'deci': {name: 'deci', value: 1e-1, scientific: false},\n\t      'centi': {name: 'centi', value: 1e-2, scientific: false},\n\t      'milli': {name: 'milli', value: 1e-3, scientific: true},\n\t      'micro': {name: 'micro', value: 1e-6, scientific: true},\n\t      'nano': {name: 'nano', value: 1e-9, scientific: true},\n\t      'pico': {name: 'pico', value: 1e-12, scientific: true},\n\t      'femto': {name: 'femto', value: 1e-15, scientific: true},\n\t      'atto': {name: 'atto', value: 1e-18, scientific: true},\n\t      'zepto': {name: 'zepto', value: 1e-21, scientific: true},\n\t      'yocto': {name: 'yocto', value: 1e-24, scientific: true}\n\t    },\n\t    SQUARED: {\n\t      '': {name: '', value: 1, scientific: true},\n\n\t      'da': {name: 'da', value: 1e2, scientific: false},\n\t      'h': {name: 'h', value: 1e4, scientific: false},\n\t      'k': {name: 'k', value: 1e6, scientific: true},\n\t      'M': {name: 'M', value: 1e12, scientific: true},\n\t      'G': {name: 'G', value: 1e18, scientific: true},\n\t      'T': {name: 'T', value: 1e24, scientific: true},\n\t      'P': {name: 'P', value: 1e30, scientific: true},\n\t      'E': {name: 'E', value: 1e36, scientific: true},\n\t      'Z': {name: 'Z', value: 1e42, scientific: true},\n\t      'Y': {name: 'Y', value: 1e48, scientific: true},\n\n\t      'd': {name: 'd', value: 1e-2, scientific: false},\n\t      'c': {name: 'c', value: 1e-4, scientific: false},\n\t      'm': {name: 'm', value: 1e-6, scientific: true},\n\t      'u': {name: 'u', value: 1e-12, scientific: true},\n\t      'n': {name: 'n', value: 1e-18, scientific: true},\n\t      'p': {name: 'p', value: 1e-24, scientific: true},\n\t      'f': {name: 'f', value: 1e-30, scientific: true},\n\t      'a': {name: 'a', value: 1e-36, scientific: true},\n\t      'z': {name: 'z', value: 1e-42, scientific: true},\n\t      'y': {name: 'y', value: 1e-48, scientific: true}\n\t    },\n\t    CUBIC: {\n\t      '': {name: '', value: 1, scientific: true},\n\n\t      'da': {name: 'da', value: 1e3, scientific: false},\n\t      'h': {name: 'h', value: 1e6, scientific: false},\n\t      'k': {name: 'k', value: 1e9, scientific: true},\n\t      'M': {name: 'M', value: 1e18, scientific: true},\n\t      'G': {name: 'G', value: 1e27, scientific: true},\n\t      'T': {name: 'T', value: 1e36, scientific: true},\n\t      'P': {name: 'P', value: 1e45, scientific: true},\n\t      'E': {name: 'E', value: 1e54, scientific: true},\n\t      'Z': {name: 'Z', value: 1e63, scientific: true},\n\t      'Y': {name: 'Y', value: 1e72, scientific: true},\n\n\t      'd': {name: 'd', value: 1e-3, scientific: false},\n\t      'c': {name: 'c', value: 1e-6, scientific: false},\n\t      'm': {name: 'm', value: 1e-9, scientific: true},\n\t      'u': {name: 'u', value: 1e-18, scientific: true},\n\t      'n': {name: 'n', value: 1e-27, scientific: true},\n\t      'p': {name: 'p', value: 1e-36, scientific: true},\n\t      'f': {name: 'f', value: 1e-45, scientific: true},\n\t      'a': {name: 'a', value: 1e-54, scientific: true},\n\t      'z': {name: 'z', value: 1e-63, scientific: true},\n\t      'y': {name: 'y', value: 1e-72, scientific: true}\n\t    },\n\t    BINARY_SHORT: {\n\t      '': {name: '', value: 1, scientific: true},\n\t      'k': {name: 'k', value: 1e3, scientific: true},\n\t      'M': {name: 'M', value: 1e6, scientific: true},\n\t      'G': {name: 'G', value: 1e9, scientific: true},\n\t      'T': {name: 'T', value: 1e12, scientific: true},\n\t      'P': {name: 'P', value: 1e15, scientific: true},\n\t      'E': {name: 'E', value: 1e18, scientific: true},\n\t      'Z': {name: 'Z', value: 1e21, scientific: true},\n\t      'Y': {name: 'Y', value: 1e24, scientific: true},\n\n\t      'Ki': {name: 'Ki', value: 1024, scientific: true},\n\t      'Mi': {name: 'Mi', value: Math.pow(1024, 2), scientific: true},\n\t      'Gi': {name: 'Gi', value: Math.pow(1024, 3), scientific: true},\n\t      'Ti': {name: 'Ti', value: Math.pow(1024, 4), scientific: true},\n\t      'Pi': {name: 'Pi', value: Math.pow(1024, 5), scientific: true},\n\t      'Ei': {name: 'Ei', value: Math.pow(1024, 6), scientific: true},\n\t      'Zi': {name: 'Zi', value: Math.pow(1024, 7), scientific: true},\n\t      'Yi': {name: 'Yi', value: Math.pow(1024, 8), scientific: true}\n\t    },\n\t    BINARY_LONG: {\n\t      '': {name: '', value: 1, scientific: true},\n\t      'kilo': {name: 'kilo', value: 1e3, scientific: true},\n\t      'mega': {name: 'mega', value: 1e6, scientific: true},\n\t      'giga': {name: 'giga', value: 1e9, scientific: true},\n\t      'tera': {name: 'tera', value: 1e12, scientific: true},\n\t      'peta': {name: 'peta', value: 1e15, scientific: true},\n\t      'exa': {name: 'exa', value: 1e18, scientific: true},\n\t      'zetta': {name: 'zetta', value: 1e21, scientific: true},\n\t      'yotta': {name: 'yotta', value: 1e24, scientific: true},\n\n\t      'kibi': {name: 'kibi', value: 1024, scientific: true},\n\t      'mebi': {name: 'mebi', value: Math.pow(1024, 2), scientific: true},\n\t      'gibi': {name: 'gibi', value: Math.pow(1024, 3), scientific: true},\n\t      'tebi': {name: 'tebi', value: Math.pow(1024, 4), scientific: true},\n\t      'pebi': {name: 'pebi', value: Math.pow(1024, 5), scientific: true},\n\t      'exi': {name: 'exi', value: Math.pow(1024, 6), scientific: true},\n\t      'zebi': {name: 'zebi', value: Math.pow(1024, 7), scientific: true},\n\t      'yobi': {name: 'yobi', value: Math.pow(1024, 8), scientific: true}\n\t    },\n\t    BTU: {\n\t      '':   {name: '',   value: 1,   scientific: true},\n\t      'MM': {name: 'MM', value: 1e6, scientific: true}\n\t    }\n\t  };\n\n\t  // Add a prefix list for both short and long prefixes (for ohm in particular, since Mohm and megaohm are both acceptable):\n\t  PREFIXES.SHORTLONG = {};\n\t  for (var key in PREFIXES.SHORT) {\n\t    if(PREFIXES.SHORT.hasOwnProperty(key)) {\n\t      PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];\n\t    }\n\t  }\n\t  for (var key in PREFIXES.LONG) {\n\t    if(PREFIXES.LONG.hasOwnProperty(key)) {\n\t      PREFIXES.SHORTLONG[key] = PREFIXES.LONG[key];\n\t    }\n\t  }\n\n\t  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n\t   * Index  Dimension\n\t   * -----  ---------\n\t   *   0    Length\n\t   *   1    Mass\n\t   *   2    Time\n\t   *   3    Current\n\t   *   4    Temperature\n\t   *   5    Luminous intensity\n\t   *   6    Amount of substance\n\t   *   7    Angle\n\t   *   8    Bit (digital)\n\t   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n\t   *\n\t   */\n\n\t  var BASE_DIMENSIONS = [\"MASS\", \"LENGTH\", \"TIME\", \"CURRENT\", \"TEMPERATURE\", \"LUMINOUS_INTENSITY\", \"AMOUNT_OF_SUBSTANCE\", \"ANGLE\", \"BIT\"];\n\n\t  var BASE_UNITS = {\n\t    NONE: {\n\t      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n\t    },\n\t    MASS: {\n\t      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n\t    },\n\t    LENGTH: {\n\t      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n\t    },\n\t    TIME: {\n\t      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n\t    },\n\t    CURRENT: {\n\t      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n\t    },\n\t    TEMPERATURE: {\n\t      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n\t    },\n\t    LUMINOUS_INTENSITY: {\n\t      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n\t    },\n\t    AMOUNT_OF_SUBSTANCE: {\n\t      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n\t    },\n\n\t    FORCE: {\n\t      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n\t    },\n\t    SURFACE: {\n\t      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n\t    },\n\t    VOLUME: {\n\t      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n\t    },\n\t    ENERGY: {\n\t      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n\t    },\n\t    POWER: {\n\t      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n\t    },\n\t    PRESSURE: {\n\t      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n\t    },\n\n\t    ELECTRIC_CHARGE: {\n\t      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n\t    },\n\t    ELECTRIC_CAPACITANCE: {\n\t      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n\t    },\n\t    ELECTRIC_POTENTIAL: {\n\t      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n\t    },\n\t    ELECTRIC_RESISTANCE: {\n\t      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n\t    },\n\t    ELECTRIC_INDUCTANCE: {\n\t      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n\t    },\n\t    ELECTRIC_CONDUCTANCE: {\n\t      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n\t    },\n\t    MAGNETIC_FLUX: {\n\t      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n\t    },\n\t    MAGNETIC_FLUX_DENSITY: {\n\t      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n\t    },\n\n\t    FREQUENCY: {\n\t      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n\t    },\n\t    ANGLE: {\n\t      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n\t    },\n\t    BIT: {\n\t      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n\t    }\n\t  };\n\n\t  for(var key in BASE_UNITS) {\n\t    BASE_UNITS[key].key = key;\n\t  }\n\n\t  var BASE_UNIT_NONE = {};\n\n\t  var UNIT_NONE = {name: '', base: BASE_UNIT_NONE, value: 1, offset: 0, dimensions: [0,0,0,0,0,0,0,0,0]};\n\n\t  var UNITS = {\n\t    // length\n\t    meter: {\n\t      name: 'meter',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    inch: {\n\t      name: 'inch',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0254,\n\t      offset: 0\n\t    },\n\t    foot: {\n\t      name: 'foot',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.3048,\n\t      offset: 0\n\t    },\n\t    yard: {\n\t      name: 'yard',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.9144,\n\t      offset: 0\n\t    },\n\t    mile: {\n\t      name: 'mile',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1609.344,\n\t      offset: 0\n\t    },\n\t    link: {\n\t      name: 'link',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.201168,\n\t      offset: 0\n\t    },\n\t    rod: {\n\t      name: 'rod',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 5.029210,\n\t      offset: 0\n\t    },\n\t    chain: {\n\t      name: 'chain',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 20.1168,\n\t      offset: 0\n\t    },\n\t    angstrom: {\n\t      name: 'angstrom',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1e-10,\n\t      offset: 0\n\t    },\n\n\t    m: {\n\t      name: 'm',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    'in': {\n\t      name: 'in',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0254,\n\t      offset: 0\n\t    },\n\t    ft: {\n\t      name: 'ft',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.3048,\n\t      offset: 0\n\t    },\n\t    yd: {\n\t      name: 'yd',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.9144,\n\t      offset: 0\n\t    },\n\t    mi: {\n\t      name: 'mi',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1609.344,\n\t      offset: 0\n\t    },\n\t    li: {\n\t      name: 'li',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.201168,\n\t      offset: 0\n\t    },\n\t    rd: {\n\t      name: 'rd',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 5.029210,\n\t      offset: 0\n\t    },\n\t    ch: {\n\t      name: 'ch',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 20.1168,\n\t      offset: 0\n\t    },\n\t    mil: {\n\t      name: 'mil',\n\t      base: BASE_UNITS.LENGTH,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0000254,\n\t      offset: 0\n\t    }, // 1/1000 inch\n\n\t    // Surface\n\t    m2: {\n\t      name: 'm2',\n\t      base: BASE_UNITS.SURFACE,\n\t      prefixes: PREFIXES.SQUARED,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    sqin: {\n\t      name: 'sqin',\n\t      base: BASE_UNITS.SURFACE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.00064516,\n\t      offset: 0\n\t    }, // 645.16 mm2\n\t    sqft: {\n\t      name: 'sqft',\n\t      base: BASE_UNITS.SURFACE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.09290304,\n\t      offset: 0\n\t    }, // 0.09290304 m2\n\t    sqyd: {\n\t      name: 'sqyd',\n\t      base: BASE_UNITS.SURFACE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.83612736,\n\t      offset: 0\n\t    }, // 0.83612736 m2\n\t    sqmi: {\n\t      name: 'sqmi',\n\t      base: BASE_UNITS.SURFACE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 2589988.110336,\n\t      offset: 0\n\t    }, // 2.589988110336 km2\n\t    sqrd: {\n\t      name: 'sqrd',\n\t      base: BASE_UNITS.SURFACE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 25.29295,\n\t      offset: 0\n\t    }, // 25.29295 m2\n\t    sqch: {\n\t      name: 'sqch',\n\t      base: BASE_UNITS.SURFACE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 404.6873,\n\t      offset: 0\n\t    }, // 404.6873 m2\n\t    sqmil: {\n\t      name: 'sqmil',\n\t      base: BASE_UNITS.SURFACE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 6.4516e-10,\n\t      offset: 0\n\t    }, // 6.4516 * 10^-10 m2\n\t    acre: {\n\t      name: 'acre',\n\t      base: BASE_UNITS.SURFACE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 4046.86,\n\t      offset: 0\n\t    }, // 4046.86 m2\n\t    hectare: {\n\t      name: 'hectare',\n\t      base: BASE_UNITS.SURFACE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 10000,\n\t      offset: 0\n\t    }, // 10000 m2\n\n\t    // Volume\n\t    m3: {\n\t      name: 'm3',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.CUBIC,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    L: {\n\t      name: 'L',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 0.001,\n\t      offset: 0\n\t    }, // litre\n\t    l: {\n\t      name: 'l',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 0.001,\n\t      offset: 0\n\t    }, // litre\n\t    litre: {\n\t      name: 'litre',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 0.001,\n\t      offset: 0\n\t    },\n\t    cuin: {\n\t      name: 'cuin',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1.6387064e-5,\n\t      offset: 0\n\t    }, // 1.6387064e-5 m3\n\t    cuft: {\n\t      name: 'cuft',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.028316846592,\n\t      offset: 0\n\t    }, // 28.316 846 592 L\n\t    cuyd: {\n\t      name: 'cuyd',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.764554857984,\n\t      offset: 0\n\t    }, // 764.554 857 984 L\n\t    teaspoon: {\n\t      name: 'teaspoon',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.000005,\n\t      offset: 0\n\t    }, // 5 mL\n\t    tablespoon: {\n\t      name: 'tablespoon',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.000015,\n\t      offset: 0\n\t    }, // 15 mL\n\t    //{name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n\t    drop: {\n\t      name: 'drop',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 5e-8,\n\t      offset: 0\n\t    },  // 0.05 mL = 5e-8 m3\n\t    gtt: {\n\t      name: 'gtt',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 5e-8,\n\t      offset: 0\n\t    },  // 0.05 mL = 5e-8 m3\n\n\t    // Liquid volume\n\t    minim: {\n\t      name: 'minim',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.00000006161152,\n\t      offset: 0\n\t    }, // 0.06161152 mL\n\t    fluiddram: {\n\t      name: 'fluiddram',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0000036966911,\n\t      offset: 0\n\t    },  // 3.696691 mL\n\t    fluidounce: {\n\t      name: 'fluidounce',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.00002957353,\n\t      offset: 0\n\t    }, // 29.57353 mL\n\t    gill: {\n\t      name: 'gill',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0001182941,\n\t      offset: 0\n\t    }, // 118.2941 mL\n\t    cc: {\n\t      name: 'cc',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1e-6,\n\t      offset: 0\n\t    }, // 1e-6 L\n\t    cup: {\n\t      name: 'cup',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0002365882,\n\t      offset: 0\n\t    }, // 236.5882 mL\n\t    pint: {\n\t      name: 'pint',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0004731765,\n\t      offset: 0\n\t    }, // 473.1765 mL\n\t    quart: {\n\t      name: 'quart',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0009463529,\n\t      offset: 0\n\t    }, // 946.3529 mL\n\t    gallon: {\n\t      name: 'gallon',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.003785412,\n\t      offset: 0\n\t    }, // 3.785412 L\n\t    beerbarrel: {\n\t      name: 'beerbarrel',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.1173478,\n\t      offset: 0\n\t    }, // 117.3478 L\n\t    oilbarrel: {\n\t      name: 'oilbarrel',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.1589873,\n\t      offset: 0\n\t    }, // 158.9873 L\n\t    hogshead: {\n\t      name: 'hogshead',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.2384810,\n\t      offset: 0\n\t    }, // 238.4810 L\n\n\t    //{name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n\t    fldr: {\n\t      name: 'fldr',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0000036966911,\n\t      offset: 0\n\t    },  // 3.696691 mL\n\t    floz: {\n\t      name: 'floz',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.00002957353,\n\t      offset: 0\n\t    }, // 29.57353 mL\n\t    gi: {\n\t      name: 'gi',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0001182941,\n\t      offset: 0\n\t    }, // 118.2941 mL\n\t    cp: {\n\t      name: 'cp',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0002365882,\n\t      offset: 0\n\t    }, // 236.5882 mL\n\t    pt: {\n\t      name: 'pt',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0004731765,\n\t      offset: 0\n\t    }, // 473.1765 mL\n\t    qt: {\n\t      name: 'qt',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.0009463529,\n\t      offset: 0\n\t    }, // 946.3529 mL\n\t    gal: {\n\t      name: 'gal',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.003785412,\n\t      offset: 0\n\t    }, // 3.785412 L\n\t    bbl: {\n\t      name: 'bbl',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.1173478,\n\t      offset: 0\n\t    }, // 117.3478 L\n\t    obl: {\n\t      name: 'obl',\n\t      base: BASE_UNITS.VOLUME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 0.1589873,\n\t      offset: 0\n\t    }, // 158.9873 L\n\t    //{name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n\n\t    // Mass\n\t    g: {\n\t      name: 'g',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 0.001,\n\t      offset: 0\n\t    },\n\t    gram: {\n\t      name: 'gram',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 0.001,\n\t      offset: 0\n\t    },\n\n\t    ton: {\n\t      name: 'ton',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 907.18474,\n\t      offset: 0\n\t    },\n\t    tonne: {\n\t      name: 'tonne',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1000,\n\t      offset: 0\n\t    },\n\n\t    grain: {\n\t      name: 'grain',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 64.79891e-6,\n\t      offset: 0\n\t    },\n\t    dram: {\n\t      name: 'dram',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1.7718451953125e-3,\n\t      offset: 0\n\t    },\n\t    ounce: {\n\t      name: 'ounce',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 28.349523125e-3,\n\t      offset: 0\n\t    },\n\t    poundmass: {\n\t      name: 'poundmass',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 453.59237e-3,\n\t      offset: 0\n\t    },\n\t    hundredweight: {\n\t      name: 'hundredweight',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 45.359237,\n\t      offset: 0\n\t    },\n\t    stick: {\n\t      name: 'stick',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 115e-3,\n\t      offset: 0\n\t    },\n\t    stone: {\n\t      name: 'stone',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 6.35029318,\n\t      offset: 0\n\t    },\n\n\t    gr: {\n\t      name: 'gr',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 64.79891e-6,\n\t      offset: 0\n\t    },\n\t    dr: {\n\t      name: 'dr',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1.7718451953125e-3,\n\t      offset: 0\n\t    },\n\t    oz: {\n\t      name: 'oz',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 28.349523125e-3,\n\t      offset: 0\n\t    },\n\t    lbm: {\n\t      name: 'lbm',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 453.59237e-3,\n\t      offset: 0\n\t    },\n\t    cwt: {\n\t      name: 'cwt',\n\t      base: BASE_UNITS.MASS,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 45.359237,\n\t      offset: 0\n\t    },\n\n\t    // Time\n\t    s: {\n\t      name: 's',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    min: {\n\t      name: 'min',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 60,\n\t      offset: 0\n\t    },\n\t    h: {\n\t      name: 'h',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 3600,\n\t      offset: 0\n\t    },\n\t    second: {\n\t      name: 'second',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    sec: {\n\t      name: 'sec',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    minute: {\n\t      name: 'minute',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 60,\n\t      offset: 0\n\t    },\n\t    hour: {\n\t      name: 'hour',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 3600,\n\t      offset: 0\n\t    },\n\t    day: {\n\t      name: 'day',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 86400,\n\t      offset: 0\n\t    },\n\t    week: {\n\t      name: 'week',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 7*86400,\n\t      offset: 0\n\t    },\n\t    month: {\n\t      name: 'month',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 2629800, //1/12th of Julian year\n\t      offset: 0\n\t    },\n\t    year: {\n\t      name: 'year',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 31557600, //Julian year\n\t      offset: 0\n\t    },\n\t    decade: {\n\t      name: 'year',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 315576000, //Julian decade\n\t      offset: 0\n\t    },\n\t    century: {\n\t      name: 'century',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 3155760000, //Julian century\n\t      offset: 0\n\t    },\n\t    millennium: {\n\t      name: 'millennium',\n\t      base: BASE_UNITS.TIME,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 31557600000, //Julian millennium\n\t      offset: 0\n\t    },\n\n\t    // Frequency\n\t    hertz: {\n\t      name: 'Hertz',\n\t      base: BASE_UNITS.FREQUENCY,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0,\n\t      reciprocal: true\n\t    },\n\t    Hz: {\n\t      name: 'Hz',\n\t      base: BASE_UNITS.FREQUENCY,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0,\n\t      reciprocal: true\n\t    },\n\n\t    // Angle\n\t    rad: {\n\t      name: 'rad',\n\t      base: BASE_UNITS.ANGLE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n\t    deg: {\n\t      name: 'deg',\n\t      base: BASE_UNITS.ANGLE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: null, // will be filled in by calculateAngleValues()\n\t      offset: 0\n\t    },\n\t    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n\t    grad: {\n\t      name: 'grad',\n\t      base: BASE_UNITS.ANGLE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: null, // will be filled in by calculateAngleValues()\n\t      offset: 0\n\t    },\n\t    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n\t    cycle: {\n\t      name: 'cycle',\n\t      base: BASE_UNITS.ANGLE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: null, // will be filled in by calculateAngleValues()\n\t      offset: 0\n\t    },\n\t    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n\t    arcsec: {\n\t      name: 'arcsec',\n\t      base: BASE_UNITS.ANGLE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: null, // will be filled in by calculateAngleValues()\n\t      offset: 0\n\t    },\n\t    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n\t    arcmin: {\n\t      name: 'arcmin',\n\t      base: BASE_UNITS.ANGLE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: null, // will be filled in by calculateAngleValues()\n\t      offset: 0\n\t    },\n\t    \n\t    // Electric current\n\t    A: {\n\t      name: 'A',\n\t      base: BASE_UNITS.CURRENT,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    ampere: {\n\t      name: 'ampere',\n\t      base: BASE_UNITS.CURRENT,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\n\t    // Temperature\n\t    // K(C) = °C + 273.15\n\t    // K(F) = (°F + 459.67) / 1.8\n\t    // K(R) = °R / 1.8\n\t    K: {\n\t      name: 'K',\n\t      base: BASE_UNITS.TEMPERATURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    degC: {\n\t      name: 'degC',\n\t      base: BASE_UNITS.TEMPERATURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1,\n\t      offset: 273.15\n\t    },\n\t    degF: {\n\t      name: 'degF',\n\t      base: BASE_UNITS.TEMPERATURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1 / 1.8,\n\t      offset: 459.67\n\t    },\n\t    degR: {\n\t      name: 'degR',\n\t      base: BASE_UNITS.TEMPERATURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1 / 1.8,\n\t      offset: 0\n\t    },\n\t    kelvin: {\n\t      name: 'kelvin',\n\t      base: BASE_UNITS.TEMPERATURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    celsius: {\n\t      name: 'celsius',\n\t      base: BASE_UNITS.TEMPERATURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1,\n\t      offset: 273.15\n\t    },\n\t    fahrenheit: {\n\t      name: 'fahrenheit',\n\t      base: BASE_UNITS.TEMPERATURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1 / 1.8,\n\t      offset: 459.67\n\t    },\n\t    rankine: {\n\t      name: 'rankine',\n\t      base: BASE_UNITS.TEMPERATURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1 / 1.8,\n\t      offset: 0\n\t    },\n\n\t    // amount of substance\n\t    mol: {\n\t      name: 'mol',\n\t      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    mole: {\n\t      name: 'mole',\n\t      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\n\t    // luminous intensity\n\t    cd: {\n\t      name: 'cd',\n\t      base: BASE_UNITS.LUMINOUS_INTENSITY,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    candela: {\n\t      name: 'candela',\n\t      base: BASE_UNITS.LUMINOUS_INTENSITY,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    // TODO: units STERADIAN\n\t    //{name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n\t    //{name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n\n\t    // Force\n\t    N: {\n\t      name: 'N',\n\t      base: BASE_UNITS.FORCE,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    newton: {\n\t      name: 'newton',\n\t      base: BASE_UNITS.FORCE,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    dyn: {\n\t      name: 'dyn',\n\t      base: BASE_UNITS.FORCE,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 0.00001,\n\t      offset: 0\n\t    },\n\t    dyne: {\n\t      name: 'dyne',\n\t      base: BASE_UNITS.FORCE,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 0.00001,\n\t      offset: 0\n\t    },\n\t    lbf: {\n\t      name: 'lbf',\n\t      base: BASE_UNITS.FORCE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 4.4482216152605,\n\t      offset: 0\n\t    },\n\t    poundforce: {\n\t      name: 'poundforce',\n\t      base: BASE_UNITS.FORCE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 4.4482216152605,\n\t      offset: 0\n\t    },\n\t    kip: {\n\t      name: 'kip',\n\t      base: BASE_UNITS.FORCE,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 4448.2216,\n\t      offset: 0\n\t    },\n\t\t\n\t    // Energy\n\t    J: {\n\t      name: 'J',\n\t      base: BASE_UNITS.ENERGY,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    joule: {\n\t      name: 'joule',\n\t      base: BASE_UNITS.ENERGY,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    erg: {\n\t      name: 'erg',\n\t      base: BASE_UNITS.ENERGY,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 1e-5,\n\t      offset: 0\n\t    },\n\t    Wh: {\n\t      name: 'Wh',\n\t      base: BASE_UNITS.ENERGY,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 3600,\n\t      offset: 0\n\t    },\n\t    BTU: {\n\t      name: 'BTU',\n\t      base: BASE_UNITS.ENERGY,\n\t      prefixes: PREFIXES.BTU,\n\t      value: 1055.05585262,\n\t      offset: 0\n\t    },\n\t    eV: {\n\t      name: 'eV',\n\t      base: BASE_UNITS.ENERGY,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1.602176565e-19,\n\t      offset: 0\n\t    },\n\t    electronvolt: {\n\t      name: 'electronvolt',\n\t      base: BASE_UNITS.ENERGY,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1.602176565e-19,\n\t      offset: 0\n\t    },\n\n\n\t    // Power\n\t    W: {\n\t      name: 'W',\n\t      base: BASE_UNITS.POWER,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    watt: {\n\t      name: 'W',\n\t      base: BASE_UNITS.POWER,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    hp: {\n\t      name: 'hp',\n\t      base: BASE_UNITS.POWER,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 745.6998715386,\n\t      offset: 0\n\t    },\n\n\t    // Electrical power units\n\t    VAR: {\n\t      name: 'VAR',\n\t      base: BASE_UNITS.POWER,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: Complex.I,\n\t      offset: 0\n\t    },\n\t    \n\t    VA: {\n\t      name: 'VA',\n\t      base: BASE_UNITS.POWER,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\n\t    // Pressure\n\t    Pa: {\n\t      name: 'Pa',\n\t      base: BASE_UNITS.PRESSURE,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    psi: {\n\t      name: 'psi',\n\t      base: BASE_UNITS.PRESSURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 6894.75729276459,\n\t      offset: 0\n\t    },\n\t    atm: {\n\t      name: 'atm',\n\t      base: BASE_UNITS.PRESSURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 101325,\n\t      offset: 0\n\t    },\n\t    bar: {\n\t      name: 'bar',\n\t      base: BASE_UNITS.PRESSURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 100000,\n\t      offset: 0\n\t    },\n\t    torr: {\n\t      name: 'torr',\n\t      base: BASE_UNITS.PRESSURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 133.322,\n\t      offset: 0\n\t    },\n\t    mmHg: {\n\t      name: 'mmHg',\n\t      base: BASE_UNITS.PRESSURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 133.322,\n\t      offset: 0\n\t    },\n\t    mmH2O: {\n\t      name: 'mmH2O',\n\t      base: BASE_UNITS.PRESSURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 9.80665,\n\t      offset: 0\n\t    },\n\t    cmH2O: {\n\t      name: 'cmH2O',\n\t      base: BASE_UNITS.PRESSURE,\n\t      prefixes: PREFIXES.NONE,\n\t      value: 98.0665,\n\t      offset: 0\n\t    },\n\n\t    // Electric charge\n\t    coulomb: {\n\t      name: 'coulomb',\n\t      base: BASE_UNITS.ELECTRIC_CHARGE,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    C: {\n\t      name: 'C',\n\t      base: BASE_UNITS.ELECTRIC_CHARGE,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    // Electric capacitance\n\t    farad: {\n\t      name: 'farad',\n\t      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    F: {\n\t      name: 'F',\n\t      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    // Electric potential\n\t    volt: {\n\t      name: 'volt',\n\t      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    V: {\n\t      name: 'V',\n\t      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    // Electric resistance\n\t    ohm: {\n\t      name: 'ohm',\n\t      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n\t      prefixes: PREFIXES.SHORTLONG,    // Both Mohm and megaohm are acceptable\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    /*\n\t     * Unicode breaks in browsers if charset is not specified\n\t    Ω: {\n\t      name: 'Ω',\n\t      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    */\n\t    // Electric inductance\n\t    henry: {\n\t      name: 'henry',\n\t      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    H: {\n\t      name: 'H',\n\t      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    // Electric conductance\n\t    siemens: {\n\t      name: 'siemens',\n\t      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    S: {\n\t      name: 'S',\n\t      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    // Magnetic flux\n\t    weber: {\n\t      name: 'weber',\n\t      base: BASE_UNITS.MAGNETIC_FLUX,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    Wb: {\n\t      name: 'Wb',\n\t      base: BASE_UNITS.MAGNETIC_FLUX,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    // Magnetic flux density\n\t    tesla: {\n\t      name: 'tesla',\n\t      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n\t      prefixes: PREFIXES.LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    T: {\n\t      name: 'T',\n\t      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n\t      prefixes: PREFIXES.SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\n\t    // Binary\n\t    b: {\n\t      name: 'b',\n\t      base: BASE_UNITS.BIT,\n\t      prefixes: PREFIXES.BINARY_SHORT,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    bits: {\n\t      name: 'bits',\n\t      base: BASE_UNITS.BIT,\n\t      prefixes: PREFIXES.BINARY_LONG,\n\t      value: 1,\n\t      offset: 0\n\t    },\n\t    B: {\n\t      name: 'B',\n\t      base: BASE_UNITS.BIT,\n\t      prefixes: PREFIXES.BINARY_SHORT,\n\t      value: 8,\n\t      offset: 0\n\t    },\n\t    bytes: {\n\t      name: 'bytes',\n\t      base: BASE_UNITS.BIT,\n\t      prefixes: PREFIXES.BINARY_LONG,\n\t      value: 8,\n\t      offset: 0\n\t    }\n\t  };\n\n\t  // aliases (formerly plurals)\n\t  var ALIASES = {\n\t    meters: 'meter',\n\t    inches: 'inch',\n\t    feet: 'foot',\n\t    yards: 'yard',\n\t    miles: 'mile',\n\t    links: 'link',\n\t    rods: 'rod',\n\t    chains: 'chain',\n\t    angstroms: 'angstrom',\n\n\t    lt: 'l',\n\t    litres: 'litre',\n\t    liter: 'litre',\n\t    liters: 'litre',\n\t    teaspoons: 'teaspoon',\n\t    tablespoons: 'tablespoon',\n\t    minims: 'minim',\n\t    fluiddrams: 'fluiddram',\n\t    fluidounces: 'fluidounce',\n\t    gills: 'gill',\n\t    cups: 'cup',\n\t    pints: 'pint',\n\t    quarts: 'quart',\n\t    gallons: 'gallon',\n\t    beerbarrels: 'beerbarrel',\n\t    oilbarrels: 'oilbarrel',\n\t    hogsheads: 'hogshead',\n\t    gtts: 'gtt',\n\n\t    grams: 'gram',\n\t    tons: 'ton',\n\t    tonnes: 'tonne',\n\t    grains: 'grain',\n\t    drams: 'dram',\n\t    ounces: 'ounce',\n\t    poundmasses: 'poundmass',\n\t    hundredweights: 'hundredweight',\n\t    sticks: 'stick',\n\t    lb: 'lbm',\n\t    lbs: 'lbm',\n\t\t\n\t    kips: 'kip',\n\n\t    acres: 'acre',\n\t    hectares: 'hectare',\n\t    sqfeet: 'sqft',\n\t    sqyard: 'sqyd',\n\t    sqmile: 'sqmi',\n\t    sqmiles: 'sqmi',\n\n\t    mmhg: 'mmHg',\n\t    mmh2o: 'mmH2O',\n\t    cmh2o: 'cmH2O',\n\n\t    seconds: 'second',\n\t    secs: 'second',\n\t    minutes: 'minute',\n\t    mins: 'minute',\n\t    hours: 'hour',\n\t    hr: 'hour',\n\t    hrs: 'hour',\n\t    days: 'day',\n\t    weeks: 'week',\n\t    months: 'month',\n\t    years: 'year',\n\n\t    hertz: 'hertz',\n\n\t    radians: 'rad',\n\t    degree: 'deg',\n\t    degrees: 'deg',\n\t    gradian: 'grad',\n\t    gradians: 'grad',\n\t    cycles: 'cycle',\n\t    arcsecond: 'arcsec',\n\t    arcseconds: 'arcsec',\n\t    arcminute: 'arcmin',\n\t    arcminutes: 'arcmin',\n\n\t    BTUs: 'BTU',\n\t    watts: 'watt',\n\t    joules: 'joule',\n\n\t    amperes: 'ampere',\n\t    coulombs: 'coulomb',\n\t    volts: 'volt',\n\t    ohms: 'ohm',\n\t    farads: 'farad',\n\t    webers: 'weber',\n\t    teslas: 'tesla',\n\t    electronvolts: 'electronvolt',\n\t    moles: 'mole'\n\n\t  };\n\n\t  /**\n\t   * Calculate the values for the angle units.\n\t   * Value is calculated as number or BigNumber depending on the configuration\n\t   * @param {{number: 'number' | 'BigNumber'}} config\n\t   */\n\t  function calculateAngleValues (config) {\n\t    if (config.number === 'BigNumber') {\n\t      var pi = constants.pi(type.BigNumber);\n\t      UNITS.rad.value = new type.BigNumber(1);\n\t      UNITS.deg.value = pi.div(180);        // 2 * pi / 360;\n\t      UNITS.grad.value = pi.div(200);       // 2 * pi / 400;\n\t      UNITS.cycle.value = pi.times(2);      // 2 * pi\n\t      UNITS.arcsec.value = pi.div(648000);  // 2 * pi / 360 / 3600\n\t      UNITS.arcmin.value = pi.div(10800);   // 2 * pi / 360 / 60\n\t    }\n\t    else { // number\n\t      UNITS.rad.value = 1;\n\t      UNITS.deg.value = Math.PI / 180;        // 2 * pi / 360;\n\t      UNITS.grad.value = Math.PI / 200;       // 2 * pi / 400;\n\t      UNITS.cycle.value = Math.PI * 2;        // 2 * pi\n\t      UNITS.arcsec.value = Math.PI / 648000;  // 2 * pi / 360 / 3600;\n\t      UNITS.arcmin.value = Math.PI / 10800;   // 2 * pi / 360 / 60;\n\t    }\n\t  }\n\n\t  // apply the angle values now\n\t  calculateAngleValues(config);\n\n\t  // recalculate the values on change of configuration\n\t  math.on('config', function (curr, prev) {\n\t    if (curr.number !== prev.number) {\n\t      calculateAngleValues(curr);\n\t    }\n\t  });\n\n\t  /**\n\t   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n\t   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n\t   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n\t   */\n\t  var UNIT_SYSTEMS = {\n\t    si: {\n\t      // Base units\n\t      NONE:                  {unit: UNIT_NONE, prefix: PREFIXES.NONE['']},\n\t      LENGTH:                {unit: UNITS.m,   prefix: PREFIXES.SHORT['']},\n\t      MASS:                  {unit: UNITS.g,   prefix: PREFIXES.SHORT['k']}, \n\t      TIME:                  {unit: UNITS.s,   prefix: PREFIXES.SHORT['']}, \n\t      CURRENT:               {unit: UNITS.A,   prefix: PREFIXES.SHORT['']}, \n\t      TEMPERATURE:           {unit: UNITS.K,   prefix: PREFIXES.SHORT['']}, \n\t      LUMINOUS_INTENSITY:    {unit: UNITS.cd,  prefix: PREFIXES.SHORT['']}, \n\t      AMOUNT_OF_SUBSTANCE:   {unit: UNITS.mol, prefix: PREFIXES.SHORT['']}, \n\t      ANGLE:                 {unit: UNITS.rad, prefix: PREFIXES.SHORT['']}, \n\t      BIT:                   {unit: UNITS.bit, prefix: PREFIXES.SHORT['']}, \n\n\t      // Derived units\n\t      FORCE:                 {unit: UNITS.N,   prefix: PREFIXES.SHORT['']}, \n\t      ENERGY:                {unit: UNITS.J,   prefix: PREFIXES.SHORT['']},\n\t      POWER:                 {unit: UNITS.W,   prefix: PREFIXES.SHORT['']},\n\t      PRESSURE:              {unit: UNITS.Pa,  prefix: PREFIXES.SHORT['']},\n\t      ELECTRIC_CHARGE:       {unit: UNITS.C,   prefix: PREFIXES.SHORT['']},\n\t      ELECTRIC_CAPACITANCE:  {unit: UNITS.F,   prefix: PREFIXES.SHORT['']},\n\t      ELECTRIC_POTENTIAL:    {unit: UNITS.V,   prefix: PREFIXES.SHORT['']},\n\t      ELECTRIC_RESISTANCE:   {unit: UNITS.ohm, prefix: PREFIXES.SHORT['']},\n\t      ELECTRIC_INDUCTANCE:   {unit: UNITS.H,   prefix: PREFIXES.SHORT['']},\n\t      ELECTRIC_CONDUCTANCE:  {unit: UNITS.S,   prefix: PREFIXES.SHORT['']},\n\t      MAGNETIC_FLUX:         {unit: UNITS.Wb,  prefix: PREFIXES.SHORT['']},\n\t      MAGNETIC_FLUX_DENSITY: {unit: UNITS.T,   prefix: PREFIXES.SHORT['']},\n\t      FREQUENCY:             {unit: UNITS.Hz,  prefix: PREFIXES.SHORT['']}\n\t    }\n\t  };\n\n\t  // Clone to create the other unit systems\n\t  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\t  UNIT_SYSTEMS.cgs.LENGTH = {unit: UNITS.m,   prefix: PREFIXES.SHORT['c']};\n\t  UNIT_SYSTEMS.cgs.MASS =   {unit: UNITS.g,   prefix: PREFIXES.SHORT['']};\n\t  UNIT_SYSTEMS.cgs.FORCE =  {unit: UNITS.dyn, prefix: PREFIXES.SHORT['']};\n\t  UNIT_SYSTEMS.cgs.ENERGY = {unit: UNITS.erg, prefix: PREFIXES.NONE['']};\n\t  // there are wholly 4 unique cgs systems for electricity and magnetism,\n\t  // so let's not worry about it unless somebody complains\n\t  \n\t  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\t  UNIT_SYSTEMS.us.LENGTH =      {unit: UNITS.ft,   prefix: PREFIXES.NONE['']};\n\t  UNIT_SYSTEMS.us.MASS =        {unit: UNITS.lbm,  prefix: PREFIXES.NONE['']};\n\t  UNIT_SYSTEMS.us.TEMPERATURE = {unit: UNITS.degF, prefix: PREFIXES.NONE['']};\n\t  UNIT_SYSTEMS.us.FORCE =       {unit: UNITS.lbf,  prefix: PREFIXES.NONE['']};\n\t  UNIT_SYSTEMS.us.ENERGY =      {unit: UNITS.BTU,  prefix: PREFIXES.BTU['']};\n\t  UNIT_SYSTEMS.us.POWER =       {unit: UNITS.hp,   prefix: PREFIXES.NONE['']};\n\t  UNIT_SYSTEMS.us.PRESSURE =    {unit: UNITS.psi,  prefix: PREFIXES.NONE['']};\n\n\t  // Add additional unit systems here.\n\n\n\n\t  // Choose a unit system to seed the auto unit system.\n\t  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\n\t  // Set the current unit system\n\t  var currentUnitSystem = UNIT_SYSTEMS.auto;\n\n\t  /**\n\t   * Set a unit system for formatting derived units.\n\t   * @param {string} [name] The name of the unit system.\n\t   */\n\t  Unit.setUnitSystem = function(name) {\n\t    if(UNIT_SYSTEMS.hasOwnProperty(name)) {\n\t      currentUnitSystem = UNIT_SYSTEMS[name];\n\t    }\n\t    else {\n\t      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n\t    }\n\t  };\n\n\t  /**\n\t   * Return the current unit system.\n\t   * @return {string} The current unit system.\n\t   */\n\t  Unit.getUnitSystem = function() {\n\t    for(var key in UNIT_SYSTEMS) {\n\t      if(UNIT_SYSTEMS[key] === currentUnitSystem) {\n\t        return key;\n\t      }\n\t    }\n\t  };\n\n\t  /**\n\t   * Converters to convert from number to an other numeric type like BigNumber\n\t   * or Fraction\n\t   */\n\t  Unit.typeConverters = {\n\t    BigNumber: function (x) {\n\t      return new type.BigNumber(x + ''); // stringify to prevent constructor error\n\t    },\n\n\t    Fraction: function (x) {\n\t      return new type.Fraction(x);\n\t    },\n\n\t    Complex: function (x) {\n\t      return x;\n\t    },\n\n\t    number: function (x) {\n\t      return x;\n\t    }\n\t  };\n\n\t  /**\n\t   * Retrieve the right convertor function corresponding with the type\n\t   * of provided exampleValue.\n\t   *\n\t   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n\t   *                        In case of an unknown type,\n\t   * @return {Function}\n\t   */\n\t  Unit._getNumberConverter = function (type) {\n\t    if (!Unit.typeConverters[type]) {\n\t      throw new TypeError('Unsupported type \"' + type + '\"');\n\t    }\n\n\t    return Unit.typeConverters[type];\n\t  };\n\n\t  // Add dimensions to each built-in unit\n\t  for (var key in UNITS) {\n\t    var unit = UNITS[key];\n\t    unit.dimensions = unit.base.dimensions;\n\t  }    \n\n\t  // Create aliases\n\t  for (var name in ALIASES) {\n\t    /* istanbul ignore next (we cannot really test next statement) */\n\t    if (ALIASES.hasOwnProperty(name)) {\n\t      var unit = UNITS[ALIASES[name]];\n\t      var alias = Object.create(unit);\n\t      alias.name = name;\n\t      UNITS[name] = alias;\n\t    }\n\t  }\n\n\t  Unit.PREFIXES = PREFIXES;\n\t  Unit.BASE_UNITS = BASE_UNITS;\n\t  Unit.UNITS = UNITS;\n\t  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n\n\t  return Unit;\n\t}\n\n\texports.name = 'Unit';\n\texports.path = 'type';\n\texports.factory = factory;\n\texports.math = true; // request access to the math namespace\n\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar memoize = __webpack_require__(45).memoize;\n\n\t/**\n\t * Calculate BigNumber e\n\t * @param {function} BigNumber   BigNumber constructor\n\t * @returns {BigNumber} Returns e\n\t */\n\texports.e = memoize(function (BigNumber) {\n\t  return new BigNumber(1).exp();\n\t}, hasher);\n\n\t/**\n\t * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2\n\t * @param {function} BigNumber   BigNumber constructor\n\t * @returns {BigNumber} Returns phi\n\t */\n\texports.phi = memoize(function (BigNumber) {\n\t  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);\n\t}, hasher);\n\n\t/**\n\t * Calculate BigNumber pi.\n\t * @param {function} BigNumber   BigNumber constructor\n\t * @returns {BigNumber} Returns pi\n\t */\n\texports.pi = memoize(function (BigNumber) {\n\t  return pi = BigNumber.acos(-1);\n\t}, hasher);\n\n\t/**\n\t * Calculate BigNumber tau, tau = 2 * pi\n\t * @param {function} BigNumber   BigNumber constructor\n\t * @returns {BigNumber} Returns tau\n\t */\n\texports.tau = memoize(function (BigNumber) {\n\t  return exports.pi(BigNumber).times(2);\n\t}, hasher);\n\n\t/**\n\t * Create a hash for a BigNumber constructor function. The created has is\n\t * the configured precision\n\t * @param {Array} args         Supposed to contain a single entry with\n\t *                             a BigNumber constructor\n\t * @return {number} precision\n\t * @private\n\t */\n\tfunction hasher (args) {\n\t  return args[0].precision;\n\t}\n\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var unaryMinus = load(__webpack_require__(78));\n\n\t  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  // TODO: split function subtract in two: subtract and subtractScalar\n\n\t  /**\n\t   * Subtract two values, `x - y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.subtract(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.subtract(5.3, 2);        // returns number 3.3\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    var b = math.complex(4, 1);\n\t   *    math.subtract(a, b);          // returns Complex -2 + 2i\n\t   *\n\t   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]\n\t   *\n\t   *    var c = math.unit('2.1 km');\n\t   *    var d = math.unit('500m');\n\t   *    math.subtract(c, d);          // returns Unit 1.6 km\n\t   *\n\t   * See also:\n\t   *\n\t   *    add\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n\t   *            Initial value\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n\t   *            Value to subtract from `x`\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t   *            Subtraction of `x` and `y`\n\t   */\n\t  var subtract = typed('subtract', {\n\n\t    'number, number': function (x, y) {\n\t      return x - y;\n\t    },\n\n\t    'Complex, Complex': function (x, y) {\n\t      return x.sub(y);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return x.minus(y);\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return x.sub(y);\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      if (x.value == null) {\n\t        throw new Error('Parameter x contains a unit with undefined value');\n\t      }\n\n\t      if (y.value == null) {\n\t        throw new Error('Parameter y contains a unit with undefined value');\n\t      }\n\n\t      if (!x.equalBase(y)) {\n\t        throw new Error('Units do not match');\n\t      }\n\n\t      var res = x.clone();\n\t      res.value = subtract(res.value, y.value);\n\t      res.fixPrefix = false;\n\n\t      return res;\n\t    },\n\t    \n\t    'Matrix, Matrix': function (x, y) {\n\t      // matrix sizes\n\t      var xsize = x.size();\n\t      var ysize = y.size();\n\n\t      // check dimensions\n\t      if (xsize.length !== ysize.length)\n\t        throw new DimensionError(xsize.length, ysize.length);\n\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse - sparse\n\t              c = algorithm05(x, y, subtract);\n\t              break;\n\t            default:\n\t              // sparse - dense\n\t              c = algorithm03(y, x, subtract, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense - sparse\n\t              c = algorithm01(x, y, subtract, false);\n\t              break;\n\t            default:\n\t              // dense - dense\n\t              c = algorithm13(x, y, subtract);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\t    \n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return subtract(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return subtract(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return subtract(x, matrix(y));\n\t    },\n\t    \n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          // algorithm 7 is faster than 9 since it calls f() for nonzero items only!\n\t          c = algorithm10(x, unaryMinus(y), addScalar);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, subtract);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm10(y, x, subtract, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, subtract, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, subtract, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, subtract, true).valueOf();\n\t    }\n\t  });\n\n\t  subtract.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return subtract;\n\t}\n\n\texports.name = 'subtract';\n\texports.factory = factory;\n\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Inverse the sign of a value, apply a unary minus operation.\n\t   *\n\t   * For matrices, the function is evaluated element wise. Boolean values and\n\t   * strings will be converted to a number. For complex numbers, both real and\n\t   * complex value are inverted.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.unaryMinus(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.unaryMinus(3.5);      // returns -3.5\n\t   *    math.unaryMinus(-4.2);     // returns 4.2\n\t   *\n\t   * See also:\n\t   *\n\t   *    add, subtract, unaryPlus\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n\t   */\n\t  var unaryMinus = typed('unaryMinus', {\n\t    'number': function (x) {\n\t      return -x;\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.neg();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.neg();\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.neg();\n\t    },\n\n\t    'Unit': function (x) {\n\t      var res = x.clone();\n\t      res.value = unaryMinus(x.value);\n\t      return res;\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since unaryMinus(0) = 0\n\t      return deepMap(x, unaryMinus, true);\n\t    }\n\n\t    // TODO: add support for string\n\t  });\n\n\t  unaryMinus.toTex = {\n\t    1: latex.operators['unaryMinus'] + '\\\\left(${args[0]}\\\\right)'\n\t  };\n\n\t  return unaryMinus;\n\t}\n\n\texports.name = 'unaryMinus';\n\texports.factory = factory;\n\n\n/***/ },\n/* 79 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var equalScalar = load(__webpack_require__(48));\n\t  \n\t  var SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n\t   */\n\t  var algorithm05 = function (a, b, callback) {\n\t    // sparse matrix arrays\n\t    var avalues = a._values;\n\t    var aindex = a._index;\n\t    var aptr = a._ptr;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // sparse matrix arrays\n\t    var bvalues = b._values;\n\t    var bindex = b._index;\n\t    var bptr = b._ptr;\n\t    var bsize = b._size;\n\t    var bdt = b._datatype;\n\n\t    // validate dimensions\n\t    if (asize.length !== bsize.length)\n\t      throw new DimensionError(asize.length, bsize.length);\n\n\t    // check rows & columns\n\t    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n\t      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string' && adt === bdt) {\n\t      // datatype\n\t      dt = adt;\n\t      // find signature that matches (dt, dt)\n\t      eq = typed.find(equalScalar, [dt, dt]);\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\n\t    // result arrays\n\t    var cvalues = avalues && bvalues ? [] : undefined;\n\t    var cindex = [];\n\t    var cptr = [];\n\t    // matrix\n\t    var c = new SparseMatrix({\n\t      values: cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\n\t    // workspaces\n\t    var xa = cvalues ? [] : undefined;\n\t    var xb = cvalues ? [] : undefined;\n\t    // marks indicating we have a value in x for a given column\n\t    var wa = [];\n\t    var wb = [];\n\n\t    // vars\n\t    var i, j, k, k1;\n\t    \n\t    // loop columns\n\t    for (j = 0; j < columns; j++) {\n\t      // update cptr\n\t      cptr[j] = cindex.length;\n\t      // columns mark\n\t      var mark = j + 1;\n\t      // loop values A(:,j)\n\t      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n\t        // row\n\t        i = aindex[k];\n\t        // push index\n\t        cindex.push(i);\n\t        // update workspace\n\t        wa[i] = mark;\n\t        // check we need to process values\n\t        if (xa)\n\t          xa[i] = avalues[k];\n\t      }\n\t      // loop values B(:,j)\n\t      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n\t        // row\n\t        i = bindex[k];\n\t        // check row existed in A\n\t        if (wa[i] !== mark) {\n\t          // push index\n\t          cindex.push(i);\n\t        }\n\t        // update workspace\n\t        wb[i] = mark;\n\t        // check we need to process values\n\t        if (xb)\n\t          xb[i] = bvalues[k];\n\t      }\n\t      // check we need to process values (non pattern matrix)\n\t      if (cvalues) {\n\t        // initialize first index in j\n\t        k = cptr[j];\n\t        // loop index in j\n\t        while (k < cindex.length) {\n\t          // row\n\t          i = cindex[k];\n\t          // marks\n\t          var wai = wa[i];\n\t          var wbi = wb[i];\n\t          // check Aij or Bij are nonzero\n\t          if (wai === mark || wbi === mark) {\n\t            // matrix values @ i,j\n\t            var va = wai === mark ? xa[i] : zero;\n\t            var vb = wbi === mark ? xb[i] : zero;\n\t            // Cij\n\t            var vc = cf(va, vb);\n\t            // check for zero\n\t            if (!eq(vc, zero)) {\n\t              // push value\n\t              cvalues.push(vc);\n\t              // increment pointer\n\t              k++;\n\t            }\n\t            else {\n\t              // remove value @ i, do not increment pointer\n\t              cindex.splice(k, 1);\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t    // update cptr\n\t    cptr[columns] = cindex.length;\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\n\t  return algorithm05;\n\t}\n\n\texports.name = 'algorithm05';\n\texports.factory = factory;\n\n\n/***/ },\n/* 80 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory(type, config, load, typed) {\n\t  \n\t  /**\n\t   * Multiply two scalar values, `x * y`.\n\t   * This function is meant for internal use: it is used by the public function\n\t   * `multiply`\n\t   *\n\t   * This function does not support collections (Array or Matrix), and does\n\t   * not validate the number of of inputs.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n\t   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`\n\t   * @private\n\t   */\n\t  var multiplyScalar = typed('multiplyScalar', {\n\n\t    'number, number': function (x, y) {\n\t      return x * y;\n\t    },\n\n\t    'Complex, Complex': function (x, y) {\n\t      return x.mul(y);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return x.times(y);\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return x.mul(y);\n\t    },\n\n\t    'number | Fraction | BigNumber | Complex, Unit': function (x, y) {\n\t      var res = y.clone();\n\t      res.value = (res.value === null) ? res._normalize(x) : multiplyScalar(res.value, x);\n\t      return res;\n\t    },\n\n\t    'Unit, number | Fraction | BigNumber | Complex': function (x, y) {\n\t      var res = x.clone();\n\t      res.value = (res.value === null) ? res._normalize(y) : multiplyScalar(res.value, y);\n\t      return res;\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      return x.multiply(y);\n\t    }\n\n\t  });\n\n\t  return multiplyScalar;\n\t}\n\n\texports.factory = factory;\n\n\n/***/ },\n/* 81 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory(type, config, load, typed) {\n\t  var multiplyScalar = load(__webpack_require__(80));\n\n\t  /**\n\t   * Divide two scalar values, `x / y`.\n\t   * This function is meant for internal use: it is used by the public functions\n\t   * `divide` and `inv`.\n\t   *\n\t   * This function does not support collections (Array or Matrix), and does\n\t   * not validate the number of of inputs.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n\t   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`\n\t   * @private\n\t   */\n\t  var divideScalar = typed('divide', {\n\t    'number, number': function (x, y) {\n\t      return x / y;\n\t    },\n\n\t    'Complex, Complex': function (x, y) {\n\t      return x.div(y);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return x.div(y);\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return x.div(y);\n\t    },\n\n\t    'Unit, number | Fraction | BigNumber': function (x, y) {\n\t      var res = x.clone();\n\t      // TODO: move the divide function to Unit.js, it uses internals of Unit\n\t      res.value = divideScalar(((res.value === null) ? res._normalize(1) : res.value), y);\n\t      return res;\n\t    },\n\n\t    'number | Fraction | BigNumber, Unit': function (x, y) {\n\t      var res = y.pow(-1);\n\t      // TODO: move the divide function to Unit.js, it uses internals of Unit\n\t      res.value = multiplyScalar(((res.value === null) ? res._normalize(1) : res.value), x);\n\t      return res;\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      return x.divide(y);\n\t    }\n\n\t  });\n\n\t  return divideScalar;\n\t}\n\n\texports.factory = factory;\n\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar size = __webpack_require__(40).size;\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\t  var eye = load(__webpack_require__(83));\n\t  var multiply = load(__webpack_require__(84));\n\t  var matrix = load(__webpack_require__(52));\n\t  var fraction = load(__webpack_require__(36));\n\t  var number = load(__webpack_require__(70));\n\n\t  /**\n\t   * Calculates the power of x to y, `x ^ y`.\n\t   * Matrix exponentiation is supported for square matrices `x`, and positive\n\t   * integer exponents `y`.\n\t   *\n\t   * For cubic roots of negative numbers, the function returns the principal\n\t   * root by default. In order to let the function return the real root,\n\t   * math.js can be configured with `math.config({predictable: true})`.\n\t   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.pow(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.pow(2, 3);               // returns number 8\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    math.pow(a, 2)                // returns Complex -5 + 12i\n\t   *\n\t   *    var b = [[1, 2], [4, 3]];\n\t   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, sqrt, cbrt, nthRoot\n\t   *\n\t   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base\n\t   * @param  {number | BigNumber | Complex} y                   The exponent\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n\t   */\n\t  var pow = typed('pow', {\n\t    'number, number': _pow,\n\n\t    'Complex, Complex': function (x, y) {\n\t      return x.pow(y);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      if (y.isInteger() || x >= 0 || config.predictable) {\n\t        return x.pow(y);\n\t      }\n\t      else {\n\t        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n\t      }\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      if (y.d !== 1) {\n\t        if (config.predictable) {\n\t          throw new Error('Function pow does not support non-integer exponents for fractions.');\n\t        }\n\t        else {\n\t          return _pow(x.valueOf(), y.valueOf());\n\t        }\n\t      }\n\t      else {\n\t        return x.pow(y);\n\t     }\n\t    },\n\n\t    'Array, number': _powArray,\n\n\t    'Array, BigNumber': function (x, y) {\n\t      return _powArray(x, y.toNumber());\n\t    },\n\n\t    'Matrix, number': _powMatrix,\n\n\t    'Matrix, BigNumber': function (x, y) {\n\t      return _powMatrix(x, y.toNumber());\n\t    },\n\n\t    'Unit, number': function (x, y) {\n\t      return x.pow(y);\n\t    }\n\n\t  });\n\n\t  /**\n\t   * Calculates the power of x to y, x^y, for two numbers.\n\t   * @param {number} x\n\t   * @param {number} y\n\t   * @return {number | Complex} res\n\t   * @private\n\t   */\n\t  function _pow(x, y) {\n\n\t    // Alternatively could define a 'realmode' config option or something, but\n\t    // 'predictable' will work for now\n\t    if (config.predictable && !isInteger(y) && x < 0) {\n\t      // Check to see if y can be represented as a fraction\n\t      try {\n\t        var yFrac = fraction(y);\n\t        var yNum = number(yFrac);\n\t        if(y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n\t          if(yFrac.d % 2 === 1) {\n\t            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n\t          }\n\t        }\n\t      }\n\t      catch (ex) {\n\t        // fraction() throws an error if y is Infinity, etc.\n\t      }\n\n\t      // Unable to express y as a fraction, so continue on\n\t    }\n\n\t    if (isInteger(y) || x >= 0 || config.predictable) {\n\t      return Math.pow(x, y);\n\t    }\n\t    else {\n\t      return new type.Complex(x, 0).pow(y, 0);\n\t    }\n\t  }\n\n\t  /**\n\t   * Calculate the power of a 2d array\n\t   * @param {Array} x     must be a 2 dimensional, square matrix\n\t   * @param {number} y    a positive, integer value\n\t   * @returns {Array}\n\t   * @private\n\t   */\n\t  function _powArray(x, y) {\n\t    if (!isInteger(y) || y < 0) {\n\t      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');\n\t    }\n\t    // verify that A is a 2 dimensional square matrix\n\t    var s = size(x);\n\t    if (s.length != 2) {\n\t      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n\t    }\n\t    if (s[0] != s[1]) {\n\t      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n\t    }\n\n\t    var res = eye(s[0]).valueOf();\n\t    var px = x;\n\t    while (y >= 1) {\n\t      if ((y & 1) == 1) {\n\t        res = multiply(px, res);\n\t      }\n\t      y >>= 1;\n\t      px = multiply(px, px);\n\t    }\n\t    return res;\n\t  }\n\n\t  /**\n\t   * Calculate the power of a 2d matrix\n\t   * @param {Matrix} x     must be a 2 dimensional, square matrix\n\t   * @param {number} y    a positive, integer value\n\t   * @returns {Matrix}\n\t   * @private\n\t   */\n\t  function _powMatrix (x, y) {\n\t    return matrix(_powArray(x.valueOf(), y));\n\t  }\n\n\n\n\t  pow.toTex = {\n\t    2: '\\\\left(${args[0]}\\\\right)' + latex.operators['pow'] + '{${args[1]}}'\n\t  };\n\n\t  return pow;\n\t}\n\n\texports.name = 'pow';\n\texports.factory = factory;\n\n\n/***/ },\n/* 83 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar array = __webpack_require__(40);\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  \n\t  /**\n\t   * Create a 2-dimensional identity matrix with size m x n or n x n.\n\t   * The matrix has ones on the diagonal and zeros elsewhere.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.eye(n)\n\t   *    math.eye(n, format)\n\t   *    math.eye(m, n)\n\t   *    math.eye(m, n, format)\n\t   *    math.eye([m, n])\n\t   *    math.eye([m, n], format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\t   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]\n\t   *\n\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    diag, ones, zeros, size, range\n\t   *\n\t   * @param {...number | Matrix | Array} size   The size for the matrix\n\t   * @param {string} [format]                   The Matrix storage format\n\t   *\n\t   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n\t   */\n\t  var eye = typed('eye', {\n\t    '': function () {\n\t      return (config.matrix === 'Matrix') ? matrix([]) : [];\n\t    },\n\n\t    'string': function (format) {\n\t      return matrix(format);\n\t    },\n\n\t    'number | BigNumber': function (rows) {\n\t      return _eye(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);\n\t    },\n\t    \n\t    'number | BigNumber, string': function (rows, format) {\n\t      return _eye(rows, rows, format);\n\t    },\n\n\t    'number | BigNumber, number | BigNumber': function (rows, cols) {\n\t      return _eye(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);\n\t    },\n\t    \n\t    'number | BigNumber, number | BigNumber, string': function (rows, cols, format) {\n\t      return _eye(rows, cols, format);\n\t    },\n\n\t    'Array':  function (size) {\n\t      return _eyeVector(size);\n\t    },\n\t    \n\t    'Array, string':  function (size, format) {\n\t      return _eyeVector(size, format);\n\t    },\n\n\t    'Matrix': function (size) {\n\t      return _eyeVector(size.valueOf(), size.storage());\n\t    },\n\t    \n\t    'Matrix, string': function (size, format) {\n\t      return _eyeVector(size.valueOf(), format);\n\t    }\n\t  });\n\n\t  eye.toTex = undefined; // use default template\n\n\t  return eye;\n\n\t  function _eyeVector (size, format) {\n\t    switch (size.length) {\n\t      case 0: return format ? matrix(format) : [];\n\t      case 1: return _eye(size[0], size[0], format);\n\t      case 2: return _eye(size[0], size[1], format);\n\t      default: throw new Error('Vector containing two values expected');\n\t    }\n\t  }\n\n\t  /**\n\t   * Create an identity matrix\n\t   * @param {number | BigNumber} rows\n\t   * @param {number | BigNumber} cols\n\t   * @param {string} [format]\n\t   * @returns {Matrix}\n\t   * @private\n\t   */\n\t  function _eye (rows, cols, format) {\n\t    // BigNumber constructor with the right precision\n\t    var Big = (rows && rows.isBigNumber === true)\n\t        ? type.BigNumber\n\t        : (cols && cols.isBigNumber === true)\n\t            ? type.BigNumber\n\t            : null;\n\n\t    if (rows && rows.isBigNumber === true) rows = rows.toNumber();\n\t    if (cols && cols.isBigNumber === true) cols = cols.toNumber();\n\n\t    if (!isInteger(rows) || rows < 1) {\n\t      throw new Error('Parameters in function eye must be positive integers');\n\t    }\n\t    if (!isInteger(cols) || cols < 1) {\n\t      throw new Error('Parameters in function eye must be positive integers');\n\t    }\n\t    \n\t    var one = Big ? new type.BigNumber(1) : 1;\n\t    var defaultValue = Big ? new Big(0) : 0;\n\t    var size = [rows, cols];\n\t    \n\t    // check we need to return a matrix\n\t    if (format) {\n\t      // get matrix storage constructor\n\t      var F = type.Matrix.storage(format);\n\t      // create diagonal matrix (use optimized implementation for storage format)\n\t      return F.diagonal(size, one, 0, defaultValue);\n\t    }\n\t    \n\t    // create and resize array\n\t    var res = array.resize([], size, defaultValue);\n\t    // fill in ones on the diagonal\n\t    var minimum = rows < cols ? rows : cols;\n\t    // fill diagonal\n\t    for (var d = 0; d < minimum; d++) {\n\t      res[d][d] = one;\n\t    }\n\t    return res;\n\t  }\n\t}\n\n\texports.name = 'eye';\n\texports.factory = factory;\n\n\n/***/ },\n/* 84 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar extend = __webpack_require__(3).extend;\n\tvar array = __webpack_require__(40);\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var equalScalar = load(__webpack_require__(48));\n\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  var DenseMatrix = type.DenseMatrix;\n\t  var SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Multiply two values, `x * y`.\n\t   * For matrices, the matrix product is calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.multiply(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.multiply(4, 5.2);        // returns number 20.8\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    var b = math.complex(4, 1);\n\t   *    math.multiply(a, b);          // returns Complex 5 + 14i\n\t   *\n\t   *    var c = [[1, 2], [4, 3]];\n\t   *    var d = [[1, 2, 3], [3, -4, 7]];\n\t   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]\n\t   *\n\t   *    var e = math.unit('2.1 km');\n\t   *    math.multiply(3, e);          // returns Unit 6.3 km\n\t   *\n\t   * See also:\n\t   *\n\t   *    divide\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n\t   */\n\t  var multiply = typed('multiply', extend({\n\t    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n\n\t    'Array, Array': function (x, y) {\n\t      // check dimensions\n\t      _validateMatrixDimensions(array.size(x), array.size(y));\n\n\t      // use dense matrix implementation\n\t      var m = multiply(matrix(x), matrix(y));\n\t      // return array or scalar\n\t      return (m && m.isMatrix === true) ? m.valueOf() : m;\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // dimensions\n\t      var xsize = x.size();\n\t      var ysize = y.size();\n\n\t      // check dimensions\n\t      _validateMatrixDimensions(xsize, ysize);\n\n\t      // process dimensions\n\t      if (xsize.length === 1) {\n\t        // process y dimensions\n\t        if (ysize.length === 1) {\n\t          // Vector * Vector\n\t          return _multiplyVectorVector(x, y, xsize[0]);\n\t        }\n\t        // Vector * Matrix\n\t        return _multiplyVectorMatrix(x, y);\n\t      }\n\t      // process y dimensions\n\t      if (ysize.length === 1) {\n\t        // Matrix * Vector\n\t        return _multiplyMatrixVector(x, y);\n\t      }\n\t      // Matrix * Matrix\n\t      return _multiplyMatrixMatrix(x, y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use Matrix * Matrix implementation\n\t      return multiply(x, matrix(y));\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use Matrix * Matrix implementation\n\t      return multiply(matrix(x, y.storage()), y);\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      \n\t      // process storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, multiplyScalar, false);\n\t          break;\n\t        case 'dense':\n\t          c = algorithm14(x, y, multiplyScalar, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(y, x, multiplyScalar, true);\n\t          break;\n\t        case 'dense':\n\t          c = algorithm14(y, x, multiplyScalar, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n\t    }\n\t  }, multiplyScalar.signatures));\n\n\t  var _validateMatrixDimensions = function (size1, size2) {\n\t    // check left operand dimensions\n\t    switch (size1.length) {\n\t      case 1:\n\t        // check size2\n\t        switch (size2.length) {\n\t          case 1:\n\t            // Vector x Vector\n\t            if (size1[0] !== size2[0]) {\n\t              // throw error\n\t              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n\t            }\n\t            break;\n\t          case 2:\n\t            // Vector x Matrix\n\t            if (size1[0] !== size2[0]) {\n\t              // throw error\n\t              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n\t            }\n\t            break;\n\t          default:\n\t            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n\t        }\n\t        break;\n\t      case 2:\n\t        // check size2\n\t        switch (size2.length) {\n\t          case 1:\n\t            // Matrix x Vector\n\t            if (size1[1] !== size2[0]) {\n\t              // throw error\n\t              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n\t            }\n\t            break;\n\t          case 2:\n\t            // Matrix x Matrix\n\t            if (size1[1] !== size2[0]) {\n\t              // throw error\n\t              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n\t            }\n\t            break;\n\t          default:\n\t            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n\t        }\n\t        break;\n\t      default:\n\t        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n\t    }\n\t  };\n\n\t  /**\n\t   * C = A * B\n\t   *\n\t   * @param {Matrix} a            Dense Vector   (N)\n\t   * @param {Matrix} b            Dense Vector   (N)\n\t   *\n\t   * @return {number}             Scalar value\n\t   */\n\t  var _multiplyVectorVector = function (a, b, n) {\n\t    // check empty vector\n\t    if (n === 0)\n\t      throw new Error('Cannot multiply two empty vectors');\n\n\t    // a dense\n\t    var adata = a._data;\n\t    var adt = a._datatype;\n\t    // b dense\n\t    var bdata = b._data;\n\t    var bdt = b._datatype;\n\n\t    // datatype\n\t    var dt;\n\t    // addScalar signature to use\n\t    var af = addScalar;\n\t    // multiplyScalar signature to use\n\t    var mf = multiplyScalar;\n\n\t    // process data types\n\t    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // find signatures that matches (dt, dt)\n\t      af = typed.find(addScalar, [dt, dt]);\n\t      mf = typed.find(multiplyScalar, [dt, dt]);\n\t    }\n\t    \n\t    // result (do not initialize it with zero)\n\t    var c = mf(adata[0], bdata[0]);\n\t    // loop data\n\t    for (var i = 1; i < n; i++) {\n\t      // multiply and accumulate\n\t      c = af(c, mf(adata[i], bdata[i]));\n\t    }\n\t    return c;\n\t  };\n\n\t  /**\n\t   * C = A * B\n\t   *\n\t   * @param {Matrix} a            Dense Vector   (M)\n\t   * @param {Matrix} b            Matrix         (MxN)\n\t   *\n\t   * @return {Matrix}             Dense Vector   (N)\n\t   */\n\t  var _multiplyVectorMatrix = function (a, b) {\n\t    // process storage\n\t    switch (b.storage()) {\n\t      case 'dense':\n\t        return _multiplyVectorDenseMatrix(a, b);\n\t    }\n\t    throw new Error('Not implemented');\n\t  };\n\n\t  /**\n\t   * C = A * B\n\t   *\n\t   * @param {Matrix} a            Dense Vector   (M)\n\t   * @param {Matrix} b            Dense Matrix   (MxN)\n\t   *\n\t   * @return {Matrix}             Dense Vector   (N)\n\t   */\n\t  var _multiplyVectorDenseMatrix = function (a, b) {\n\t    // a dense\n\t    var adata = a._data;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // b dense\n\t    var bdata = b._data;\n\t    var bsize = b._size;\n\t    var bdt = b._datatype;\n\t    // rows & columns\n\t    var alength = asize[0];\n\t    var bcolumns = bsize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // addScalar signature to use\n\t    var af = addScalar;\n\t    // multiplyScalar signature to use\n\t    var mf = multiplyScalar;\n\n\t    // process data types\n\t    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // find signatures that matches (dt, dt)\n\t      af = typed.find(addScalar, [dt, dt]);\n\t      mf = typed.find(multiplyScalar, [dt, dt]);\n\t    }\n\n\t    // result\n\t    var c = [];\n\n\t    // loop matrix columns\n\t    for (var j = 0; j < bcolumns; j++) {\n\t      // sum (do not initialize it with zero)\n\t      var sum = mf(adata[0], bdata[0][j]);      \n\t      // loop vector\n\t      for (var i = 1; i < alength; i++) {\n\t        // multiply & accumulate\n\t        sum = af(sum, mf(adata[i], bdata[i][j]));\n\t      }\n\t      c[j] = sum;\n\t    }\n\n\t    // return matrix\n\t    return new DenseMatrix({\n\t      data: c,\n\t      size: [bcolumns],\n\t      datatype: dt\n\t    });\n\t  };\n\n\t  /**\n\t   * C = A * B\n\t   *\n\t   * @param {Matrix} a            Matrix         (MxN)\n\t   * @param {Matrix} b            Dense Vector   (N)\n\t   *\n\t   * @return {Matrix}             Dense Vector   (M)\n\t   */\n\t  var _multiplyMatrixVector = function (a, b) {\n\t    // process storage\n\t    switch (a.storage()) {\n\t      case 'dense':\n\t        return _multiplyDenseMatrixVector(a, b);\n\t      case 'sparse':\n\t        return _multiplySparseMatrixVector(a, b);\n\t    }\n\t  };\n\n\t  /**\n\t   * C = A * B\n\t   *\n\t   * @param {Matrix} a            Matrix         (MxN)\n\t   * @param {Matrix} b            Matrix         (NxC)\n\t   *\n\t   * @return {Matrix}             Matrix         (MxC)\n\t   */\n\t  var _multiplyMatrixMatrix = function (a, b) {\n\t    // process storage\n\t    switch (a.storage()) {\n\t      case 'dense':\n\t        // process storage\n\t        switch (b.storage()) {\n\t          case 'dense':\n\t            return _multiplyDenseMatrixDenseMatrix(a, b);\n\t          case 'sparse':\n\t            return _multiplyDenseMatrixSparseMatrix(a, b);\n\t        }\n\t        break;\n\t      case 'sparse':\n\t        // process storage\n\t        switch (b.storage()) {\n\t          case 'dense':\n\t            return _multiplySparseMatrixDenseMatrix(a, b);\n\t          case 'sparse':\n\t            return _multiplySparseMatrixSparseMatrix(a, b);\n\t        }\n\t        break;\n\t    }\n\t  };\n\n\t  /**\n\t   * C = A * B\n\t   *\n\t   * @param {Matrix} a            DenseMatrix  (MxN)\n\t   * @param {Matrix} b            Dense Vector (N)\n\t   *\n\t   * @return {Matrix}             Dense Vector (M) \n\t   */ \n\t  var _multiplyDenseMatrixVector = function (a, b) {\n\t    // a dense\n\t    var adata = a._data;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // b dense\n\t    var bdata = b._data;\n\t    var bdt = b._datatype;\n\t    // rows & columns\n\t    var arows = asize[0];\n\t    var acolumns = asize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // addScalar signature to use\n\t    var af = addScalar;\n\t    // multiplyScalar signature to use\n\t    var mf = multiplyScalar;\n\n\t    // process data types\n\t    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // find signatures that matches (dt, dt)\n\t      af = typed.find(addScalar, [dt, dt]);\n\t      mf = typed.find(multiplyScalar, [dt, dt]);\n\t    }\n\n\t    // result\n\t    var c = [];\n\n\t    // loop matrix a rows\n\t    for (var i = 0; i < arows; i++) {\n\t      // current row\n\t      var row = adata[i];\n\t      // sum (do not initialize it with zero)\n\t      var sum = mf(row[0], bdata[0]);\n\t      // loop matrix a columns\n\t      for (var j = 1; j < acolumns; j++) {\n\t        // multiply & accumulate\n\t        sum = af(sum, mf(row[j], bdata[j]));\n\t      }\n\t      c[i] = sum;\n\t    }\n\n\t    // return matrix\n\t    return new DenseMatrix({\n\t      data: c,\n\t      size: [arows],\n\t      datatype: dt\n\t    });\n\t  };\n\n\t  /**\n\t   * C = A * B\n\t   *\n\t   * @param {Matrix} a            DenseMatrix    (MxN)\n\t   * @param {Matrix} b            DenseMatrix    (NxC)\n\t   *\n\t   * @return {Matrix}             DenseMatrix    (MxC)\n\t   */\n\t  var _multiplyDenseMatrixDenseMatrix = function (a, b) {\n\t    // a dense\n\t    var adata = a._data;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // b dense\n\t    var bdata = b._data;\n\t    var bsize = b._size;\n\t    var bdt = b._datatype;\n\t    // rows & columns\n\t    var arows = asize[0];\n\t    var acolumns = asize[1];\n\t    var bcolumns = bsize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // addScalar signature to use\n\t    var af = addScalar;\n\t    // multiplyScalar signature to use\n\t    var mf = multiplyScalar;\n\n\t    // process data types\n\t    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // find signatures that matches (dt, dt)\n\t      af = typed.find(addScalar, [dt, dt]);\n\t      mf = typed.find(multiplyScalar, [dt, dt]);\n\t    }\n\t    \n\t    // result\n\t    var c = [];\n\n\t    // loop matrix a rows\n\t    for (var i = 0; i < arows; i++) {\n\t      // current row\n\t      var row = adata[i];\n\t      // initialize row array\n\t      c[i] = [];\n\t      // loop matrix b columns\n\t      for (var j = 0; j < bcolumns; j++) {\n\t        // sum (avoid initializing sum to zero)\n\t        var sum = mf(row[0], bdata[0][j]);\n\t        // loop matrix a columns\n\t        for (var x = 1; x < acolumns; x++) {\n\t          // multiply & accumulate\n\t          sum = af(sum, mf(row[x], bdata[x][j]));\n\t        }\n\t        c[i][j] = sum;\n\t      }\n\t    }\n\n\t    // return matrix\n\t    return new DenseMatrix({\n\t      data: c,\n\t      size: [arows, bcolumns],\n\t      datatype: dt\n\t    });\n\t  };\n\n\t  /**\n\t   * C = A * B\n\t   *\n\t   * @param {Matrix} a            DenseMatrix    (MxN)\n\t   * @param {Matrix} b            SparseMatrix   (NxC)\n\t   *\n\t   * @return {Matrix}             SparseMatrix   (MxC)\n\t   */\n\t  var _multiplyDenseMatrixSparseMatrix = function (a, b) {\n\t    // a dense\n\t    var adata = a._data;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // b sparse\n\t    var bvalues = b._values;\n\t    var bindex = b._index;\n\t    var bptr = b._ptr;\n\t    var bsize = b._size;\n\t    var bdt = b._datatype;\n\t    // validate b matrix\n\t    if (!bvalues)\n\t      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n\t    // rows & columns\n\t    var arows = asize[0];\n\t    var bcolumns = bsize[1];\n\t    \n\t    // datatype\n\t    var dt;\n\t    // addScalar signature to use\n\t    var af = addScalar;\n\t    // multiplyScalar signature to use\n\t    var mf = multiplyScalar;\n\t    // equalScalar signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\n\t    // process data types\n\t    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // find signatures that matches (dt, dt)\n\t      af = typed.find(addScalar, [dt, dt]);\n\t      mf = typed.find(multiplyScalar, [dt, dt]);\n\t      eq = typed.find(equalScalar, [dt, dt]);\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t    }\n\n\t    // result\n\t    var cvalues = [];\n\t    var cindex = [];\n\t    var cptr = [];\n\t    // c matrix\n\t    var c = new SparseMatrix({\n\t      values : cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [arows, bcolumns],\n\t      datatype: dt\n\t    });\n\n\t    // loop b columns\n\t    for (var jb = 0; jb < bcolumns; jb++) {\n\t      // update ptr\n\t      cptr[jb] = cindex.length;\n\t      // indeces in column jb\n\t      var kb0 = bptr[jb];\n\t      var kb1 = bptr[jb + 1];\n\t      // do not process column jb if no data exists\n\t      if (kb1 > kb0) {\n\t        // last row mark processed\n\t        var last = 0;\n\t        // loop a rows\n\t        for (var i = 0; i < arows; i++) {\n\t          // column mark\n\t          var mark = i + 1;\n\t          // C[i, jb]\n\t          var cij;\n\t          // values in b column j\n\t          for (var kb = kb0; kb < kb1; kb++) {\n\t            // row\n\t            var ib = bindex[kb];\n\t            // check value has been initialized\n\t            if (last !== mark) {\n\t              // first value in column jb\n\t              cij = mf(adata[i][ib], bvalues[kb]);\n\t              // update mark\n\t              last = mark;\n\t            }\n\t            else {\n\t              // accumulate value\n\t              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n\t            }\n\t          }\n\t          // check column has been processed and value != 0\n\t          if (last === mark && !eq(cij, zero)) {\n\t            // push row & value\n\t            cindex.push(i);\n\t            cvalues.push(cij);\n\t          }\n\t        }\n\t      }\n\t    }\n\t    // update ptr\n\t    cptr[bcolumns] = cindex.length;\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\n\t  /**\n\t   * C = A * B\n\t   *\n\t   * @param {Matrix} a            SparseMatrix    (MxN)\n\t   * @param {Matrix} b            Dense Vector (N)\n\t   *\n\t   * @return {Matrix}             SparseMatrix    (M, 1) \n\t   */\n\t  var _multiplySparseMatrixVector = function (a, b) {\n\t    // a sparse\n\t    var avalues = a._values;\n\t    var aindex = a._index;\n\t    var aptr = a._ptr;\n\t    var adt = a._datatype;\n\t    // validate a matrix\n\t    if (!avalues)\n\t      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n\t    // b dense\n\t    var bdata = b._data;\n\t    var bdt = b._datatype;\n\t    // rows & columns\n\t    var arows = a._size[0];\n\t    var brows = b._size[0];\n\t    // result\n\t    var cvalues = [];\n\t    var cindex = [];\n\t    var cptr = [];\n\t    \n\t    // datatype\n\t    var dt;\n\t    // addScalar signature to use\n\t    var af = addScalar;\n\t    // multiplyScalar signature to use\n\t    var mf = multiplyScalar;\n\t    // equalScalar signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\n\t    // process data types\n\t    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // find signatures that matches (dt, dt)\n\t      af = typed.find(addScalar, [dt, dt]);\n\t      mf = typed.find(multiplyScalar, [dt, dt]);\n\t      eq = typed.find(equalScalar, [dt, dt]);\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t    }\n\n\t    // workspace\n\t    var x = [];\n\t    // vector with marks indicating a value x[i] exists in a given column\n\t    var w = [];\n\n\t    // update ptr\n\t    cptr[0] = 0;\n\t    // rows in b\n\t    for (var ib = 0; ib < brows; ib++) {\n\t      // b[ib]\n\t      var vbi = bdata[ib];\n\t      // check b[ib] != 0, avoid loops\n\t      if (!eq(vbi, zero)) {\n\t        // A values & index in ib column\n\t        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n\t          // a row\n\t          var ia = aindex[ka];\n\t          // check value exists in current j\n\t          if (!w[ia]) {\n\t            // ia is new entry in j\n\t            w[ia] = true;\n\t            // add i to pattern of C\n\t            cindex.push(ia);\n\t            // x(ia) = A\n\t            x[ia] = mf(vbi, avalues[ka]);\n\t          }\n\t          else {\n\t            // i exists in C already\n\t            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n\t          }\n\t        }\n\t      }\n\t    }\n\t    // copy values from x to column jb of c\n\t    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n\t      // row\n\t      var ic = cindex[p];\n\t      // copy value\n\t      cvalues[p] = x[ic];\n\t    }\n\t    // update ptr\n\t    cptr[1] = cindex.length;\n\n\t    // return sparse matrix\n\t    return new SparseMatrix({\n\t      values : cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [arows, 1],\n\t      datatype: dt\n\t    });\n\t  };\n\n\t  /**\n\t   * C = A * B\n\t   *\n\t   * @param {Matrix} a            SparseMatrix      (MxN)\n\t   * @param {Matrix} b            DenseMatrix       (NxC)\n\t   *\n\t   * @return {Matrix}             SparseMatrix      (MxC)\n\t   */\n\t  var _multiplySparseMatrixDenseMatrix = function (a, b) {\n\t    // a sparse\n\t    var avalues = a._values;\n\t    var aindex = a._index;\n\t    var aptr = a._ptr;\n\t    var adt = a._datatype;\n\t    // validate a matrix\n\t    if (!avalues)\n\t      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n\t    // b dense\n\t    var bdata = b._data;\n\t    var bdt = b._datatype;\n\t    // rows & columns\n\t    var arows = a._size[0];\n\t    var brows = b._size[0];\n\t    var bcolumns = b._size[1];\n\n\t    // datatype\n\t    var dt;\n\t    // addScalar signature to use\n\t    var af = addScalar;\n\t    // multiplyScalar signature to use\n\t    var mf = multiplyScalar;\n\t    // equalScalar signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\n\t    // process data types\n\t    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // find signatures that matches (dt, dt)\n\t      af = typed.find(addScalar, [dt, dt]);\n\t      mf = typed.find(multiplyScalar, [dt, dt]);\n\t      eq = typed.find(equalScalar, [dt, dt]);\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t    }\n\n\t    // result\n\t    var cvalues = [];\n\t    var cindex = [];\n\t    var cptr = [];\n\t    // c matrix\n\t    var c = new SparseMatrix({\n\t      values : cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [arows, bcolumns],\n\t      datatype: dt\n\t    });\n\n\t    // workspace\n\t    var x = [];\n\t    // vector with marks indicating a value x[i] exists in a given column\n\t    var w = [];\n\n\t    // loop b columns\n\t    for (var jb = 0; jb < bcolumns; jb++) {\n\t      // update ptr\n\t      cptr[jb] = cindex.length;\n\t      // mark in workspace for current column\n\t      var mark = jb + 1;\n\t      // rows in jb\n\t      for (var ib = 0; ib < brows; ib++) {\n\t        // b[ib, jb]\n\t        var vbij = bdata[ib][jb];\n\t        // check b[ib, jb] != 0, avoid loops\n\t        if (!eq(vbij, zero)) {\n\t          // A values & index in ib column\n\t          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n\t            // a row\n\t            var ia = aindex[ka];\n\t            // check value exists in current j\n\t            if (w[ia] !== mark) {\n\t              // ia is new entry in j\n\t              w[ia] = mark;\n\t              // add i to pattern of C\n\t              cindex.push(ia);\n\t              // x(ia) = A\n\t              x[ia] = mf(vbij, avalues[ka]);\n\t            }\n\t            else {\n\t              // i exists in C already\n\t              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n\t            }\n\t          }\n\t        }\n\t      }\n\t      // copy values from x to column jb of c\n\t      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n\t        // row\n\t        var ic = cindex[p];\n\t        // copy value\n\t        cvalues[p] = x[ic];\n\t      }\n\t    }\n\t    // update ptr\n\t    cptr[bcolumns] = cindex.length;\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\n\t  /**\n\t   * C = A * B\n\t   *\n\t   * @param {Matrix} a            SparseMatrix      (MxN)\n\t   * @param {Matrix} b            SparseMatrix      (NxC)\n\t   *\n\t   * @return {Matrix}             SparseMatrix      (MxC)\n\t   */\n\t  var _multiplySparseMatrixSparseMatrix = function (a, b) {\n\t    // a sparse\n\t    var avalues = a._values;\n\t    var aindex = a._index;\n\t    var aptr = a._ptr;\n\t    var adt = a._datatype;\n\t    // b sparse\n\t    var bvalues = b._values;\n\t    var bindex = b._index;\n\t    var bptr = b._ptr;\n\t    var bdt = b._datatype;\n\t    \n\t    // rows & columns\n\t    var arows = a._size[0];\n\t    var bcolumns = b._size[1];\n\t    // flag indicating both matrices (a & b) contain data\n\t    var values = avalues && bvalues;\n\n\t    // datatype\n\t    var dt;\n\t    // addScalar signature to use\n\t    var af = addScalar;\n\t    // multiplyScalar signature to use\n\t    var mf = multiplyScalar;\n\n\t    // process data types\n\t    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // find signatures that matches (dt, dt)\n\t      af = typed.find(addScalar, [dt, dt]);\n\t      mf = typed.find(multiplyScalar, [dt, dt]);\n\t    }\n\t    \n\t    // result\n\t    var cvalues = values ? [] : undefined;\n\t    var cindex = [];\n\t    var cptr = [];\n\t    // c matrix\n\t    var c = new SparseMatrix({\n\t      values : cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [arows, bcolumns],\n\t      datatype: dt\n\t    });\n\n\t    // workspace\n\t    var x = values ? [] : undefined;\n\t    // vector with marks indicating a value x[i] exists in a given column\n\t    var w = [];\n\t    // variables\n\t    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;\n\t    // loop b columns\n\t    for (var jb = 0; jb < bcolumns; jb++) {\n\t      // update ptr\n\t      cptr[jb] = cindex.length;\n\t      // mark in workspace for current column\n\t      var mark = jb + 1;\n\t      // B values & index in j\n\t      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n\t        // b row\n\t        ib = bindex[kb];\n\t        // check we need to process values\n\t        if (values) {\n\t          // loop values in a[:,ib]\n\t          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n\t            // row\n\t            ia = aindex[ka];\n\t            // check value exists in current j\n\t            if (w[ia] !== mark) {\n\t              // ia is new entry in j\n\t              w[ia] = mark;\n\t              // add i to pattern of C\n\t              cindex.push(ia);\n\t              // x(ia) = A\n\t              x[ia] = mf(bvalues[kb], avalues[ka]);\n\t            }\n\t            else {\n\t              // i exists in C already\n\t              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n\t            }\n\t          }\n\t        }\n\t        else {\n\t          // loop values in a[:,ib]\n\t          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n\t            // row\n\t            ia = aindex[ka];\n\t            // check value exists in current j\n\t            if (w[ia] !== mark) {\n\t              // ia is new entry in j\n\t              w[ia] = mark;\n\t              // add i to pattern of C\n\t              cindex.push(ia);\n\t            }\n\t          }\n\t        }\n\t      }\n\t      // check we need to process matrix values (pattern matrix)\n\t      if (values) {\n\t        // copy values from x to column jb of c\n\t        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n\t          // row\n\t          var ic = cindex[p];\n\t          // copy value\n\t          cvalues[p] = x[ic];\n\t        }\n\t      }\n\t    }\n\t    // update ptr\n\t    cptr[bcolumns] = cindex.length;\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\n\t  multiply.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return multiply;\n\t}\n\n\texports.name = 'multiply';\n\texports.factory = factory;\n\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var equalScalar = load(__webpack_require__(48));\n\n\t  var SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t   * Callback function invoked NZ times (number of nonzero items in S).\n\t   *\n\t   *\n\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0          ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n\t   */\n\t  var algorithm11 = function (s, b, callback, inverse) {\n\t    // sparse matrix arrays\n\t    var avalues = s._values;\n\t    var aindex = s._index;\n\t    var aptr = s._ptr;\n\t    var asize = s._size;\n\t    var adt = s._datatype;\n\n\t    // sparse matrix cannot be a Pattern matrix\n\t    if (!avalues)\n\t      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string') {\n\t      // datatype\n\t      dt = adt;\n\t      // find signature that matches (dt, dt)\n\t      eq = typed.find(equalScalar, [dt, dt]);\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t      // convert b to the same datatype\n\t      b = typed.convert(b, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\n\t    // result arrays\n\t    var cvalues = [];\n\t    var cindex = [];\n\t    var cptr = [];\n\t    // matrix\n\t    var c = new SparseMatrix({\n\t      values: cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\n\t    // loop columns\n\t    for (var j = 0; j < columns; j++) {\n\t      // initialize ptr\n\t      cptr[j] = cindex.length;\n\t      // values in j\n\t      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t        // row\n\t        var i = aindex[k];\n\t        // invoke callback\n\t        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);\n\t        // check value is zero\n\t        if (!eq(v, zero)) {\n\t          // push index & value\n\t          cindex.push(i);\n\t          cvalues.push(v);\n\t        }\n\t      }\n\t    }\n\t    // update ptr\n\t    cptr[columns] = cindex.length;\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\n\t  return algorithm11;\n\t}\n\n\texports.name = 'algorithm11';\n\texports.factory = factory;\n\n\n/***/ },\n/* 86 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the absolute value of a number. For matrices, the function is\n\t   * evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.abs(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.abs(3.5);                // returns number 3.5\n\t   *    math.abs(-4.2);               // returns number 4.2\n\t   *\n\t   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]\n\t   *\n\t   * See also:\n\t   *\n\t   *    sign\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t   *            A number or matrix for which to get the absolute value\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n\t   *            Absolute value of `x`\n\t   */\n\t  var abs = typed('abs', {\n\t    'number': Math.abs,\n\n\t    'Complex': function (x) {\n\t      return x.abs();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.abs();\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.abs();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since abs(0) = 0\n\t      return deepMap(x, abs, true);\n\t    },\n\n\t    'Unit': function(x) {\n\t      return x.abs();\n\t    }\n\t  });\n\n\t  abs.toTex = {1: '\\\\left|${args[0]}\\\\right|'};\n\n\t  return abs;\n\t}\n\n\texports.name = 'abs';\n\texports.factory = factory;\n\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Test whether two values are equal.\n\t   *\n\t   * The function tests whether the relative difference between x and y is\n\t   * smaller than the configured epsilon. The function cannot be used to\n\t   * compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n\t   *\n\t   * Values `null` and `undefined` are compared strictly, thus `null` is only\n\t   * equal to `null` and nothing else, and `undefined` is only equal to\n\t   * `undefined` and nothing else.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.equal(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.equal(2 + 2, 3);         // returns false\n\t   *    math.equal(2 + 2, 4);         // returns true\n\t   *\n\t   *    var a = math.unit('50 cm');\n\t   *    var b = math.unit('5 m');\n\t   *    math.equal(a, b);             // returns true\n\t   *\n\t   *    var c = [2, 5, 1];\n\t   *    var d = [2, 7, 1];\n\t   *\n\t   *    math.equal(c, d);             // returns [true, false, true]\n\t   *    math.deepEqual(c, d);         // returns false\n\t   *\n\t   *    math.equal(0, null);          // returns false\n\t   *\n\t   * See also:\n\t   *\n\t   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual\n\t   *\n\t   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\n\t   */\n\t  var equal = typed('equal', {\n\t    \n\t    'any, any': function (x, y) {\n\t      // strict equality for null and undefined?\n\t      if (x === null) { return y === null; }\n\t      if (y === null) { return x === null; }\n\t      if (x === undefined) { return y === undefined; }\n\t      if (y === undefined) { return x === undefined; }\n\n\t      return equalScalar(x, y);\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm07(x, y, equalScalar);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm03(y, x, equalScalar, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm03(x, y, equalScalar, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, equalScalar);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\t    \n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return equal(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return equal(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return equal(x, matrix(y));\n\t    },\n\t    \n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(x, y, equalScalar, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, equalScalar, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, equalScalar, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, equalScalar, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, equalScalar, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, equalScalar, true).valueOf();\n\t    }\n\t  });\n\n\t  equal.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['equal'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return equal;\n\t}\n\n\texports.name = 'equal';\n\texports.factory = factory;\n\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is an numeric value.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isNumeric(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isNumeric(2);                     // returns true\n\t   *    math.isNumeric(0);                     // returns true\n\t   *    math.isNumeric(math.bignumber(500));   // returns true\n\t   *    math.isNumeric(math.fraction(4));      // returns true\n\t   *    math.isNumeric(math.complex('2-4i');   // returns false\n\t   *    math.isNumeric('3');                   // returns false\n\t   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isZero, isPositive, isNegative, isInteger\n\t   *\n\t   * @param {*} x       Value to be tested\n\t   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n\t   *                    `Fraction`, or `boolean`. Returns false for other types.\n\t   *                    Throws an error in case of unknown types.\n\t   */\n\t  var isNumeric = typed('isNumeric', {\n\t    'number | BigNumber | Fraction | boolean': function () {\n\t      return true;\n\t    },\n\n\t    'Complex | Unit | string': function () {\n\t      return false;\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, isNumeric);\n\t    }\n\t  });\n\n\t  return isNumeric;\n\t}\n\n\texports.name = 'isNumeric';\n\texports.factory = factory;\n\n\n/***/ },\n/* 89 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar string = __webpack_require__(23);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Format a value of any type into a string.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.format(value)\n\t   *    math.format(value, options)\n\t   *    math.format(value, precision)\n\t   *    math.format(value, callback)\n\t   *\n\t   * Where:\n\t   *\n\t   *  - `value: *`\n\t   *    The value to be formatted\n\t   *  - `options: Object`\n\t   *    An object with formatting options. Available options:\n\t   *    - `notation: string`\n\t   *      Number notation. Choose from:\n\t   *      - 'fixed'\n\t   *        Always use regular number notation.\n\t   *        For example '123.40' and '14000000'\n\t   *      - 'exponential'\n\t   *        Always use exponential notation.\n\t   *        For example '1.234e+2' and '1.4e+7'\n\t   *      - 'engineering'\n\t   *        Always use engineering notation.\n\t   *        For example '123.4e+0' and '14.0e+6'\n\t   *      - 'auto' (default)\n\t   *        Regular number notation for numbers having an absolute value between\n\t   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\n\t   *        Lower bound is included, upper bound is excluded.\n\t   *        For example '123.4' and '1.4e7'.\n\t   *    - `precision: number`\n\t   *      A number between 0 and 16 to round the digits of the number. In case\n\t   *      of notations 'exponential' and 'auto', `precision` defines the total\n\t   *      number of significant digits returned and is undefined by default.\n\t   *      In case of notation 'fixed', `precision` defines the number of\n\t   *      significant digits after the decimal point, and is 0 by default.\n\t   *    - `exponential: Object`\n\t   *      An object containing two parameters, {number} lower and {number} upper,\n\t   *      used by notation 'auto' to determine when to return exponential\n\t   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only\n\t   *      applicable for notation `auto`.\n\t   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.\n\t   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is\n\t   *      configured, and will output `0.(3)` when 'decimal' is configured.\n\t   * - `callback: function`\n\t   *   A custom formatting function, invoked for all numeric elements in `value`,\n\t   *   for example all elements of a matrix, or the real and imaginary\n\t   *   parts of a complex number. This callback can be used to override the\n\t   *   built-in numeric notation with any type of formatting. Function `callback`\n\t   *   is called with `value` as parameter and must return a string.\n\t   *\n\t   * When `value` is an Object:\n\t   *\n\t   * - When the object contains a property `format` being a function, this function\n\t   *   is invoked as `value.format(options)` and the result is returned.\n\t   * - When the object has its own `toString` method, this method is invoked\n\t   *   and the result is returned.\n\t   * - In other cases the function will loop over all object properties and\n\t   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n\t   *\n\t   * When value is a function:\n\t   *\n\t   * - When the function has a property `syntax`, it returns this\n\t   *   syntax description.\n\t   * - In other cases, a string `'function'` is returned.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.format(6.4);                                        // returns '6.4'\n\t   *    math.format(1240000);                                    // returns '1.24e6'\n\t   *    math.format(1/3);                                        // returns '0.3333333333333333'\n\t   *    math.format(1/3, 3);                                     // returns '0.333'\n\t   *    math.format(21385, 2);                                   // returns '21000'\n\t   *    math.format(12.071, {notation: 'fixed'});                // returns '12'\n\t   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'\n\t   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'\n\t   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'\n\t   *\n\t   *    function formatCurrency(value) {\n\t   *      // return currency notation with two digits:\n\t   *      return '$' + value.toFixed(2);\n\t   *\n\t   *      // you could also use math.format inside the callback:\n\t   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});\n\t   *    }\n\t   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'\n\t   *\n\t   * See also:\n\t   *\n\t   *    print\n\t   *\n\t   * @param {*} value                               Value to be stringified\n\t   * @param {Object | Function | number} [options]  Formatting options\n\t   * @return {string} The formatted value\n\t   */\n\t  var format = typed('format', {\n\t    'any': string.format,\n\t    'any, Object | function | number': string.format\n\t  });\n\n\t  format.toTex = undefined; // use default template\n\n\t  return format;\n\t}\n\n\texports.name = 'format';\n\texports.factory = factory;\n\n\n/***/ },\n/* 90 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar types = __webpack_require__(41);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Determine the type of a variable.\n\t   *\n\t   * Function `typeof` recognizes the following types of objects:\n\t   *\n\t   * Object                 | Returns       | Example\n\t   * ---------------------- | ------------- | ------------------------------------------\n\t   * null                   | `'null'`      | `math.typeof(null)`\n\t   * number                 | `'number'`    | `math.typeof(3.5)`\n\t   * boolean                | `'boolean'`   | `math.typeof (true)`\n\t   * string                 | `'string'`    | `math.typeof ('hello world')`\n\t   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`\n\t   * Date                   | `'Date'`      | `math.typeof (new Date())`\n\t   * Function               | `'Function'`  | `math.typeof (function () {})`\n\t   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`\n\t   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`\n\t   * undefined              | `'undefined'` | `math.typeof(undefined)`\n\t   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`\n\t   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`\n\t   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`\n\t   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`\n\t   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`\n\t   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`\n\t   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`\n\t   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`\n\t   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.typeof(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.typeof(3.5);                     // returns 'number'\n\t   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'\n\t   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'\n\t   *    math.typeof('hello world');           // returns 'string'\n\t   *\n\t   * @param {*} x     The variable for which to test the type.\n\t   * @return {string} Returns the name of the type. Primitive types are lower case,\n\t   *                  non-primitive types are upper-camel-case.\n\t   *                  For example 'number', 'string', 'Array', 'Date'.\n\t   */\n\t  var _typeof = typed('_typeof', {\n\t    'any': function (x) {\n\t      // JavaScript types\n\t      var t = types.type(x);\n\n\t      // math.js types\n\t      if (t === 'Object') {\n\t        if (x.isBigNumber === true) return 'BigNumber';\n\t        if (x.isComplex === true)   return 'Complex';\n\t        if (x.isFraction === true)  return 'Fraction';\n\t        if (x.isMatrix === true)    return 'Matrix';\n\t        if (x.isUnit === true)      return 'Unit';\n\t        if (x.isIndex === true)     return 'Index';\n\t        if (x.isRange === true)     return 'Range';\n\t        if (x.isChain === true)     return 'Chain';\n\t        if (x.isHelp === true)      return 'Help';\n\t      }\n\n\t      return t;\n\t    }\n\t  });\n\n\t  _typeof.toTex = undefined; // use default template\n\n\t  return _typeof;\n\t}\n\n\texports.name = 'typeof';\n\texports.factory = factory;\n\n\n/***/ },\n/* 91 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a unit. Depending on the passed arguments, the function\n\t   * will create and return a new math.type.Unit object.\n\t   * When a matrix is provided, all elements will be converted to units.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.unit(unit : string)\n\t   *     math.unit(value : number, unit : string)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm\n\t   *    var b = math.unit('23 kg');    // returns Unit 23 kg\n\t   *    a.to('m');                     // returns Unit 0.05 m\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, matrix, number, string\n\t   *\n\t   * @param {* | Array | Matrix} args   A number and unit.\n\t   * @return {Unit | Array | Matrix}    The created unit\n\t   */\n\n\t  var unit = typed('unit', {\n\t    'Unit': function (x) {\n\t      return x.clone();\n\t    },\n\n\t    'string': function (x) {\n\t      if (type.Unit.isValuelessUnit(x)) {\n\t        return new type.Unit(null, x); // a pure unit\n\t      }\n\n\t      return type.Unit.parse(x); // a unit with value, like '5cm'\n\t    },\n\n\t    'number | BigNumber | Fraction | Complex, string': function (value, unit) {\n\t      return new type.Unit(value, unit);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, unit);\n\t    }\n\t  });\n\n\t  unit.toTex = {\n\t    1: '\\\\left(${args[0]}\\\\right)',\n\t    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n\t  };\n\n\t  return unit;\n\t}\n\n\texports.name = 'unit';\n\texports.factory = factory;\n\n\n/***/ },\n/* 92 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar lazy = __webpack_require__(3).lazy;\n\n\n\tfunction factory (type, config, load, typed, math) {\n\n\t  // helper function to create a unit with a fixed prefix\n\t  function fixedUnit(str) {\n\t    var unit = type.Unit.parse(str);\n\t    unit.fixPrefix = true;\n\t    return unit;\n\t  }\n\n\t  // Source: http://www.wikiwand.com/en/Physical_constant\n\n\t  // Universal constants\n\t  lazy(math, 'speedOfLight',         function () {return fixedUnit('299792458 m s^-1')});\n\t  lazy(math, 'gravitationConstant',  function () {return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2')});\n\t  lazy(math, 'planckConstant',       function () {return fixedUnit('6.626069311e-34 J s')});\n\t  lazy(math, 'reducedPlanckConstant',function () {return fixedUnit('1.05457172647e-34 J s')});\n\n\t  // Electromagnetic constants\n\t  lazy(math, 'magneticConstant',          function () {return fixedUnit('1.2566370614e-6 N A^-2')});\n\t  lazy(math, 'electricConstant',          function () {return fixedUnit('8.854187817e-12 F m^-1')});\n\t  lazy(math, 'vacuumImpedance',           function () {return fixedUnit('376.730313461 ohm')});\n\t  lazy(math, 'coulomb',                   function () {return fixedUnit('8.9875517873681764e9 N m^2 C^-2')});\n\t  lazy(math, 'elementaryCharge',          function () {return fixedUnit('1.60217656535e-19 C')});\n\t  lazy(math, 'bohrMagneton',              function () {return fixedUnit('9.2740096820e-24 J T^-1')});\n\t  lazy(math, 'conductanceQuantum',        function () {return fixedUnit('7.748091734625e-5 S')});\n\t  lazy(math, 'inverseConductanceQuantum', function () {return fixedUnit('12906.403721742 ohm')});\n\t  lazy(math, 'magneticFluxQuantum',       function () {return fixedUnit('2.06783375846e-15 Wb')});\n\t  lazy(math, 'nuclearMagneton',           function () {return fixedUnit('5.0507835311e-27 J T^-1')});\n\t  lazy(math, 'klitzing',                  function () {return fixedUnit('25812.807443484 ohm')});\n\t  //lazy(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed\n\n\t  // Atomic and nuclear constants\n\t  lazy(math, 'bohrRadius',              function () {return fixedUnit('5.291772109217e-11 m')});\n\t  lazy(math, 'classicalElectronRadius', function () {return fixedUnit('2.817940326727e-15 m')});\n\t  lazy(math, 'electronMass',            function () {return fixedUnit('9.1093829140e-31 kg')});\n\t  lazy(math, 'fermiCoupling',           function () {return fixedUnit('1.1663645e-5 GeV^-2')});\n\t  lazy(math, 'fineStructure',           function () {return 7.297352569824e-3});\n\t  lazy(math, 'hartreeEnergy',           function () {return fixedUnit('4.3597443419e-18 J')});\n\t  lazy(math, 'protonMass',              function () {return fixedUnit('1.67262177774e-27 kg')});\n\t  lazy(math, 'deuteronMass',            function () {return fixedUnit('3.3435830926e-27 kg')});\n\t  lazy(math, 'neutronMass',             function () {return fixedUnit('1.6749271613e-27 kg')});\n\t  lazy(math, 'quantumOfCirculation',    function () {return fixedUnit('3.636947552024e-4 m^2 s^-1')});\n\t  lazy(math, 'rydberg',                 function () {return fixedUnit('10973731.56853955 m^-1')});\n\t  lazy(math, 'thomsonCrossSection',     function () {return fixedUnit('6.65245873413e-29 m^2')});\n\t  lazy(math, 'weakMixingAngle',         function () {return 0.222321});\n\t  lazy(math, 'efimovFactor',            function () {return 22.7});\n\n\t  // Physico-chemical constants\n\t  lazy(math, 'atomicMass',          function () {return fixedUnit('1.66053892173e-27 kg')});\n\t  lazy(math, 'avogadro',            function () {return fixedUnit('6.0221412927e23 mol^-1')});\n\t  lazy(math, 'boltzmann',           function () {return fixedUnit('1.380648813e-23 J K^-1')});\n\t  lazy(math, 'faraday',             function () {return fixedUnit('96485.336521 C mol^-1')});\n\t  lazy(math, 'firstRadiation',      function () {return fixedUnit('3.7417715317e-16 W m^2')});\n\t  // lazy(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance\n\t  lazy(math, 'loschmidt',           function () {return fixedUnit('2.686780524e25 m^-3')});\n\t  lazy(math, 'gasConstant',         function () {return fixedUnit('8.314462175 J K^-1 mol^-1')});\n\t  lazy(math, 'molarPlanckConstant', function () {return fixedUnit('3.990312717628e-10 J s mol^-1')});\n\t  lazy(math, 'molarVolume',         function () {return fixedUnit('2.241396820e-10 m^3 mol^-1')});\n\t  lazy(math, 'sackurTetrode',       function () {return -1.164870823});\n\t  lazy(math, 'secondRadiation',     function () {return fixedUnit('1.438777013e-2 m K')});\n\t  lazy(math, 'stefanBoltzmann',     function () {return fixedUnit('5.67037321e-8 W m^-2 K^-4')});\n\t  lazy(math, 'wienDisplacement',    function () {return fixedUnit('2.897772126e-3 m K')});\n\n\t  // Adopted values\n\t  lazy(math, 'molarMass',         function () {return fixedUnit('1e-3 kg mol^-1')});\n\t  lazy(math, 'molarMassC12',      function () {return fixedUnit('1.2e-2 kg mol^-1')});\n\t  lazy(math, 'gravity',           function () {return fixedUnit('9.80665 m s^-2')});\n\t  // atm is defined in Unit.js\n\n\t  // Natural units\n\t  lazy(math, 'planckLength',      function () {return fixedUnit('1.61619997e-35 m')});\n\t  lazy(math, 'planckMass',        function () {return fixedUnit('2.1765113e-8 kg')});\n\t  lazy(math, 'planckTime',        function () {return fixedUnit('5.3910632e-44 s')});\n\t  lazy(math, 'planckCharge',      function () {return fixedUnit('1.87554595641e-18 C')});\n\t  lazy(math, 'planckTemperature', function () {return fixedUnit('1.41683385e+32 K')});\n\n\t}\n\n\texports.factory = factory;\n\texports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\n\texports.math = true;   // request access to the math namespace\n\n\n/***/ },\n/* 93 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar object = __webpack_require__(3);\n\tvar bigConstants = __webpack_require__(76);\n\n\tfunction factory (type, config, load, typed, math) {\n\t  // listen for changed in the configuration, automatically reload\n\t  // constants when needed\n\t  math.on('config', function (curr, prev) {\n\t    if (curr.number !== prev.number) {\n\t      factory(type, config, load, typed, math);\n\t    }\n\t  });\n\n\t  math['true']     = true;\n\t  math['false']    = false;\n\t  math['null']     = null;\n\t  math['uninitialized'] = __webpack_require__(40).UNINITIALIZED;\n\n\t  if (config.number === 'BigNumber') {\n\t    math['Infinity'] = new type.BigNumber(Infinity);\n\t    math['NaN']      = new type.BigNumber(NaN);\n\n\t    object.lazy(math, 'pi',  function () {return bigConstants.pi(type.BigNumber)});\n\t    object.lazy(math, 'tau', function () {return bigConstants.tau(type.BigNumber)});\n\t    object.lazy(math, 'e',   function () {return bigConstants.e(type.BigNumber)});\n\t    object.lazy(math, 'phi', function () {return bigConstants.phi(type.BigNumber)}); // golden ratio, (1+sqrt(5))/2\n\n\t    // uppercase constants (for compatibility with built-in Math)\n\t    object.lazy(math, 'E',       function () {return math.e;});\n\t    object.lazy(math, 'LN2',     function () {return new type.BigNumber(2).ln();});\n\t    object.lazy(math, 'LN10',    function () {return new type.BigNumber(10).ln()});\n\t    object.lazy(math, 'LOG2E',   function () {return new type.BigNumber(1).div(new type.BigNumber(2).ln());});\n\t    object.lazy(math, 'LOG10E',  function () {return new type.BigNumber(1).div(new type.BigNumber(10).ln())});\n\t    object.lazy(math, 'PI',      function () {return math.pi});\n\t    object.lazy(math, 'SQRT1_2', function () {return new type.BigNumber('0.5').sqrt()});\n\t    object.lazy(math, 'SQRT2',   function () {return new type.BigNumber(2).sqrt()});\n\t  }\n\t  else {\n\t    math['Infinity'] = Infinity;\n\t    math['NaN']      = NaN;\n\n\t    math.pi  = Math.PI;\n\t    math.tau = Math.PI * 2;\n\t    math.e   = Math.E;\n\t    math.phi = 1.61803398874989484820458683436563811772030917980576286213545; // golden ratio, (1+sqrt(5))/2\n\n\t    // uppercase constants (for compatibility with built-in Math)\n\t    math.E           = math.e;\n\t    math.LN2         = Math.LN2;\n\t    math.LN10        = Math.LN10;\n\t    math.LOG2E       = Math.LOG2E;\n\t    math.LOG10E      = Math.LOG10E;\n\t    math.PI          = math.pi;\n\t    math.SQRT1_2     = Math.SQRT1_2;\n\t    math.SQRT2       = Math.SQRT2;\n\t  }\n\n\t  // complex i\n\t  math.i = type.Complex.I;\n\n\t  // meta information\n\t  math.version = __webpack_require__(94);\n\t}\n\n\texports.factory = factory;\n\texports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\n\texports.math = true;   // request access to the math namespace\n\n/***/ },\n/* 94 */\n/***/ function(module, exports) {\n\n\tmodule.exports = '3.2.1';\n\t// Note: This file is automatically generated when building math.js.\n\t// Changes made in this file will be overwritten.\n\n\n/***/ },\n/* 95 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(96),\n\t  __webpack_require__(268),\n\t  __webpack_require__(297),\n\t  __webpack_require__(299),\n\n\t  __webpack_require__(325),\n\t  __webpack_require__(270),\n\t  __webpack_require__(296)\n\t];\n\n\n/***/ },\n/* 96 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tfunction factory (construction, config, load, typed) {\n\t  var docs = {};\n\n\n\t  // construction functions\n\t  docs.bignumber = __webpack_require__(97);\n\t  docs['boolean'] = __webpack_require__(98);\n\t  docs.complex = __webpack_require__(99);\n\t  docs.fraction = __webpack_require__(100);\n\t  docs.index = __webpack_require__(101);\n\t  docs.matrix = __webpack_require__(102);\n\t  docs.number = __webpack_require__(103);\n\t  docs.sparse = __webpack_require__(104);\n\t  docs.string = __webpack_require__(105);\n\t  docs.unit = __webpack_require__(106);\n\n\t  // constants\n\t  docs.e = __webpack_require__(107);\n\t  docs.E = __webpack_require__(107);\n\t  docs['false'] = __webpack_require__(108);\n\t  docs.i = __webpack_require__(109);\n\t  docs['Infinity'] = __webpack_require__(110);\n\t  docs.LN2 = __webpack_require__(111);\n\t  docs.LN10 = __webpack_require__(112);\n\t  docs.LOG2E = __webpack_require__(113);\n\t  docs.LOG10E = __webpack_require__(114);\n\t  docs.NaN = __webpack_require__(115);\n\t  docs['null'] = __webpack_require__(116);\n\t  docs.pi = __webpack_require__(117);\n\t  docs.PI = __webpack_require__(117);\n\t  docs.phi = __webpack_require__(118);\n\t  docs.SQRT1_2 = __webpack_require__(119);\n\t  docs.SQRT2 = __webpack_require__(120);\n\t  docs.tau = __webpack_require__(121);\n\t  docs['true'] = __webpack_require__(122);\n\t  docs.version = __webpack_require__(123);\n\n\t  // physical constants\n\t  // TODO: more detailed docs for physical constants\n\t  docs.speedOfLight = {description: 'Speed of light in vacuum', examples: ['speedOfLight']};\n\t  docs.gravitationConstant = {description: 'Newtonian constant of gravitation', examples: ['gravitationConstant']};\n\t  docs.planckConstant = {description: 'Planck constant', examples: ['planckConstant']};\n\t  docs.reducedPlanckConstant = {description: 'Reduced Planck constant', examples: ['reducedPlanckConstant']};\n\n\t  docs.magneticConstant = {description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant']};\n\t  docs.electricConstant = {description: 'Electric constant (vacuum permeability)', examples: ['electricConstant']};\n\t  docs.vacuumImpedance = {description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance']};\n\t  docs.coulomb = {description: 'Coulomb\\'s constant', examples: ['coulomb']};\n\t  docs.elementaryCharge = {description: 'Elementary charge', examples: ['elementaryCharge']};\n\t  docs.bohrMagneton = {description: 'Borh magneton', examples: ['bohrMagneton']};\n\t  docs.conductanceQuantum = {description: 'Conductance quantum', examples: ['conductanceQuantum']};\n\t  docs.inverseConductanceQuantum = {description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']};\n\t  //docs.josephson = {description: 'Josephson constant', examples: ['josephson']};\n\t  docs.magneticFluxQuantum = {description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum']};\n\t  docs.nuclearMagneton = {description: 'Nuclear magneton', examples: ['nuclearMagneton']};\n\t  docs.klitzing = {description: 'Von Klitzing constant', examples: ['klitzing']};\n\n\t  docs.bohrRadius = {description: 'Borh radius', examples: ['bohrRadius']};\n\t  docs.classicalElectronRadius = {description: 'Classical electron radius', examples: ['classicalElectronRadius']};\n\t  docs.electronMass = {description: 'Electron mass', examples: ['electronMass']};\n\t  docs.fermiCoupling = {description: 'Fermi coupling constant', examples: ['fermiCoupling']};\n\t  docs.fineStructure = {description: 'Fine-structure constant', examples: ['fineStructure']};\n\t  docs.hartreeEnergy = {description: 'Hartree energy', examples: ['hartreeEnergy']};\n\t  docs.protonMass = {description: 'Proton mass', examples: ['protonMass']};\n\t  docs.deuteronMass = {description: 'Deuteron Mass', examples: ['deuteronMass']};\n\t  docs.neutronMass = {description: 'Neutron mass', examples: ['neutronMass']};\n\t  docs.quantumOfCirculation = {description: 'Quantum of circulation', examples: ['quantumOfCirculation']};\n\t  docs.rydberg = {description: 'Rydberg constant', examples: ['rydberg']};\n\t  docs.thomsonCrossSection = {description: 'Thomson cross section', examples: ['thomsonCrossSection']};\n\t  docs.weakMixingAngle = {description: 'Weak mixing angle', examples: ['weakMixingAngle']};\n\t  docs.efimovFactor = {description: 'Efimov factor', examples: ['efimovFactor']};\n\n\t  docs.atomicMass = {description: 'Atomic mass constant', examples: ['atomicMass']};\n\t  docs.avogadro = {description: 'Avogadro\\'s number', examples: ['avogadro']};\n\t  docs.boltzmann = {description: 'Boltzmann constant', examples: ['boltzmann']};\n\t  docs.faraday = {description: 'Faraday constant', examples: ['faraday']};\n\t  docs.firstRadiation = {description: 'First radiation constant', examples: ['firstRadiation']};\n\t  docs.loschmidt = {description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt']};\n\t  docs.gasConstant = {description: 'Gas constant', examples: ['gasConstant']};\n\t  docs.molarPlanckConstant = {description: 'Molar Planck constant', examples: ['molarPlanckConstant']};\n\t  docs.molarVolume = {description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume']};\n\t  docs.sackurTetrode = {description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode']};\n\t  docs.secondRadiation = {description: 'Second radiation constant', examples: ['secondRadiation']};\n\t  docs.stefanBoltzmann = {description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann']};\n\t  docs.wienDisplacement = {description: 'Wien displacement law constant', examples: ['wienDisplacement']};\n\t  //docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};\n\n\t  docs.molarMass = {description: 'Molar mass constant', examples: ['molarMass']};\n\t  docs.molarMassC12 = {description: 'Molar mass constant of carbon-12', examples: ['molarMassC12']};\n\t  docs.gravity = {description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity']};\n\n\t  docs.planckLength = {description: 'Planck length', examples: ['planckLength']};\n\t  docs.planckMass = {description: 'Planck mass', examples: ['planckMass']};\n\t  docs.planckTime = {description: 'Planck time', examples: ['planckTime']};\n\t  docs.planckCharge = {description: 'Planck charge', examples: ['planckCharge']};\n\t  docs.planckTemperature = {description: 'Planck temperature', examples: ['planckTemperature']};\n\n\t  // functions - algebra\n\t  docs.lsolve = __webpack_require__(124);\n\t  docs.lup = __webpack_require__(125);\n\t  docs.lusolve = __webpack_require__(126);\n\t  docs.slu = __webpack_require__(127);\n\t  docs.usolve = __webpack_require__(128);\n\n\t  // functions - arithmetic\n\t  docs.abs = __webpack_require__(129);\n\t  docs.add = __webpack_require__(130);\n\t  docs.cbrt = __webpack_require__(131);\n\t  docs.ceil = __webpack_require__(132);\n\t  docs.cube = __webpack_require__(133);\n\t  docs.divide = __webpack_require__(134);\n\t  docs.dotDivide = __webpack_require__(135);\n\t  docs.dotMultiply = __webpack_require__(136);\n\t  docs.dotPow = __webpack_require__(137);\n\t  docs.exp = __webpack_require__(138);\n\t  docs.fix = __webpack_require__(139);\n\t  docs.floor = __webpack_require__(140);\n\t  docs.gcd = __webpack_require__(141);\n\t  docs.hypot = __webpack_require__(142);\n\t  docs.lcm = __webpack_require__(143);\n\t  docs.log = __webpack_require__(144);\n\t  docs.log10 = __webpack_require__(145);\n\t  docs.mod = __webpack_require__(146);\n\t  docs.multiply = __webpack_require__(147);\n\t  docs.norm = __webpack_require__(148);\n\t  docs.nthRoot = __webpack_require__(149);\n\t  docs.pow = __webpack_require__(150);\n\t  docs.round = __webpack_require__(151);\n\t  docs.sign = __webpack_require__(152);\n\t  docs.sqrt = __webpack_require__(153);\n\t  docs.square = __webpack_require__(154);\n\t  docs.subtract = __webpack_require__(155);\n\t  docs.unaryMinus = __webpack_require__(156);\n\t  docs.unaryPlus = __webpack_require__(157);\n\t  docs.xgcd = __webpack_require__(158);\n\n\t  // functions - bitwise\n\t  docs.bitAnd = __webpack_require__(159);\n\t  docs.bitNot = __webpack_require__(160);\n\t  docs.bitOr = __webpack_require__(161);\n\t  docs.bitXor = __webpack_require__(162);\n\t  docs.leftShift = __webpack_require__(163);\n\t  docs.rightArithShift = __webpack_require__(164);\n\t  docs.rightLogShift = __webpack_require__(165);\n\n\t  // functions - combinatorics\n\t  docs.bellNumbers = __webpack_require__(166);\n\t  docs.catalan = __webpack_require__(167);\n\t  docs.composition = __webpack_require__(168);\n\t  docs.stirlingS2 = __webpack_require__(169);\n\n\t  // functions - core\n\t  docs['config'] =  __webpack_require__(170);\n\t  docs['import'] =  __webpack_require__(171);\n\t  docs['typed'] =  __webpack_require__(172);\n\n\t  // functions - complex\n\t  docs.arg = __webpack_require__(173);\n\t  docs.conj = __webpack_require__(174);\n\t  docs.re = __webpack_require__(175);\n\t  docs.im = __webpack_require__(176);\n\n\t  // functions - expression\n\t  docs['eval'] =  __webpack_require__(177);\n\t  docs.help =  __webpack_require__(178);\n\n\t  // functions - geometry\n\t  docs.distance = __webpack_require__(179);\n\t  docs.intersect = __webpack_require__(180);\n\n\t  // functions - logical\n\t  docs['and'] = __webpack_require__(181);\n\t  docs['not'] = __webpack_require__(182);\n\t  docs['or'] = __webpack_require__(183);\n\t  docs['xor'] = __webpack_require__(184);\n\n\t  // functions - matrix\n\t  docs['concat'] = __webpack_require__(185);\n\t  docs.cross = __webpack_require__(186);\n\t  docs.det = __webpack_require__(187);\n\t  docs.diag = __webpack_require__(188);\n\t  docs.dot = __webpack_require__(189);\n\t  docs.eye = __webpack_require__(190);\n\t  docs.filter =  __webpack_require__(191);\n\t  docs.flatten = __webpack_require__(192);\n\t  docs.forEach =  __webpack_require__(193);\n\t  docs.inv = __webpack_require__(194);\n\t  docs.map =  __webpack_require__(195);\n\t  docs.ones = __webpack_require__(196);\n\t  docs.partitionSelect =  __webpack_require__(197);\n\t  docs.range = __webpack_require__(198);\n\t  docs.resize = __webpack_require__(199);\n\t  docs.size = __webpack_require__(200);\n\t  docs.sort =  __webpack_require__(201);\n\t  docs.squeeze = __webpack_require__(202);\n\t  docs.subset = __webpack_require__(203);\n\t  docs.trace = __webpack_require__(204);\n\t  docs.transpose = __webpack_require__(205);\n\t  docs.zeros = __webpack_require__(206);\n\n\t  // functions - probability\n\t  docs.combinations = __webpack_require__(207);\n\t  //docs.distribution = require('./function/probability/distribution');\n\t  docs.factorial = __webpack_require__(208);\n\t  docs.gamma = __webpack_require__(209);\n\t  docs.kldivergence = __webpack_require__(210);\n\t  docs.multinomial = __webpack_require__(211);\n\t  docs.permutations = __webpack_require__(212);\n\t  docs.pickRandom = __webpack_require__(213);\n\t  docs.random = __webpack_require__(214);\n\t  docs.randomInt = __webpack_require__(215);\n\n\t  // functions - relational\n\t  docs.compare = __webpack_require__(216);\n\t  docs.deepEqual = __webpack_require__(217);\n\t  docs['equal'] = __webpack_require__(218);\n\t  docs.larger = __webpack_require__(219);\n\t  docs.largerEq = __webpack_require__(220);\n\t  docs.smaller = __webpack_require__(221);\n\t  docs.smallerEq = __webpack_require__(222);\n\t  docs.unequal = __webpack_require__(223);\n\n\t  // functions - statistics\n\t  docs.max = __webpack_require__(224);\n\t  docs.mean = __webpack_require__(225);\n\t  docs.median = __webpack_require__(226);\n\t  docs.min = __webpack_require__(227);\n\t  docs.mode = __webpack_require__(228);\n\t  docs.prod = __webpack_require__(229);\n\t  docs.quantileSeq = __webpack_require__(230);\n\t  docs.std = __webpack_require__(231);\n\t  docs.sum = __webpack_require__(232);\n\t  docs['var'] = __webpack_require__(233);\n\n\t  // functions - trigonometry\n\t  docs.acos = __webpack_require__(234);\n\t  docs.acosh = __webpack_require__(235);\n\t  docs.acot = __webpack_require__(236);\n\t  docs.acoth = __webpack_require__(237);\n\t  docs.acsc = __webpack_require__(238);\n\t  docs.acsch = __webpack_require__(239);\n\t  docs.asec = __webpack_require__(240);\n\t  docs.asech = __webpack_require__(241);\n\t  docs.asin = __webpack_require__(242);\n\t  docs.asinh = __webpack_require__(243);\n\t  docs.atan = __webpack_require__(244);\n\t  docs.atanh = __webpack_require__(245);\n\t  docs.atan2 = __webpack_require__(246);\n\t  docs.cos = __webpack_require__(247);\n\t  docs.cosh = __webpack_require__(248);\n\t  docs.cot = __webpack_require__(249);\n\t  docs.coth = __webpack_require__(250);\n\t  docs.csc = __webpack_require__(251);\n\t  docs.csch = __webpack_require__(252);\n\t  docs.sec = __webpack_require__(253);\n\t  docs.sech = __webpack_require__(254);\n\t  docs.sin = __webpack_require__(255);\n\t  docs.sinh = __webpack_require__(256);\n\t  docs.tan = __webpack_require__(257);\n\t  docs.tanh = __webpack_require__(258);\n\n\t  // functions - units\n\t  docs.to = __webpack_require__(259);\n\n\t  // functions - utils\n\t  docs.clone =  __webpack_require__(260);\n\t  docs.format =  __webpack_require__(261);\n\t  docs.isInteger =  __webpack_require__(262);\n\t  docs.isNegative =  __webpack_require__(263);\n\t  docs.isNumeric =  __webpack_require__(264);\n\t  docs.isPositive =  __webpack_require__(265);\n\t  docs.isZero =  __webpack_require__(266);\n\t  // docs.print =  require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.\n\t  docs['typeof'] =  __webpack_require__(267);\n\n\t  return docs;\n\t}\n\n\texports.name = 'docs';\n\texports.path = 'expression';\n\texports.factory = factory;\n\n\n/***/ },\n/* 97 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'bignumber',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'bignumber(x)'\n\t  ],\n\t  'description':\n\t      'Create a big number from a number or string.',\n\t  'examples': [\n\t    '0.1 + 0.2',\n\t    'bignumber(0.1) + bignumber(0.2)',\n\t    'bignumber(\"7.2\")',\n\t    'bignumber(\"7.2e500\")',\n\t    'bignumber([0.1, 0.2, 0.3])'\n\t  ],\n\t  'seealso': [\n\t    'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },\n/* 98 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'boolean',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'x',\n\t    'boolean(x)'\n\t  ],\n\t  'description':\n\t      'Convert a string or number into a boolean.',\n\t  'examples': [\n\t    'boolean(0)',\n\t    'boolean(1)',\n\t    'boolean(3)',\n\t    'boolean(\"true\")',\n\t    'boolean(\"false\")',\n\t    'boolean([1, 0, 1, 1])'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },\n/* 99 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'complex',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'complex()',\n\t    'complex(re, im)',\n\t    'complex(string)'\n\t  ],\n\t  'description':\n\t      'Create a complex number.',\n\t  'examples': [\n\t    'complex()',\n\t    'complex(2, 3)',\n\t    'complex(\"7 - 2i\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },\n/* 100 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'fraction',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'fraction(num)',\n\t    'fraction(num,den)'\n\t  ],\n\t  'description':\n\t    'Create a fraction from a number or from a numerator and denominator.',\n\t  'examples': [\n\t    'fraction(0.125)',\n\t    'fraction(1, 3) + fraction(2, 5)'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },\n/* 101 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'index',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    '[start]',\n\t    '[start:end]',\n\t    '[start:step:end]',\n\t    '[start1, start 2, ...]',\n\t    '[start1:end1, start2:end2, ...]',\n\t    '[start1:step1:end1, start2:step2:end2, ...]'\n\t  ],\n\t  'description':\n\t      'Create an index to get or replace a subset of a matrix',\n\t  'examples': [\n\t    '[]',\n\t    '[1, 2, 3]',\n\t    'A = [1, 2, 3; 4, 5, 6]',\n\t    'A[1, :]',\n\t    'A[1, 2] = 50',\n\t    'A[0:2, 0:2] = ones(2, 2)'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },\n/* 102 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'matrix',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    '[]',\n\t    '[a1, b1, ...; a2, b2, ...]',\n\t    'matrix()',\n\t    'matrix(\"dense\")',\n\t    'matrix([...])'\n\t  ],\n\t  'description':\n\t      'Create a matrix.',\n\t  'examples': [\n\t    '[]',\n\t    '[1, 2, 3]',\n\t    '[1, 2, 3; 4, 5, 6]',\n\t    'matrix()',\n\t    'matrix([3, 4])',\n\t    'matrix([3, 4; 5, 6], \"sparse\")',\n\t    'matrix([3, 4; 5, 6], \"sparse\", \"number\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },\n/* 103 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'number',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'x',\n\t    'number(x)'\n\t  ],\n\t  'description':\n\t      'Create a number or convert a string or boolean into a number.',\n\t  'examples': [\n\t    '2',\n\t    '2e3',\n\t    '4.05',\n\t    'number(2)',\n\t    'number(\"7.2\")',\n\t    'number(true)',\n\t    'number([true, false, true, true])',\n\t    'number(\"52cm\", \"m\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },\n/* 104 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'sparse',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'sparse()',\n\t    'sparse([a1, b1, ...; a1, b2, ...])',\n\t    'sparse([a1, b1, ...; a1, b2, ...], \"number\")'\n\t  ],\n\t  'description':\n\t  'Create a sparse matrix.',\n\t  'examples': [\n\t    'sparse()',\n\t    'sparse([3, 4; 5, 6])',\n\t    'sparse([3, 0; 5, 0], \"number\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'\n\t  ]\n\t};\n\n\n/***/ },\n/* 105 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'string',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    '\"text\"',\n\t    'string(x)'\n\t  ],\n\t  'description':\n\t      'Create a string or convert a value to a string',\n\t  'examples': [\n\t    '\"Hello World!\"',\n\t    'string(4.2)',\n\t    'string(3 + 2i)'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'\n\t  ]\n\t};\n\n\n/***/ },\n/* 106 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'unit',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'value unit',\n\t    'unit(value, unit)',\n\t    'unit(string)'\n\t  ],\n\t  'description':\n\t      'Create a unit.',\n\t  'examples': [\n\t    '5.5 mm',\n\t    '3 inch',\n\t    'unit(7.1, \"kilogram\")',\n\t    'unit(\"23 deg\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'\n\t  ]\n\t};\n\n\n/***/ },\n/* 107 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'e',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'e'\n\t  ],\n\t  'description': 'Euler\\'s number, the base of the natural logarithm. Approximately equal to 2.71828',\n\t  'examples': [\n\t    'e',\n\t    'e ^ 2',\n\t    'exp(2)',\n\t    'log(e)'\n\t  ],\n\t  'seealso': ['exp']\n\t};\n\n\n/***/ },\n/* 108 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'false',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'false'\n\t  ],\n\t  'description': 'Boolean value false',\n\t  'examples': [\n\t    'false'\n\t  ],\n\t  'seealso': ['true']\n\t};\n\n\n/***/ },\n/* 109 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'i',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'i'\n\t  ],\n\t  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',\n\t  'examples': [\n\t    'i',\n\t    'i * i',\n\t    'sqrt(-1)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 110 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'Infinity',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'Infinity'\n\t  ],\n\t  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',\n\t  'examples': [\n\t    'Infinity',\n\t    '1 / 0'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 111 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'LN2',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LN2'\n\t  ],\n\t  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',\n\t  'examples': [\n\t    'LN2',\n\t    'log(2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 112 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'LN10',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LN10'\n\t  ],\n\t  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',\n\t  'examples': [\n\t    'LN10',\n\t    'log(10)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 113 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'LOG2E',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LOG2E'\n\t  ],\n\t  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',\n\t  'examples': [\n\t    'LOG2E',\n\t    'log(e, 2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 114 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'LOG10E',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LOG10E'\n\t  ],\n\t  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',\n\t  'examples': [\n\t    'LOG10E',\n\t    'log(e, 10)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 115 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'NaN',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'NaN'\n\t  ],\n\t  'description': 'Not a number',\n\t  'examples': [\n\t    'NaN',\n\t    '0 / 0'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 116 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'null',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'null'\n\t  ],\n\t  'description': 'Value null',\n\t  'examples': [\n\t    'null'\n\t  ],\n\t  'seealso': ['true', 'false']\n\t};\n\n\n/***/ },\n/* 117 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'pi',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'pi'\n\t  ],\n\t  'description': 'The number pi is a mathematical constant that is the ratio of a circle\\'s circumference to its diameter, and is approximately equal to 3.14159',\n\t  'examples': [\n\t    'pi',\n\t    'sin(pi/2)'\n\t  ],\n\t  'seealso': ['tau']\n\t};\n\n\n/***/ },\n/* 118 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'phi',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'phi'\n\t  ],\n\t  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',\n\t  'examples': [\n\t    'tau'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 119 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'SQRT1_2',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'SQRT1_2'\n\t  ],\n\t  'description': 'Returns the square root of 1/2, approximately equal to 0.707',\n\t  'examples': [\n\t    'SQRT1_2',\n\t    'sqrt(1/2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 120 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'SQRT2',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'SQRT2'\n\t  ],\n\t  'description': 'Returns the square root of 2, approximately equal to 1.414',\n\t  'examples': [\n\t    'SQRT2',\n\t    'sqrt(2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 121 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'tau',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'tau'\n\t  ],\n\t  'description': 'Tau is the ratio constant of a circle\\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',\n\t  'examples': [\n\t    'tau',\n\t    '2 * pi'\n\t  ],\n\t  'seealso': ['pi']\n\t};\n\n\n/***/ },\n/* 122 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'true',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'true'\n\t  ],\n\t  'description': 'Boolean value true',\n\t  'examples': [\n\t    'true'\n\t  ],\n\t  'seealso': ['false']\n\t};\n\n\n/***/ },\n/* 123 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'version',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'version'\n\t  ],\n\t  'description': 'A string with the version number of math.js',\n\t  'examples': [\n\t    'version'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 124 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'lsolve',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'x=lsolve(L, b)'\n\t  ],\n\t  'description':\n\t  'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',\n\t  'examples': [\n\t    'a = [-2, 3; 2, 1]',\n\t    'b = [11, 9]',\n\t    'x = lsolve(a, b)'\n\t  ],\n\t  'seealso': [\n\t    'lup', 'lusolve', 'usolve', 'matrix', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },\n/* 125 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'lup',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'lup(m)'\n\t  ],\n\t  'description':\n\t  'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',\n\t  'examples': [\n\t    'lup([[2, 1], [1, 4]])',\n\t    'lup(matrix([[2, 1], [1, 4]]))',\n\t    'lup(sparse([[2, 1], [1, 4]]))'\n\t  ],\n\t  'seealso': [\n\t    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu'\n\t  ]\n\t};\n\n\n/***/ },\n/* 126 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'lusolve',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'x=lusolve(A, b)',\n\t    'x=lusolve(lu, b)'\n\t  ],\n\t  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',\n\t  'examples': [\n\t    'a = [-2, 3; 2, 1]',\n\t    'b = [11, 9]',\n\t    'x = lusolve(a, b)'\n\t  ],\n\t  'seealso': [\n\t    'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },\n/* 127 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'slu',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'slu(A, order, threshold)'\n\t  ],\n\t  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',\n\t  'examples': [\n\t    'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'\n\t  ],\n\t  'seealso': [\n\t    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup'\n\t  ]\n\t};\n\n\n/***/ },\n/* 128 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'usolve',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'x=usolve(U, b)'\n\t  ],\n\t  'description':\n\t  'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',\n\t  'examples': [\n\t    'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'\n\t  ],\n\t  'seealso': [\n\t    'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },\n/* 129 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'abs',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'abs(x)'\n\t  ],\n\t  'description': 'Compute the absolute value.',\n\t  'examples': [\n\t    'abs(3.5)',\n\t    'abs(-4.2)'\n\t  ],\n\t  'seealso': ['sign']\n\t};\n\n\n/***/ },\n/* 130 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'add',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x + y',\n\t    'add(x, y)'\n\t  ],\n\t  'description': 'Add two values.',\n\t  'examples': [\n\t    'a = 2.1 + 3.6',\n\t    'a - 3.6',\n\t    '3 + 2i',\n\t    '3 cm + 2 inch',\n\t    '\"2.3\" + \"4\"'\n\t  ],\n\t  'seealso': [\n\t    'subtract'\n\t  ]\n\t};\n\n\n/***/ },\n/* 131 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'cbrt',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'cbrt(x)',\n\t    'cbrt(x, allRoots)'\n\t  ],\n\t  'description':\n\t      'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',\n\t  'examples': [\n\t    'cbrt(64)',\n\t    'cube(4)',\n\t    'cbrt(-8)',\n\t    'cbrt(2 + 3i)',\n\t    'cbrt(8i)',\n\t    'cbrt(8i, true)',\n\t    'cbrt(27 m^3)'\n\t  ],\n\t  'seealso': [\n\t    'square',\n\t    'sqrt',\n\t    'cube',\n\t    'multiply'\n\t  ]\n\t};\n\n\n/***/ },\n/* 132 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'ceil',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'ceil(x)'\n\t  ],\n\t  'description':\n\t      'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',\n\t  'examples': [\n\t    'ceil(3.2)',\n\t    'ceil(3.8)',\n\t    'ceil(-4.2)'\n\t  ],\n\t  'seealso': ['floor', 'fix', 'round']\n\t};\n\n\n/***/ },\n/* 133 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'cube',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'cube(x)'\n\t  ],\n\t  'description': 'Compute the cube of a value. The cube of x is x * x * x.',\n\t  'examples': [\n\t    'cube(2)',\n\t    '2^3',\n\t    '2 * 2 * 2'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'square',\n\t    'pow'\n\t  ]\n\t};\n\n\n/***/ },\n/* 134 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'divide',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x / y',\n\t    'divide(x, y)'\n\t  ],\n\t  'description': 'Divide two values.',\n\t  'examples': [\n\t    'a = 2 / 3',\n\t    'a * 3',\n\t    '4.5 / 2',\n\t    '3 + 4 / 2',\n\t    '(3 + 4) / 2',\n\t    '18 km / 4.5'\n\t  ],\n\t  'seealso': [\n\t    'multiply'\n\t  ]\n\t};\n\n\n/***/ },\n/* 135 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'dotDivide',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x ./ y',\n\t    'dotDivide(x, y)'\n\t  ],\n\t  'description': 'Divide two values element wise.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'b = [2, 1, 1; 3, 2, 5]',\n\t    'a ./ b'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'dotMultiply',\n\t    'divide'\n\t  ]\n\t};\n\n\n/***/ },\n/* 136 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'dotMultiply',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x .* y',\n\t    'dotMultiply(x, y)'\n\t  ],\n\t  'description': 'Multiply two values element wise.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'b = [2, 1, 1; 3, 2, 5]',\n\t    'a .* b'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'divide',\n\t    'dotDivide'\n\t  ]\n\t};\n\n\n/***/ },\n/* 137 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'dotpow',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x .^ y',\n\t    'dotpow(x, y)'\n\t  ],\n\t  'description':\n\t      'Calculates the power of x to y element wise.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'a .^ 2'\n\t  ],\n\t  'seealso': [\n\t    'pow'\n\t  ]\n\t};\n\n\n/***/ },\n/* 138 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'exp',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'exp(x)'\n\t  ],\n\t  'description': 'Calculate the exponent of a value.',\n\t  'examples': [\n\t    'exp(1.3)',\n\t    'e ^ 1.3',\n\t    'log(exp(1.3))',\n\t    'x = 2.4',\n\t    '(exp(i*x) == cos(x) + i*sin(x))   # Euler\\'s formula'\n\t  ],\n\t  'seealso': [\n\t    'pow',\n\t    'log'\n\t  ]\n\t};\n\n\n/***/ },\n/* 139 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'fix',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'fix(x)'\n\t  ],\n\t  'description':\n\t      'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',\n\t  'examples': [\n\t    'fix(3.2)',\n\t    'fix(3.8)',\n\t    'fix(-4.2)',\n\t    'fix(-4.8)'\n\t  ],\n\t  'seealso': ['ceil', 'floor', 'round']\n\t};\n\n\n/***/ },\n/* 140 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'floor',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'floor(x)'\n\t  ],\n\t  'description':\n\t      'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',\n\t  'examples': [\n\t    'floor(3.2)',\n\t    'floor(3.8)',\n\t    'floor(-4.2)'\n\t  ],\n\t  'seealso': ['ceil', 'fix', 'round']\n\t};\n\n\n/***/ },\n/* 141 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'gcd',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'gcd(a, b)',\n\t    'gcd(a, b, c, ...)'\n\t  ],\n\t  'description': 'Compute the greatest common divisor.',\n\t  'examples': [\n\t    'gcd(8, 12)',\n\t    'gcd(-4, 6)',\n\t    'gcd(25, 15, -10)'\n\t  ],\n\t  'seealso': [ 'lcm', 'xgcd' ]\n\t};\n\n\n/***/ },\n/* 142 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'hypot',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'hypot(a, b, c, ...)',\n\t    'hypot([a, b, c, ...])'\n\t  ],\n\t  'description': 'Calculate the hypotenusa of a list with values. ',\n\t  'examples': [\n\t    'hypot(3, 4)',\n\t    'sqrt(3^2 + 4^2)',\n\t    'hypot(-2)',\n\t    'hypot([3, 4, 5])'\n\t  ],\n\t  'seealso': [ 'abs', 'norm' ]\n\t};\n\n\n/***/ },\n/* 143 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'lcm',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'lcm(x, y)'\n\t  ],\n\t  'description': 'Compute the least common multiple.',\n\t  'examples': [\n\t    'lcm(4, 6)',\n\t    'lcm(6, 21)',\n\t    'lcm(6, 21, 5)'\n\t  ],\n\t  'seealso': [ 'gcd' ]\n\t};\n\n\n/***/ },\n/* 144 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'log',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'log(x)',\n\t    'log(x, base)'\n\t  ],\n\t  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',\n\t  'examples': [\n\t    'log(3.5)',\n\t    'a = log(2.4)',\n\t    'exp(a)',\n\t    '10 ^ 4',\n\t    'log(10000, 10)',\n\t    'log(10000) / log(10)',\n\t    'b = log(1024, 2)',\n\t    '2 ^ b'\n\t  ],\n\t  'seealso': [\n\t    'exp',\n\t    'log10'\n\t  ]\n\t};\n\n/***/ },\n/* 145 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'log10',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'log10(x)'\n\t  ],\n\t  'description': 'Compute the 10-base logarithm of a value.',\n\t  'examples': [\n\t    'log10(0.00001)',\n\t    'log10(10000)',\n\t    '10 ^ 4',\n\t    'log(10000) / log(10)',\n\t    'log(10000, 10)'\n\t  ],\n\t  'seealso': [\n\t    'exp',\n\t    'log'\n\t  ]\n\t};\n\n\n/***/ },\n/* 146 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'mod',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x % y',\n\t    'x mod y',\n\t    'mod(x, y)'\n\t  ],\n\t  'description':\n\t      'Calculates the modulus, the remainder of an integer division.',\n\t  'examples': [\n\t    '7 % 3',\n\t    '11 % 2',\n\t    '10 mod 4',\n\t    'function isOdd(x) = x % 2',\n\t    'isOdd(2)',\n\t    'isOdd(3)'\n\t  ],\n\t  'seealso': ['divide']\n\t};\n\n\n/***/ },\n/* 147 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'multiply',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x * y',\n\t    'multiply(x, y)'\n\t  ],\n\t  'description': 'multiply two values.',\n\t  'examples': [\n\t    'a = 2.1 * 3.4',\n\t    'a / 3.4',\n\t    '2 * 3 + 4',\n\t    '2 * (3 + 4)',\n\t    '3 * 2.1 km'\n\t  ],\n\t  'seealso': [\n\t    'divide'\n\t  ]\n\t};\n\n\n/***/ },\n/* 148 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'norm',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'norm(x)',\n\t    'norm(x, p)'\n\t  ],\n\t  'description': 'Calculate the norm of a number, vector or matrix.',\n\t  'examples': [\n\t    'abs(-3.5)',\n\t    'norm(-3.5)',\n\t    'norm(3 - 4i))',\n\t    'norm([1, 2, -3], Infinity)',\n\t    'norm([1, 2, -3], -Infinity)',\n\t    'norm([3, 4], 2)',\n\t    'norm([[1, 2], [3, 4]], 1)',\n\t    'norm([[1, 2], [3, 4]], \\'inf\\')',\n\t    'norm([[1, 2], [3, 4]], \\'fro\\')'\n\t  ]\n\t};\n\n\n/***/ },\n/* 149 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'nthRoot',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'nthRoot(a)',\n\t    'nthRoot(a, root)'\n\t  ],\n\t  'description': 'Calculate the nth root of a value. ' +\n\t      'The principal nth root of a positive real number A, ' +\n\t      'is the positive real solution of the equation \"x^root = A\".',\n\t  'examples': [\n\t    '4 ^ 3',\n\t    'nthRoot(64, 3)',\n\t    'nthRoot(9, 2)',\n\t    'sqrt(9)'\n\t  ],\n\t  'seealso': [\n\t    'sqrt',\n\t    'pow'\n\t  ]\n\t};\n\n/***/ },\n/* 150 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'pow',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x ^ y',\n\t    'pow(x, y)'\n\t  ],\n\t  'description':\n\t      'Calculates the power of x to y, x^y.',\n\t  'examples': [\n\t    '2^3 = 8',\n\t    '2*2*2',\n\t    '1 + e ^ (pi * i)'\n\t  ],\n\t  'seealso': [ 'multiply' ]\n\t};\n\n\n/***/ },\n/* 151 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'round',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'round(x)',\n\t    'round(x, n)'\n\t  ],\n\t  'description':\n\t      'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',\n\t  'examples': [\n\t    'round(3.2)',\n\t    'round(3.8)',\n\t    'round(-4.2)',\n\t    'round(-4.8)',\n\t    'round(pi, 3)',\n\t    'round(123.45678, 2)'\n\t  ],\n\t  'seealso': ['ceil', 'floor', 'fix']\n\t};\n\n\n/***/ },\n/* 152 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'sign',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'sign(x)'\n\t  ],\n\t  'description':\n\t      'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',\n\t  'examples': [\n\t    'sign(3.5)',\n\t    'sign(-4.2)',\n\t    'sign(0)'\n\t  ],\n\t  'seealso': [\n\t    'abs'\n\t  ]\n\t};\n\n\n/***/ },\n/* 153 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'sqrt',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'sqrt(x)'\n\t  ],\n\t  'description':\n\t      'Compute the square root value. If x = y * y, then y is the square root of x.',\n\t  'examples': [\n\t    'sqrt(25)',\n\t    '5 * 5',\n\t    'sqrt(-1)'\n\t  ],\n\t  'seealso': [\n\t    'square',\n\t    'multiply'\n\t  ]\n\t};\n\n\n/***/ },\n/* 154 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'square',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'square(x)'\n\t  ],\n\t  'description':\n\t      'Compute the square of a value. The square of x is x * x.',\n\t  'examples': [\n\t    'square(3)',\n\t    'sqrt(9)',\n\t    '3^2',\n\t    '3 * 3'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'pow',\n\t    'sqrt',\n\t    'cube'\n\t  ]\n\t};\n\n\n/***/ },\n/* 155 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'subtract',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x - y',\n\t    'subtract(x, y)'\n\t  ],\n\t  'description': 'subtract two values.',\n\t  'examples': [\n\t    'a = 5.3 - 2',\n\t    'a + 2',\n\t    '2/3 - 1/6',\n\t    '2 * 3 - 3',\n\t    '2.1 km - 500m'\n\t  ],\n\t  'seealso': [\n\t    'add'\n\t  ]\n\t};\n\n\n/***/ },\n/* 156 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'unaryMinus',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    '-x',\n\t    'unaryMinus(x)'\n\t  ],\n\t  'description':\n\t      'Inverse the sign of a value. Converts booleans and strings to numbers.',\n\t  'examples': [\n\t    '-4.5',\n\t    '-(-5.6)',\n\t    '-\"22\"'\n\t  ],\n\t  'seealso': [\n\t    'add', 'subtract', 'unaryPlus'\n\t  ]\n\t};\n\n\n/***/ },\n/* 157 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'unaryPlus',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    '+x',\n\t    'unaryPlus(x)'\n\t  ],\n\t  'description':\n\t      'Converts booleans and strings to numbers.',\n\t  'examples': [\n\t    '+true',\n\t    '+\"2\"'\n\t  ],\n\t  'seealso': [\n\t    'add', 'subtract', 'unaryMinus'\n\t  ]\n\t};\n\n\n/***/ },\n/* 158 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'xgcd',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'xgcd(a, b)'\n\t  ],\n\t  'description': 'Calculate the extended greatest common divisor for two values',\n\t  'examples': [\n\t    'xgcd(8, 12)',\n\t    'gcd(8, 12)',\n\t    'xgcd(36163, 21199)'\n\t  ],\n\t  'seealso': [ 'gcd', 'lcm' ]\n\t};\n\n\n/***/ },\n/* 159 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'bitAnd',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x & y',\n\t    'bitAnd(x, y)'\n\t  ],\n\t  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',\n\t  'examples': [\n\t    '5 & 3',\n\t    'bitAnd(53, 131)',\n\t    '[1, 12, 31] & 42'\n\t  ],\n\t  'seealso': [\n\t    'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },\n/* 160 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'bitNot',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    '~x',\n\t    'bitNot(x)'\n\t  ],\n\t  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',\n\t  'examples': [\n\t    '~1',\n\t    '~2',\n\t    'bitNot([2, -3, 4])'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },\n/* 161 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'bitOr',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x | y',\n\t    'bitOr(x, y)'\n\t  ],\n\t  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',\n\t  'examples': [\n\t    '5 | 3',\n\t    'bitOr([1, 2, 3], 4)'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },\n/* 162 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'bitXor',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'bitXor(x, y)'\n\t  ],\n\t  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',\n\t  'examples': [\n\t    'bitOr(1, 2)',\n\t    'bitXor([2, 3, 4], 4)'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },\n/* 163 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'leftShift',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x << y',\n\t    'leftShift(x, y)'\n\t  ],\n\t  'description': 'Bitwise left logical shift of a value x by y number of bits.',\n\t  'examples': [\n\t    '4 << 1',\n\t    '8 >> 1'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },\n/* 164 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'rightArithShift',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x >> y',\n\t    'leftShift(x, y)'\n\t  ],\n\t  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',\n\t  'examples': [\n\t    '8 >> 1',\n\t    '4 << 1',\n\t    '-12 >> 2'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },\n/* 165 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'rightLogShift',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x >> y',\n\t    'leftShift(x, y)'\n\t  ],\n\t  'description': 'Bitwise right logical shift of a value x by y number of bits.',\n\t  'examples': [\n\t    '8 >>> 1',\n\t    '4 << 1',\n\t    '-12 >>> 2'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'\n\t  ]\n\t};\n\n\n/***/ },\n/* 166 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'bellNumbers',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'bellNumbers(n)'\n\t  ],\n\t  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',\n\t  'examples': [\n\t    'bellNumbers(3)',\n\t    'bellNumbers(8)'\n\t  ],\n\t  'seealso': ['stirlingS2']\n\t};\n\n/***/ },\n/* 167 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'catalan',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'catalan(n)'\n\t  ],\n\t  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',\n\t  'examples': [\n\t    'catalan(3)',\n\t    'catalan(8)'\n\t  ],\n\t  'seealso': ['bellNumbers']\n\t};\n\n/***/ },\n/* 168 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'composition',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'composition(n, k)'\n\t  ],\n\t  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',\n\t  'examples': [\n\t    'composition(5, 3)'\n\t  ],\n\t  'seealso': ['combinations']\n\t};\n\n/***/ },\n/* 169 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'stirlingS2',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'stirlingS2(n, k)'\n\t  ],\n\t  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',\n\t  'examples': [\n\t    'stirlingS2(5, 3)'\n\t  ],\n\t  'seealso': ['bellNumbers']\n\t};\n\n\n/***/ },\n/* 170 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'config',\n\t  'category': 'Core',\n\t  'syntax': [\n\t    'config()',\n\t    'config(options)'\n\t  ],\n\t  'description': 'Get configuration or change configuration.',\n\t  'examples': [\n\t    'config()',\n\t    '1/3 + 1/4',\n\t    'config({number: \"Fraction\"})',\n\t    '1/3 + 1/4'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 171 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'import',\n\t  'category': 'Core',\n\t  'syntax': [\n\t    'import(functions)',\n\t    'import(functions, options)'\n\t  ],\n\t  'description': 'Import functions or constants from an object.',\n\t  'examples': [\n\t    'import({myFn: f(x)=x^2, myConstant: 32 })',\n\t    'myFn(2)',\n\t    'myConstant'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 172 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'typed',\n\t  'category': 'Core',\n\t  'syntax': [\n\t    'typed(signatures)',\n\t    'typed(name, signatures)'\n\t  ],\n\t  'description': 'Create a typed function.',\n\t  'examples': [\n\t    'double = typed({ \"number, number\": f(x)=x+x })',\n\t    'double(2)',\n\t    'double(\"hello\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 173 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'arg',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    'arg(x)'\n\t  ],\n\t  'description':\n\t      'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',\n\t  'examples': [\n\t    'arg(2 + 2i)',\n\t    'atan2(3, 2)',\n\t    'arg(2 + 3i)'\n\t  ],\n\t  'seealso': [\n\t    're',\n\t    'im',\n\t    'conj',\n\t    'abs'\n\t  ]\n\t};\n\n\n/***/ },\n/* 174 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'conj',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    'conj(x)'\n\t  ],\n\t  'description':\n\t      'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',\n\t  'examples': [\n\t    'conj(2 + 3i)',\n\t    'conj(2 - 3i)',\n\t    'conj(-5.2i)'\n\t  ],\n\t  'seealso': [\n\t    're',\n\t    'im',\n\t    'abs',\n\t    'arg'\n\t  ]\n\t};\n\n\n/***/ },\n/* 175 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 're',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    're(x)'\n\t  ],\n\t  'description': 'Get the real part of a complex number.',\n\t  'examples': [\n\t    're(2 + 3i)',\n\t    'im(2 + 3i)',\n\t    're(-5.2i)',\n\t    're(2.4)'\n\t  ],\n\t  'seealso': [\n\t    'im',\n\t    'conj',\n\t    'abs',\n\t    'arg'\n\t  ]\n\t};\n\n\n/***/ },\n/* 176 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'im',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    'im(x)'\n\t  ],\n\t  'description': 'Get the imaginary part of a complex number.',\n\t  'examples': [\n\t    'im(2 + 3i)',\n\t    're(2 + 3i)',\n\t    'im(-5.2i)',\n\t    'im(2.4)'\n\t  ],\n\t  'seealso': [\n\t    're',\n\t    'conj',\n\t    'abs',\n\t    'arg'\n\t  ]\n\t};\n\n\n/***/ },\n/* 177 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'eval',\n\t  'category': 'Expression',\n\t  'syntax': [\n\t    'eval(expression)',\n\t    'eval([expr1, expr2, expr3, ...])'\n\t  ],\n\t  'description': 'Evaluate an expression or an array with expressions.',\n\t  'examples': [\n\t    'eval(\"2 + 3\")',\n\t    'eval(\"sqrt(\" + 4 + \")\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 178 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'help',\n\t  'category': 'Expression',\n\t  'syntax': [\n\t    'help(object)',\n\t    'help(string)'\n\t  ],\n\t  'description': 'Display documentation on a function or data type.',\n\t  'examples': [\n\t    'help(sqrt)',\n\t    'help(\"complex\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 179 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'distance',\n\t  'category': 'Geometry',\n\t  'syntax': [\n\t    'distance([x1, y1], [x2, y2])',\n\t    'distance([[x1, y1], [x2, y2])'\n\t  ],\n\t  'description': 'Calculates the Euclidean distance between two points.',\n\t  'examples': [\n\t    'distance([0,0], [4,4])',\n\t    'distance([[0,0], [4,4]])'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 180 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'intersect',\n\t  'category': 'Geometry',\n\t  'syntax': [\n\t    'intersect(expr1, expr2, expr3, expr4)',\n\t    'intersect(expr1, expr2, expr3)'\n\t  ],\n\t  'description': 'Computes the intersection point of lines and/or planes.',\n\t  'examples': [\n\t    'intersect([0, 0], [10, 10], [10, 0], [0, 10])',\n\t    'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 181 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'and',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'x and y',\n\t    'and(x, y)'\n\t  ],\n\t  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',\n\t  'examples': [\n\t    'true and false',\n\t    'true and true',\n\t    '2 and 4'\n\t  ],\n\t  'seealso': [\n\t    'not', 'or', 'xor'\n\t  ]\n\t};\n\n\n/***/ },\n/* 182 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'not',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'not x',\n\t    'not(x)'\n\t  ],\n\t  'description': 'Logical not. Flips the boolean value of given argument.',\n\t  'examples': [\n\t    'not true',\n\t    'not false',\n\t    'not 2',\n\t    'not 0'\n\t  ],\n\t  'seealso': [\n\t    'and', 'or', 'xor'\n\t  ]\n\t};\n\n\n/***/ },\n/* 183 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'or',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'x or y',\n\t    'or(x, y)'\n\t  ],\n\t  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',\n\t  'examples': [\n\t    'true or false',\n\t    'false or false',\n\t    '0 or 4'\n\t  ],\n\t  'seealso': [\n\t    'not', 'and', 'xor'\n\t  ]\n\t};\n\n\n/***/ },\n/* 184 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'xor',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'x or y',\n\t    'or(x, y)'\n\t  ],\n\t  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',\n\t  'examples': [\n\t    'true xor false',\n\t    'false xor false',\n\t    'true xor true',\n\t    '0 or 4'\n\t  ],\n\t  'seealso': [\n\t    'not', 'and', 'or'\n\t  ]\n\t};\n\n\n/***/ },\n/* 185 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'concat',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'concat(A, B, C, ...)',\n\t    'concat(A, B, C, ..., dim)'\n\t  ],\n\t  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',\n\t  'examples': [\n\t    'A = [1, 2; 5, 6]',\n\t    'B = [3, 4; 7, 8]',\n\t    'concat(A, B)',\n\t    'concat(A, B, 1)',\n\t    'concat(A, B, 2)'\n\t  ],\n\t  'seealso': [\n\t    'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 186 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'cross',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'cross(A, B)'\n\t  ],\n\t  'description': 'Calculate the cross product for two vectors in three dimensional space.',\n\t  'examples': [\n\t    'cross([1, 1, 0],  [0, 1, 1])',\n\t    'cross([3, -3, 1], [4, 9, 2])',\n\t    'cross([2, 3, 4],  [5, 6, 7])'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'dot'\n\t  ]\n\t};\n\n\n/***/ },\n/* 187 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'det',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'det(x)'\n\t  ],\n\t  'description': 'Calculate the determinant of a matrix',\n\t  'examples': [\n\t    'det([1, 2; 3, 4])',\n\t    'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 188 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'diag',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'diag(x)',\n\t    'diag(x, k)'\n\t  ],\n\t  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',\n\t  'examples': [\n\t    'diag(1:3)',\n\t    'diag(1:3, 1)',\n\t    'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',\n\t    'diag(a)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 189 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'dot',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'dot(A, B)'\n\t  ],\n\t  'description': 'Calculate the dot product of two vectors. ' +\n\t      'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +\n\t      'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',\n\t  'examples': [\n\t    'dot([2, 4, 1], [2, 2, 3])',\n\t    '[2, 4, 1] * [2, 2, 3]'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'cross'\n\t  ]\n\t};\n\n\n/***/ },\n/* 190 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'eye',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'eye(n)',\n\t    'eye(m, n)',\n\t    'eye([m, n])',\n\t    'eye'\n\t  ],\n\t  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',\n\t  'examples': [\n\t    'eye(3)',\n\t    'eye(3, 5)',\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'eye(size(a))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 191 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'filter',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'filter(x, test)'\n\t  ],\n\t  'description': 'Filter items in a matrix.',\n\t  'examples': [\n\t    'isPositive(x) = x > 0',\n\t    'filter([6, -2, -1, 4, 3], isPositive)',\n\t    'filter([6, -2, 0, 1, 0], x != 0)'\n\t  ],\n\t  'seealso': ['sort', 'map', 'forEach']\n\t};\n\n\n/***/ },\n/* 192 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'flatten',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'flatten(x)'\n\t  ],\n\t  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'size(a)',\n\t    'b = flatten(a)',\n\t    'size(b)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'resize', 'size', 'squeeze'\n\t  ]\n\t};\n\n\n/***/ },\n/* 193 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'forEach',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'forEach(x, callback)'\n\t  ],\n\t  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',\n\t  'examples': [\n\t    'forEach([1, 2, 3], function(val) { console.log(val) })'\n\t  ],\n\t  'seealso': ['map', 'sort', 'filter']\n\t};\n\n\n/***/ },\n/* 194 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'inv',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'inv(x)'\n\t  ],\n\t  'description': 'Calculate the inverse of a matrix',\n\t  'examples': [\n\t    'inv([1, 2; 3, 4])',\n\t    'inv(4)',\n\t    '1 / 4'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 195 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'map',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'map(x, callback)'\n\t  ],\n\t  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',\n\t  'examples': [\n\t    'map([1, 2, 3], function(val) { return value * value })'\n\t  ],\n\t  'seealso': ['filter', 'forEach']\n\t};\n\n\n/***/ },\n/* 196 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'ones',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'ones(m)',\n\t    'ones(m, n)',\n\t    'ones(m, n, p, ...)',\n\t    'ones([m])',\n\t    'ones([m, n])',\n\t    'ones([m, n, p, ...])',\n\t    'ones'\n\t  ],\n\t  'description': 'Create a matrix containing ones.',\n\t  'examples': [\n\t    'ones(3)',\n\t    'ones(3, 5)',\n\t    'ones([2,3]) * 4.5',\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'ones(size(a))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 197 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'partitionSelect',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'partitionSelect(x, k)',\n\t    'partitionSelect(x, k, compare)'\n\t  ],\n\t  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',\n\t  'examples': [\n\t    'partitionSelect([5, 10, 1], 2)',\n\t    'partitionSelect([\"C\", \"B\", \"A\", \"D\"], 1)'\n\t  ],\n\t  'seealso': ['sort']\n\t};\n\n\n/***/ },\n/* 198 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'range',\n\t  'category': 'Type',\n\t  'syntax': [\n\t    'start:end',\n\t    'start:step:end',\n\t    'range(start, end)',\n\t    'range(start, end, step)',\n\t    'range(string)'\n\t  ],\n\t  'description':\n\t      'Create a range. Lower bound of the range is included, upper bound is excluded.',\n\t  'examples': [\n\t    '1:5',\n\t    '3:-1:-3',\n\t    'range(3, 7)',\n\t    'range(0, 12, 2)',\n\t    'range(\"4:10\")',\n\t    'a = [1, 2, 3, 4; 5, 6, 7, 8]',\n\t    'a[1:2, 1:2]'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 199 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'resize',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'resize(x, size)',\n\t    'resize(x, size, defaultValue)'\n\t  ],\n\t  'description': 'Resize a matrix.',\n\t  'examples': [\n\t    'resize([1,2,3,4,5], [3])',\n\t    'resize([1,2,3], [5])',\n\t    'resize([1,2,3], [5], -1)',\n\t    'resize(2, [2, 3])',\n\t    'resize(\"hello\", [8], \"!\")'\n\t  ],\n\t  'seealso': [\n\t    'size', 'subset', 'squeeze'\n\t  ]\n\t};\n\n\n/***/ },\n/* 200 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'size',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'size(x)'\n\t  ],\n\t  'description': 'Calculate the size of a matrix.',\n\t  'examples': [\n\t    'size(2.3)',\n\t    'size(\"hello world\")',\n\t    'a = [1, 2; 3, 4; 5, 6]',\n\t    'size(a)',\n\t    'size(1:6)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 201 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'sort',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'sort(x)',\n\t    'sort(x, compare)'\n\t  ],\n\t  'description': 'Sort the items in a matrix. Compare can be a string \"asc\" or \"desc\", or a custom sort function.',\n\t  'examples': [\n\t    'sort([5, 10, 1])',\n\t    'sort([\"C\", \"B\", \"A\", \"D\"])',\n\t    'sortByLength(a, b) = size(a)[1] - size(b)[1]',\n\t    'sort([\"Langdon\", \"Tom\", \"Sara\"], sortByLength)'\n\t  ],\n\t  'seealso': ['map', 'filter', 'forEach']\n\t};\n\n\n/***/ },\n/* 202 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'squeeze',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'squeeze(x)'\n\t  ],\n\t  'description': 'Remove inner and outer singleton dimensions from a matrix.',\n\t  'examples': [\n\t    'a = zeros(3,2,1)',\n\t    'size(squeeze(a))',\n\t    'b = zeros(1,1,3)',\n\t    'size(squeeze(b))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 203 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'subset',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'value(index)',\n\t    'value(index) = replacement',\n\t    'subset(value, [index])',\n\t    'subset(value, [index], replacement)'\n\t  ],\n\t  'description': 'Get or set a subset of a matrix or string. ' +\n\t      'Indexes are one-based. ' +\n\t      'Both the ranges lower-bound and upper-bound are included.',\n\t  'examples': [\n\t    'd = [1, 2; 3, 4]',\n\t    'e = []',\n\t    'e[1, 1:2] = [5, 6]',\n\t    'e[2, :] = [7, 8]',\n\t    'f = d * e',\n\t    'f[2, 1]',\n\t    'f[:, 1]'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 204 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'trace',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'trace(A)'\n\t  ],\n\t  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',\n\t  'examples': [\n\t    'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',\n\t    'trace(A)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 205 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'transpose',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'x\\'',\n\t    'transpose(x)'\n\t  ],\n\t  'description': 'Transpose a matrix',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'a\\'',\n\t    'transpose(a)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },\n/* 206 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'zeros',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'zeros(m)',\n\t    'zeros(m, n)',\n\t    'zeros(m, n, p, ...)',\n\t    'zeros([m])',\n\t    'zeros([m, n])',\n\t    'zeros([m, n, p, ...])',\n\t    'zeros'\n\t  ],\n\t  'description': 'Create a matrix containing zeros.',\n\t  'examples': [\n\t    'zeros(3)',\n\t    'zeros(3, 5)',\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'zeros(size(a))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'\n\t  ]\n\t};\n\n\n/***/ },\n/* 207 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'combinations',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'combinations(n, k)'\n\t  ],\n\t  'description': 'Compute the number of combinations of n items taken k at a time',\n\t  'examples': [\n\t    'combinations(7, 5)'\n\t  ],\n\t  'seealso': ['permutations', 'factorial']\n\t};\n\n\n/***/ },\n/* 208 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'factorial',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'kldivergence(x, y)'\n\t  ],\n\t  'description': 'Compute the factorial of a value',\n\t  'examples': [\n\t    '5!',\n\t    '5 * 4 * 3 * 2 * 1',\n\t    '3!'\n\t  ],\n\t  'seealso': ['combinations', 'permutations', 'gamma']\n\t};\n\n\n/***/ },\n/* 209 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'gamma',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'gamma(n)'\n\t  ],\n\t  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',\n\t  'examples': [\n\t    'gamma(4)',\n\t    '3!',\n\t    'gamma(1/2)',\n\t    'sqrt(pi)'\n\t  ],\n\t  'seealso': ['factorial']\n\t};\n\n\n/***/ },\n/* 210 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'kldivergence',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'n!',\n\t    'factorial(n)'\n\t  ],\n\t  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',\n\t  'examples': [\n\t    'math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 211 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'multinomial',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'multinomial(A)'\n\t  ],\n\t  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',\n\t  'examples': [\n\t    'multinomial([1, 2, 1])'\n\t  ],\n\t  'seealso': ['combinations', 'factorial']\n\t};\n\n/***/ },\n/* 212 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'permutations',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'permutations(n)',\n\t    'permutations(n, k)'\n\t  ],\n\t  'description': 'Compute the number of permutations of n items taken k at a time',\n\t  'examples': [\n\t    'permutations(5)',\n\t    'permutations(5, 3)'\n\t  ],\n\t  'seealso': ['combinations', 'factorial']\n\t};\n\n\n/***/ },\n/* 213 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'pickRandom',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'pickRandom(array)'\n\t  ],\n\t  'description':\n\t      'Pick a random entry from a given array.',\n\t  'examples': [\n\t    'pickRandom(0:10)',\n\t    'pickRandom([1, 3, 1, 6])'\n\t  ],\n\t  'seealso': ['random', 'randomInt']\n\t};\n\n\n/***/ },\n/* 214 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'random',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'random()',\n\t    'random(max)',\n\t    'random(min, max)',\n\t    'random(size)',\n\t    'random(size, max)',\n\t    'random(size, min, max)'\n\t  ],\n\t  'description':\n\t      'Return a random number.',\n\t  'examples': [\n\t    'random()',\n\t    'random(10, 20)',\n\t    'random([2, 3])'\n\t  ],\n\t  'seealso': ['pickRandom', 'randomInt']\n\t};\n\n\n/***/ },\n/* 215 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'randInt',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'randInt(max)',\n\t    'randInt(min, max)',\n\t    'randInt(size)',\n\t    'randInt(size, max)',\n\t    'randInt(size, min, max)'\n\t  ],\n\t  'description':\n\t      'Return a random integer number',\n\t  'examples': [\n\t    'randInt(10, 20)',\n\t    'randInt([2, 3], 10)'\n\t  ],\n\t  'seealso': ['pickRandom', 'random']\n\t};\n\n/***/ },\n/* 216 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'compare',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'compare(x, y)'\n\t  ],\n\t  'description':\n\t      'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',\n\t  'examples': [\n\t    'compare(2, 3)',\n\t    'compare(3, 2)',\n\t    'compare(2, 2)',\n\t    'compare(5cm, 40mm)',\n\t    'compare(2, [1, 2, 3])'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq'\n\t  ]\n\t};\n\n\n/***/ },\n/* 217 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'deepEqual',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'deepEqual(x, y)'\n\t  ],\n\t  'description':\n\t      'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',\n\t  'examples': [\n\t    '[1,3,4] == [1,3,4]',\n\t    '[1,3,4] == [1,3]'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },\n/* 218 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'equal',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x == y',\n\t    'equal(x, y)'\n\t  ],\n\t  'description':\n\t      'Check equality of two values. Returns true if the values are equal, and false if not.',\n\t  'examples': [\n\t    '2+2 == 3',\n\t    '2+2 == 4',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    'a == b',\n\t    '50cm == 0.5m'\n\t  ],\n\t  'seealso': [\n\t    'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n\t  ]\n\t};\n\n\n/***/ },\n/* 219 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'larger',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x > y',\n\t    'larger(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',\n\t  'examples': [\n\t    '2 > 3',\n\t    '5 > 2*2',\n\t    'a = 3.3',\n\t    'b = 6-2.8',\n\t    '(a > b)',\n\t    '(b < a)',\n\t    '5 cm > 2 inch'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },\n/* 220 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'largerEq',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x >= y',\n\t    'largerEq(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',\n\t  'examples': [\n\t    '2 > 1+1',\n\t    '2 >= 1+1',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    '(a > b)'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },\n/* 221 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'smaller',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x < y',\n\t    'smaller(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',\n\t  'examples': [\n\t    '2 < 3',\n\t    '5 < 2*2',\n\t    'a = 3.3',\n\t    'b = 6-2.8',\n\t    '(a < b)',\n\t    '5 cm < 2 inch'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },\n/* 222 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'smallerEq',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x <= y',\n\t    'smallerEq(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',\n\t  'examples': [\n\t    '2 < 1+1',\n\t    '2 <= 1+1',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    '(a < b)'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },\n/* 223 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'unequal',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x != y',\n\t    'unequal(x, y)'\n\t  ],\n\t  'description':\n\t      'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',\n\t  'examples': [\n\t    '2+2 != 3',\n\t    '2+2 != 4',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    'a != b',\n\t    '50cm != 0.5m',\n\t    '5 cm != 2 inch'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n\t  ]\n\t};\n\n\n/***/ },\n/* 224 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'max',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'max(a, b, c, ...)',\n\t    'max(A)',\n\t    'max(A, dim)'\n\t  ],\n\t  'description': 'Compute the maximum value of a list of values.',\n\t  'examples': [\n\t    'max(2, 3, 4, 1)',\n\t    'max([2, 3, 4, 1])',\n\t    'max([2, 5; 4, 3])',\n\t    'max([2, 5; 4, 3], 1)',\n\t    'max([2, 5; 4, 3], 2)',\n\t    'max(2.7, 7.1, -4.5, 2.0, 4.1)',\n\t    'min(2.7, 7.1, -4.5, 2.0, 4.1)'\n\t  ],\n\t  'seealso': [\n\t    'mean',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },\n/* 225 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'mean',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'mean(a, b, c, ...)',\n\t    'mean(A)',\n\t    'mean(A, dim)'\n\t  ],\n\t  'description': 'Compute the arithmetic mean of a list of values.',\n\t  'examples': [\n\t    'mean(2, 3, 4, 1)',\n\t    'mean([2, 3, 4, 1])',\n\t    'mean([2, 5; 4, 3])',\n\t    'mean([2, 5; 4, 3], 1)',\n\t    'mean([2, 5; 4, 3], 2)',\n\t    'mean([1.0, 2.7, 3.2, 4.0])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },\n/* 226 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'median',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'median(a, b, c, ...)',\n\t    'median(A)'\n\t  ],\n\t  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',\n\t  'examples': [\n\t    'median(5, 2, 7)',\n\t    'median([3, -1, 5, 7])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },\n/* 227 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'min',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'min(a, b, c, ...)',\n\t    'min(A)',\n\t    'min(A, dim)'\n\t  ],\n\t  'description': 'Compute the minimum value of a list of values.',\n\t  'examples': [\n\t    'min(2, 3, 4, 1)',\n\t    'min([2, 3, 4, 1])',\n\t    'min([2, 5; 4, 3])',\n\t    'min([2, 5; 4, 3], 1)',\n\t    'min([2, 5; 4, 3], 2)',\n\t    'min(2.7, 7.1, -4.5, 2.0, 4.1)',\n\t    'max(2.7, 7.1, -4.5, 2.0, 4.1)'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'median',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },\n/* 228 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'mode',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'mode(a, b, c, ...)',\n\t    'mode(A)',\n\t    'mode(A, a, b, B, c, ...)'\n\t  ],\n\t  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',\n\t  'examples': [\n\t    'mode(5, 2, 7)',\n\t    'mode([3, -1, 5, 7])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },\n/* 229 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'prod',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'prod(a, b, c, ...)',\n\t    'prod(A)'\n\t  ],\n\t  'description': 'Compute the product of all values.',\n\t  'examples': [\n\t    'prod(2, 3, 4)',\n\t    'prod([2, 3, 4])',\n\t    'prod([2, 5; 4, 3])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'min',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },\n/* 230 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'quantileSeq',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'quantileSeq(A, prob[, sorted])',\n\t    'quantileSeq(A, [prob1, prob2, ...][, sorted])',\n\t    'quantileSeq(A, N[, sorted])'\n\t  ],\n\t  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \\n\\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',\n\t  'examples': [\n\t    'quantileSeq([3, -1, 5, 7], 0.5)',\n\t    'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',\n\t    'quantileSeq([3, -1, 5, 7], 2)',\n\t    'quantileSeq([-1, 3, 5, 7], 0.5, true)'\n\t  ],\n\t  'seealso': [\n\t    'mean',\n\t    'median',\n\t    'min',\n\t    'max',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n/***/ },\n/* 231 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'std',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'std(a, b, c, ...)',\n\t    'std(A)',\n\t    'std(A, normalization)'\n\t  ],\n\t  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n\t  'examples': [\n\t    'std(2, 4, 6)',\n\t    'std([2, 4, 6, 8])',\n\t    'std([2, 4, 6, 8], \"uncorrected\")',\n\t    'std([2, 4, 6, 8], \"biased\")',\n\t    'std([1, 2, 3; 4, 5, 6])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },\n/* 232 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'sum',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'sum(a, b, c, ...)',\n\t    'sum(A)'\n\t  ],\n\t  'description': 'Compute the sum of all values.',\n\t  'examples': [\n\t    'sum(2, 3, 4, 1)',\n\t    'sum([2, 3, 4, 1])',\n\t    'sum([2, 5; 4, 3])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },\n/* 233 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'var',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'var(a, b, c, ...)',\n\t    'var(A)',\n\t    'var(A, normalization)'\n\t  ],\n\t  'description': 'Compute the variance of all values. Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n\t  'examples': [\n\t    'var(2, 4, 6)',\n\t    'var([2, 4, 6, 8])',\n\t    'var([2, 4, 6, 8], \"uncorrected\")',\n\t    'var([2, 4, 6, 8], \"biased\")',\n\t    'var([1, 2, 3; 4, 5, 6])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum'\n\t  ]\n\t};\n\n\n/***/ },\n/* 234 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'acos',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acos(x)'\n\t  ],\n\t  'description': 'Compute the inverse cosine of a value in radians.',\n\t  'examples': [\n\t    'acos(0.5)',\n\t    'acos(cos(2.3))'\n\t  ],\n\t  'seealso': [\n\t    'cos',\n\t    'atan',\n\t    'asin'\n\t  ]\n\t};\n\n\n/***/ },\n/* 235 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'acosh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acosh(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',\n\t  'examples': [\n\t    'acosh(1.5)'\n\t  ],\n\t  'seealso': [\n\t    'cosh',\n\t    'asinh',\n\t    'atanh'\n\t  ]\n\t};\n\n/***/ },\n/* 236 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'acot',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acot(x)'\n\t  ],\n\t  'description': 'Calculate the inverse cotangent of a value.',\n\t  'examples': [\n\t    'acot(0.5)',\n\t    'acot(cot(0.5))',\n\t    'acot(2)'\n\t  ],\n\t  'seealso': [\n\t    'cot',\n\t    'atan'\n\t  ]\n\t};\n\n\n/***/ },\n/* 237 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'acoth',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acoth(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',\n\t  'examples': [\n\t    'acoth(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acsch',\n\t    'asech'\n\t  ]\n\t};\n\n/***/ },\n/* 238 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'acsc',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acsc(x)'\n\t  ],\n\t  'description': 'Calculate the inverse cotangent of a value.',\n\t  'examples': [\n\t    'acsc(0.5)',\n\t    'acsc(csc(0.5))',\n\t    'acsc(2)'\n\t  ],\n\t  'seealso': [\n\t    'csc',\n\t    'asin',\n\t    'asec'\n\t  ]\n\t};\n\n\n/***/ },\n/* 239 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'acsch',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acsch(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',\n\t  'examples': [\n\t    'acsch(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'asech',\n\t    'acoth'\n\t  ]\n\t};\n\n\n/***/ },\n/* 240 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'asec',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asec(x)'\n\t  ],\n\t  'description': 'Calculate the inverse secant of a value.',\n\t  'examples': [\n\t    'asec(0.5)',\n\t    'asec(sec(0.5))',\n\t    'asec(2)'\n\t  ],\n\t  'seealso': [\n\t    'acos',\n\t    'acot',\n\t    'acsc'\n\t  ]\n\t};\n\n\n/***/ },\n/* 241 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'asech',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asech(x)'\n\t  ],\n\t  'description': 'Calculate the inverse secant of a value.',\n\t  'examples': [\n\t    'asech(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acsch',\n\t    'acoth'\n\t  ]\n\t};\n\n\n/***/ },\n/* 242 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'asin',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asin(x)'\n\t  ],\n\t  'description': 'Compute the inverse sine of a value in radians.',\n\t  'examples': [\n\t    'asin(0.5)',\n\t    'asin(sin(2.3))'\n\t  ],\n\t  'seealso': [\n\t    'sin',\n\t    'acos',\n\t    'atan'\n\t  ]\n\t};\n\n\n/***/ },\n/* 243 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'asinh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asinh(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',\n\t  'examples': [\n\t    'asinh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acosh',\n\t    'atanh'\n\t  ]\n\t};\n\n\n/***/ },\n/* 244 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'atan',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'atan(x)'\n\t  ],\n\t  'description': 'Compute the inverse tangent of a value in radians.',\n\t  'examples': [\n\t    'atan(0.5)',\n\t    'atan(tan(2.3))'\n\t  ],\n\t  'seealso': [\n\t    'tan',\n\t    'acos',\n\t    'asin'\n\t  ]\n\t};\n\n\n/***/ },\n/* 245 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'atanh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'atanh(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',\n\t  'examples': [\n\t    'atanh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acosh',\n\t    'asinh'\n\t  ]\n\t};\n\n\n/***/ },\n/* 246 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'atan2',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'atan2(y, x)'\n\t  ],\n\t  'description':\n\t      'Computes the principal value of the arc tangent of y/x in radians.',\n\t  'examples': [\n\t    'atan2(2, 2) / pi',\n\t    'angle = 60 deg in rad',\n\t    'x = cos(angle)',\n\t    'y = sin(angle)',\n\t    'atan2(y, x)'\n\t  ],\n\t  'seealso': [\n\t    'sin',\n\t    'cos',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },\n/* 247 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'cos',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'cos(x)'\n\t  ],\n\t  'description': 'Compute the cosine of x in radians.',\n\t  'examples': [\n\t    'cos(2)',\n\t    'cos(pi / 4) ^ 2',\n\t    'cos(180 deg)',\n\t    'cos(60 deg)',\n\t    'sin(0.2)^2 + cos(0.2)^2'\n\t  ],\n\t  'seealso': [\n\t    'acos',\n\t    'sin',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },\n/* 248 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\r\n\t  'name': 'cosh',\r\n\t  'category': 'Trigonometry',\r\n\t  'syntax': [\r\n\t    'cosh(x)'\r\n\t  ],\r\n\t  'description': 'Compute the hyperbolic cosine of x in radians.',\r\n\t  'examples': [\r\n\t    'cosh(0.5)'\r\n\t  ],\r\n\t  'seealso': [\r\n\t    'sinh',\r\n\t    'tanh',\r\n\t    'coth'\r\n\t  ]\r\n\t};\r\n\n\n/***/ },\n/* 249 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'cot',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'cot(x)'\n\t  ],\n\t  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',\n\t  'examples': [\n\t    'cot(2)',\n\t    '1 / tan(2)'\n\t  ],\n\t  'seealso': [\n\t    'sec',\n\t    'csc',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },\n/* 250 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\r\n\t  'name': 'coth',\r\n\t  'category': 'Trigonometry',\r\n\t  'syntax': [\r\n\t    'coth(x)'\r\n\t  ],\r\n\t  'description': 'Compute the hyperbolic cotangent of x in radians.',\r\n\t  'examples': [\r\n\t    'coth(2)',\r\n\t    '1 / tanh(2)'\r\n\t  ],\r\n\t  'seealso': [\r\n\t    'sech',\r\n\t    'csch',\r\n\t    'tanh'\r\n\t  ]\r\n\t};\r\n\n\n/***/ },\n/* 251 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'csc',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'csc(x)'\n\t  ],\n\t  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',\n\t  'examples': [\n\t    'csc(2)',\n\t    '1 / sin(2)'\n\t  ],\n\t  'seealso': [\n\t    'sec',\n\t    'cot',\n\t    'sin'\n\t  ]\n\t};\n\n\n/***/ },\n/* 252 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\r\n\t  'name': 'csch',\r\n\t  'category': 'Trigonometry',\r\n\t  'syntax': [\r\n\t    'csch(x)'\r\n\t  ],\r\n\t  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',\r\n\t  'examples': [\r\n\t    'csch(2)',\r\n\t    '1 / sinh(2)'\r\n\t  ],\r\n\t  'seealso': [\r\n\t    'sech',\r\n\t    'coth',\r\n\t    'sinh'\r\n\t  ]\r\n\t};\r\n\n\n/***/ },\n/* 253 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'sec',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'sec(x)'\n\t  ],\n\t  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',\n\t  'examples': [\n\t    'sec(2)',\n\t    '1 / cos(2)'\n\t  ],\n\t  'seealso': [\n\t    'cot',\n\t    'csc',\n\t    'cos'\n\t  ]\n\t};\n\n\n/***/ },\n/* 254 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\r\n\t  'name': 'sech',\r\n\t  'category': 'Trigonometry',\r\n\t  'syntax': [\r\n\t    'sech(x)'\r\n\t  ],\r\n\t  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',\r\n\t  'examples': [\r\n\t    'sech(2)',\r\n\t    '1 / cosh(2)'\r\n\t  ],\r\n\t  'seealso': [\r\n\t    'coth',\r\n\t    'csch',\r\n\t    'cosh'\r\n\t  ]\r\n\t};\r\n\n\n/***/ },\n/* 255 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'sin',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'sin(x)'\n\t  ],\n\t  'description': 'Compute the sine of x in radians.',\n\t  'examples': [\n\t    'sin(2)',\n\t    'sin(pi / 4) ^ 2',\n\t    'sin(90 deg)',\n\t    'sin(30 deg)',\n\t    'sin(0.2)^2 + cos(0.2)^2'\n\t  ],\n\t  'seealso': [\n\t    'asin',\n\t    'cos',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },\n/* 256 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\r\n\t  'name': 'sinh',\r\n\t  'category': 'Trigonometry',\r\n\t  'syntax': [\r\n\t    'sinh(x)'\r\n\t  ],\r\n\t  'description': 'Compute the hyperbolic sine of x in radians.',\r\n\t  'examples': [\r\n\t    'sinh(0.5)'\r\n\t  ],\r\n\t  'seealso': [\r\n\t    'cosh',\r\n\t    'tanh'\r\n\t  ]\r\n\t};\r\n\n\n/***/ },\n/* 257 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'tan',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'tan(x)'\n\t  ],\n\t  'description': 'Compute the tangent of x in radians.',\n\t  'examples': [\n\t    'tan(0.5)',\n\t    'sin(0.5) / cos(0.5)',\n\t    'tan(pi / 4)',\n\t    'tan(45 deg)'\n\t  ],\n\t  'seealso': [\n\t    'atan',\n\t    'sin',\n\t    'cos'\n\t  ]\n\t};\n\n\n/***/ },\n/* 258 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\r\n\t  'name': 'tanh',\r\n\t  'category': 'Trigonometry',\r\n\t  'syntax': [\r\n\t    'tanh(x)'\r\n\t  ],\r\n\t  'description': 'Compute the hyperbolic tangent of x in radians.',\r\n\t  'examples': [\r\n\t    'tanh(0.5)',\r\n\t    'sinh(0.5) / cosh(0.5)'\r\n\t  ],\r\n\t  'seealso': [\r\n\t    'sinh',\r\n\t    'cosh'\r\n\t  ]\r\n\t};\r\n\n\n/***/ },\n/* 259 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'to',\n\t  'category': 'Units',\n\t  'syntax': [\n\t    'x to unit',\n\t    'to(x, unit)'\n\t  ],\n\t  'description': 'Change the unit of a value.',\n\t  'examples': [\n\t    '5 inch to cm',\n\t    '3.2kg to g',\n\t    '16 bytes in bits'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 260 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'clone',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'clone(x)'\n\t  ],\n\t  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',\n\t  'examples': [\n\t    'clone(3.5)',\n\t    'clone(2 - 4i)',\n\t    'clone(45 deg)',\n\t    'clone([1, 2; 3, 4])',\n\t    'clone(\"hello world\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 261 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'format',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'format(value)',\n\t    'format(value, precision)'\n\t  ],\n\t  'description': 'Format a value of any type as string.',\n\t  'examples': [\n\t    'format(2.3)',\n\t    'format(3 - 4i)',\n\t    'format([])',\n\t    'format(pi, 3)'\n\t  ],\n\t  'seealso': ['print']\n\t};\n\n\n/***/ },\n/* 262 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'isInteger',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isInteger(x)'\n\t  ],\n\t  'description': 'Test whether a value is an integer number.',\n\t  'examples': [\n\t    'isInteger(2)',\n\t    'isInteger(3.5)',\n\t    'isInteger([3, 0.5, -2])'\n\t  ],\n\t  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n\t};\n\n\n/***/ },\n/* 263 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'isNegative',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isNegative(x)'\n\t  ],\n\t  'description': 'Test whether a value is negative: smaller than zero.',\n\t  'examples': [\n\t    'isNegative(2)',\n\t    'isNegative(0)',\n\t    'isNegative(-4)',\n\t    'isNegative([3, 0.5, -2])'\n\t  ],\n\t  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']\n\t};\n\n\n/***/ },\n/* 264 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'isNumeric',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isNumeric(x)'\n\t  ],\n\t  'description': 'Test whether a value is a numeric value. ' +\n\t    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',\n\t  'examples': [\n\t    'isNumeric(2)',\n\t    'isNumeric(0)',\n\t    'isNumeric(bignumber(500))',\n\t    'isNumeric(fraction(0.125))',\n\t    'isNumeric(\"3\")',\n\t    'isNumeric(2 + 3i)',\n\t    'isNumeric([2.3, \"foo\", false])'\n\t  ],\n\t  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive']\n\t};\n\n\n/***/ },\n/* 265 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'isPositive',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isPositive(x)'\n\t  ],\n\t  'description': 'Test whether a value is positive: larger than zero.',\n\t  'examples': [\n\t    'isPositive(2)',\n\t    'isPositive(0)',\n\t    'isPositive(-4)',\n\t    'isPositive([3, 0.5, -2])'\n\t  ],\n\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n\t};\n\n\n/***/ },\n/* 266 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'isZero',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isZero(x)'\n\t  ],\n\t  'description': 'Test whether a value is zero.',\n\t  'examples': [\n\t    'isZero(2)',\n\t    'isZero(0)',\n\t    'isZero(-4)',\n\t    'isZero([3, 0, -2, 0])'\n\t  ],\n\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']\n\t};\n\n\n/***/ },\n/* 267 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'name': 'typeof',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'typeof(x)'\n\t  ],\n\t  'description': 'Get the type of a variable.',\n\t  'examples': [\n\t    'typeof(3.5)',\n\t    'typeof(2 - 4i)',\n\t    'typeof(45 deg)',\n\t    'typeof(\"hello world\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },\n/* 268 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(269),\n\t  __webpack_require__(292),\n\t  __webpack_require__(293),\n\t  __webpack_require__(294),\n\t  __webpack_require__(295)\n\t];\n\n\n/***/ },\n/* 269 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  var parse = load(__webpack_require__(270));\n\n\t  /**\n\t   * Parse and compile an expression.\n\t   * Returns a an object with a function `eval([scope])` to evaluate the\n\t   * compiled expression.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.compile(expr)                       // returns one node\n\t   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var code = math.compile('sqrt(3^2 + 4^2)');\n\t   *     code.eval(); // 5\n\t   *\n\t   *     var scope = {a: 3, b: 4}\n\t   *     var code = math.compile('a * b'); // 12\n\t   *     code.eval(scope); // 12\n\t   *     scope.a = 5;\n\t   *     code.eval(scope); // 20\n\t   *\n\t   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);\n\t   *     nodes[2].eval(); // 12\n\t   *\n\t   * See also:\n\t   *\n\t   *    parse, eval\n\t   *\n\t   * @param {string | string[] | Array | Matrix} expr\n\t   *            The expression to be compiled\n\t   * @return {{eval: Function} | Array.<{eval: Function}>} code\n\t   *            An object with the compiled expression\n\t   * @throws {Error}\n\t   */\n\t  return typed('compile', {\n\t    'string': function (expr) {\n\t      return parse(expr).compile();\n\t    },\n\n\t    'Array | Matrix': function (expr) {\n\t      return deepMap(expr, function (entry) {\n\t        return parse(entry).compile();\n\t      });\n\t    }\n\t  });\n\t}\n\n\texports.name = 'compile';\n\texports.factory = factory;\n\n\n/***/ },\n/* 270 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar ArgumentsError = __webpack_require__(11);\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  var AccessorNode            = load(__webpack_require__(271));\n\t  var ArrayNode               = load(__webpack_require__(277));\n\t  var AssignmentNode          = load(__webpack_require__(278));\n\t  var BlockNode               = load(__webpack_require__(281));\n\t  var ConditionalNode         = load(__webpack_require__(282));\n\t  var ConstantNode            = load(__webpack_require__(283));\n\t  var FunctionAssignmentNode  = load(__webpack_require__(284));\n\t  var IndexNode               = load(__webpack_require__(285));\n\t  var ObjectNode              = load(__webpack_require__(288));\n\t  var OperatorNode            = load(__webpack_require__(289));\n\t  var ParenthesisNode         = load(__webpack_require__(291));\n\t  var FunctionNode            = load(__webpack_require__(290));\n\t  var RangeNode               = load(__webpack_require__(286));\n\t  var SymbolNode              = load(__webpack_require__(287));\n\n\n\t  /**\n\t   * Parse an expression. Returns a node tree, which can be evaluated by\n\t   * invoking node.eval();\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     parse(expr)\n\t   *     parse(expr, options)\n\t   *     parse([expr1, expr2, expr3, ...])\n\t   *     parse([expr1, expr2, expr3, ...], options)\n\t   *\n\t   * Example:\n\t   *\n\t   *     var node = parse('sqrt(3^2 + 4^2)');\n\t   *     node.compile(math).eval(); // 5\n\t   *\n\t   *     var scope = {a:3, b:4}\n\t   *     var node = parse('a * b'); // 12\n\t   *     var code = node.compile(math);\n\t   *     code.eval(scope); // 12\n\t   *     scope.a = 5;\n\t   *     code.eval(scope); // 20\n\t   *\n\t   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n\t   *     nodes[2].compile(math).eval(); // 12\n\t   *\n\t   * @param {string | string[] | Matrix} expr\n\t   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n\t   *                                                   - `nodes` a set of custom nodes\n\t   * @return {Node | Node[]} node\n\t   * @throws {Error}\n\t   */\n\t  function parse (expr, options) {\n\t    if (arguments.length != 1 && arguments.length != 2) {\n\t      throw new ArgumentsError('parse', arguments.length, 1, 2);\n\t    }\n\n\t    // pass extra nodes\n\t    extra_nodes = (options && options.nodes) ? options.nodes : {};\n\n\t    if (typeof expr === 'string') {\n\t      // parse a single expression\n\t      expression = expr;\n\t      return parseStart();\n\t    }\n\t    else if (Array.isArray(expr) || expr instanceof type.Matrix) {\n\t      // parse an array or matrix with expressions\n\t      return deepMap(expr, function (elem) {\n\t        if (typeof elem !== 'string') throw new TypeError('String expected');\n\n\t        expression = elem;\n\t        return parseStart();\n\t      });\n\t    }\n\t    else {\n\t      // oops\n\t      throw new TypeError('String or matrix expected');\n\t    }\n\t  }\n\n\t  // token types enumeration\n\t  var TOKENTYPE = {\n\t    NULL : 0,\n\t    DELIMITER : 1,\n\t    NUMBER : 2,\n\t    SYMBOL : 3,\n\t    UNKNOWN : 4\n\t  };\n\n\t  // map with all delimiters\n\t  var DELIMITERS = {\n\t    ',': true,\n\t    '(': true,\n\t    ')': true,\n\t    '[': true,\n\t    ']': true,\n\t    '{': true,\n\t    '}': true,\n\t    '\\\"': true,\n\t    ';': true,\n\n\t    '+': true,\n\t    '-': true,\n\t    '*': true,\n\t    '.*': true,\n\t    '/': true,\n\t    './': true,\n\t    '%': true,\n\t    '^': true,\n\t    '.^': true,\n\t    '~': true,\n\t    '!': true,\n\t    '&': true,\n\t    '|': true,\n\t    '^|': true,\n\t    '\\'': true,\n\t    '=': true,\n\t    ':': true,\n\t    '?': true,\n\n\t    '==': true,\n\t    '!=': true,\n\t    '<': true,\n\t    '>': true,\n\t    '<=': true,\n\t    '>=': true,\n\n\t    '<<': true,\n\t    '>>': true,\n\t    '>>>': true\n\t  };\n\n\t  // map with all named delimiters\n\t  var NAMED_DELIMITERS = {\n\t    'mod': true,\n\t    'to': true,\n\t    'in': true,\n\t    'and': true,\n\t    'xor': true,\n\t    'or': true,\n\t    'not': true\n\t  };\n\n\t  var extra_nodes = {};             // current extra nodes\n\t  var expression = '';              // current expression\n\t  var index = 0;                    // current index in expr\n\t  var c = '';                       // current token character in expr\n\t  var token = '';                   // current token\n\t  var token_type = TOKENTYPE.NULL;  // type of the token\n\t  var nesting_level = 0;            // level of nesting inside parameters, used to ignore newline characters\n\t  var conditional_level = null;     // when a conditional is being parsed, the level of the conditional is stored here\n\n\t  /**\n\t   * Get the first character from the expression.\n\t   * The character is stored into the char c. If the end of the expression is\n\t   * reached, the function puts an empty string in c.\n\t   * @private\n\t   */\n\t  function first() {\n\t    index = 0;\n\t    c = expression.charAt(0);\n\t    nesting_level = 0;\n\t    conditional_level = null;\n\t  }\n\n\t  /**\n\t   * Get the next character from the expression.\n\t   * The character is stored into the char c. If the end of the expression is\n\t   * reached, the function puts an empty string in c.\n\t   * @private\n\t   */\n\t  function next() {\n\t    index++;\n\t    c = expression.charAt(index);\n\t  }\n\n\t  /**\n\t   * Preview the next character from the expression.\n\t   * @return {string} cNext\n\t   * @private\n\t   */\n\t  function nextPreview() {\n\t    return expression.charAt(index + 1);\n\t  }\n\n\t  /**\n\t   * Preview the second next character from the expression.\n\t   * @return {string} cNext\n\t   * @private\n\t   */\n\t  function nextNextPreview() {\n\t    return expression.charAt(index + 2);\n\t  }\n\n\t  /**\n\t   * Get next token in the current string expr.\n\t   * The token and token type are available as token and token_type\n\t   * @private\n\t   */\n\t  function getToken() {\n\t    token_type = TOKENTYPE.NULL;\n\t    token = '';\n\n\t    // skip over whitespaces\n\t    // space, tab, and newline when inside parameters\n\t    while (c == ' ' || c == '\\t' || (c == '\\n' && nesting_level)) {\n\t      // TODO: also take '\\r' carriage return as newline? Or does that give problems on mac?\n\t      next();\n\t    }\n\n\t    // skip comment\n\t    if (c == '#') {\n\t      while (c != '\\n' && c != '') {\n\t        next();\n\t      }\n\t    }\n\n\t    // check for end of expression\n\t    if (c == '') {\n\t      // token is still empty\n\t      token_type = TOKENTYPE.DELIMITER;\n\t      return;\n\t    }\n\n\t    // check for new line character\n\t    if (c == '\\n' && !nesting_level) {\n\t      token_type = TOKENTYPE.DELIMITER;\n\t      token = c;\n\t      next();\n\t      return;\n\t    }\n\n\t    // check for delimiters consisting of 3 characters\n\t    var c2 = c + nextPreview();\n\t    var c3 = c2 + nextNextPreview();\n\t    if (c3.length == 3 && DELIMITERS[c3]) {\n\t      token_type = TOKENTYPE.DELIMITER;\n\t      token = c3;\n\t      next();\n\t      next();\n\t      next();\n\t      return;\n\t    }\n\n\t    // check for delimiters consisting of 2 characters\n\t    if (c2.length == 2 && DELIMITERS[c2]) {\n\t      token_type = TOKENTYPE.DELIMITER;\n\t      token = c2;\n\t      next();\n\t      next();\n\t      return;\n\t    }\n\n\t    // check for delimiters consisting of 1 character\n\t    if (DELIMITERS[c]) {\n\t      token_type = TOKENTYPE.DELIMITER;\n\t      token = c;\n\t      next();\n\t      return;\n\t    }\n\n\t    // check for a number\n\t    if (isDigitDot(c)) {\n\t      token_type = TOKENTYPE.NUMBER;\n\n\t      // get number, can have a single dot\n\t      if (c == '.') {\n\t        token += c;\n\t        next();\n\n\t        if (!isDigit(c)) {\n\t          // this is no legal number, it is just a dot (can be dot notation)\n\t          token_type = TOKENTYPE.UNKNOWN;\n\t        }\n\t      }\n\t      else {\n\t        while (isDigit(c)) {\n\t          token += c;\n\t          next();\n\t        }\n\t        if (c == '.') {\n\t          token += c;\n\t          next();\n\t        }\n\t      }\n\t      while (isDigit(c)) {\n\t        token += c;\n\t        next();\n\t      }\n\n\t      // check for exponential notation like \"2.3e-4\", \"1.23e50\" or \"2e+4\"\n\t      c2 = nextPreview();\n\t      if (c == 'E' || c == 'e') {\n\t        if (isDigit(c2) || c2 == '-' || c2 == '+') {\n\t          token += c;\n\t          next();\n\n\t          if (c == '+' || c == '-') {\n\t            token += c;\n\t            next();\n\t          }\n\n\t          // Scientific notation MUST be followed by an exponent\n\t          if (!isDigit(c)) {\n\t            throw createSyntaxError('Digit expected, got \"' + c + '\"');\n\t          }\n\n\t          while (isDigit(c)) {\n\t            token += c;\n\t            next();\n\t          }\n\n\t          if (c == '.') {\n\t            throw createSyntaxError('Digit expected, got \"' + c + '\"');\n\t          }\n\t        }\n\t        else if (c2 == '.') {\n\t          next();\n\t          throw createSyntaxError('Digit expected, got \"' + c + '\"');\n\t        }\n\t      }\n\n\t      return;\n\t    }\n\n\t    // check for variables, functions, named operators\n\t    if (currentIsAlpha()) {\n\t      while (currentIsAlpha() || isDigit(c)) {\n\t        token += c;\n\t        next();\n\t      }\n\n\t      if (NAMED_DELIMITERS.hasOwnProperty(token)) {\n\t        token_type = TOKENTYPE.DELIMITER;\n\t      }\n\t      else {\n\t        token_type = TOKENTYPE.SYMBOL;\n\t      }\n\n\t      return;\n\t    }\n\n\t    // something unknown is found, wrong characters -> a syntax error\n\t    token_type = TOKENTYPE.UNKNOWN;\n\t    while (c != '') {\n\t      token += c;\n\t      next();\n\t    }\n\t    throw createSyntaxError('Syntax error in part \"' + token + '\"');\n\t  }\n\n\t  /**\n\t   * Get next token and skip newline tokens\n\t   */\n\t  function getTokenSkipNewline () {\n\t    do {\n\t      getToken();\n\t    }\n\t    while (token == '\\n');\n\t  }\n\n\t  /**\n\t   * Open parameters.\n\t   * New line characters will be ignored until closeParams() is called\n\t   */\n\t  function openParams() {\n\t    nesting_level++;\n\t  }\n\n\t  /**\n\t   * Close parameters.\n\t   * New line characters will no longer be ignored\n\t   */\n\t  function closeParams() {\n\t    nesting_level--;\n\t  }\n\n\t  /**\n\t   * Checks whether the current character `c` is a valid alpha character:\n\t   *\n\t   * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n\t   * - A underscore                         Ascii: _\n\t   * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n\t   * - A greek letter                       Unicode: \\u0370 - \\u03FF\n\t   * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n\t   *\n\t   * @return {boolean}\n\t   * @private\n\t   */\n\t  function currentIsAlpha () {\n\t    // http://unicode-table.com/en/\n\t    // http://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n\t    //\n\t    // Note: In ES6 will be unicode aware:\n\t    //   http://stackoverflow.com/questions/280712/javascript-unicode-regexes\n\t    //   https://mathiasbynens.be/notes/es6-unicode-regex\n\t    var cPrev = expression.charAt(index - 1);\n\t    var cNext = expression.charAt(index + 1);\n\n\t    var isValidLatinOrGreek = function (p) {\n\t      return /^[a-zA-Z_\\u00C0-\\u02AF\\u0370-\\u03FF]$/.test(p);\n\t    };\n\n\t    var isValidMathSymbol = function (high, low) {\n\t      return /^[\\uD835]$/.test(high) &&\n\t          /^[\\uDC00-\\uDFFF]$/.test(low) &&\n\t          /^[^\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]$/.test(low);\n\t    };\n\n\t    return isValidLatinOrGreek(c)\n\t        || isValidMathSymbol(c, cNext)\n\t        || isValidMathSymbol(cPrev, c);\n\t  }\n\n\t  /**\n\t   * checks if the given char c is a digit or dot\n\t   * @param {string} c   a string with one character\n\t   * @return {boolean}\n\t   * @private\n\t   */\n\t  function isDigitDot (c) {\n\t    return ((c >= '0' && c <= '9') || c == '.');\n\t  }\n\n\t  /**\n\t   * checks if the given char c is a digit\n\t   * @param {string} c   a string with one character\n\t   * @return {boolean}\n\t   * @private\n\t   */\n\t  function isDigit (c) {\n\t    return (c >= '0' && c <= '9');\n\t  }\n\n\t  /**\n\t   * Start of the parse levels below, in order of precedence\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseStart () {\n\t    // get the first character in expression\n\t    first();\n\n\t    getToken();\n\n\t    var node = parseBlock();\n\n\t    // check for garbage at the end of the expression\n\t    // an expression ends with a empty character '' and token_type DELIMITER\n\t    if (token != '') {\n\t      if (token_type == TOKENTYPE.DELIMITER) {\n\t        // user entered a not existing operator like \"//\"\n\n\t        // TODO: give hints for aliases, for example with \"<>\" give as hint \" did you mean != ?\"\n\t        throw createError('Unexpected operator ' + token);\n\t      }\n\t      else {\n\t        throw createSyntaxError('Unexpected part \"' + token + '\"');\n\t      }\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * Parse a block with expressions. Expressions can be separated by a newline\n\t   * character '\\n', or by a semicolon ';'. In case of a semicolon, no output\n\t   * of the preceding line is returned.\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseBlock () {\n\t    var node;\n\t    var blocks = [];\n\t    var visible;\n\n\t    if (token == '') {\n\t      // empty expression\n\t      return new ConstantNode('undefined', 'undefined');\n\t    }\n\n\t    if (token != '\\n' && token != ';') {\n\t      node = parseAssignment();\n\t    }\n\n\t    // TODO: simplify this loop\n\t    while (token == '\\n' || token == ';') {\n\t      if (blocks.length == 0 && node) {\n\t        visible = (token != ';');\n\t        blocks.push({\n\t          node: node,\n\t          visible: visible\n\t        });\n\t      }\n\n\t      getToken();\n\t      if (token != '\\n' && token != ';' && token != '') {\n\t        node = parseAssignment();\n\n\t        visible = (token != ';');\n\t        blocks.push({\n\t          node: node,\n\t          visible: visible\n\t        });\n\t      }\n\t    }\n\n\t    if (blocks.length > 0) {\n\t      return new BlockNode(blocks);\n\t    }\n\t    else {\n\t      return node;\n\t    }\n\t  }\n\n\t  /**\n\t   * Assignment of a function or variable,\n\t   * - can be a variable like 'a=2.3'\n\t   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n\t   * - defining a function like 'f(x) = x^2'\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseAssignment () {\n\t    var name, args, value, valid;\n\n\t    var node = parseConditional();\n\n\t    if (token == '=') {\n\t      if (node && node.isSymbolNode) {\n\t        // parse a variable assignment like 'a = 2/3'\n\t        name = node.name;\n\t        getTokenSkipNewline();\n\t        value = parseAssignment();\n\t        return new AssignmentNode(new SymbolNode(name), value);\n\t      }\n\t      else if (node && node.isAccessorNode) {\n\t        // parse a matrix subset assignment like 'A[1,2] = 4'\n\t        getTokenSkipNewline();\n\t        value = parseAssignment();\n\t        return new AssignmentNode(node.object, node.index, value);\n\t      }\n\t      else if (node && node.isFunctionNode) {\n\t        // parse function assignment like 'f(x) = x^2'\n\t        valid = true;\n\t        args = [];\n\n\t        name = node.name;\n\t        node.args.forEach(function (arg, index) {\n\t          if (arg && arg.isSymbolNode) {\n\t            args[index] = arg.name;\n\t          }\n\t          else {\n\t            valid = false;\n\t          }\n\t        });\n\n\t        if (valid) {\n\t          getTokenSkipNewline();\n\t          value = parseAssignment();\n\t          return new FunctionAssignmentNode(name, args, value);\n\t        }\n\t      }\n\n\t      throw createSyntaxError('Invalid left hand side of assignment operator =');\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * conditional operation\n\t   *\n\t   *     condition ? truePart : falsePart\n\t   *\n\t   * Note: conditional operator is right-associative\n\t   *\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseConditional () {\n\t    var node = parseLogicalOr();\n\n\t    while (token == '?') {\n\t      // set a conditional level, the range operator will be ignored as long\n\t      // as conditional_level == nesting_level.\n\t      var prev = conditional_level;\n\t      conditional_level = nesting_level;\n\t      getTokenSkipNewline();\n\n\t      var condition = node;\n\t      var trueExpr = parseAssignment();\n\n\t      if (token != ':') throw createSyntaxError('False part of conditional expression expected');\n\n\t      conditional_level = null;\n\t      getTokenSkipNewline();\n\n\t      var falseExpr = parseAssignment(); // Note: check for conditional operator again, right associativity\n\n\t      node = new ConditionalNode(condition, trueExpr, falseExpr);\n\n\t      // restore the previous conditional level\n\t      conditional_level = prev;\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * logical or, 'x or y'\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseLogicalOr() {\n\t    var node = parseLogicalXor();\n\n\t    while (token == 'or') {\n\t      getTokenSkipNewline();\n\t      node = new OperatorNode('or', 'or', [node, parseLogicalXor()]);\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * logical exclusive or, 'x xor y'\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseLogicalXor() {\n\t    var node = parseLogicalAnd();\n\n\t    while (token == 'xor') {\n\t      getTokenSkipNewline();\n\t      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd()]);\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * logical and, 'x and y'\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseLogicalAnd() {\n\t    var node = parseBitwiseOr();\n\n\t    while (token == 'and') {\n\t      getTokenSkipNewline();\n\t      node = new OperatorNode('and', 'and', [node, parseBitwiseOr()]);\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * bitwise or, 'x | y'\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseBitwiseOr() {\n\t    var node = parseBitwiseXor();\n\n\t    while (token == '|') {\n\t      getTokenSkipNewline();\n\t      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor()]);\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * bitwise exclusive or (xor), 'x ^| y'\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseBitwiseXor() {\n\t    var node = parseBitwiseAnd();\n\n\t    while (token == '^|') {\n\t      getTokenSkipNewline();\n\t      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd()]);\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * bitwise and, 'x & y'\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseBitwiseAnd () {\n\t    var node = parseRelational();\n\n\t    while (token == '&') {\n\t      getTokenSkipNewline();\n\t      node = new OperatorNode('&', 'bitAnd', [node, parseRelational()]);\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * relational operators\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseRelational () {\n\t    var node, operators, name, fn, params;\n\n\t    node = parseShift();\n\n\t    operators = {\n\t      '==': 'equal',\n\t      '!=': 'unequal',\n\t      '<': 'smaller',\n\t      '>': 'larger',\n\t      '<=': 'smallerEq',\n\t      '>=': 'largerEq'\n\t    };\n\t    while (token in operators) {\n\t      name = token;\n\t      fn = operators[name];\n\n\t      getTokenSkipNewline();\n\t      params = [node, parseShift()];\n\t      node = new OperatorNode(name, fn, params);\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseShift () {\n\t    var node, operators, name, fn, params;\n\n\t    node = parseConversion();\n\n\t    operators = {\n\t      '<<' : 'leftShift',\n\t      '>>' : 'rightArithShift',\n\t      '>>>' : 'rightLogShift'\n\t    };\n\n\t    while (token in operators) {\n\t      name = token;\n\t      fn = operators[name];\n\n\t      getTokenSkipNewline();\n\t      params = [node, parseConversion()];\n\t      node = new OperatorNode(name, fn, params);\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * conversion operators 'to' and 'in'\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseConversion () {\n\t    var node, operators, name, fn, params;\n\n\t    node = parseRange();\n\n\t    operators = {\n\t      'to' : 'to',\n\t      'in' : 'to'   // alias of 'to'\n\t    };\n\n\t    while (token in operators) {\n\t      name = token;\n\t      fn = operators[name];\n\n\t      getTokenSkipNewline();\n\t      \n\t      if (name === 'in' && token === '') {\n\t        // end of expression -> this is the unit 'in' ('inch')\n\t        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);\n\t      }\n\t      else {\n\t        // operator 'a to b' or 'a in b'\n\t        params = [node, parseRange()];\n\t        node = new OperatorNode(name, fn, params);\n\t      }\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseRange () {\n\t    var node, params = [];\n\n\t    if (token == ':') {\n\t      // implicit start=1 (one-based)\n\t      node = new ConstantNode('1', 'number');\n\t    }\n\t    else {\n\t      // explicit start\n\t      node = parseAddSubtract();\n\t    }\n\n\t    if (token == ':' && (conditional_level !== nesting_level)) {\n\t      // we ignore the range operator when a conditional operator is being processed on the same level\n\t      params.push(node);\n\n\t      // parse step and end\n\t      while (token == ':' && params.length < 3) {\n\t        getTokenSkipNewline();\n\n\t        if (token == ')' || token == ']' || token == ',' || token == '') {\n\t          // implicit end\n\t          params.push(new SymbolNode('end'));\n\t        }\n\t        else {\n\t          // explicit end\n\t          params.push(parseAddSubtract());\n\t        }\n\t      }\n\n\t      if (params.length == 3) {\n\t        // params = [start, step, end]\n\t        node = new RangeNode(params[0], params[2], params[1]); // start, end, step\n\t      }\n\t      else { // length == 2\n\t        // params = [start, end]\n\t        node = new RangeNode(params[0], params[1]); // start, end\n\t      }\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * add or subtract\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseAddSubtract ()  {\n\t    var node, operators, name, fn, params;\n\n\t    node = parseMultiplyDivide();\n\n\t    operators = {\n\t      '+': 'add',\n\t      '-': 'subtract'\n\t    };\n\t    while (token in operators) {\n\t      name = token;\n\t      fn = operators[name];\n\n\t      getTokenSkipNewline();\n\t      params = [node, parseMultiplyDivide()];\n\t      node = new OperatorNode(name, fn, params);\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * multiply, divide, modulus\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseMultiplyDivide () {\n\t    var node, last, operators, name, fn;\n\n\t    node = parseUnary();\n\t    last = node;\n\n\t    operators = {\n\t      '*': 'multiply',\n\t      '.*': 'dotMultiply',\n\t      '/': 'divide',\n\t      './': 'dotDivide',\n\t      '%': 'mod',\n\t      'mod': 'mod'\n\t    };\n\n\t    while (true) {\n\t      if (token in operators) {\n\t        // explicit operators\n\t        name = token;\n\t        fn = operators[name];\n\n\t        getTokenSkipNewline();\n\n\t        last = parseUnary();\n\t        node = new OperatorNode(name, fn, [node, last]);\n\t      }\n\t      else if ((token_type == TOKENTYPE.SYMBOL) ||\n\t          (token == 'in' && (node && node.isConstantNode)) ||\n\t          (token_type == TOKENTYPE.NUMBER && !last.isConstantNode) ||\n\t          (token == '(')) {\n\t        // parse implicit multiplication\n\t        //\n\t        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'\n\t        // number:      implicit multiplication like '(2+3)2'\n\t        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'\n\t        last = parseUnary();\n\t        node = new OperatorNode('*', 'multiply', [node, last], true /*implicit*/);\n\t      }\n\t      else {\n\t        break;\n\t      }\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * Unary plus and minus, and logical and bitwise not\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseUnary () {\n\t    var name, params;\n\t    var fn = {\n\t      '-': 'unaryMinus',\n\t      '+': 'unaryPlus',\n\t      '~': 'bitNot',\n\t      'not': 'not'\n\t    }[token];\n\n\t    if (fn) {\n\t      name = token;\n\n\t      getTokenSkipNewline();\n\t      params = [parseUnary()];\n\n\t      return new OperatorNode(name, fn, params);\n\t    }\n\n\t    return parsePow();\n\t  }\n\n\t  /**\n\t   * power\n\t   * Note: power operator is right associative\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parsePow () {\n\t    var node, name, fn, params;\n\n\t    node = parseLeftHandOperators();\n\n\t    if (token == '^' || token == '.^') {\n\t      name = token;\n\t      fn = (name == '^') ? 'pow' : 'dotPow';\n\n\t      getTokenSkipNewline();\n\t      params = [node, parseUnary()]; // Go back to unary, we can have '2^-3'\n\t      node = new OperatorNode(name, fn, params);\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * Left hand operators: factorial x!, transpose x'\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseLeftHandOperators ()  {\n\t    var node, operators, name, fn, params;\n\n\t    node = parseCustomNodes();\n\n\t    operators = {\n\t      '!': 'factorial',\n\t      '\\'': 'transpose'\n\t    };\n\n\t    while (token in operators) {\n\t      name = token;\n\t      fn = operators[name];\n\n\t      getToken();\n\t      params = [node];\n\n\t      node = new OperatorNode(name, fn, params);\n\t      node = parseAccessors(node);\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * Parse a custom node handler. A node handler can be used to process\n\t   * nodes in a custom way, for example for handling a plot.\n\t   *\n\t   * A handler must be passed as second argument of the parse function.\n\t   * - must extend math.expression.node.Node\n\t   * - must contain a function _compile(defs: Object) : string\n\t   * - must contain a function find(filter: Object) : Node[]\n\t   * - must contain a function toString() : string\n\t   * - the constructor is called with a single argument containing all parameters\n\t   *\n\t   * For example:\n\t   *\n\t   *     nodes = {\n\t   *       'plot': PlotHandler\n\t   *     };\n\t   *\n\t   * The constructor of the handler is called as:\n\t   *\n\t   *     node = new PlotHandler(params);\n\t   *\n\t   * The handler will be invoked when evaluating an expression like:\n\t   *\n\t   *     node = math.parse('plot(sin(x), x)', nodes);\n\t   *\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseCustomNodes () {\n\t    var params = [], handler;\n\n\t    if (token_type == TOKENTYPE.SYMBOL && extra_nodes[token]) {\n\t      handler = extra_nodes[token];\n\n\t      getToken();\n\n\t      // parse parameters\n\t      if (token == '(') {\n\t        params = [];\n\n\t        openParams();\n\t        getToken();\n\n\t        if (token != ')') {\n\t          params.push(parseAssignment());\n\n\t          // parse a list with parameters\n\t          while (token == ',') {\n\t            getToken();\n\t            params.push(parseAssignment());\n\t          }\n\t        }\n\n\t        if (token != ')') {\n\t          throw createSyntaxError('Parenthesis ) expected');\n\t        }\n\t        closeParams();\n\t        getToken();\n\t      }\n\n\t      // create a new node handler\n\t      //noinspection JSValidateTypes\n\t      return new handler(params);\n\t    }\n\n\t    return parseSymbol();\n\t  }\n\n\t  /**\n\t   * parse symbols: functions, variables, constants, units\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseSymbol () {\n\t    var node, name;\n\n\t    if (token_type == TOKENTYPE.SYMBOL ||\n\t        (token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS)) {\n\t      name = token;\n\n\t      getToken();\n\n\t      // parse function parameters and matrix index\n\t      node = new SymbolNode(name);\n\t      node = parseAccessors(node);\n\t      return node;\n\t    }\n\n\t    return parseString();\n\t  }\n\n\t  /**\n\t   * parse accessors:\n\t   * - function invocation in round brackets (...), for example sqrt(2)\n\t   * - index enclosed in square brackets [...], for example A[2,3]\n\t   * - dot notation for properties, like foo.bar\n\t   * @param {Node} node    Node on which to apply the parameters. If there\n\t   *                       are no parameters in the expression, the node\n\t   *                       itself is returned\n\t   * @param {string[]} [types]  Filter the types of notations\n\t   *                            can be ['(', '[', '.']\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseAccessors (node, types) {\n\t    var params;\n\n\t    while ((token == '(' || token == '[' || token == '.') &&\n\t        (!types || types.indexOf(token) !== -1)) {\n\t      params = [];\n\n\t      if (token == '(') {\n\t        if (node.isSymbolNode || node.isAccessorNode) {\n\t          // function invocation like fn(2, 3)\n\t          openParams();\n\t          getToken();\n\n\t          if (token != ')') {\n\t            params.push(parseAssignment());\n\n\t            // parse a list with parameters\n\t            while (token == ',') {\n\t              getToken();\n\t              params.push(parseAssignment());\n\t            }\n\t          }\n\n\t          if (token != ')') {\n\t            throw createSyntaxError('Parenthesis ) expected');\n\t          }\n\t          closeParams();\n\t          getToken();\n\n\t          node = new FunctionNode(node, params);\n\t        }\n\t        else {\n\t          // implicit multiplication like (2+3)(4+5)\n\t          // don't parse it here but let it be handled by parseMultiplyDivide\n\t          // with correct precedence\n\t          return node;\n\t        }\n\t      }\n\t      else if (token == '[') {\n\t        // index notation like variable[2, 3]\n\t        openParams();\n\t        getToken();\n\n\t        if (token != ']') {\n\t          params.push(parseAssignment());\n\n\t          // parse a list with parameters\n\t          while (token == ',') {\n\t            getToken();\n\t            params.push(parseAssignment());\n\t          }\n\t        }\n\n\t        if (token != ']') {\n\t          throw createSyntaxError('Parenthesis ] expected');\n\t        }\n\t        closeParams();\n\t        getToken();\n\n\t        node = new AccessorNode(node, new IndexNode(params));\n\t      }\n\t      else {\n\t        // dot notation like variable.prop\n\t        getToken();\n\n\t        if (token_type != TOKENTYPE.SYMBOL) {\n\t          throw createSyntaxError('Property name expected after dot');\n\t        }\n\t        params.push(new ConstantNode(token));\n\t        getToken();\n\n\t        var dotNotation = true;\n\t        node = new AccessorNode(node, new IndexNode(params, dotNotation));\n\t      }\n\t    }\n\n\t    return node;\n\t  }\n\n\t  /**\n\t   * parse a string.\n\t   * A string is enclosed by double quotes\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseString () {\n\t    var node, str;\n\n\t    if (token == '\"') {\n\t      str = parseStringToken();\n\n\t      // create constant\n\t      node = new ConstantNode(str, 'string');\n\n\t      // parse index parameters\n\t      node = parseAccessors(node);\n\n\t      return node;\n\t    }\n\n\t    return parseMatrix();\n\t  }\n\n\t  /**\n\t   * Parse a string surrounded by double quotes \"...\"\n\t   * @return {string}\n\t   */\n\t  function parseStringToken () {\n\t    var str = '';\n\n\t    while (c != '' && c != '\\\"') {\n\t      if (c == '\\\\') {\n\t        // escape character\n\t        str += c;\n\t        next();\n\t      }\n\n\t      str += c;\n\t      next();\n\t    }\n\n\t    getToken();\n\t    if (token != '\"') {\n\t      throw createSyntaxError('End of string \" expected');\n\t    }\n\t    getToken();\n\n\t    return str;\n\t  }\n\n\t  /**\n\t   * parse the matrix\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseMatrix () {\n\t    var array, params, rows, cols;\n\n\t    if (token == '[') {\n\t      // matrix [...]\n\t      openParams();\n\t      getToken();\n\n\t      if (token != ']') {\n\t        // this is a non-empty matrix\n\t        var row = parseRow();\n\n\t        if (token == ';') {\n\t          // 2 dimensional array\n\t          rows = 1;\n\t          params = [row];\n\n\t          // the rows of the matrix are separated by dot-comma's\n\t          while (token == ';') {\n\t            getToken();\n\n\t            params[rows] = parseRow();\n\t            rows++;\n\t          }\n\n\t          if (token != ']') {\n\t            throw createSyntaxError('End of matrix ] expected');\n\t          }\n\t          closeParams();\n\t          getToken();\n\n\t          // check if the number of columns matches in all rows\n\t          cols = params[0].items.length;\n\t          for (var r = 1; r < rows; r++) {\n\t            if (params[r].items.length != cols) {\n\t              throw createError('Column dimensions mismatch ' +\n\t                  '(' + params[r].items.length + ' != ' + cols + ')');\n\t            }\n\t          }\n\n\t          array = new ArrayNode(params);\n\t        }\n\t        else {\n\t          // 1 dimensional vector\n\t          if (token != ']') {\n\t            throw createSyntaxError('End of matrix ] expected');\n\t          }\n\t          closeParams();\n\t          getToken();\n\n\t          array = row;\n\t        }\n\t      }\n\t      else {\n\t        // this is an empty matrix \"[ ]\"\n\t        closeParams();\n\t        getToken();\n\t        array = new ArrayNode([]);\n\t      }\n\n\t      return parseAccessors(array);\n\t    }\n\n\t    return parseObject();\n\t  }\n\n\t  /**\n\t   * Parse a single comma-separated row from a matrix, like 'a, b, c'\n\t   * @return {ArrayNode} node\n\t   */\n\t  function parseRow () {\n\t    var params = [parseAssignment()];\n\t    var len = 1;\n\n\t    while (token == ',') {\n\t      getToken();\n\n\t      // parse expression\n\t      params[len] = parseAssignment();\n\t      len++;\n\t    }\n\n\t    return new ArrayNode(params);\n\t  }\n\n\t  /**\n\t   * parse an object, enclosed in angle brackets{...}, for example {value: 2}\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseObject () {\n\t    if (token == '{') {\n\t      var key;\n\n\t      var properties = {};\n\t      do {\n\t        getToken();\n\n\t        if (token != '}') {\n\t          // parse key\n\t          if (token == '\"') {\n\t            key = parseStringToken();\n\t          }\n\t          else if (token_type == TOKENTYPE.SYMBOL) {\n\t            key = token;\n\t            getToken();\n\t          }\n\t          else {\n\t            throw createSyntaxError('Symbol or string expected as object key');\n\t          }\n\n\t          // parse key/value separator\n\t          if (token != ':') {\n\t            throw createSyntaxError('Colon : expected after object key');\n\t          }\n\t          getToken();\n\n\t          // parse key\n\t          properties[key] = parseAssignment();\n\t        }\n\t      }\n\t      while (token == ',');\n\n\t      if (token != '}') {\n\t        throw createSyntaxError('Comma , or bracket } expected after object value');\n\t      }\n\t      getToken();\n\n\t      var node = new ObjectNode(properties);\n\n\t      // parse index parameters\n\t      node = parseAccessors(node);\n\n\t      return node;\n\t    }\n\n\t    return parseNumber();\n\t  }\n\n\t  /**\n\t   * parse a number\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseNumber () {\n\t    var number;\n\n\t    if (token_type == TOKENTYPE.NUMBER) {\n\t      // this is a number\n\t      number = token;\n\t      getToken();\n\n\t      return new ConstantNode(number, 'number');\n\t    }\n\n\t    return parseParentheses();\n\t  }\n\n\t  /**\n\t   * parentheses\n\t   * @return {Node} node\n\t   * @private\n\t   */\n\t  function parseParentheses () {\n\t    var node;\n\n\t    // check if it is a parenthesized expression\n\t    if (token == '(') {\n\t      // parentheses (...)\n\t      openParams();\n\t      getToken();\n\n\t      node = parseAssignment(); // start again\n\n\t      if (token != ')') {\n\t        throw createSyntaxError('Parenthesis ) expected');\n\t      }\n\t      closeParams();\n\t      getToken();\n\n\t      node = new ParenthesisNode(node);\n\t      node = parseAccessors(node);\n\t      return node;\n\t    }\n\n\t    return parseEnd();\n\t  }\n\n\t  /**\n\t   * Evaluated when the expression is not yet ended but expected to end\n\t   * @return {Node} res\n\t   * @private\n\t   */\n\t  function parseEnd () {\n\t    if (token == '') {\n\t      // syntax error or unexpected end of expression\n\t      throw createSyntaxError('Unexpected end of expression');\n\t    } else {\n\t      throw createSyntaxError('Value expected');\n\t    }\n\t  }\n\n\t  /**\n\t   * Shortcut for getting the current row value (one based)\n\t   * Returns the line of the currently handled expression\n\t   * @private\n\t   */\n\t  /* TODO: implement keeping track on the row number\n\t  function row () {\n\t    return null;\n\t  }\n\t  */\n\n\t  /**\n\t   * Shortcut for getting the current col value (one based)\n\t   * Returns the column (position) where the last token starts\n\t   * @private\n\t   */\n\t  function col () {\n\t    return index - token.length + 1;\n\t  }\n\n\t  /**\n\t   * Create an error\n\t   * @param {string} message\n\t   * @return {SyntaxError} instantiated error\n\t   * @private\n\t   */\n\t  function createSyntaxError (message) {\n\t    var c = col();\n\t    var error = new SyntaxError(message + ' (char ' + c + ')');\n\t    error['char'] = c;\n\n\t    return error;\n\t  }\n\n\t  /**\n\t   * Create an error\n\t   * @param {string} message\n\t   * @return {Error} instantiated error\n\t   * @private\n\t   */\n\t  function createError (message) {\n\t    var c = col();\n\t    var error = new SyntaxError(message + ' (char ' + c + ')');\n\t    error['char'] = c;\n\n\t    return error;\n\t  }\n\n\t  return parse;\n\t};\n\n\texports.name = 'parse';\n\texports.path = 'expression';\n\texports.factory = factory;\n\n\n/***/ },\n/* 271 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(272));\n\t  var access = load(__webpack_require__(274));\n\n\t  /**\n\t   * @constructor AccessorNode\n\t   * @extends {Node}\n\t   * Access an object property or get a matrix subset\n\t   *\n\t   * @param {Node} object                 The object from which to retrieve\n\t   *                                      a property or subset.\n\t   * @param {IndexNode} index             IndexNode containing ranges\n\t   */\n\t  function AccessorNode(object, index) {\n\t    if (!(this instanceof AccessorNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    if (!(object && object.isNode)) {\n\t      throw new TypeError('Node expected for parameter \"object\"');\n\t    }\n\t    if (!(index && index.isIndexNode)) {\n\t      throw new TypeError('IndexNode expected for parameter \"index\"');\n\t    }\n\n\t    this.object = object || null;\n\t    this.index = index;\n\n\t    // readonly property name\n\t    Object.defineProperty(this, 'name', {\n\t      get: function () {\n\t        if (this.index) {\n\t          return (this.index.isObjectProperty())\n\t              ? this.index.getObjectProperty()\n\t              : '';\n\t        }\n\t        else {\n\t          return this.object.name || '';\n\t        }\n\t      }.bind(this),\n\t      set: function () {\n\t        throw new Error('Cannot assign a new name, name is read-only');\n\t      }\n\t    });\n\t  }\n\n\t  AccessorNode.prototype = new Node();\n\n\t  AccessorNode.prototype.type = 'AccessorNode';\n\n\t  AccessorNode.prototype.isAccessorNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} js\n\t   * @private\n\t   */\n\t  AccessorNode.prototype._compile = function (defs, args) {\n\t    defs.access = access;\n\n\t    var object = this.object._compile(defs, args);\n\t    var index = this.index._compile(defs, args);\n\n\t    if (this.index.isObjectProperty()) {\n\t      return object + '[\"' + this.index.getObjectProperty() + '\"]';\n\t    }\n\t    else if (this.index.needsSize()) {\n\t      // if some parameters use the 'end' parameter, we need to calculate the size\n\t      return '(function () {' +\n\t          '  var object = ' + object + ';' +\n\t          '  var size = math.size(object).valueOf();' +\n\t          '  return access(object, ' + index + ');' +\n\t          '})()';\n\t    }\n\t    else {\n\t      return 'access(' + object + ', ' + index + ')';\n\t    }\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  AccessorNode.prototype.forEach = function (callback) {\n\t    callback(this.object, 'object', this);\n\t    callback(this.index, 'index', this);\n\t  };\n\n\t  /**\n\t   * Create a new AccessorNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {AccessorNode} Returns a transformed copy of the node\n\t   */\n\t  AccessorNode.prototype.map = function (callback) {\n\t    return new AccessorNode(\n\t        this._ifNode(callback(this.object, 'object', this)),\n\t        this._ifNode(callback(this.index, 'index', this))\n\t    );\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {AccessorNode}\n\t   */\n\t  AccessorNode.prototype.clone = function () {\n\t    return new AccessorNode(this.object, this.index);\n\t  };\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string}\n\t   */\n\t  AccessorNode.prototype._toString = function (options) {\n\t    var object = this.object.toString(options);\n\t    if (needParenthesis(this.object)) {\n\t      object = '(' + object + ')';\n\t    }\n\n\t    return object + this.index.toString(options);\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string}\n\t   */\n\t  AccessorNode.prototype._toTex = function (options) {\n\t    var object = this.object.toTex(options);\n\t    if (needParenthesis(this.object)) {\n\t      object = '\\\\left(' + object + '\\\\right)';\n\t    }\n\n\t    return object + this.index.toTex(options);\n\t  };\n\n\t  /**\n\t   * Are parenthesis needed?\n\t   * @private\n\t   */\n\t  function needParenthesis(node) {\n\t    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n\t    return !(node.isAccessorNode || node.isArrayNode || node.isConstantNode\n\t        || node.isFunctionNode || node.isObjectNode || node.isParenthesisNode\n\t        || node.isSymbolNode);\n\t  }\n\n\t  return AccessorNode;\n\t}\n\n\texports.name = 'AccessorNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 272 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar keywords = __webpack_require__(273);\n\tvar extend = __webpack_require__(3).extend;\n\n\tfunction factory (type, config, load, typed, math) {\n\t  /**\n\t   * Node\n\t   */\n\t  function Node() {\n\t    if (!(this instanceof Node)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\t  }\n\n\t  /**\n\t   * Evaluate the node\n\t   * @param {Object} [scope]  Scope to read/write variables\n\t   * @return {*}              Returns the result\n\t   */\n\t  Node.prototype.eval = function(scope) {\n\t    return this.compile().eval(scope);\n\t  };\n\n\t  Node.prototype.type = 'Node';\n\n\t  Node.prototype.isNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @return {{eval: function}} expr  Returns an object with a function 'eval',\n\t   *                                  which can be invoked as expr.eval([scope]),\n\t   *                                  where scope is an optional object with\n\t   *                                  variables.\n\t   */\n\t  Node.prototype.compile = function () {\n\t    // TODO: calling compile(math) is deprecated since version 2.0.0. Remove this warning some day\n\t    if (arguments.length > 0) {\n\t      throw new Error('Calling compile(math) is deprecated. Call the function as compile() instead.');\n\t    }\n\n\t    // definitions globally available inside the closure of the compiled expressions\n\t    var defs = {\n\t      math: math.expression.transform,\n\t      args: {}, // can be filled with names of FunctionAssignment arguments\n\t      _validateScope: _validateScope\n\t    };\n\n\t    // will be used to put local function arguments\n\t    var args = {};\n\n\t    var code = this._compile(defs, args);\n\n\t    var defsCode = Object.keys(defs).map(function (name) {\n\t      return '    var ' + name + ' = defs[\"' + name + '\"];';\n\t    });\n\n\t    var factoryCode =\n\t        defsCode.join(' ') +\n\t        'return {' +\n\t        '  \"eval\": function (scope) {' +\n\t        '    if (scope) _validateScope(scope);' +\n\t        '    scope = scope || {};' +\n\t        '    return ' + code + ';' +\n\t        '  }' +\n\t        '};';\n\n\t    var factory = new Function('defs', factoryCode);\n\t    return factory(defs);\n\t  };\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          and constants globally available inside the closure\n\t   *                          of the compiled expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} js\n\t   * @private\n\t   */\n\t  Node.prototype._compile = function (defs, args) {\n\t    // must be implemented by each of the Node implementations\n\t    throw new Error('Cannot compile a Node interface');\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  Node.prototype.forEach = function (callback) {\n\t    // must be implemented by each of the Node implementations\n\t    throw new Error('Cannot run forEach on a Node interface');\n\t  };\n\n\t  /**\n\t   * Create a new Node having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {OperatorNode} Returns a transformed copy of the node\n\t   */\n\t  Node.prototype.map = function (callback) {\n\t    // must be implemented by each of the Node implementations\n\t    throw new Error('Cannot run map on a Node interface');\n\t  };\n\n\t  /**\n\t   * Validate whether an object is a Node, for use with map\n\t   * @param {Node} node\n\t   * @returns {Node} Returns the input if it's a node, else throws an Error\n\t   * @protected\n\t   */\n\t  Node.prototype._ifNode = function (node) {\n\t    if (!(node && node.isNode)) {\n\t      throw new TypeError('Callback function must return a Node');\n\t    }\n\n\t    return node;\n\t  };\n\n\t  /**\n\t   * Recursively traverse all nodes in a node tree. Executes given callback for\n\t   * this node and each of its child nodes.\n\t   * @param {function(node: Node, path: string, parent: Node)} callback\n\t   *          A callback called for every node in the node tree.\n\t   */\n\t  Node.prototype.traverse = function (callback) {\n\t    // execute callback for itself\n\t    callback(this, null, null);\n\n\t    // recursively traverse over all childs of a node\n\t    function _traverse(node, callback) {\n\t      node.forEach(function (child, path, parent) {\n\t        callback(child, path, parent);\n\t        _traverse(child, callback);\n\t      });\n\t    }\n\n\t    _traverse(this, callback);\n\t  };\n\n\t  /**\n\t   * Recursively transform a node tree via a transform function.\n\t   *\n\t   * For example, to replace all nodes of type SymbolNode having name 'x' with a\n\t   * ConstantNode with value 2:\n\t   *\n\t   *     var res = Node.transform(function (node, path, parent) {\n\t   *       if (node && node.isSymbolNode) && (node.name == 'x')) {\n\t   *         return new ConstantNode(2);\n\t   *       }\n\t   *       else {\n\t   *         return node;\n\t   *       }\n\t   *     });\n\t   *\n\t   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n\t   *          A mapping function accepting a node, and returning\n\t   *          a replacement for the node or the original node.\n\t   *          Signature: callback(node: Node, index: string, parent: Node) : Node\n\t   * @return {Node} Returns the original node or its replacement\n\t   */\n\t  Node.prototype.transform = function (callback) {\n\t    // traverse over all childs\n\t    function _transform (node, callback) {\n\t      return node.map(function(child, path, parent) {\n\t        var replacement = callback(child, path, parent);\n\t        return _transform(replacement, callback);\n\t      });\n\t    }\n\n\t    var replacement = callback(this, null, null);\n\t    return _transform(replacement, callback);\n\t  };\n\n\t  /**\n\t   * Find any node in the node tree matching given filter function. For example, to\n\t   * find all nodes of type SymbolNode having name 'x':\n\t   *\n\t   *     var results = Node.filter(function (node) {\n\t   *       return (node && node.isSymbolNode) && (node.name == 'x');\n\t   *     });\n\t   *\n\t   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n\t   *            A test function returning true when a node matches, and false\n\t   *            otherwise. Function signature:\n\t   *            callback(node: Node, index: string, parent: Node) : boolean\n\t   * @return {Node[]} nodes       An array with nodes matching given filter criteria\n\t   */\n\t  Node.prototype.filter = function (callback) {\n\t    var nodes = [];\n\n\t    this.traverse(function (node, path, parent) {\n\t      if (callback(node, path, parent)) {\n\t        nodes.push(node);\n\t      }\n\t    });\n\n\t    return nodes;\n\t  };\n\n\t  // TODO: deprecated since version 1.1.0, remove this some day\n\t  Node.prototype.find = function () {\n\t    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');\n\t  };\n\n\t  // TODO: deprecated since version 1.1.0, remove this some day\n\t  Node.prototype.match = function () {\n\t    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {Node}\n\t   */\n\t  Node.prototype.clone = function () {\n\t    // must be implemented by each of the Node implementations\n\t    throw new Error('Cannot clone a Node interface');\n\t  };\n\n\t  /**\n\t  /**\n\t   * Get string representation. (wrapper function)\n\t   *\n\t   * This function can get an object of the following form:\n\t   * {\n\t   *    handler: //This can be a callback function of the form\n\t   *             // \"function callback(node, options)\"or\n\t   *             // a map that maps function names (used in FunctionNodes)\n\t   *             // to callbacks\n\t   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n\t   * }\n\t   *\n\t   * @param {Object} [options]\n\t   * @return {string}\n\t   */\n\t  Node.prototype.toString = function (options) {\n\t    var customString;\n\t    if (options && typeof options == \"object\") {\n\t        switch (typeof options.handler) {\n\t          case 'object':\n\t          case 'undefined':\n\t            break;\n\t          case 'function':\n\t            customString = options.handler(this, options);\n\t            break;\n\t          default:\n\t            throw new TypeError('Object or function expected as callback');\n\t        }\n\t    }\n\n\t    if (typeof customString !== 'undefined') {\n\t      return customString;\n\t    }\n\n\t    return this._toString(options);\n\t  };\n\n\t  /**\n\t   * Internal function to generate the string output.\n\t   * This has to be implemented by every Node\n\t   *\n\t   * @throws {Error}\n\t   */\n\t  Node.prototype._toString = function () {\n\t    //must be implemented by each of the Node implementations\n\t    throw new Error('_toString not implemented for ' + this.type);\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation. (wrapper function)\n\t   *\n\t   * This function can get an object of the following form:\n\t   * {\n\t   *    handler: //This can be a callback function of the form\n\t   *             // \"function callback(node, options)\"or\n\t   *             // a map that maps function names (used in FunctionNodes)\n\t   *             // to callbacks\n\t   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n\t   * }\n\t   *\n\t   * @param {Object} [options]\n\t   * @return {string}\n\t   */\n\t  Node.prototype.toTex = function (options) {\n\t    var customTex;\n\t    if (options && typeof options == 'object') {\n\t      switch (typeof options.handler) {\n\t        case 'object':\n\t        case 'undefined':\n\t          break;\n\t        case 'function':\n\t          customTex = options.handler(this, options);\n\t          break;\n\t        default:\n\t          throw new TypeError('Object or function expected as callback');\n\t      }\n\t    }\n\n\t    if (typeof customTex !== 'undefined') {\n\t      return customTex;\n\t    }\n\n\t    return this._toTex(options);\n\t  };\n\n\t  /**\n\t   * Internal function to generate the LaTeX output.\n\t   * This has to be implemented by every Node\n\t   *\n\t   * @param {Object} [options]\n\t   * @throws {Error}\n\t   */\n\t  Node.prototype._toTex = function (options) {\n\t    //must be implemented by each of the Node implementations\n\t    throw new Error('_toTex not implemented for ' + this.type);\n\t  };\n\n\t  /**\n\t   * Get identifier.\n\t   * @return {string}\n\t   */\n\t  Node.prototype.getIdentifier = function () {\n\t    return this.type;\n\t  };\n\n\t  /**\n\t   * Get the content of the current Node.\n\t   * @return {Node} node\n\t   **/\n\t  Node.prototype.getContent = function () {\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Validate the symbol names of a scope.\n\t   * Throws an error when the scope contains an illegal symbol.\n\t   * @param {Object} scope\n\t   */\n\t  function _validateScope(scope) {\n\t    for (var symbol in scope) {\n\t      if (scope.hasOwnProperty(symbol)) {\n\t        if (symbol in keywords) {\n\t          throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  return Node;\n\t}\n\n\texports.name = 'Node';\n\texports.path = 'expression.node';\n\texports.math = true; // request access to the math namespace as 5th argument of the factory function\n\texports.factory = factory;\n\n\n/***/ },\n/* 273 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t// Reserved keywords not allowed to use in the parser\n\tmodule.exports = {\n\t  end: true\n\t};\n\n\n/***/ },\n/* 274 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar errorTransform = __webpack_require__(275).transform;\n\n\tfunction factory (type, config, load, typed) {\n\t  var subset = load(__webpack_require__(276));\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Retrieve part of an object:\n\t   *\n\t   * - Retrieve a property from an object\n\t   * - Retrieve a part of a string\n\t   * - Retrieve a matrix subset\n\t   *\n\t   * @param {Object | Array | Matrix | string} object\n\t   * @param {Index} index\n\t   * @return {Object | Array | Matrix | string} Returns the subset\n\t   */\n\t  return function access(object, index) {\n\t    try {\n\t      if (Array.isArray(object)) {\n\t        return matrix(object).subset(index).valueOf();\n\t      }\n\t      else if (object && typeof object.subset === 'function') { // Matrix\n\t        return object.subset(index);\n\t      }\n\t      else if (typeof object === 'string') {\n\t        // TODO: move getStringSubset into a separate util file, use that\n\t        return subset(object, index);\n\t      }\n\t      else if (typeof object === 'object') {\n\t        if (!index.isObjectProperty()) {\n\t          throw TypeError('Cannot apply a numeric index as object property');\n\t        }\n\t        return object[index.getObjectProperty()];\n\t      }\n\t      else {\n\t        throw new TypeError('Cannot apply index: unsupported type of object');\n\t      }\n\t    }\n\t    catch (err) {\n\t      throw errorTransform(err);\n\t    }\n\t  }\n\t}\n\n\texports.factory = factory;\n\n\n/***/ },\n/* 275 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar IndexError = __webpack_require__(43);\n\n\t/**\n\t * Transform zero-based indices to one-based indices in errors\n\t * @param {Error} err\n\t * @returns {Error} Returns the transformed error\n\t */\n\texports.transform = function (err) {\n\t  if (err && err.isIndexError) {\n\t    return new IndexError(\n\t        err.index + 1,\n\t        err.min + 1,\n\t        err.max !== undefined ? err.max + 1 : undefined);\n\t  }\n\n\t  return err;\n\t};\n\n\n/***/ },\n/* 276 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar clone = __webpack_require__(3).clone;\n\tvar validateIndex = __webpack_require__(40).validateIndex;\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Get or set a subset of a matrix or string.\n\t   *\n\t   * Syntax:\n\t   *     math.subset(value, index)                                // retrieve a subset\n\t   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n\t   *\n\t   * Examples:\n\t   *\n\t   *     // get a subset\n\t   *     var d = [[1, 2], [3, 4]];\n\t   *     math.subset(d, math.index(1, 0));        // returns 3\n\t   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]\n\t   *\n\t   *     // replace a subset\n\t   *     var e = [];\n\t   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]\n\t   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]\n\t   *\n\t   * See also:\n\t   *\n\t   *     size, resize, squeeze, index\n\t   *\n\t   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n\t   * @param {Index} index                     An index containing ranges for each\n\t   *                                          dimension\n\t   * @param {*} [replacement]                 An array, matrix, or scalar.\n\t   *                                          If provided, the subset is replaced with replacement.\n\t   *                                          If not provided, the subset is returned\n\t   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n\t   *                                          the matrix is resized. If not provided,\n\t   *                                          math.matrix elements will be left undefined.\n\t   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n\t   */\n\t  var subset = typed('subset', {\n\t    // get subset\n\t    'Array, Index': function (value, index) {\n\t      var m = matrix(value);\n\t      var subset = m.subset(index);       // returns a Matrix\n\t      return subset && subset.valueOf();  // return an Array (like the input)\n\t    },\n\n\t    'Matrix, Index': function (value, index) {\n\t      return value.subset(index);\n\t    },\n\n\t    'Object, Index': _getObjectProperty,\n\n\t    'string, Index': _getSubstring,\n\n\t    // set subset\n\t    'Array, Index, any': function (value, index, replacement) {\n\t      return matrix(clone(value))\n\t          .subset(index, replacement, undefined)\n\t          .valueOf();\n\t    },\n\n\t    'Array, Index, any, any': function (value, index, replacement, defaultValue) {\n\t      return matrix(clone(value))\n\t          .subset(index, replacement, defaultValue)\n\t          .valueOf();\n\t    },\n\n\t    'Matrix, Index, any': function (value, index, replacement) {\n\t      return value.clone().subset(index, replacement);\n\t    },\n\n\t    'Matrix, Index, any, any': function (value, index, replacement, defaultValue) {\n\t      return value.clone().subset(index, replacement, defaultValue);\n\t    },\n\n\t    'string, Index, string': _setSubstring,\n\t    'string, Index, string, string': _setSubstring,\n\t    'Object, Index, any': _setObjectProperty\n\t  });\n\n\t  subset.toTex = undefined; // use default template\n\n\t  return subset;\n\n\t  /**\n\t   * Retrieve a subset of a string\n\t   * @param {string} str            string from which to get a substring\n\t   * @param {Index} index           An index containing ranges for each dimension\n\t   * @returns {string} substring\n\t   * @private\n\t   */\n\t  function _getSubstring(str, index) {\n\t    if (!index || index.isIndex !== true) {\n\t      // TODO: better error message\n\t      throw new TypeError('Index expected');\n\t    }\n\t    if (index.size().length != 1) {\n\t      throw new DimensionError(index.size().length, 1);\n\t    }\n\n\t    // validate whether the range is out of range\n\t    var strLen = str.length;\n\t    validateIndex(index.min()[0], strLen);\n\t    validateIndex(index.max()[0], strLen);\n\n\t    var range = index.dimension(0);\n\n\t    var substr = '';\n\t    range.forEach(function (v) {\n\t      substr += str.charAt(v);\n\t    });\n\n\t    return substr;\n\t  }\n\n\t  /**\n\t   * Replace a substring in a string\n\t   * @param {string} str            string to be replaced\n\t   * @param {Index} index           An index containing ranges for each dimension\n\t   * @param {string} replacement    Replacement string\n\t   * @param {string} [defaultValue] Default value to be uses when resizing\n\t   *                                the string. is ' ' by default\n\t   * @returns {string} result\n\t   * @private\n\t   */\n\t  function _setSubstring(str, index, replacement, defaultValue) {\n\t    if (!index || index.isIndex !== true) {\n\t      // TODO: better error message\n\t      throw new TypeError('Index expected');\n\t    }\n\t    if (index.size().length != 1) {\n\t      throw new DimensionError(index.size().length, 1);\n\t    }\n\t    if (defaultValue !== undefined) {\n\t      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n\t        throw new TypeError('Single character expected as defaultValue');\n\t      }\n\t    }\n\t    else {\n\t      defaultValue = ' ';\n\t    }\n\n\t    var range = index.dimension(0);\n\t    var len = range.size()[0];\n\n\t    if (len != replacement.length) {\n\t      throw new DimensionError(range.size()[0], replacement.length);\n\t    }\n\n\t    // validate whether the range is out of range\n\t    var strLen = str.length;\n\t    validateIndex(index.min()[0]);\n\t    validateIndex(index.max()[0]);\n\n\t    // copy the string into an array with characters\n\t    var chars = [];\n\t    for (var i = 0; i < strLen; i++) {\n\t      chars[i] = str.charAt(i);\n\t    }\n\n\t    range.forEach(function (v, i) {\n\t      chars[v] = replacement.charAt(i[0]);\n\t    });\n\n\t    // initialize undefined characters with a space\n\t    if (chars.length > strLen) {\n\t      for (i = strLen - 1, len = chars.length; i < len; i++) {\n\t        if (!chars[i]) {\n\t          chars[i] = defaultValue;\n\t        }\n\t      }\n\t    }\n\n\t    return chars.join('');\n\t  }\n\t}\n\n\t/**\n\t * Retrieve a property from an object\n\t * @param {Object} object\n\t * @param {Index} index\n\t * @return {*} Returns the value of the property\n\t * @private\n\t */\n\tfunction _getObjectProperty (object, index) {\n\t  if (index.size().length !== 1) {\n\t    throw new DimensionError(index.size(), 1);\n\t  }\n\n\t  var key = index.dimension(0);\n\t  if (typeof key !== 'string') {\n\t    throw new TypeError('String expected as index to retrieve an object property');\n\t  }\n\n\t  return object[key];\n\t}\n\n\t/**\n\t * Set a property on an object\n\t * @param {Object} object\n\t * @param {Index} index\n\t * @param {*} replacement\n\t * @return {*} Returns the updated object\n\t * @private\n\t */\n\tfunction _setObjectProperty (object, index, replacement) {\n\t  if (index.size().length !== 1) {\n\t    throw new DimensionError(index.size(), 1);\n\t  }\n\n\t  var key = index.dimension(0);\n\t  if (typeof key !== 'string') {\n\t    throw new TypeError('String expected as index to retrieve an object property');\n\t  }\n\n\t  // clone the object, and apply the property to the clone\n\t  var updated = clone(object);\n\t  updated[key] = replacement;\n\n\t  return updated;\n\t}\n\n\texports.name = 'subset';\n\texports.factory = factory;\n\n\n/***/ },\n/* 277 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(272));\n\n\t  /**\n\t   * @constructor ArrayNode\n\t   * @extends {Node}\n\t   * Holds an 1-dimensional array with items\n\t   * @param {Node[]} [items]   1 dimensional array with items\n\t   */\n\t  function ArrayNode(items) {\n\t    if (!(this instanceof ArrayNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    this.items = items || [];\n\n\t    // validate input\n\t    if (!Array.isArray(this.items)\n\t        || !this.items.every(function (item) {return item && item.isNode;})) {\n\t      throw new TypeError('Array containing Nodes expected');\n\t    }\n\n\t    // TODO: deprecated since v3, remove some day\n\t    var deprecated = function () {\n\t      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');\n\t    };\n\t    Object.defineProperty(this, 'nodes', { get: deprecated, set: deprecated });\n\t  }\n\n\t  ArrayNode.prototype = new Node();\n\n\t  ArrayNode.prototype.type = 'ArrayNode';\n\n\t  ArrayNode.prototype.isArrayNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @private\n\t   */\n\t  ArrayNode.prototype._compile = function (defs, args) {\n\t    var asMatrix = (defs.math.config().matrix !== 'Array');\n\n\t    var items = this.items.map(function (node) {\n\t      return node._compile(defs, args);\n\t    });\n\n\t    return (asMatrix ? 'math.matrix([' : '[') +\n\t        items.join(',') +\n\t        (asMatrix ? '])' : ']');\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  ArrayNode.prototype.forEach = function (callback) {\n\t    for (var i = 0; i < this.items.length; i++) {\n\t      var node = this.items[i];\n\t      callback(node, 'items[' + i + ']', this);\n\t    }\n\t  };\n\n\t  /**\n\t   * Create a new ArrayNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {ArrayNode} Returns a transformed copy of the node\n\t   */\n\t  ArrayNode.prototype.map = function (callback) {\n\t    var items = [];\n\t    for (var i = 0; i < this.items.length; i++) {\n\t      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n\t    }\n\t    return new ArrayNode(items);\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {ArrayNode}\n\t   */\n\t  ArrayNode.prototype.clone = function() {\n\t    return new ArrayNode(this.items.slice(0));\n\t  };\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   * @override\n\t   */\n\t  ArrayNode.prototype._toString = function(options) {\n\t    var items = this.items.map(function (node) {\n\t      return node.toString(options);\n\t    });\n\t    return '[' + items.join(', ') + ']';\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  ArrayNode.prototype._toTex = function(options) {\n\t    var s = '\\\\begin{bmatrix}';\n\n\t    this.items.forEach(function(node) {\n\t      if (node.items) {\n\t        s += node.items.map(function(childNode) {\n\t          return childNode.toTex(options);\n\t        }).join('&');\n\t      }\n\t      else {\n\t        s += node.toTex(options);\n\t      }\n\n\t      // new line\n\t      s += '\\\\\\\\';\n\t    });\n\t    s += '\\\\end{bmatrix}';\n\t    return s;\n\t  };\n\n\t  return ArrayNode;\n\t}\n\n\texports.name = 'ArrayNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 278 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar latex = __webpack_require__(32);\n\n\tfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(272));\n\t  var ArrayNode = load(__webpack_require__(277));\n\t  var matrix = load(__webpack_require__(52));\n\t  var assign = load(__webpack_require__(279));\n\t  var access = load(__webpack_require__(274));\n\n\t  var keywords = __webpack_require__(273);\n\t  var operators = __webpack_require__(280);\n\n\t  /**\n\t   * @constructor AssignmentNode\n\t   * @extends {Node}\n\t   *\n\t   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n\t   * replace a subset of a matrix like `A[2,2]=42`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     new AssignmentNode(symbol, value)\n\t   *     new AssignmentNode(object, index, value)\n\t   *\n\t   * Usage:\n\t   *\n\t   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2\n\t   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n\t   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n\t   *\n\t   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n\t   * @param {IndexNode} [index=null]            Index, property name or matrix\n\t   *                                            index. Optional. If not provided\n\t   *                                            and `object` is a SymbolNode,\n\t   *                                            the property is assigned to the\n\t   *                                            global scope.\n\t   * @param {Node} value                        The value to be assigned\n\t   */\n\t  function AssignmentNode(object, index, value) {\n\t    if (!(this instanceof AssignmentNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    this.object = object;\n\t    this.index = value ? index : null;\n\t    this.value = value ? value : index;\n\n\t    // validate input\n\t    if (!object || !(object.isSymbolNode || object.isAccessorNode)) {\n\t      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n\t    }\n\t    if (object && object.isSymbolNode && object.name === 'end') {\n\t      throw new Error('Cannot assign to symbol \"end\"');\n\t    }\n\t    if (this.index && !this.index.isIndexNode) {\n\t      throw new TypeError('IndexNode expected as \"index\"');\n\t    }\n\t    if (!this.value || !this.value.isNode) {\n\t      throw new TypeError('Node expected as \"value\"');\n\t    }\n\n\t    // readonly property name\n\t    Object.defineProperty(this, 'name', {\n\t      get: function () {\n\t        if (this.index) {\n\t          return (this.index.isObjectProperty())\n\t              ? this.index.getObjectProperty()\n\t              : '';\n\t        }\n\t        else {\n\t          return this.object.name || '';\n\t        }\n\t      }.bind(this),\n\t      set: function () {\n\t        throw new Error('Cannot assign a new name, name is read-only');\n\t      }\n\t    });\n\t  }\n\n\t  AssignmentNode.prototype = new Node();\n\n\t  AssignmentNode.prototype.type = 'AssignmentNode';\n\n\t  AssignmentNode.prototype.isAssignmentNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @private\n\t   */\n\t  AssignmentNode.prototype._compile = function (defs, args) {\n\t    defs.assign = assign;\n\t    defs.access = access;\n\n\t    var size;\n\t    var object = this.object._compile(defs, args);\n\t    var index = this.index ? this.index._compile(defs, args) : null;\n\t    var value = this.value._compile(defs, args);\n\n\t    if (!this.index) {\n\t      // apply a variable to the scope, for example `a=2`\n\t      if (!this.object.isSymbolNode) {\n\t        throw new TypeError('SymbolNode expected as object');\n\t      }\n\n\t      return 'scope[\"' + this.object.name + '\"] = ' + value;\n\t    }\n\t    else if (this.index.isObjectProperty()) {\n\t      // apply an object property for example `a.b=2`\n\t      return object + '[\"' + this.index.getObjectProperty() + '\"] = ' + value;\n\t    }\n\t    else if (this.object.isSymbolNode) {\n\t      // update a matrix subset, for example `a[2]=3`\n\t      size = this.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';\n\n\t      // apply updated object to scope\n\t      return '(function () {' +\n\t          '  var object = ' + object + ';' +\n\t          '  var value = ' + value + ';' +\n\t          '  ' + size +\n\t          '  scope[\"' + this.object.name + '\"] = assign(object, ' + index + ', value);' +\n\t          '  return value;' +\n\t          '})()';\n\t    }\n\t    else { // this.object.isAccessorNode === true\n\t      // update a matrix subset, for example `a.b[2]=3`\n\t      size = this.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';\n\n\t      // we will not use the _compile of the AccessorNode, but compile it\n\t      // ourselves here as we need the parent object of the AccessorNode:\n\t      // wee need to apply the updated object to parent object\n\t      var parentObject = this.object.object._compile(defs, args);\n\n\t      if (this.object.index.isObjectProperty()) {\n\t        var parentProperty = '[\"' + this.object.index.getObjectProperty() + '\"]';\n\t        return '(function () {' +\n\t            '  var parent = ' + parentObject + ';' +\n\t            '  var object = parent' + parentProperty + ';' + // parentIndex is a property\n\t            '  var value = ' + value + ';' +\n\t            size +\n\t            '  parent' + parentProperty + ' = assign(object, ' + index + ', value);' +\n\t            '  return value;' +\n\t            '})()';\n\t      }\n\t      else {\n\t        // if some parameters use the 'end' parameter, we need to calculate the size\n\t        var parentSize = this.object.index.needsSize() ? 'var size = math.size(parent).valueOf();' : '';\n\t        var parentIndex = this.object.index._compile(defs, args);\n\n\t        return '(function () {' +\n\t            '  var parent = ' + parentObject + ';' +\n\t            '  ' + parentSize +\n\t            '  var parentIndex = ' + parentIndex + ';' +\n\t            '  var object = access(parent, parentIndex);' +\n\t            '  var value = ' + value + ';' +\n\t            '  ' + size +\n\t            '  assign(parent, parentIndex, assign(object, ' + index + ', value));' +\n\t            '  return value;' +\n\t            '})()';\n\t      }\n\t    }\n\t  };\n\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  AssignmentNode.prototype.forEach = function (callback) {\n\t    callback(this.object, 'object', this);\n\t    if (this.index) {\n\t      callback(this.index, 'index', this);\n\t    }\n\t    callback(this.value, 'value', this);\n\t  };\n\n\t  /**\n\t   * Create a new AssignmentNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {AssignmentNode} Returns a transformed copy of the node\n\t   */\n\t  AssignmentNode.prototype.map = function (callback) {\n\t    var object = this._ifNode(callback(this.object, 'object', this));\n\t    var index = this.index\n\t        ? this._ifNode(callback(this.index, 'index', this))\n\t        : null;\n\t    var value = this._ifNode(callback(this.value, 'value', this));\n\n\t    return new AssignmentNode(object, index, value);\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {AssignmentNode}\n\t   */\n\t  AssignmentNode.prototype.clone = function() {\n\t    return new AssignmentNode(this.object, this.index, this.value);\n\t  };\n\n\t  /*\n\t   * Is parenthesis needed?\n\t   * @param {node} node\n\t   * @param {string} [parenthesis='keep']\n\t   * @private\n\t   */\n\t  function needParenthesis(node, parenthesis) {\n\t    if (!parenthesis) {\n\t      parenthesis = 'keep';\n\t    }\n\n\t    var precedence = operators.getPrecedence(node, parenthesis);\n\t    var exprPrecedence = operators.getPrecedence(node.value, parenthesis);\n\t    return (parenthesis === 'all')\n\t      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));\n\t  }\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string}\n\t   */\n\t  AssignmentNode.prototype._toString = function(options) {\n\t    var object = this.object.toString(options);\n\t    var index = this.index ? this.index.toString(options) : '';\n\t    var value = this.value.toString(options);\n\t    if (needParenthesis(this, options && options.parenthesis)) {\n\t      value = '(' + value + ')';\n\t    }\n\n\t    return object + index + ' = ' + value;\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string}\n\t   */\n\t  AssignmentNode.prototype._toTex = function(options) {\n\t    var object = this.object.toTex(options);\n\t    var index = this.index ? this.index.toTex(options) : '';\n\t    var value = this.value.toTex(options);\n\t    if (needParenthesis(this, options && options.parenthesis)) {\n\t      value = '\\\\left(' + value + '\\\\right)';\n\t    }\n\n\t    return object + index + ':=' + value;\n\t  };\n\n\t  return AssignmentNode;\n\t}\n\n\texports.name = 'AssignmentNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 279 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar errorTransform = __webpack_require__(275).transform;\n\n\tfunction factory (type, config, load, typed) {\n\t  var subset = load(__webpack_require__(276));\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Replace part of an object:\n\t   *\n\t   * - Assign a property to an object\n\t   * - Replace a part of a string\n\t   * - Replace a matrix subset\n\t   *\n\t   * @param {Object | Array | Matrix | string} object\n\t   * @param {Index} index\n\t   * @param {*} value\n\t   * @return {Object | Array | Matrix | string} Returns the original object\n\t   *                                            except in case of a string\n\t   */\n\t  return function assign(object, index, value) {\n\t    try {\n\t      if (Array.isArray(object)) {\n\t        return matrix(object).subset(index, value).valueOf();\n\t      }\n\t      else if (object && typeof object.subset === 'function') { // Matrix\n\t        return object.subset(index, value);\n\t      }\n\t      else if (typeof object === 'string') {\n\t        // TODO: move setStringSubset into a separate util file, use that\n\t        return subset(object, index, value);\n\t      }\n\t      else if (typeof object === 'object') {\n\t        if (!index.isObjectProperty()) {\n\t          throw TypeError('Cannot apply a numeric index as object property');\n\t        }\n\t        object[index.getObjectProperty()] = value;\n\t        return object;\n\t      }\n\t      else {\n\t        throw new TypeError('Cannot apply index: unsupported type of object');\n\t      }\n\t    }\n\t    catch (err) {\n\t        throw errorTransform(err);\n\t    }\n\t  }\n\t}\n\n\texports.factory = factory;\n\n\n/***/ },\n/* 280 */\n/***/ function(module, exports) {\n\n\t'use strict'\n\n\t//list of identifiers of nodes in order of their precedence\n\t//also contains information about left/right associativity\n\t//and which other operator the operator is associative with\n\t//Example:\n\t// addition is associative with addition and subtraction, because:\n\t// (a+b)+c=a+(b+c)\n\t// (a+b)-c=a+(b-c)\n\t//\n\t// postfix operators are left associative, prefix operators \n\t// are right associative\n\t//\n\t//It's also possible to set the following properties:\n\t// latexParens: if set to false, this node doesn't need to be enclosed\n\t//              in parentheses when using LaTeX\n\t// latexLeftParens: if set to false, this !OperatorNode's! \n\t//                  left argument doesn't need to be enclosed\n\t//                  in parentheses\n\t// latexRightParens: the same for the right argument\n\tvar properties = [\n\t  { //assignment\n\t    'AssignmentNode': {},\n\t    'FunctionAssignmentNode': {}\n\t  },\n\t  { //conditional expression\n\t    'ConditionalNode': {\n\t      latexLeftParens: false,\n\t      latexRightParens: false,\n\t      latexParens: false\n\t      //conditionals don't need parentheses in LaTeX because\n\t      //they are 2 dimensional\n\t    }\n\t  },\n\t  { //logical or\n\t    'OperatorNode:or': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\n\t  },\n\t  { //logical xor\n\t    'OperatorNode:xor': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //logical and\n\t    'OperatorNode:and': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitwise or\n\t    'OperatorNode:bitOr': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitwise xor\n\t    'OperatorNode:bitXor': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitwise and\n\t    'OperatorNode:bitAnd': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //relational operators\n\t    'OperatorNode:equal': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:unequal': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:smaller': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:larger': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:smallerEq': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:largerEq': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitshift operators\n\t    'OperatorNode:leftShift': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:rightArithShift': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:rightLogShift': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //unit conversion\n\t    'OperatorNode:to': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //range\n\t    'RangeNode': {}\n\t  },\n\t  { //addition, subtraction\n\t    'OperatorNode:add': {\n\t      associativity: 'left',\n\t      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']\n\t    },\n\t    'OperatorNode:subtract': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //multiply, divide, modulus\n\t    'OperatorNode:multiply': {\n\t      associativity: 'left',\n\t      associativeWith: [\n\t        'OperatorNode:multiply',\n\t        'OperatorNode:divide',\n\t        'Operator:dotMultiply',\n\t        'Operator:dotDivide'\n\t      ]\n\t    },\n\t    'OperatorNode:divide': {\n\t      associativity: 'left',\n\t      associativeWith: [],\n\t      latexLeftParens: false,\n\t      latexRightParens: false,\n\t      latexParens: false\n\t      //fractions don't require parentheses because\n\t      //they're 2 dimensional, so parens aren't needed\n\t      //in LaTeX\n\t    },\n\t    'OperatorNode:dotMultiply': {\n\t      associativity: 'left',\n\t      associativeWith: [\n\t        'OperatorNode:multiply',\n\t        'OperatorNode:divide',\n\t        'OperatorNode:dotMultiply',\n\t        'OperatorNode:doDivide'\n\t      ]\n\t    },\n\t    'OperatorNode:dotDivide': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:mod': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //unary prefix operators\n\t    'OperatorNode:unaryPlus': {\n\t      associativity: 'right'\n\t    },\n\t    'OperatorNode:unaryMinus': {\n\t      associativity: 'right'\n\t    },\n\t    'OperatorNode:bitNot': {\n\t      associativity: 'right'\n\t    },\n\t    'OperatorNode:not': {\n\t      associativity: 'right'\n\t    }\n\t  },\n\t  { //exponentiation\n\t    'OperatorNode:pow': {\n\t      associativity: 'right',\n\t      associativeWith: [],\n\t      latexRightParens: false\n\t      //the exponent doesn't need parentheses in\n\t      //LaTeX because it's 2 dimensional\n\t      //(it's on top)\n\t    },\n\t    'OperatorNode:dotPow': {\n\t      associativity: 'right',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //factorial\n\t    'OperatorNode:factorial': {\n\t      associativity: 'left'\n\t    }\n\t  },\n\t  { //matrix transpose\n\t    'OperatorNode:transpose': {\n\t      associativity: 'left'\n\t    }\n\t  }\n\t];\n\n\t/**\n\t * Get the precedence of a Node.\n\t * Higher number for higher precedence, starting with 0.\n\t * Returns null if the precedence is undefined.\n\t *\n\t * @param {Node}\n\t * @param {string} parenthesis\n\t * @return {number|null}\n\t */\n\tfunction getPrecedence (_node, parenthesis) {\n\t  var node = _node;\n\t  if (parenthesis !== 'keep') {\n\t    //ParenthesisNodes are only ignored when not in 'keep' mode\n\t    node = _node.getContent();\n\t  }\n\t  var identifier = node.getIdentifier();\n\t  for (var i = 0; i < properties.length; i++) {\n\t    if (identifier in properties[i]) {\n\t      return i;\n\t    }\n\t  }\n\t  return null;\n\t}\n\n\t/**\n\t * Get the associativity of an operator (left or right).\n\t * Returns a string containing 'left' or 'right' or null if\n\t * the associativity is not defined.\n\t *\n\t * @param {Node}\n\t * @param {string} parenthesis\n\t * @return {string|null}\n\t * @throws {Error}\n\t */\n\tfunction getAssociativity (_node, parenthesis) {\n\t  var node = _node;\n\t  if (parenthesis !== 'keep') {\n\t    //ParenthesisNodes are only ignored when not in 'keep' mode\n\t    node = _node.getContent();\n\t  }\n\t  var identifier = node.getIdentifier();\n\t  var index = getPrecedence(node, parenthesis);\n\t  if (index === null) {\n\t    //node isn't in the list\n\t    return null;\n\t  }\n\t  var property = properties[index][identifier];\n\n\t  if (property.hasOwnProperty('associativity')) {\n\t    if (property.associativity === 'left') {\n\t      return 'left';\n\t    }\n\t    if (property.associativity === 'right') {\n\t      return 'right';\n\t    }\n\t    //associativity is invalid\n\t    throw Error('\\'' + identifier + '\\' has the invalid associativity \\''\n\t                + property.associativity + '\\'.');\n\t  }\n\n\t  //associativity is undefined\n\t  return null;\n\t}\n\n\t/**\n\t * Check if an operator is associative with another operator.\n\t * Returns either true or false or null if not defined.\n\t *\n\t * @param {Node} nodeA\n\t * @param {Node} nodeB\n\t * @param {string} parenthesis\n\t * @return {bool|null}\n\t */\n\tfunction isAssociativeWith (nodeA, nodeB, parenthesis) {\n\t  var a = nodeA;\n\t  var b = nodeB;\n\t  if (parenthesis !== 'keep') {\n\t    //ParenthesisNodes are only ignored when not in 'keep' mode\n\t    var a = nodeA.getContent();\n\t    var b = nodeB.getContent();\n\t  }\n\t  var identifierA = a.getIdentifier();\n\t  var identifierB = b.getIdentifier();\n\t  var index = getPrecedence(a, parenthesis);\n\t  if (index === null) {\n\t    //node isn't in the list\n\t    return null;\n\t  }\n\t  var property = properties[index][identifierA];\n\n\t  if (property.hasOwnProperty('associativeWith')\n\t      && (property.associativeWith instanceof Array)) {\n\t    for (var i = 0; i < property.associativeWith.length; i++) {\n\t      if (property.associativeWith[i] === identifierB) {\n\t        return true;\n\t      }\n\t    }\n\t    return false;\n\t  }\n\n\t  //associativeWith is not defined\n\t  return null;\n\t}\n\n\tmodule.exports.properties = properties;\n\tmodule.exports.getPrecedence = getPrecedence;\n\tmodule.exports.getAssociativity = getAssociativity;\n\tmodule.exports.isAssociativeWith = isAssociativeWith;\n\n\n/***/ },\n/* 281 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(272));\n\t  var ResultSet = load(__webpack_require__(72));\n\n\t  /**\n\t   * @constructor BlockNode\n\t   * @extends {Node}\n\t   * Holds a set with blocks\n\t   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n\t   *            An array with blocks, where a block is constructed as an Object\n\t   *            with properties block, which is a Node, and visible, which is\n\t   *            a boolean. The property visible is optional and is true by default\n\t   */\n\t  function BlockNode(blocks) {\n\t    if (!(this instanceof BlockNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    // validate input, copy blocks\n\t    if (!Array.isArray(blocks)) throw new Error('Array expected');\n\t    this.blocks = blocks.map(function (block) {\n\t      var node = block && block.node;\n\t      var visible = block && block.visible !== undefined ? block.visible : true;\n\n\t      if (!(node && node.isNode))      throw new TypeError('Property \"node\" must be a Node');\n\t      if (typeof visible !== 'boolean') throw new TypeError('Property \"visible\" must be a boolean');\n\n\t      return {\n\t        node: node,\n\t        visible: visible\n\t      }\n\t    });\n\t  }\n\n\t  BlockNode.prototype = new Node();\n\n\t  BlockNode.prototype.type = 'BlockNode';\n\n\t  BlockNode.prototype.isBlockNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} js\n\t   * @private\n\t   */\n\t  BlockNode.prototype._compile = function (defs, args) {\n\t    defs.ResultSet = ResultSet;\n\t    var blocks = this.blocks.map(function (param) {\n\t      var js = param.node._compile(defs, args);\n\t      if (param.visible) {\n\t        return 'results.push(' + js + ');';\n\t      }\n\t      else {\n\t        return js + ';';\n\t      }\n\t    });\n\n\t    return '(function () {' +\n\t        'var results = [];' +\n\t        blocks.join('') +\n\t        'return new ResultSet(results);' +\n\t        '})()';\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child blocks of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  BlockNode.prototype.forEach = function (callback) {\n\t    for (var i = 0; i < this.blocks.length; i++) {\n\t      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n\t    }\n\t  };\n\n\t  /**\n\t   * Create a new BlockNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {BlockNode} Returns a transformed copy of the node\n\t   */\n\t  BlockNode.prototype.map = function (callback) {\n\t    var blocks = [];\n\t    for (var i = 0; i < this.blocks.length; i++) {\n\t      var block = this.blocks[i];\n\t      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n\t      blocks[i] = {\n\t        node: node,\n\t        visible: block.visible\n\t      };\n\t    }\n\t    return new BlockNode(blocks);\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {BlockNode}\n\t   */\n\t  BlockNode.prototype.clone = function () {\n\t    var blocks = this.blocks.map(function (block) {\n\t      return {\n\t        node: block.node,\n\t        visible: block.visible\n\t      };\n\t    });\n\n\t    return new BlockNode(blocks);\n\t  };\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   * @override\n\t   */\n\t  BlockNode.prototype._toString = function (options) {\n\t    return this.blocks.map(function (param) {\n\t      return param.node.toString(options) + (param.visible ? '' : ';');\n\t    }).join('\\n');\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  BlockNode.prototype._toTex = function (options) {\n\t    return this.blocks.map(function (param) {\n\t      return param.node.toTex(options) + (param.visible ? '' : ';');\n\t    }).join('\\\\;\\\\;\\n');\n\t  };\n\n\t  return BlockNode;\n\t}\n\n\texports.name = 'BlockNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 282 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar latex = __webpack_require__(32);\n\tvar operators = __webpack_require__(280);\n\n\tfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(272));\n\n\t  /**\n\t   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n\t   *\n\t   * @param {Node} condition   Condition, must result in a boolean\n\t   * @param {Node} trueExpr    Expression evaluated when condition is true\n\t   * @param {Node} falseExpr   Expression evaluated when condition is true\n\t   *\n\t   * @constructor ConditionalNode\n\t   * @extends {Node}\n\t   */\n\t  function ConditionalNode(condition, trueExpr, falseExpr) {\n\t    if (!(this instanceof ConditionalNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\t    if (!(condition && condition.isNode)) throw new TypeError('Parameter condition must be a Node');\n\t    if (!(trueExpr && trueExpr.isNode))  throw new TypeError('Parameter trueExpr must be a Node');\n\t    if (!(falseExpr && falseExpr.isNode)) throw new TypeError('Parameter falseExpr must be a Node');\n\n\t    this.condition = condition;\n\t    this.trueExpr = trueExpr;\n\t    this.falseExpr = falseExpr;\n\t  }\n\n\t  ConditionalNode.prototype = new Node();\n\n\t  ConditionalNode.prototype.type = 'ConditionalNode';\n\n\t  ConditionalNode.prototype.isConditionalNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} js\n\t   * @private\n\t   */\n\t  ConditionalNode.prototype._compile = function (defs, args) {\n\t    /**\n\t     * Test whether a condition is met\n\t     * @param {*} condition\n\t     * @returns {boolean} true if condition is true or non-zero, else false\n\t     */\n\t    defs.testCondition = function (condition) {\n\t      if (typeof condition === 'number'\n\t          || typeof condition === 'boolean'\n\t          || typeof condition === 'string') {\n\t        return condition ? true : false;\n\t      }\n\n\t      if (condition) {\n\t        if (condition.isBigNumber === true) {\n\t          return condition.isZero() ? false : true;\n\t        }\n\n\t        if (condition.isComplex === true) {\n\t          return (condition.re || condition.im) ? true : false;\n\t        }\n\n\t        if (condition.isUnit === true) {\n\t          return condition.value ? true : false;\n\t        }\n\t      }\n\n\t      if (condition === null || condition === undefined) {\n\t        return false;\n\t      }\n\n\t      throw new TypeError('Unsupported type of condition \"' + defs.math['typeof'](condition) + '\"');\n\t    };\n\n\t    return (\n\t      'testCondition(' + this.condition._compile(defs, args) + ') ? ' +\n\t      '( ' + this.trueExpr._compile(defs, args) + ') : ' +\n\t      '( ' + this.falseExpr._compile(defs, args) + ')'\n\t    );\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  ConditionalNode.prototype.forEach = function (callback) {\n\t    callback(this.condition, 'condition', this);\n\t    callback(this.trueExpr, 'trueExpr', this);\n\t    callback(this.falseExpr, 'falseExpr', this);\n\t  };\n\n\t  /**\n\t   * Create a new ConditionalNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {ConditionalNode} Returns a transformed copy of the node\n\t   */\n\t  ConditionalNode.prototype.map = function (callback) {\n\t    return new ConditionalNode(\n\t        this._ifNode(callback(this.condition, 'condition', this)),\n\t        this._ifNode(callback(this.trueExpr, 'trueExpr', this)),\n\t        this._ifNode(callback(this.falseExpr, 'falseExpr', this))\n\t    );\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {ConditionalNode}\n\t   */\n\t  ConditionalNode.prototype.clone = function () {\n\t    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);\n\t  };\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  ConditionalNode.prototype._toString = function (options) {\n\t    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n\t    var precedence = operators.getPrecedence(this, parenthesis);\n\n\t    //Enclose Arguments in parentheses if they are an OperatorNode\n\t    //or have lower or equal precedence\n\t    //NOTE: enclosing all OperatorNodes in parentheses is a decision\n\t    //purely based on aesthetics and readability\n\t    var condition = this.condition.toString(options);\n\t    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);\n\t    if ((parenthesis === 'all')\n\t        || (this.condition.type === 'OperatorNode')\n\t        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {\n\t      condition = '(' + condition + ')';\n\t    }\n\n\t    var trueExpr = this.trueExpr.toString(options);\n\t    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);\n\t    if ((parenthesis === 'all')\n\t        || (this.trueExpr.type === 'OperatorNode')\n\t        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {\n\t      trueExpr = '(' + trueExpr + ')';\n\t    }\n\n\t    var falseExpr = this.falseExpr.toString(options);\n\t    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);\n\t    if ((parenthesis === 'all')\n\t        || (this.falseExpr.type === 'OperatorNode')\n\t        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {\n\t      falseExpr = '(' + falseExpr + ')';\n\t    }\n\t    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  ConditionalNode.prototype._toTex = function (options) {\n\t    return '\\\\begin{cases} {'\n\t        + this.trueExpr.toTex(options) + '}, &\\\\quad{\\\\text{if }\\\\;'\n\t        + this.condition.toTex(options)\n\t        + '}\\\\\\\\{' + this.falseExpr.toTex(options)\n\t        + '}, &\\\\quad{\\\\text{otherwise}}\\\\end{cases}';\n\t  };\n\n\t  return ConditionalNode;\n\t}\n\n\texports.name = 'ConditionalNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 283 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar getType = __webpack_require__(41).type;\n\n\tfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(272));\n\n\t  /**\n\t   * A ConstantNode holds a constant value like a number or string. A ConstantNode\n\t   * stores a stringified version of the value and uses this to compile to\n\t   * JavaScript.\n\t   *\n\t   * In case of a stringified number as input, this may be compiled to a BigNumber\n\t   * when the math instance is configured for BigNumbers.\n\t   *\n\t   * Usage:\n\t   *\n\t   *     // stringified values with type\n\t   *     new ConstantNode('2.3', 'number');\n\t   *     new ConstantNode('true', 'boolean');\n\t   *     new ConstantNode('hello', 'string');\n\t   *\n\t   *     // non-stringified values, type will be automatically detected\n\t   *     new ConstantNode(2.3);\n\t   *     new ConstantNode('hello');\n\t   *\n\t   * @param {string | number | boolean | null | undefined} value\n\t   *                            When valueType is provided, value must contain\n\t   *                            an uninterpreted string representing the value.\n\t   *                            When valueType is undefined, value can be a\n\t   *                            number, string, boolean, null, or undefined, and\n\t   *                            the type will be determined automatically.\n\t   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',\n\t   *                              'boolean', 'undefined', 'null'\n\t   * @constructor ConstantNode\n\t   * @extends {Node}\n\t   */\n\t  function ConstantNode(value, valueType) {\n\t    if (!(this instanceof ConstantNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    if (valueType) {\n\t      if (typeof valueType !== 'string') {\n\t        throw new TypeError('String expected for parameter \"valueType\"');\n\t      }\n\t      if (typeof value !== 'string') {\n\t        throw new TypeError('String expected for parameter \"value\"');\n\t      }\n\n\t      this.value = value;\n\t      this.valueType = valueType;\n\t    }\n\t    else {\n\t      // stringify the value and determine the type\n\t      this.value = value + '';\n\t      this.valueType = getType(value);\n\t    }\n\n\t    if (!SUPPORTED_TYPES[this.valueType]) {\n\t      throw new TypeError('Unsupported type of value \"' + this.valueType + '\"');\n\t    }\n\t  }\n\n\t  var SUPPORTED_TYPES = {\n\t    'number': true,\n\t    'string': true,\n\t    'boolean': true,\n\t    'undefined': true,\n\t    'null': true\n\t  };\n\n\t  ConstantNode.prototype = new Node();\n\n\t  ConstantNode.prototype.type = 'ConstantNode';\n\n\t  ConstantNode.prototype.isConstantNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} js\n\t   * @private\n\t   */\n\t  ConstantNode.prototype._compile = function (defs, args) {\n\t    switch (this.valueType) {\n\t      case 'number':\n\t        // TODO: replace this with using config.number\n\t        var numConfig = defs.math.config().number;\n\t        if (numConfig === 'BigNumber') {\n\t          return 'math.bignumber(\"' + this.value + '\")';\n\t        }\n\t        else if (numConfig === 'Fraction') {\n\t          return 'math.fraction(\"' + this.value + '\")';\n\t        }\n\t        else {\n\t          // remove leading zeros like '003.2' which are not allowed by JavaScript\n\t          return this.value.replace(/^(0*)[0-9]/, function (match, zeros) {\n\t            return match.substring(zeros.length);\n\t          });\n\t        }\n\n\t      case 'string':\n\t        return '\"' + this.value + '\"';\n\n\t      case 'boolean':\n\t        return this.value;\n\n\t      case 'undefined':\n\t        return this.value;\n\n\t      case 'null':\n\t        return this.value;\n\n\t      default:\n\t        // TODO: move this error to the constructor?\n\t        throw new TypeError('Unsupported type of constant \"' + this.valueType + '\"');\n\t    }\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  ConstantNode.prototype.forEach = function (callback) {\n\t    // nothing to do, we don't have childs\n\t  };\n\n\n\t  /**\n\t   * Create a new ConstantNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n\t   * @returns {ConstantNode} Returns a clone of the node\n\t   */\n\t  ConstantNode.prototype.map = function (callback) {\n\t    return this.clone();\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {ConstantNode}\n\t   */\n\t  ConstantNode.prototype.clone = function () {\n\t    return new ConstantNode(this.value, this.valueType);\n\t  };\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  ConstantNode.prototype._toString = function (options) {\n\t    switch (this.valueType) {\n\t      case 'string':\n\t        return '\"' + this.value + '\"';\n\n\t      default:\n\t        return this.value;\n\t    }\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  ConstantNode.prototype._toTex = function (options) {\n\t    var value = this.value,\n\t        index;\n\t    switch (this.valueType) {\n\t      case 'string':\n\t        return '\\\\mathtt{\"' + value + '\"}';\n\n\t      case 'number':\n\t        index = value.toLowerCase().indexOf('e');\n\t        if (index !== -1) {\n\t          return value.substring(0, index) + '\\\\cdot10^{' +\n\t              value.substring(index + 1) + '}';\n\t        }\n\t        return value;\n\n\t      default:\n\t        return value;\n\t    }\n\t  };\n\n\t  return ConstantNode;\n\t}\n\n\texports.name = 'ConstantNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 284 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar keywords = __webpack_require__(273);\n\tvar latex = __webpack_require__(32);\n\tvar operators = __webpack_require__(280);\n\n\tfunction isString (x) {\n\t  return typeof x === 'string';\n\t}\n\n\tfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(272));\n\n\t  /**\n\t   * @constructor FunctionAssignmentNode\n\t   * @extends {Node}\n\t   * Function assignment\n\t   *\n\t   * @param {string} name           Function name\n\t   * @param {string[]} params       Function parameter names\n\t   * @param {Node} expr             The function expression\n\t   */\n\t  function FunctionAssignmentNode(name, params, expr) {\n\t    if (!(this instanceof FunctionAssignmentNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    // validate input\n\t    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\n\t    if (!Array.isArray(params) || !params.every(isString))  throw new TypeError('Array containing strings expected for parameter \"params\"');\n\t    if (!(expr && expr.isNode)) throw new TypeError('Node expected for parameter \"expr\"');\n\t    if (name in keywords) throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n\n\t    this.name = name;\n\t    this.params = params;\n\t    this.expr = expr;\n\t  }\n\n\t  FunctionAssignmentNode.prototype = new Node();\n\n\t  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';\n\n\t  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} js\n\t   * @private\n\t   */\n\t  FunctionAssignmentNode.prototype._compile = function (defs, args) {\n\t    // we extend the original args and add the args to the child object\n\t    var childArgs = Object.create(args);\n\t    this.params.forEach(function (variable) {\n\t      childArgs[variable] = true;\n\t    });\n\n\t    // compile the function expression with the child args\n\t    var jsExpr = this.expr._compile(defs, childArgs);\n\n\t    return 'scope[\"' + this.name + '\"] = ' +\n\t        '  (function () {' +\n\t        '    var fn = function ' + this.name + '(' + this.params.join(',') + ') {' +\n\t        '      if (arguments.length != ' + this.params.length + ') {' +\n\t          // TODO: use util.error.ArgumentsError here?\n\t          // TODO: test arguments error\n\t        '        throw new SyntaxError(\"Wrong number of arguments in function ' + this.name + ' (\" + arguments.length + \" provided, ' + this.params.length + ' expected)\");' +\n\t        '      }' +\n\t        '      return ' + jsExpr + '' +\n\t        '    };' +\n\t        '    fn.syntax = \"' + this.name + '(' + this.params.join(', ') + ')\";' +\n\t        '    return fn;' +\n\t        '  })()';\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  FunctionAssignmentNode.prototype.forEach = function (callback) {\n\t    callback(this.expr, 'expr', this);\n\t  };\n\n\t  /**\n\t   * Create a new FunctionAssignmentNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n\t   */\n\t  FunctionAssignmentNode.prototype.map = function (callback) {\n\t    var expr = this._ifNode(callback(this.expr, 'expr', this));\n\n\t    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {FunctionAssignmentNode}\n\t   */\n\t  FunctionAssignmentNode.prototype.clone = function () {\n\t    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n\t  };\n\n\t  /**\n\t   * Is parenthesis needed?\n\t   * @param {Node} node\n\t   * @param {Object} parenthesis\n\t   * @private\n\t   */\n\t  function needParenthesis(node, parenthesis) {\n\t    var precedence = operators.getPrecedence(node, parenthesis);\n\t    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);\n\n\t    return (parenthesis === 'all')\n\t      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));\n\t  }\n\n\t  /**\n\t   * get string representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  FunctionAssignmentNode.prototype._toString = function (options) {\n\t    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n\t    var expr = this.expr.toString(options);\n\t    if (needParenthesis(this, parenthesis)) {\n\t      expr = '(' + expr + ')';\n\t    }\n\t    return 'function ' + this.name +\n\t        '(' + this.params.join(', ') + ') = ' + expr;\n\t  };\n\n\t  /**\n\t   * get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  FunctionAssignmentNode.prototype._toTex = function (options) {\n\t    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n\t    var expr = this.expr.toTex(options);\n\t    if (needParenthesis(this, parenthesis)) {\n\t      expr = '\\\\left(' + expr + '\\\\right)';\n\t    }\n\n\t    return '\\\\mathrm{' + this.name\n\t        + '}\\\\left(' + this.params.map(latex.toSymbol).join(',') + '\\\\right):=' + expr;\n\t  };\n\n\t  return FunctionAssignmentNode;\n\t}\n\texports.name = 'FunctionAssignmentNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 285 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(272));\n\t  var RangeNode = load(__webpack_require__(286));\n\t  var SymbolNode = load(__webpack_require__(287));\n\n\t  var Range = load(__webpack_require__(67));\n\n\t  var isArray = Array.isArray;\n\n\t  /**\n\t   * @constructor IndexNode\n\t   * @extends Node\n\t   *\n\t   * Describes a subset of a matrix or an object property.\n\t   * Cannot be used on its own, needs to be used within an AccessorNode or\n\t   * AssignmentNode.\n\t   *\n\t   * @param {Node[]} dimensions\n\t   * @param {boolean} [dotNotation=false]  Optional property describing whether\n\t   *                                       this index was written using dot\n\t   *                                       notation like `a.b`, or using bracket\n\t   *                                       notation like `a[\"b\"]` (default).\n\t   *                                       Used to stringify an IndexNode.\n\t   */\n\t  function IndexNode(dimensions, dotNotation) {\n\t    if (!(this instanceof IndexNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    this.dimensions = dimensions;\n\t    this.dotNotation = dotNotation || false;\n\n\t    // validate input\n\t    if (!isArray(dimensions)\n\t        || !dimensions.every(function (range) {return range && range.isNode;})) {\n\t      throw new TypeError('Array containing Nodes expected for parameter \"dimensions\"');\n\t    }\n\t    if (this.dotNotation && !this.isObjectProperty()) {\n\t      throw new Error('dotNotation only applicable for object properties');\n\t    }\n\n\t    // TODO: deprecated since v3, remove some day\n\t    var deprecated = function () {\n\t      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');\n\t    };\n\t    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });\n\t  }\n\n\t  IndexNode.prototype = new Node();\n\n\t  IndexNode.prototype.type = 'IndexNode';\n\n\t  IndexNode.prototype.isIndexNode = true;\n\n\t  /**\n\t   * Compile all range nodes\n\t   *\n\t   * When some of the dimensions has `end` defined, the IndexNode requires\n\t   * a variable `size` to be defined in the current closure, and must contain\n\t   * the size of the matrix that's being handled. To check whether the `size`\n\t   * variable is needed, call IndexNode.needsSize().\n\t   *\n\t   * @param {Object} defs           Object which can be used to define functions\n\t   *                                or constants globally available for the\n\t   *                                compiled expression\n\t   * @param {Object} args           Object with local function arguments, the key is\n\t   *                                the name of the argument, and the value is `true`.\n\t   *                                The object may not be mutated, but must be\n\t   *                                extended instead.\n\t   * @return {string} code\n\t   */\n\t  IndexNode.prototype._compile = function (defs, args) {\n\t    // args can be mutated by IndexNode, when dimensions use `end`\n\t    var childArgs = Object.create(args);\n\n\t    // helper function to create a Range from start, step and end\n\t    defs.range = function (start, end, step) {\n\t      return new Range(\n\t          (start && start.isBigNumber === true) ? start.toNumber() : start,\n\t          (end   && end.isBigNumber === true)   ? end.toNumber()   : end,\n\t          (step  && step.isBigNumber === true)  ? step.toNumber()  : step\n\t      );\n\t    };\n\n\t    // TODO: implement support for bignumber (currently bignumbers are silently\n\t    //       reduced to numbers when changing the value to zero-based)\n\n\t    // TODO: Optimization: when the range values are ConstantNodes,\n\t    //       we can beforehand resolve the zero-based value\n\n\t    // optimization for a simple object property\n\t    var dimensions = this.dimensions.map(function (range, i) {\n\t      if (range && range.isRangeNode) {\n\t        if (range.needsEnd()) {\n\t          childArgs.end = true;\n\n\t          // resolve end and create range\n\t          return '(function () {' +\n\t              'var end = size[' + i + ']; ' +\n\t              'return range(' +\n\t              range.start._compile(defs, childArgs) + ', ' +\n\t              range.end._compile(defs, childArgs) + ', ' +\n\t              (range.step ? range.step._compile(defs, childArgs) : '1') +\n\t              '); ' +\n\t              '})()';\n\t        }\n\t        else {\n\t          // create range\n\t          return 'range(' +\n\t              range.start._compile(defs, childArgs) + ', ' +\n\t              range.end._compile(defs, childArgs) + ', ' +\n\t              (range.step ? range.step._compile(defs, childArgs) : '1') +\n\t              ')';\n\t        }\n\t      }\n\t      if (range.isSymbolNode && range.name === 'end') {\n\t        childArgs.end = true;\n\n\t        // resolve the parameter 'end'\n\t        return '(function () {' +\n\t            'var end = size[' + i + ']; ' +\n\t            'return ' + range._compile(defs, childArgs) + '; ' +\n\t            '})()'\n\t      }\n\t      else { // ConstantNode\n\t        return range._compile(defs, childArgs);\n\t      }\n\t    });\n\n\t    return 'math.index(' + dimensions.join(', ') + ')';\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  IndexNode.prototype.forEach = function (callback) {\n\t    for (var i = 0; i < this.dimensions.length; i++) {\n\t      callback(this.dimensions[i], 'dimensions[' + i + ']', this);\n\t    }\n\t  };\n\n\t  /**\n\t   * Create a new IndexNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {IndexNode} Returns a transformed copy of the node\n\t   */\n\t  IndexNode.prototype.map = function (callback) {\n\t    var dimensions = [];\n\t    for (var i = 0; i < this.dimensions.length; i++) {\n\t      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));\n\t    }\n\n\t    return new IndexNode(dimensions);\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {IndexNode}\n\t   */\n\t  IndexNode.prototype.clone = function () {\n\t    return new IndexNode(this.dimensions.slice(0));\n\t  };\n\n\t  /**\n\t   * Test whether this IndexNode contains a single property name\n\t   * @return {boolean}\n\t   */\n\t  IndexNode.prototype.isObjectProperty = function () {\n\t    return this.dimensions.length === 1 &&\n\t        this.dimensions[0].isConstantNode &&\n\t        this.dimensions[0].valueType === 'string';\n\t  };\n\n\t  /**\n\t   * Returns the property name if IndexNode contains a property.\n\t   * If not, returns null.\n\t   * @return {string | null}\n\t   */\n\t  IndexNode.prototype.getObjectProperty = function () {\n\t    return this.isObjectProperty() ? this.dimensions[0].value : null;\n\t  };\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  IndexNode.prototype._toString = function (options) {\n\t    // format the parameters like \"[1, 0:5]\"\n\t    return this.dotNotation\n\t        ? ('.' + this.getObjectProperty())\n\t        : ('[' + this.dimensions.join(', ') + ']');\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  IndexNode.prototype._toTex = function (options) {\n\t    var dimensions = this.dimensions.map(function (range) {\n\t      return range.toTex(options);\n\t    });\n\n\t    return this.dotNotation\n\t        ? ('.' + this.getObjectProperty() + '')\n\t        : ('_{' + dimensions.join(',') + '}');\n\t  };\n\n\t  /**\n\t   * Test whether this IndexNode needs the object size, size of the Matrix\n\t   * @return {boolean}\n\t   */\n\t  IndexNode.prototype.needsSize = function () {\n\t    return this.dimensions.some(function (range) {\n\t      return (range.isRangeNode && range.needsEnd()) ||\n\t          (range.isSymbolNode && range.name === 'end');\n\t    });\n\t  };\n\n\t  return IndexNode;\n\t}\n\n\texports.name = 'IndexNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 286 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar operators = __webpack_require__(280);\n\n\tfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(272));\n\n\t  /**\n\t   * @constructor RangeNode\n\t   * @extends {Node}\n\t   * create a range\n\t   * @param {Node} start  included lower-bound\n\t   * @param {Node} end    included upper-bound\n\t   * @param {Node} [step] optional step\n\t   */\n\t  function RangeNode(start, end, step) {\n\t    if (!(this instanceof RangeNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    // validate inputs\n\t    if (!(start && start.isNode)) throw new TypeError('Node expected');\n\t    if (!(end && end.isNode)) throw new TypeError('Node expected');\n\t    if (step && !(step && step.isNode)) throw new TypeError('Node expected');\n\t    if (arguments.length > 3) throw new Error('Too many arguments');\n\n\t    this.start = start;         // included lower-bound\n\t    this.end = end;           // included upper-bound\n\t    this.step = step || null;  // optional step\n\t  }\n\n\t  RangeNode.prototype = new Node();\n\n\t  RangeNode.prototype.type = 'RangeNode';\n\n\t  RangeNode.prototype.isRangeNode = true;\n\n\t  /**\n\t   * Check whether the RangeNode needs the `end` symbol to be defined.\n\t   * This end is the size of the Matrix in current dimension.\n\t   * @return {boolean}\n\t   */\n\t  RangeNode.prototype.needsEnd = function () {\n\t    // find all `end` symbols in this RangeNode\n\t    var endSymbols = this.filter(function (node) {\n\t      return (node && node.isSymbolNode) && (node.name == 'end');\n\t    });\n\n\t    return endSymbols.length > 0;\n\t  };\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   *\n\t   * When the range has a symbol `end` defined, the RangeNode requires\n\t   * a variable `end` to be defined in the current closure, which must contain\n\t   * the length of the of the matrix that's being handled in the range's\n\t   * dimension. To check whether the `end` variable is needed, call\n\t   * RangeNode.needsEnd().\n\t   *\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} js\n\t   * @private\n\t   */\n\t  RangeNode.prototype._compile = function (defs, args) {\n\t    return 'math.range(' +\n\t        this.start._compile(defs, args) + ', ' +\n\t        this.end._compile(defs, args) +\n\t        (this.step ? (', ' + this.step._compile(defs, args)) : '') +\n\t        ')';\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  RangeNode.prototype.forEach = function (callback) {\n\t    callback(this.start, 'start', this);\n\t    callback(this.end, 'end', this);\n\t    if (this.step) {\n\t      callback(this.step, 'step', this);\n\t    }\n\t  };\n\n\t  /**\n\t   * Create a new RangeNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {RangeNode} Returns a transformed copy of the node\n\t   */\n\t  RangeNode.prototype.map = function (callback) {\n\t    return new RangeNode(\n\t        this._ifNode(callback(this.start, 'start', this)),\n\t        this._ifNode(callback(this.end, 'end', this)),\n\t        this.step && this._ifNode(callback(this.step, 'step', this))\n\t    );\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {RangeNode}\n\t   */\n\t  RangeNode.prototype.clone = function () {\n\t    return new RangeNode(this.start, this.end, this.step && this.step);\n\t  };\n\n\t  /**\n\t   * Calculate the necessary parentheses\n\t   * @param {Node} node\n\t   * @param {string} parenthesis\n\t   * @return {Object} parentheses\n\t   * @private\n\t   */\n\t  function calculateNecessaryParentheses(node, parenthesis) {\n\t    var precedence = operators.getPrecedence(node, parenthesis);\n\t    var parens = {};\n\n\t    var startPrecedence = operators.getPrecedence(node.start, parenthesis);\n\t    parens.start = ((startPrecedence !== null) && (startPrecedence <= precedence))\n\t      || (parenthesis === 'all');\n\n\t    if (node.step) {\n\t      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);\n\t      parens.step = ((stepPrecedence !== null) && (stepPrecedence <= precedence))\n\t        || (parenthesis === 'all');\n\t    }\n\n\t    var endPrecedence = operators.getPrecedence(node.end, parenthesis);\n\t    parens.end = ((endPrecedence !== null) && (endPrecedence <= precedence))\n\t      || (parenthesis === 'all');\n\n\t    return parens;\n\t  }\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  RangeNode.prototype._toString = function (options) {\n\t    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n\t    var parens = calculateNecessaryParentheses(this, parenthesis);\n\n\t    //format string as start:step:stop\n\t    var str;\n\n\t    var start = this.start.toString(options);\n\t    if (parens.start) {\n\t      start = '(' + start + ')';\n\t    }\n\t    str = start;\n\n\t    if (this.step) {\n\t      var step = this.step.toString(options);\n\t      if (parens.step) {\n\t        step = '(' + step + ')';\n\t      }\n\t      str += ':' + step;\n\t    }\n\n\t    var end = this.end.toString(options);\n\t    if (parens.end) {\n\t      end = '(' + end + ')';\n\t    }\n\t    str += ':' + end;\n\n\t    return str;\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @params {Object} options\n\t   * @return {string} str\n\t   */\n\t  RangeNode.prototype._toTex = function (options) {\n\t    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n\t    var parens = calculateNecessaryParentheses(this, parenthesis);\n\n\t    var str = this.start.toTex(options);\n\t    if (parens.start) {\n\t      str = '\\\\left(' + str + '\\\\right)';\n\t    }\n\n\t    if (this.step) {\n\t      var step = this.step.toTex(options);\n\t      if (parens.step) {\n\t        step = '\\\\left(' + step + '\\\\right)';\n\t      }\n\t      str += ':' + step;\n\t    }\n\n\t    var end = this.end.toTex(options);\n\t    if (parens.end) {\n\t      end = '\\\\left(' + end + '\\\\right)';\n\t    }\n\t    str += ':' + end;\n\n\t    return str;\n\t  };\n\n\t  return RangeNode;\n\t}\n\n\texports.name = 'RangeNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 287 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar latex = __webpack_require__(32);\n\n\tfunction factory (type, config, load, typed, math) {\n\t  var Node = load(__webpack_require__(272));\n\n\t  var Unit = load(__webpack_require__(75));\n\n\t  /**\n\t   * @constructor SymbolNode\n\t   * @extends {Node}\n\t   * A symbol node can hold and resolve a symbol\n\t   * @param {string} name\n\t   * @extends {Node}\n\t   */\n\t  function SymbolNode(name) {\n\t    if (!(this instanceof SymbolNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    // validate input\n\t    if (typeof name !== 'string')  throw new TypeError('String expected for parameter \"name\"');\n\n\t    this.name = name;\n\t  }\n\n\t  SymbolNode.prototype = new Node();\n\n\t  SymbolNode.prototype.type = 'SymbolNode';\n\n\t  SymbolNode.prototype.isSymbolNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} js\n\t   * @private\n\t   */\n\t  SymbolNode.prototype._compile = function (defs, args) {\n\t    // add a function to the definitions\n\t    defs['undef'] = undef;\n\t    defs['Unit'] = Unit;\n\n\t    if (args[this.name]) {\n\t      // this is a FunctionAssignment argument\n\t      // (like an x when inside the expression of a function assignment `f(x) = ...`)\n\t      return this.name;\n\t    }\n\t    else if (this.name in defs.math) {\n\t      return '(\"' + this.name + '\" in scope ? scope[\"' + this.name + '\"] : math[\"' + this.name + '\"])';\n\t    }\n\t    else {\n\t      return '(' +\n\t          '\"' + this.name + '\" in scope ? scope[\"' + this.name + '\"] : ' +\n\t          (Unit.isValuelessUnit(this.name) ?\n\t          'new Unit(null, \"' + this.name + '\")' :\n\t          'undef(\"' + this.name + '\")') +\n\t          ')';\n\t    }\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  SymbolNode.prototype.forEach = function (callback) {\n\t    // nothing to do, we don't have childs\n\t  };\n\n\t  /**\n\t   * Create a new SymbolNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n\t   * @returns {SymbolNode} Returns a clone of the node\n\t   */\n\t  SymbolNode.prototype.map = function (callback) {\n\t    return this.clone();\n\t  };\n\n\t  /**\n\t   * Throws an error 'Undefined symbol {name}'\n\t   * @param {string} name\n\t   */\n\t  function undef (name) {\n\t    throw new Error('Undefined symbol ' + name);\n\t  }\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {SymbolNode}\n\t   */\n\t  SymbolNode.prototype.clone = function() {\n\t    return new SymbolNode(this.name);\n\t  };\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   * @override\n\t   */\n\t  SymbolNode.prototype._toString = function(options) {\n\t    return this.name;\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   * @override\n\t   */\n\t  SymbolNode.prototype._toTex = function(options) {\n\t    var isUnit = false;\n\t    if ((typeof math[this.name] === 'undefined') && Unit.isValuelessUnit(this.name)) {\n\t      isUnit = true;\n\t    }\n\t    var symbol = latex.toSymbol(this.name, isUnit);\n\t    if (symbol[0] === '\\\\') {\n\t      //no space needed if the symbol starts with '\\'\n\t      return symbol;\n\t    }\n\t    //the space prevents symbols from breaking stuff like '\\cdot' if it's written right before the symbol\n\t    return ' ' + symbol;\n\t  };\n\n\t  return SymbolNode;\n\t}\n\n\texports.name = 'SymbolNode';\n\texports.path = 'expression.node';\n\texports.math = true; // request access to the math namespace as 5th argument of the factory function\n\texports.factory = factory;\n\n\n/***/ },\n/* 288 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar string = __webpack_require__(23);\n\n\tfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(272));\n\n\t  /**\n\t   * @constructor ObjectNode\n\t   * @extends {Node}\n\t   * Holds an object with keys/values\n\t   * @param {Object.<string, Node>} [properties]   array with key/value pairs\n\t   */\n\t  function ObjectNode(properties) {\n\t    if (!(this instanceof ObjectNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    this.properties = properties || {};\n\n\t    // validate input\n\t    if (properties) {\n\t      if (!(typeof properties === 'object') || Object.keys(properties).some(function (key) {\n\t            return !properties[key] || !properties[key].isNode;\n\t          })) {\n\t        throw new TypeError('Object containing Nodes expected');\n\t      }\n\t    }\n\t  }\n\n\t  ObjectNode.prototype = new Node();\n\n\t  ObjectNode.prototype.type = 'ObjectNode';\n\n\t  ObjectNode.prototype.isObjectNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} code\n\t   * @private\n\t   */\n\t  ObjectNode.prototype._compile = function (defs, args) {\n\t    var entries = [];\n\t    for (var key in this.properties) {\n\t      if (this.properties.hasOwnProperty(key)) {\n\t        entries.push('\"' + key + '\": ' + this.properties[key]._compile(defs, args));\n\t      }\n\t    }\n\t    return '{' + entries.join(', ') + '}';\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  ObjectNode.prototype.forEach = function (callback) {\n\t    for (var key in this.properties) {\n\t      if (this.properties.hasOwnProperty(key)) {\n\t        callback(this.properties[key], 'properties[\"' + key + '\"]', this);\n\t      }\n\t    }\n\t  };\n\n\t  /**\n\t   * Create a new ObjectNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {ObjectNode} Returns a transformed copy of the node\n\t   */\n\t  ObjectNode.prototype.map = function (callback) {\n\t    var properties = {};\n\t    for (var key in this.properties) {\n\t      if (this.properties.hasOwnProperty(key)) {\n\t        properties[key] = this._ifNode(callback(this.properties[key], 'properties[\"' + key + '\"]', this));\n\t      }\n\t    }\n\t    return new ObjectNode(properties);\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {ObjectNode}\n\t   */\n\t  ObjectNode.prototype.clone = function() {\n\t    var properties = {};\n\t    for (var key in this.properties) {\n\t      if (this.properties.hasOwnProperty(key)) {\n\t        properties[key] = this.properties[key];\n\t      }\n\t    }\n\t    return new ObjectNode(properties);\n\t  };\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   * @override\n\t   */\n\t  ObjectNode.prototype._toString = function(options) {\n\t    var entries = [];\n\t    for (var key in this.properties) {\n\t      if (this.properties.hasOwnProperty(key)) {\n\t        entries.push('\"' + key + '\": ' + this.properties[key].toString(options));\n\t      }\n\t    }\n\t    return '{' + entries.join(', ') + '}';\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  ObjectNode.prototype._toTex = function(options) {\n\t    var entries = [];\n\t    for (var key in this.properties) {\n\t      if (this.properties.hasOwnProperty(key)) {\n\t        entries.push(\"\\\\mathbf{\" + key + ':} & ' + this.properties[key].toTex(options) + \"\\\\\\\\\");\n\t      }\n\t    }\n\t    return '\\\\left\\\\{\\\\begin{array}{ll}' + entries.join('\\n') + '\\\\end{array}\\\\right\\\\}';\n\t  };\n\n\t  return ObjectNode;\n\t}\n\n\texports.name = 'ObjectNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 289 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar latex = __webpack_require__(32);\n\tvar operators = __webpack_require__(280);\n\n\tfunction factory (type, config, load, typed, math) {\n\t  var Node         = load(__webpack_require__(272));\n\t  var ConstantNode = load(__webpack_require__(283));\n\t  var SymbolNode   = load(__webpack_require__(287));\n\t  var FunctionNode = load(__webpack_require__(290));\n\n\t  /**\n\t   * @constructor OperatorNode\n\t   * @extends {Node}\n\t   * An operator with two arguments, like 2+3\n\t   *\n\t   * @param {string} op           Operator name, for example '+'\n\t   * @param {string} fn           Function name, for example 'add'\n\t   * @param {Node[]} args         Operator arguments\n\t   * @param {boolean} [implicit]  Is this an implicit multiplication?\n\t   */\n\t  function OperatorNode(op, fn, args, implicit) {\n\t    if (!(this instanceof OperatorNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    //validate input\n\t    if (typeof op !== 'string') {\n\t      throw new TypeError('string expected for parameter \"op\"');\n\t    }\n\t    if (typeof fn !== 'string') {\n\t      throw new TypeError('string expected for parameter \"fn\"');\n\t    }\n\t    if (!Array.isArray(args)\n\t        || !args.every(function (node) {return node && node.isNode;})) {\n\t      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n\t    }\n\n\t    this.implicit = (implicit === true);\n\t    this.op = op;\n\t    this.fn = fn;\n\t    this.args = args || [];\n\t  }\n\n\t  OperatorNode.prototype = new Node();\n\n\t  OperatorNode.prototype.type = 'OperatorNode';\n\n\t  OperatorNode.prototype.isOperatorNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} js\n\t   * @private\n\t   */\n\t  OperatorNode.prototype._compile = function (defs, args) {\n\t    if (!defs.math[this.fn]) {\n\t      throw new Error('Function ' + this.fn + ' missing in provided namespace \"math\"');\n\t    }\n\n\t    var jsArgs = this.args.map(function (arg) {\n\t      return arg._compile(defs, args);\n\t    });\n\n\t    return 'math.' + this.fn + '(' + jsArgs.join(', ') + ')';\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  OperatorNode.prototype.forEach = function (callback) {\n\t    for (var i = 0; i < this.args.length; i++) {\n\t      callback(this.args[i], 'args[' + i + ']', this);\n\t    }\n\t  };\n\n\t  /**\n\t   * Create a new OperatorNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {OperatorNode} Returns a transformed copy of the node\n\t   */\n\t  OperatorNode.prototype.map = function (callback) {\n\t    var args = [];\n\t    for (var i = 0; i < this.args.length; i++) {\n\t      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n\t    }\n\t    return new OperatorNode(this.op, this.fn, args);\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {OperatorNode}\n\t   */\n\t  OperatorNode.prototype.clone = function () {\n\t    return new OperatorNode(this.op, this.fn, this.args.slice(0));\n\t  };\n\n\t  /**\n\t   * Calculate which parentheses are necessary. Gets an OperatorNode\n\t   * (which is the root of the tree) and an Array of Nodes\n\t   * (this.args) and returns an array where 'true' means that an argument\n\t   * has to be enclosed in parentheses whereas 'false' means the opposite.\n\t   *\n\t   * @param {OperatorNode} root\n\t   * @param {string} parenthesis\n\t   * @param {Node[]} args\n\t   * @param {boolean} latex\n\t   * @return {boolean[]}\n\t   * @private\n\t   */\n\t  function calculateNecessaryParentheses(root, parenthesis, args, latex) {\n\t    //precedence of the root OperatorNode\n\t    var precedence = operators.getPrecedence(root, parenthesis);\n\t    var associativity = operators.getAssociativity(root, parenthesis);\n\n\t    if ((parenthesis === 'all') || (args.length > 2)) {\n\t      var parens = [];\n\t      args.forEach(function (arg) {\n\t        switch (arg.getContent().type) { //Nodes that don't need extra parentheses\n\t          case 'ArrayNode':\n\t          case 'ConstantNode':\n\t          case 'SymbolNode':\n\t          case 'ParenthesisNode':\n\t            parens.push(false);\n\t            break;\n\t          default:\n\t            parens.push(true);\n\t        }\n\t      });\n\t      return parens;\n\t    }\n\n\t    switch (args.length) {\n\t      case 0:\n\t        return [];\n\t      case 1: //unary operators\n\t              //precedence of the operand\n\t        var operandPrecedence = operators.getPrecedence(args[0], parenthesis);\n\n\t        //handle special cases for LaTeX, where some of the parentheses aren't needed\n\t        if (latex && (operandPrecedence !== null)) {\n\t          var operandIdentifier;\n\t          var rootIdentifier;\n\t          if (parenthesis === 'keep') {\n\t            operandIdentifier = args[0].getIdentifier();\n\t            rootIdentifier = root.getIdentifier();\n\t          }\n\t          else {\n\t            //Ignore Parenthesis Nodes when not in 'keep' mode\n\t            operandIdentifier = args[0].getContent().getIdentifier();\n\t            rootIdentifier = root.getContent().getIdentifier();\n\t          }\n\t          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {\n\t            return [false];\n\t          }\n\n\t          if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {\n\t            return [false];\n\t          }\n\t        }\n\n\t        if (operandPrecedence === null) {\n\t          //if the operand has no defined precedence, no parens are needed\n\t          return [false];\n\t        }\n\n\t        if (operandPrecedence <= precedence) {\n\t          //if the operands precedence is lower, parens are needed\n\t          return [true];\n\t        }\n\n\t        //otherwise, no parens needed\n\t        return [false];\n\n\t      case 2: //binary operators\n\t        var lhsParens; //left hand side needs parenthesis?\n\t        //precedence of the left hand side\n\t        var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);\n\t        //is the root node associative with the left hand side\n\t        var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);\n\n\t        if (lhsPrecedence === null) {\n\t          //if the left hand side has no defined precedence, no parens are needed\n\t          //FunctionNode for example\n\t          lhsParens = false;\n\t        }\n\t        else if ((lhsPrecedence === precedence) && (associativity === 'right') && !assocWithLhs) {\n\t          //In case of equal precedence, if the root node is left associative\n\t          // parens are **never** necessary for the left hand side.\n\t          //If it is right associative however, parens are necessary\n\t          //if the root node isn't associative with the left hand side\n\t          lhsParens = true;\n\t        }\n\t        else if (lhsPrecedence < precedence) {\n\t          lhsParens = true;\n\t        }\n\t        else {\n\t          lhsParens = false;\n\t        }\n\n\t        var rhsParens; //right hand side needs parenthesis?\n\t        //precedence of the right hand side\n\t        var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);\n\t        //is the root node associative with the right hand side?\n\t        var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);\n\n\t        if (rhsPrecedence === null) {\n\t          //if the right hand side has no defined precedence, no parens are needed\n\t          //FunctionNode for example\n\t          rhsParens = false;\n\t        }\n\t        else if ((rhsPrecedence === precedence) && (associativity === 'left') && !assocWithRhs) {\n\t          //In case of equal precedence, if the root node is right associative\n\t          // parens are **never** necessary for the right hand side.\n\t          //If it is left associative however, parens are necessary\n\t          //if the root node isn't associative with the right hand side\n\t          rhsParens = true;\n\t        }\n\t        else if (rhsPrecedence < precedence) {\n\t          rhsParens = true;\n\t        }\n\t        else {\n\t          rhsParens = false;\n\t        }\n\n\t        //handle special cases for LaTeX, where some of the parentheses aren't needed\n\t        if (latex) {\n\t          var rootIdentifier;\n\t          var lhsIdentifier;\n\t          var rhsIdentifier;\n\t          if (parenthesis === 'keep') {\n\t            rootIdentifier = root.getIdentifier();\n\t            lhsIdentifier = root.args[0].getIdentifier();\n\t            rhsIdentifier = root.args[1].getIdentifier();\n\t          }\n\t          else {\n\t            //Ignore ParenthesisNodes when not in 'keep' mode\n\t            rootIdentifier = root.getContent().getIdentifier();\n\t            lhsIdentifier = root.args[0].getContent().getIdentifier();\n\t            rhsIdentifier = root.args[1].getContent().getIdentifier();\n\t          }\n\n\t          if (lhsPrecedence !== null) {\n\t            if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {\n\t              lhsParens = false;\n\t            }\n\n\t            if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n\t              lhsParens = false;\n\t            }\n\t          }\n\n\t          if (rhsPrecedence !== null) {\n\t            if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {\n\t              rhsParens = false;\n\t            }\n\n\t            if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n\t              rhsParens = false;\n\t            }\n\t          }\n\t        }\n\n\t        return [lhsParens, rhsParens];\n\t    }\n\t  }\n\n\t  /**\n\t   * Get string representation.\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  OperatorNode.prototype._toString = function (options) {\n\t    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n\t    var implicit = (options && options.implicit) ? options.implicit : 'hide';\n\t    var args = this.args;\n\t    var parens = calculateNecessaryParentheses(this, parenthesis, args, false);\n\n\t    switch (args.length) {\n\t      case 1: //unary operators\n\t        var assoc = operators.getAssociativity(this, parenthesis);\n\n\t        var operand = args[0].toString(options);\n\t        if (parens[0]) {\n\t          operand = '(' + operand + ')';\n\t        }\n\n\t        if (assoc === 'right') { //prefix operator\n\t          return this.op + operand;\n\t        }\n\t        else if (assoc === 'left') { //postfix\n\t          return operand + this.op;\n\t        }\n\n\t        //fall back to postfix\n\t        return operand + this.op;\n\n\t      case 2:\n\t        var lhs = args[0].toString(options); //left hand side\n\t        var rhs = args[1].toString(options); //right hand side\n\t        if (parens[0]) { //left hand side in parenthesis?\n\t          lhs = '(' + lhs + ')';\n\t        }\n\t        if (parens[1]) { //right hand side in parenthesis?\n\t          rhs = '(' + rhs + ')';\n\t        }\n\n\t        if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {\n\t          return lhs + ' ' + rhs;\n\t        }\n\n\t        return lhs + ' ' + this.op + ' ' + rhs;\n\n\t      default:\n\t        //fallback to formatting as a function call\n\t        return this.fn + '(' + this.args.join(', ') + ')';\n\t    }\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  OperatorNode.prototype._toTex = function (options) {\n\t    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n\t    var implicit = (options && options.implicit) ? options.implicit : 'hide';\n\t    var args = this.args;\n\t    var parens = calculateNecessaryParentheses(this, parenthesis, args, true);\n\t    var op = latex.operators[this.fn];\n\t    op = typeof op === 'undefined' ? this.op : op; //fall back to using this.op\n\n\t    switch (args.length) {\n\t      case 1: //unary operators\n\t        var assoc = operators.getAssociativity(this, parenthesis);\n\n\t        var operand = args[0].toTex(options);\n\t        if (parens[0]) {\n\t          operand = '\\\\left(' + operand + '\\\\right)';\n\t        }\n\n\t        if (assoc === 'right') { //prefix operator\n\t          return op + operand;\n\t        }\n\t        else if (assoc === 'left') { //postfix operator\n\t          return operand + op;\n\t        }\n\n\t        //fall back to postfix\n\t        return operand + op;\n\n\t      case 2: //binary operators\n\t        var lhs = args[0]; //left hand side\n\t        var lhsTex = lhs.toTex(options);\n\t        if (parens[0]) {\n\t          lhsTex = '\\\\left(' + lhsTex + '\\\\right)';\n\t        }\n\n\t        var rhs = args[1]; //right hand side\n\t        var rhsTex = rhs.toTex(options);\n\t        if (parens[1]) {\n\t          rhsTex = '\\\\left(' + rhsTex + '\\\\right)';\n\t        }\n\n\t        //handle some exceptions (due to the way LaTeX works)\n\t        var lhsIdentifier;\n\t        if (parenthesis === 'keep') {\n\t          lhsIdentifier = lhs.getIdentifier();\n\t        }\n\t        else {\n\t          //Ignore ParenthesisNodes if in 'keep' mode\n\t          lhsIdentifier = lhs.getContent().getIdentifier();\n\t        }\n\t        switch (this.getIdentifier()) {\n\t          case 'OperatorNode:divide':\n\t            //op contains '\\\\frac' at this point\n\t            return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n\t          case 'OperatorNode:pow':\n\t            lhsTex = '{' + lhsTex + '}';\n\t            rhsTex = '{' + rhsTex + '}';\n\t            switch (lhsIdentifier) {\n\t              case 'ConditionalNode': //\n\t              case 'OperatorNode:divide':\n\t                lhsTex = '\\\\left(' + lhsTex + '\\\\right)';\n\t            }\n\t          case 'OperatorNode:multiply':\n\t            if (this.implicit && (implicit === 'hide')) {\n\t              return lhsTex + '~' + rhsTex;\n\t            }\n\t        }\n\t        return lhsTex + op + rhsTex;\n\n\t      default:\n\t        //fall back to formatting as a function call\n\t        //as this is a fallback, it doesn't use\n\t        //fancy function names\n\t        return '\\\\mathrm{' + this.fn + '}\\\\left('\n\t            + args.map(function (arg) {\n\t              return arg.toTex(options);\n\t            }).join(',') + '\\\\right)';\n\t    }\n\t  };\n\n\t  /**\n\t   * Get identifier.\n\t   * @return {string}\n\t   */\n\t  OperatorNode.prototype.getIdentifier = function () {\n\t    return this.type + ':' + this.fn;\n\t  };\n\n\t  return OperatorNode;\n\t}\n\n\texports.name = 'OperatorNode';\n\texports.path = 'expression.node';\n\texports.math = true; // request access to the math namespace as 5th argument of the factory function\n\texports.factory = factory;\n\n\n/***/ },\n/* 290 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar latex = __webpack_require__(32);\n\n\tfunction factory (type, config, load, typed, math) {\n\t  var Node = load(__webpack_require__(272));\n\t  var SymbolNode = load(__webpack_require__(287));\n\n\t  /**\n\t   * @constructor FunctionNode\n\t   * @extends {./Node}\n\t   * invoke a list with arguments on a node\n\t   * @param {./Node} fn       Node resolving with a function on which to invoke\n\t   *                          the arguments, typically a SymboNode or AccessorNode\n\t   * @param {./Node[]} args\n\t   */\n\t  function FunctionNode(fn, args) {\n\t    if (!(this instanceof FunctionNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    // TODO deprecated since v3.0, cleanup some day\n\t    if (typeof fn === 'string') {\n\t      console.warn('WARNING: passing a string to FunctionNode is deprecated, pass a SymbolNode instead.');\n\t      fn = new SymbolNode(fn);\n\t    }\n\n\t    // validate input\n\t    if (!fn || !fn.isNode) throw new TypeError('Node expected as parameter \"fn\"');\n\t    if (!Array.isArray(args)\n\t        || !args.every(function (arg) {return arg && arg.isNode;})) {\n\t      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n\t    }\n\n\t    this.fn = fn;\n\t    this.args = args || [];\n\n\t    // readonly property name\n\t    Object.defineProperty(this, 'name', {\n\t      get: function () {\n\t        return this.fn.name || '';\n\t      }.bind(this),\n\t      set: function () {\n\t        throw new Error('Cannot assign a new name, name is read-only');\n\t      }\n\t    });\n\n\t    // TODO: deprecated since v3, remove some day\n\t    var deprecated = function () {\n\t      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');\n\t    };\n\t    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });\n\t  }\n\n\t  FunctionNode.prototype = new Node();\n\n\t  FunctionNode.prototype.type = 'FunctionNode';\n\n\t  FunctionNode.prototype.isFunctionNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} js\n\t   * @private\n\t   */\n\t  FunctionNode.prototype._compile = function (defs, args) {\n\t    // compile fn and arguments\n\t    var jsFn = this.fn._compile(defs, args);\n\t    var jsArgs = this.args.map(function (arg) {\n\t      return arg._compile(defs, args);\n\t    });\n\t    var argsName;\n\n\t    if (this.fn.isSymbolNode) {\n\t      // we can statically determine whether the function has an rawArgs property\n\t      var name = this.fn.name;\n\t      var fn = defs.math[name];\n\t      var isRaw = (typeof fn === 'function') && (fn.rawArgs == true);\n\n\t      if (isRaw) {\n\t        // pass unevaluated parameters (nodes) to the function\n\t        argsName = this._getUniqueArgumentsName(defs);\n\t        defs[argsName] = this.args;\n\n\t        return jsFn + '(' + argsName + ', math, scope)';\n\t      }\n\t      else {\n\t        // \"regular\" evaluation\n\t        return jsFn + '(' + jsArgs.join(', ') + ')';\n\t      }\n\t    }\n\t    else if (this.fn.isAccessorNode && this.fn.index.isObjectProperty()) {\n\t      // execute the function with the right context: the object of the AccessorNode\n\t      argsName = this._getUniqueArgumentsName(defs);\n\t      defs[argsName] = this.args;\n\n\t      var jsObject = this.fn.object._compile(defs, args);\n\t      var prop = this.fn.index.getObjectProperty();\n\n\t      return '(function () {' +\n\t          'var object = ' + jsObject + ';' +\n\t          'return (object[\"' + prop + '\"] && object[\"' + prop + '\"].rawArgs) ' +\n\t          ' ? object[\"' + prop + '\"](' + argsName + ', math, scope)' +\n\t          ' : object[\"' + prop + '\"](' + jsArgs.join(', ') + ')' +\n\t          '})()';\n\t    }\n\t    else { // this.fn.isAccessorNode && !this.fn.index.isObjectProperty()\n\t      // we have to dynamically determine whether the function has a rawArgs property\n\t      argsName = this._getUniqueArgumentsName(defs);\n\t      defs[argsName] = this.args;\n\n\t      return '(function () {' +\n\t          'var fn = ' + jsFn + ';' +\n\t          'return (fn && fn.rawArgs) ' +\n\t          ' ? fn(' + argsName + ', math, scope)' +\n\t          ' : fn(' + jsArgs.join(', ') + ')' +\n\t          '})()';\n\t    }\n\t  };\n\n\t  /**\n\t   * Get a unique name for a arguments to store in defs\n\t   * @param {Object} defs\n\t   * @return {string} A string like 'args1', 'args2', ...\n\t   * @private\n\t   */\n\t  FunctionNode.prototype._getUniqueArgumentsName = function (defs) {\n\t    var argsName;\n\t    var i = 0;\n\n\t    do {\n\t      argsName = 'args' + i;\n\t      i++;\n\t    }\n\t    while (argsName in defs);\n\n\t    return argsName;\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  FunctionNode.prototype.forEach = function (callback) {\n\t    for (var i = 0; i < this.args.length; i++) {\n\t      callback(this.args[i], 'args[' + i + ']', this);\n\t    }\n\t  };\n\n\t  /**\n\t   * Create a new FunctionNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node): Node} callback\n\t   * @returns {FunctionNode} Returns a transformed copy of the node\n\t   */\n\t  FunctionNode.prototype.map = function (callback) {\n\t    var fn = this.fn.map(callback);\n\t    var args = [];\n\t    for (var i = 0; i < this.args.length; i++) {\n\t      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n\t    }\n\t    return new FunctionNode(fn, args);\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {FunctionNode}\n\t   */\n\t  FunctionNode.prototype.clone = function () {\n\t    return new FunctionNode(this.fn, this.args.slice(0));\n\t  };\n\n\t  //backup Node's toString function\n\t  //@private\n\t  var nodeToString = FunctionNode.prototype.toString;\n\n\t  /**\n\t   * Get string representation. (wrapper function)\n\t   * This overrides parts of Node's toString function.\n\t   * If callback is an object containing callbacks, it\n\t   * calls the correct callback for the current node,\n\t   * otherwise it falls back to calling Node's toString\n\t   * function.\n\t   *\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   * @override\n\t   */\n\t  FunctionNode.prototype.toString = function (options) {\n\t    var customString;\n\t    var name = this.fn.toString(options);\n\t    if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(name)) {\n\t      //callback is a map of callback functions\n\t      customString = options.handler[name](this, options);\n\t    }\n\n\t    if (typeof customString !== 'undefined') {\n\t      return customString;\n\t    }\n\n\t    //fall back to Node's toString\n\t    return nodeToString.call(this, options);\n\t  };\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  FunctionNode.prototype._toString = function (options) {\n\t    var args = this.args.map(function (arg) {\n\t      return arg.toString(options);\n\t    });\n\n\t    // format the arguments like \"add(2, 4.2)\"\n\t    return this.fn.toString(options) + '(' + args.join(', ') + ')';\n\t  };\n\n\t  /*\n\t   * Expand a LaTeX template\n\t   *\n\t   * @param {string} template\n\t   * @param {Node} node\n\t   * @param {Object} options\n\t   * @private\n\t   **/\n\t  function expandTemplate(template, node, options) {\n\t    var latex = '';\n\n\t    // Match everything of the form ${identifier} or ${identifier[2]} or $$\n\t    // while submatching identifier and 2 (in the second case)\n\t    var regex = new RegExp('\\\\$(?:\\\\{([a-z_][a-z_0-9]*)(?:\\\\[([0-9]+)\\\\])?\\\\}|\\\\$)', 'ig');\n\n\t    var inputPos = 0;   //position in the input string\n\t    var match;\n\t    while ((match = regex.exec(template)) !== null) {   //go through all matches\n\t      // add everything in front of the match to the LaTeX string\n\t      latex += template.substring(inputPos, match.index);\n\t      inputPos = match.index;\n\n\t      if (match[0] === '$$') { // escaped dollar sign\n\t        latex += '$';\n\t        inputPos++;\n\t      }\n\t      else { // template parameter\n\t        inputPos += match[0].length;\n\t        var property = node[match[1]];\n\t        if (!property) {\n\t          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n\t        }\n\t        if (match[2] === undefined) { //no square brackets\n\t          switch (typeof property) {\n\t            case 'string':\n\t              latex += property;\n\t              break;\n\t            case 'object':\n\t              if (property.isNode) {\n\t                latex += property.toTex(options);\n\t              }\n\t              else if (Array.isArray(property)) {\n\t                //make array of Nodes into comma separated list\n\t                latex += property.map(function (arg, index) {\n\t                  if (arg && arg.isNode) {\n\t                    return arg.toTex(options);\n\t                  }\n\t                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n\t                }).join(',');\n\t              }\n\t              else {\n\t                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n\t              }\n\t              break;\n\t            default:\n\t              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n\t          }\n\t        }\n\t        else { //with square brackets\n\t          if (property[match[2]] && property[match[2]].isNode) {\n\t            latex += property[match[2]].toTex(options);\n\t          }\n\t          else {\n\t            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n\t          }\n\t        }\n\t      }\n\t    }\n\t    latex += template.slice(inputPos);  //append rest of the template\n\n\t    return latex;\n\t  }\n\n\t  //backup Node's toTex function\n\t  //@private\n\t  var nodeToTex = FunctionNode.prototype.toTex;\n\n\t  /**\n\t   * Get LaTeX representation. (wrapper function)\n\t   * This overrides parts of Node's toTex function.\n\t   * If callback is an object containing callbacks, it\n\t   * calls the correct callback for the current node,\n\t   * otherwise it falls back to calling Node's toTex\n\t   * function.\n\t   *\n\t   * @param {Object} options\n\t   * @return {string}\n\t   */\n\t  FunctionNode.prototype.toTex = function (options) {\n\t    var customTex;\n\t    if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(this.name)) {\n\t      //callback is a map of callback functions\n\t      customTex = options.handler[this.name](this, options);\n\t    }\n\n\t    if (typeof customTex !== 'undefined') {\n\t      return customTex;\n\t    }\n\n\t    //fall back to Node's toTex\n\t    return nodeToTex.call(this, options);\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   */\n\t  FunctionNode.prototype._toTex = function (options) {\n\t    var args = this.args.map(function (arg) { //get LaTeX of the arguments\n\t      return arg.toTex(options);\n\t    });\n\n\t    var latexConverter;\n\n\t    if (math[this.name] && ((typeof math[this.name].toTex === 'function') || (typeof math[this.name].toTex === 'object') || (typeof math[this.name].toTex === 'string'))) {\n\t      //.toTex is a callback function\n\t      latexConverter = math[this.name].toTex;\n\t    }\n\n\t    var customToTex;\n\t    switch (typeof latexConverter) {\n\t      case 'function': //a callback function\n\t        customToTex = latexConverter(this, options);\n\t        break;\n\t      case 'string': //a template string\n\t        customToTex = expandTemplate(latexConverter, this, options);\n\t        break;\n\t      case 'object': //an object with different \"converters\" for different numbers of arguments\n\t        switch (typeof latexConverter[args.length]) {\n\t          case 'function':\n\t            customToTex = latexConverter[args.length](this, options);\n\t            break;\n\t          case 'string':\n\t            customToTex = expandTemplate(latexConverter[args.length], this, options);\n\t            break;\n\t        }\n\t    }\n\n\t    if (typeof customToTex !== 'undefined') {\n\t      return customToTex;\n\t    }\n\n\t    return expandTemplate(latex.defaultTemplate, this, options);\n\t  };\n\n\t  /**\n\t   * Get identifier.\n\t   * @return {string}\n\t   */\n\t  FunctionNode.prototype.getIdentifier = function () {\n\t    return this.type + ':' + this.name;\n\t  };\n\n\t  return FunctionNode;\n\t}\n\n\texports.name = 'FunctionNode';\n\texports.path = 'expression.node';\n\texports.math = true; // request access to the math namespace as 5th argument of the factory function\n\texports.factory = factory;\n\n\n/***/ },\n/* 291 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(272));\n\n\t  /**\n\t   * @constructor ParenthesisNode\n\t   * @extends {Node}\n\t   * A parenthesis node describes manual parenthesis from the user input\n\t   * @param {Node} content\n\t   * @extends {Node}\n\t   */\n\t  function ParenthesisNode(content) {\n\t    if (!(this instanceof ParenthesisNode)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    // validate input\n\t    if (!(content && content.isNode)) {\n\t      throw new TypeError('Node expected for parameter \"content\"');\n\t    }\n\n\t    this.content = content;\n\t  }\n\n\t  ParenthesisNode.prototype = new Node();\n\n\t  ParenthesisNode.prototype.type = 'ParenthesisNode';\n\n\t  ParenthesisNode.prototype.isParenthesisNode = true;\n\n\t  /**\n\t   * Compile the node to javascript code\n\t   * @param {Object} defs     Object which can be used to define functions\n\t   *                          or constants globally available for the compiled\n\t   *                          expression\n\t   * @param {Object} args     Object with local function arguments, the key is\n\t   *                          the name of the argument, and the value is `true`.\n\t   *                          The object may not be mutated, but must be\n\t   *                          extended instead.\n\t   * @return {string} js\n\t   * @private\n\t   */\n\t  ParenthesisNode.prototype._compile = function (defs, args) {\n\t    return this.content._compile(defs, args);\n\t  };\n\n\t  /**\n\t   * Get the content of the current Node.\n\t   * @return {Node} content\n\t   * @override\n\t   **/\n\t  ParenthesisNode.prototype.getContent = function () {\n\t    return this.content.getContent();\n\t  };\n\n\t  /**\n\t   * Execute a callback for each of the child nodes of this node\n\t   * @param {function(child: Node, path: string, parent: Node)} callback\n\t   */\n\t  ParenthesisNode.prototype.forEach = function (callback) {\n\t    callback(this.content, 'content', this);\n\t  };\n\n\t  /**\n\t   * Create a new ParenthesisNode having it's childs be the results of calling\n\t   * the provided callback function for each of the childs of the original node.\n\t   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n\t   * @returns {ParenthesisNode} Returns a clone of the node\n\t   */\n\t  ParenthesisNode.prototype.map = function (callback) {\n\t    var content = callback(this.content, 'content', this);\n\t    return new ParenthesisNode(content);\n\t  };\n\n\t  /**\n\t   * Create a clone of this node, a shallow copy\n\t   * @return {ParenthesisNode}\n\t   */\n\t  ParenthesisNode.prototype.clone = function() {\n\t    return new ParenthesisNode(this.content);\n\t  };\n\n\t  /**\n\t   * Get string representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   * @override\n\t   */\n\t  ParenthesisNode.prototype._toString = function(options) {\n\t    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {\n\t      return '(' + this.content.toString(options) + ')';\n\t    }\n\t    return this.content.toString(options);\n\t  };\n\n\t  /**\n\t   * Get LaTeX representation\n\t   * @param {Object} options\n\t   * @return {string} str\n\t   * @override\n\t   */\n\t  ParenthesisNode.prototype._toTex = function(options) {\n\t    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {\n\t      return '\\\\left(' + this.content.toTex(options) + '\\\\right)';\n\t    }\n\t    return this.content.toTex(options);\n\t  };\n\n\t  return ParenthesisNode;\n\t}\n\n\texports.name = 'ParenthesisNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 292 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  var parse = load(__webpack_require__(270));\n\n\t  /**\n\t   * Evaluate an expression.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.eval(expr)\n\t   *     math.eval(expr, scope)\n\t   *     math.eval([expr1, expr2, expr3, ...])\n\t   *     math.eval([expr1, expr2, expr3, ...], scope)\n\t   *\n\t   * Example:\n\t   *\n\t   *     math.eval('(2+3)/4');                // 1.25\n\t   *     math.eval('sqrt(3^2 + 4^2)');        // 5\n\t   *     math.eval('sqrt(-4)');               // 2i\n\t   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]\n\t   *\n\t   *     var scope = {a:3, b:4};\n\t   *     math.eval('a * b', scope);           // 12\n\t   *\n\t   * See also:\n\t   *\n\t   *    parse, compile\n\t   *\n\t   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n\t   * @param {Object} [scope]                    Scope to read/write variables\n\t   * @return {*} The result of the expression\n\t   * @throws {Error}\n\t   */\n\t  return typed('compile', {\n\t    'string': function (expr) {\n\t      var scope = {};\n\t      return parse(expr).compile().eval(scope);\n\t    },\n\n\t    'string, Object': function (expr, scope) {\n\t      return parse(expr).compile().eval(scope);\n\t    },\n\n\t    'Array | Matrix': function (expr) {\n\t      var scope = {};\n\t      return deepMap(expr, function (entry) {\n\t        return parse(entry).compile().eval(scope);\n\t      });\n\t    },\n\n\t    'Array | Matrix, Object': function (expr, scope) {\n\t      return deepMap(expr, function (entry) {\n\t        return parse(entry).compile().eval(scope);\n\t      });\n\t    }\n\t  });\n\t}\n\n\texports.name = 'eval';\n\texports.factory = factory;\n\n/***/ },\n/* 293 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed, math) {\n\t  var docs = load(__webpack_require__(96));\n\n\t  /**\n\t   * Retrieve help on a function or data type.\n\t   * Help files are retrieved from the documentation in math.expression.docs.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.help(search)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    console.log(math.help('sin').toString());\n\t   *    console.log(math.help(math.add).toString());\n\t   *    console.log(math.help(math.add).toJSON());\n\t   *\n\t   * @param {Function | string | Object} search   A function or function name\n\t   *                                              for which to get help\n\t   * @return {Help} A help object\n\t   */\n\t  return typed('help', {\n\t    'any': function (search) {\n\t      var prop;\n\t      var name = search;\n\n\t      if (typeof search !== 'string') {\n\t        for (prop in math) {\n\t          // search in functions and constants\n\t          if (math.hasOwnProperty(prop) && (search === math[prop])) {\n\t            name = prop;\n\t            break;\n\t          }\n\t        }\n\n\t        /* TODO: implement help for data types\n\t         if (!text) {\n\t         // search data type\n\t         for (prop in math.type) {\n\t         if (math.type.hasOwnProperty(prop)) {\n\t         if (search === math.type[prop]) {\n\t         text = prop;\n\t         break;\n\t         }\n\t         }\n\t         }\n\t         }\n\t         */\n\t      }\n\n\t      var doc = docs[name];\n\t      if (!doc) {\n\t        throw new Error('No documentation found on \"' + name + '\"');\n\t      }\n\t      return new type.Help(doc);\n\t    }\n\t  });\n\t}\n\n\texports.math = true; // request access to the math namespace as 5th argument of the factory function\n\texports.name = 'help';\n\texports.factory = factory;\n\n\n/***/ },\n/* 294 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var parse = load(__webpack_require__(270));\n\n\t  /**\n\t   * Parse an expression. Returns a node tree, which can be evaluated by\n\t   * invoking node.eval();\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.parse(expr)\n\t   *     math.parse(expr, options)\n\t   *     math.parse([expr1, expr2, expr3, ...])\n\t   *     math.parse([expr1, expr2, expr3, ...], options)\n\t   *\n\t   * Example:\n\t   *\n\t   *     var node = math.parse('sqrt(3^2 + 4^2)');\n\t   *     node.compile().eval(); // 5\n\t   *\n\t   *     var scope = {a:3, b:4}\n\t   *     var node = math.parse('a * b'); // 12\n\t   *     var code = node.compile();\n\t   *     code.eval(scope); // 12\n\t   *     scope.a = 5;\n\t   *     code.eval(scope); // 20\n\t   *\n\t   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n\t   *     nodes[2].compile().eval(); // 12\n\t   *\n\t   * See also:\n\t   *\n\t   *     eval, compile\n\t   *\n\t   * @param {string | string[] | Matrix} expr          Expression to be parsed\n\t   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n\t   *                                                   - `nodes` a set of custom nodes\n\t   * @return {Node | Node[]} node\n\t   * @throws {Error}\n\t   */\n\t  return typed('parse', {\n\t    'string | Array | Matrix': parse,\n\t    'string | Array | Matrix, Object': parse\n\t  });\n\t}\n\n\texports.name = 'parse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 295 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed, math) {\n\t  var Parser = load(__webpack_require__(296));\n\n\t  /**\n\t   * Create a parser. The function creates a new `math.expression.Parser` object.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.parser()\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var parser = new math.parser();\n\t   *\n\t   *     // evaluate expressions\n\t   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5\n\t   *     var b = parser.eval('sqrt(-4)');        // 2i\n\t   *     var c = parser.eval('2 inch in cm');    // 5.08 cm\n\t   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476\n\t   *\n\t   *     // define variables and functions\n\t   *     parser.eval('x = 7 / 2');               // 3.5\n\t   *     parser.eval('x + 3');                   // 6.5\n\t   *     parser.eval('function f(x, y) = x^y');  // f(x, y)\n\t   *     parser.eval('f(2, 3)');                 // 8\n\t   *\n\t   *     // get and set variables and functions\n\t   *     var x = parser.get('x');                // 7\n\t   *     var f = parser.get('f');                // function\n\t   *     var g = f(3, 2);                        // 9\n\t   *     parser.set('h', 500);\n\t   *     var i = parser.eval('h / 2');           // 250\n\t   *     parser.set('hello', function (name) {\n\t   *       return 'hello, ' + name + '!';\n\t   *     });\n\t   *     parser.eval('hello(\"user\")');           // \"hello, user!\"\n\t   *\n\t   *     // clear defined functions and variables\n\t   *     parser.clear();\n\t   *\n\t   * See also:\n\t   *\n\t   *    eval, compile, parse\n\t   *\n\t   * @return {Parser} Parser\n\t   */\n\t  return typed('parser', {\n\t    '': function () {\n\t      return new Parser(math);\n\t    }\n\t  });\n\t}\n\n\texports.name = 'parser';\n\texports.factory = factory;\n\texports.math = true; // requires the math namespace as 5th argument\n\n\n/***/ },\n/* 296 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar extend = __webpack_require__(3).extend;\n\n\tfunction factory (type, config, load, typed, math) {\n\t  var _parse = load(__webpack_require__(270));\n\n\t  /**\n\t   * @constructor Parser\n\t   * Parser contains methods to evaluate or parse expressions, and has a number\n\t   * of convenience methods to get, set, and remove variables from memory. Parser\n\t   * keeps a scope containing variables in memory, which is used for all\n\t   * evaluations.\n\t   *\n\t   * Methods:\n\t   *    var result = parser.eval(expr);    // evaluate an expression\n\t   *    var value = parser.get(name);      // retrieve a variable from the parser\n\t   *    var values = parser.getAll();      // retrieve all defined variables\n\t   *    parser.set(name, value);           // set a variable in the parser\n\t   *    parser.remove(name);               // clear a variable from the\n\t   *                                       // parsers scope\n\t   *    parser.clear();                    // clear the parsers scope\n\t   *\n\t   * Example usage:\n\t   *    var parser = new Parser();\n\t   *    // Note: there is a convenience method which can be used instead:\n\t   *    // var parser = new math.parser();\n\t   *\n\t   *    // evaluate expressions\n\t   *    parser.eval('sqrt(3^2 + 4^2)');         // 5\n\t   *    parser.eval('sqrt(-4)');                // 2i\n\t   *    parser.eval('2 inch in cm');            // 5.08 cm\n\t   *    parser.eval('cos(45 deg)');             // 0.7071067811865476\n\t   *\n\t   *    // define variables and functions\n\t   *    parser.eval('x = 7 / 2');               // 3.5\n\t   *    parser.eval('x + 3');                   // 6.5\n\t   *    parser.eval('function f(x, y) = x^y');  // f(x, y)\n\t   *    parser.eval('f(2, 3)');                 // 8\n\t   *\n\t   *    // get and set variables and functions\n\t   *    var x = parser.get('x');                // 7\n\t   *    var f = parser.get('f');                // function\n\t   *    var g = f(3, 2);                        // 9\n\t   *    parser.set('h', 500);\n\t   *    var i = parser.eval('h / 2');           // 250\n\t   *    parser.set('hello', function (name) {\n\t   *        return 'hello, ' + name + '!';\n\t   *    });\n\t   *    parser.eval('hello(\"user\")');           // \"hello, user!\"\n\t   *\n\t   *    // clear defined functions and variables\n\t   *    parser.clear();\n\t   *\n\t   */\n\t  function Parser() {\n\t    if (!(this instanceof Parser)) {\n\t      throw new SyntaxError(\n\t          'Constructor must be called with the new operator');\n\t    }\n\t    this.scope = {};\n\t  }\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  Parser.prototype.type = 'Parser';\n\t  Parser.prototype.isParser = true;\n\n\t  /**\n\t   * Parse an expression and return the parsed function node.\n\t   * The node tree can be compiled via `code = node.compile(math)`,\n\t   * and the compiled code can be executed as `code.eval([scope])`\n\t   * @param {string} expr\n\t   * @return {Node} node\n\t   * @throws {Error}\n\t   */\n\t  Parser.prototype.parse = function (expr) {\n\t    throw new Error('Parser.parse is deprecated. Use math.parse instead.');\n\t  };\n\n\t  /**\n\t   * Parse and compile an expression, return the compiled javascript code.\n\t   * The node can be evaluated via code.eval([scope])\n\t   * @param {string} expr\n\t   * @return {{eval: function}} code\n\t   * @throws {Error}\n\t   */\n\t  Parser.prototype.compile = function (expr) {\n\t    throw new Error('Parser.compile is deprecated. Use math.compile instead.');\n\t  };\n\n\t  /**\n\t   * Parse and evaluate the given expression\n\t   * @param {string} expr   A string containing an expression, for example \"2+3\"\n\t   * @return {*} result     The result, or undefined when the expression was empty\n\t   * @throws {Error}\n\t   */\n\t  Parser.prototype.eval = function (expr) {\n\t    // TODO: validate arguments\n\t    return _parse(expr)\n\t        .compile()\n\t        .eval(this.scope);\n\t  };\n\n\t  /**\n\t   * Get a variable (a function or variable) by name from the parsers scope.\n\t   * Returns undefined when not found\n\t   * @param {string} name\n\t   * @return {* | undefined} value\n\t   */\n\t  Parser.prototype.get = function (name) {\n\t    // TODO: validate arguments\n\t    return this.scope[name];\n\t  };\n\n\t  /**\n\t   * Get a map with all defined variables\n\t   * @return {Object} values\n\t   */\n\t  Parser.prototype.getAll = function () {\n\t    return extend({}, this.scope);\n\t  };\n\n\t  /**\n\t   * Set a symbol (a function or variable) by name from the parsers scope.\n\t   * @param {string} name\n\t   * @param {* | undefined} value\n\t   */\n\t  Parser.prototype.set = function (name, value) {\n\t    // TODO: validate arguments\n\t    return this.scope[name] = value;\n\t  };\n\n\t  /**\n\t   * Remove a variable from the parsers scope\n\t   * @param {string} name\n\t   */\n\t  Parser.prototype.remove = function (name) {\n\t    // TODO: validate arguments\n\t    delete this.scope[name];\n\t  };\n\n\t  /**\n\t   * Clear the scope with variables and functions\n\t   */\n\t  Parser.prototype.clear = function () {\n\t    for (var name in this.scope) {\n\t      if (this.scope.hasOwnProperty(name)) {\n\t        delete this.scope[name];\n\t      }\n\t    }\n\t  };\n\n\t  return Parser;\n\t}\n\n\texports.name = 'Parser';\n\texports.path = 'expression';\n\texports.factory = factory;\n\texports.math = true; // requires the math namespace as 5th argument\n\n\n/***/ },\n/* 297 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(271),\n\t  __webpack_require__(277),\n\t  __webpack_require__(278),\n\t  __webpack_require__(281),\n\t  __webpack_require__(282),\n\t  __webpack_require__(283),\n\t  __webpack_require__(285),\n\t  __webpack_require__(284),\n\t  __webpack_require__(290),\n\t  __webpack_require__(272),\n\t  __webpack_require__(288),\n\t  __webpack_require__(289),\n\t  __webpack_require__(291),\n\t  __webpack_require__(286),\n\t  __webpack_require__(287),\n\t  __webpack_require__(298)\n\t];\n\n\n/***/ },\n/* 298 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * @constructor UpdateNode\n\t   */\n\t  function UpdateNode() {\n\t    // TODO: deprecated since v3. Cleanup some day\n\t    throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');\n\t  }\n\n\t  return UpdateNode;\n\t}\n\n\texports.name = 'UpdateNode';\n\texports.path = 'expression.node';\n\texports.factory = factory;\n\n\n/***/ },\n/* 299 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(300),\n\t  __webpack_require__(302),\n\t  __webpack_require__(304),\n\t  __webpack_require__(306),\n\t  __webpack_require__(307),\n\t  __webpack_require__(309),\n\t  __webpack_require__(315),\n\t  __webpack_require__(320),\n\t  __webpack_require__(322),\n\t  __webpack_require__(324)\n\t];\n\n\n/***/ },\n/* 300 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar errorTransform = __webpack_require__(275).transform;\n\n\t/**\n\t * Attach a transform function to math.range\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function concat\n\t * from one-based to zero based\n\t */\n\tfunction factory (type, config, load, typed) {\n\t  var concat = load(__webpack_require__(301));\n\n\t  // @see: comment of concat itself\n\t return typed('concat', {\n\t    '...any': function (args) {\n\t      // change last argument from one-based to zero-based\n\t      var lastIndex = args.length - 1;\n\t      var last = args[lastIndex];\n\t      if (typeof last === 'number') {\n\t        args[lastIndex] = last - 1;\n\t      }\n\t      else if (last && last.isBigNumber === true) {\n\t        args[lastIndex] = last.minus(1);\n\t      }\n\n\t      try {\n\t        return concat.apply(null, args);\n\t      }\n\t      catch (err) {\n\t        throw errorTransform(err);\n\t      }\n\t    }\n\t  });\n\t}\n\n\texports.name = 'concat';\n\texports.path = 'expression.transform';\n\texports.factory = factory;\n\n\n/***/ },\n/* 301 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar clone = __webpack_require__(3).clone;\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar array = __webpack_require__(40);\n\tvar IndexError = __webpack_require__(43);\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Concatenate two or more matrices.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.concat(A, B, C, ...)\n\t   *     math.concat(A, B, C, ..., dim)\n\t   *\n\t   * Where:\n\t   *\n\t   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n\t   *   By default the last dimension of the matrices.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var A = [[1, 2], [5, 6]];\n\t   *    var B = [[3, 4], [7, 8]];\n\t   *\n\t   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n\t   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n\t   *    math.concat('hello', ' ', 'world'); // returns 'hello world'\n\t   *\n\t   * See also:\n\t   *\n\t   *    size, squeeze, subset, transpose\n\t   *\n\t   * @param {... Array | Matrix} args     Two or more matrices\n\t   * @return {Array | Matrix} Concatenated matrix\n\t   */\n\t  var concat = typed('concat', {\n\t    // TODO: change signature to '...Array | Matrix, dim?' when supported\n\t    '...Array | Matrix | number | BigNumber': function (args) {\n\t      var i;\n\t      var len = args.length;\n\t      var dim = -1;  // zero-based dimension\n\t      var prevDim;\n\t      var asMatrix = false;\n\t      var matrices = [];  // contains multi dimensional arrays\n\n\t      for (i = 0; i < len; i++) {\n\t        var arg = args[i];\n\n\t        // test whether we need to return a Matrix (if not we return an Array)\n\t        if (arg && arg.isMatrix === true) {\n\t          asMatrix = true;\n\t        }\n\n\t        if (typeof arg === 'number' || (arg && arg.isBigNumber === true)) {\n\t          if (i !== len - 1) {\n\t            throw new Error('Dimension must be specified as last argument');\n\t          }\n\n\t          // last argument contains the dimension on which to concatenate\n\t          prevDim = dim;\n\t          dim = arg.valueOf(); // change BigNumber to number\n\n\t          if (!isInteger(dim)) {\n\t            throw new TypeError('Integer number expected for dimension');\n\t          }\n\n\t          if (dim < 0 || (i > 0 && dim > prevDim)) {\n\t            // TODO: would be more clear when throwing a DimensionError here\n\t            throw new IndexError(dim, prevDim + 1);\n\t          }\n\t        }\n\t        else {\n\t          // this is a matrix or array\n\t          var m = clone(arg).valueOf();\n\t          var size = array.size(m);\n\t          matrices[i] = m;\n\t          prevDim = dim;\n\t          dim = size.length - 1;\n\n\t          // verify whether each of the matrices has the same number of dimensions\n\t          if (i > 0 && dim != prevDim) {\n\t            throw new DimensionError(prevDim + 1, dim + 1);\n\t          }\n\t        }\n\t      }\n\n\t      if (matrices.length == 0) {\n\t        throw new SyntaxError('At least one matrix expected');\n\t      }\n\n\t      var res = matrices.shift();\n\t      while (matrices.length) {\n\t        res = _concat(res, matrices.shift(), dim, 0);\n\t      }\n\n\t      return asMatrix ? matrix(res) : res;\n\t    },\n\n\t    '...string': function (args) {\n\t      return args.join('');\n\t    }\n\t  });\n\n\t  concat.toTex = undefined; // use default template\n\n\t  return concat;\n\t}\n\n\t/**\n\t * Recursively concatenate two matrices.\n\t * The contents of the matrices is not cloned.\n\t * @param {Array} a             Multi dimensional array\n\t * @param {Array} b             Multi dimensional array\n\t * @param {number} concatDim    The dimension on which to concatenate (zero-based)\n\t * @param {number} dim          The current dim (zero-based)\n\t * @return {Array} c            The concatenated matrix\n\t * @private\n\t */\n\tfunction _concat(a, b, concatDim, dim) {\n\t  if (dim < concatDim) {\n\t    // recurse into next dimension\n\t    if (a.length != b.length) {\n\t      throw new DimensionError(a.length, b.length);\n\t    }\n\n\t    var c = [];\n\t    for (var i = 0; i < a.length; i++) {\n\t      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\n\t    }\n\t    return c;\n\t  }\n\t  else {\n\t    // concatenate this dimension\n\t    return a.concat(b);\n\t  }\n\t}\n\n\texports.name = 'concat';\n\texports.factory = factory;\n\n\n/***/ },\n/* 302 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/**\n\t * Attach a transform function to math.filter\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform adds support for equations as test function for math.filter,\n\t * so you can do something like 'filter([3, -2, 5], x > 0)'.\n\t */\n\tfunction factory (type, config, load, typed) {\n\t  var filter = load(__webpack_require__(303));\n\t  var SymbolNode = load(__webpack_require__(287));\n\n\t  function filterTransform(args, math, scope) {\n\t    var x, test;\n\n\t    if (args[0]) {\n\t      x = args[0].compile().eval(scope);\n\t    }\n\n\t    if (args[1]) {\n\t      if (args[1] && args[1].isSymbolNode) {\n\t        // a function pointer, like filter([3, -2, 5], myTestFunction);\n\t        test = args[1].compile().eval(scope);\n\t      }\n\t      else {\n\t        // an equation like filter([3, -2, 5], x > 0)\n\n\t        // find an undefined symbol\n\t        var _scope = scope || {};\n\t        var symbol = args[1]\n\t            .filter(function (node) {\n\t              return (node && node.isSymbolNode) &&\n\t                  !(node.name in math) &&\n\t                  !(node.name in _scope);\n\t            })[0];\n\n\t        // create a test function for this equation\n\t        var sub = Object.create(_scope);\n\t        var eq = args[1].compile();\n\t        if (symbol) {\n\t          var name = symbol.name;\n\t          test = function (x) {\n\t            sub[name] = x;\n\t            return eq.eval(sub);\n\t          }\n\t        }\n\t        else {\n\t          throw new Error('No undefined variable found in filter equation');\n\t        }\n\t      }\n\t    }\n\n\t    return filter(x, test);\n\t  }\n\n\t  filterTransform.rawArgs = true;\n\n\t  return filterTransform;\n\t}\n\n\texports.name = 'filter';\n\texports.path = 'expression.transform';\n\texports.factory = factory;\n\n\n/***/ },\n/* 303 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar size = __webpack_require__(40).size;\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  \n\t  /**\n\t   * Filter the items in an array or one dimensional matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.filter(x, test)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    function isPositive (x) {\n\t   *      return x > 0;\n\t   *    }\n\t   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]\n\t   *\n\t   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/); // returns [\"23\", \"100\", \"55\"]\n\t   *\n\t   * See also:\n\t   *\n\t   *    forEach, map, sort\n\t   *\n\t   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n\t   * @param {Function | RegExp} test\n\t   *        A function or regular expression to test items.\n\t   *        When `test` is a function, it must return a boolean.\n\t   *        All entries for which `test` returns true are returned.\n\t   * @return {Matrix | Array} Returns the filtered matrix.\n\t   */\n\t  var filter = typed('filter', {\n\t    'Array, function': _filterCallback,\n\n\t    'Array, RegExp': _filterRegExp,\n\n\t    'Matrix, function': function (x, test) {\n\t      return matrix(_filterCallback(x.toArray(), test));\n\t    },\n\n\t    'Matrix, RegExp': function (x, test) {\n\t      return matrix(_filterRegExp(x.toArray(), test));\n\t    }\n\t  });\n\n\t  filter.toTex = undefined; // use default template\n\n\t  return filter;\n\t}\n\n\t/**\n\t * Filter values in a callback given a callback function\n\t * @param {Array} x\n\t * @param {Function} callback\n\t * @return {Array} Returns the filtered array\n\t * @private\n\t */\n\tfunction _filterCallback (x, callback) {\n\t  if (size(x).length !== 1) {\n\t    throw new Error('Only one dimensional matrices supported');\n\t  }\n\n\t  return x.filter(function (entry) {\n\t    return callback(entry);\n\t  });\n\t}\n\n\t/**\n\t * Filter values in a callback given a regular expression\n\t * @param {Array} x\n\t * @param {Function} regexp\n\t * @return {Array} Returns the filtered array\n\t * @private\n\t */\n\tfunction _filterRegExp (x, regexp) {\n\t  if (size(x).length !== 1) {\n\t    throw new Error('Only one dimensional matrices supported');\n\t  }\n\n\t  return x.filter(function (entry) {\n\t    return regexp.test(entry);\n\t  });\n\t}\n\n\texports.name = 'filter';\n\texports.factory = factory;\n\n\n/***/ },\n/* 304 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/**\n\t * Attach a transform function to math.forEach\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a one-based index instead of a zero-based index\n\t */\n\tfunction factory (type, config, load, typed) {\n\t  var forEach = load(__webpack_require__(305));\n\n\t  return typed('forEach', {\n\t    'Array | Matrix, function': function (array, callback) {\n\t      var recurse = function (value, index) {\n\t        if (Array.isArray(value)) {\n\t          value.forEach(function (child, i) {\n\t            // we create a copy of the index array and append the new index value\n\t            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n\t          });\n\t        }\n\t        else {\n\t          callback(value, index, array);\n\t        }\n\t      };\n\t      recurse(array.valueOf(), []); // pass Array\n\t    }\n\t  });\n\t}\n\n\texports.name = 'forEach';\n\texports.path = 'expression.transform';\n\texports.factory = factory;\n\n\n/***/ },\n/* 305 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Iterate over all elements of a matrix/array, and executes the given callback function.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.forEach(x, callback)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.forEach([1, 2, 3], function(value) {\n\t   *      console.log(value);\n\t   *    });\n\t   *    // outputs 1, 2, 3\n\t   *\n\t   * See also:\n\t   *\n\t   *    filter, map, sort\n\t   *\n\t   * @param {Matrix | Array} x    The matrix to iterate on.\n\t   * @param {Function} callback   The callback function is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the Matrix/array being traversed.\n\t   */\n\t  var forEach = typed('forEach', {\n\t    'Array, function': _forEach,\n\n\t    'Matrix, function': function (x, callback) {\n\t      return x.forEach(callback);\n\t    }\n\t  });\n\n\t  forEach.toTex = undefined; // use default template\n\n\t  return forEach;\n\t}\n\n\t/**\n\t * forEach for a multi dimensional array\n\t * @param {Array} array\n\t * @param {Function} callback\n\t * @private\n\t */\n\tfunction _forEach (array, callback) {\n\t  var recurse = function (value, index) {\n\t    if (Array.isArray(value)) {\n\t      value.forEach(function (child, i) {\n\t        // we create a copy of the index array and append the new index value\n\t        recurse(child, index.concat(i));\n\t      });\n\t    }\n\t    else {\n\t      callback(value, index, array);\n\t    }\n\t  };\n\t  recurse(array, []);\n\t}\n\n\texports.name = 'forEach';\n\texports.factory = factory;\n\n\n/***/ },\n/* 306 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isArray = Array.isArray;\n\n\t/**\n\t * Attach a transform function to math.index\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a one-based index instead of a zero-based index\n\t */\n\tfunction factory (type, config, load) {\n\t  var indexFactory = load(__webpack_require__(68));\n\n\t  return function indexTransform() {\n\t    var args = [];\n\t    for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t      var arg = arguments[i];\n\n\t      // change from one-based to zero based, and convert BigNumber to number\n\t      if (arg && arg.isRange === true) {\n\t        arg.start--;\n\t        arg.end -= (arg.step > 0 ? 0 : 2);\n\t      }\n\t      else if (arg && arg.isSet === true) {\n\t        arg = arg.map(function (v) { return v - 1; });\n\t      }\n\t      else if (arg && (arg.isArray === true || arg.isMatrix)) {\n\t        arg = arg.map(function (v) { return v - 1; });\n\t      }\n\t      else if (typeof arg === 'number') {\n\t        arg--;\n\t      }\n\t      else if (arg && arg.isBigNumber === true) {\n\t        arg = arg.toNumber() - 1;\n\t      }\n\t      else if (typeof arg === 'string') {\n\t        // leave as is\n\t      }\n\t      else {\n\t        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n\t      }\n\n\t      args[i] = arg;\n\t    }\n\n\t    var res = new type.Index();\n\t    type.Index.apply(res, args);\n\t    return res;\n\t  };\n\t}\n\n\texports.name = 'index';\n\texports.path = 'expression.transform';\n\texports.factory = factory;\n\n\n/***/ },\n/* 307 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/**\n\t * Attach a transform function to math.map\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a one-based index instead of a zero-based index\n\t */\n\tfunction factory (type, config, load, typed) {\n\t  var map = load(__webpack_require__(308));\n\t  var matrix = load(__webpack_require__(52));\n\n\t  return typed('max', {\n\t    'Array, function': function (x, callback) {\n\t      return _map(x, callback, x);\n\t    },\n\n\t    'Matrix, function': function (x, callback) {\n\t      return matrix(_map(x.valueOf(), callback, x));\n\t    }\n\t  });\n\t}\n\n\t/**\n\t * Map for a multi dimensional array. One-based indexes\n\t * @param {Array} array\n\t * @param {function} callback\n\t * @param {Array} orig\n\t * @return {Array}\n\t * @private\n\t */\n\tfunction _map (array, callback, orig) {\n\t  function recurse(value, index) {\n\t    if (Array.isArray(value)) {\n\t      return value.map(function (child, i) {\n\t        // we create a copy of the index array and append the new index value\n\t        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1\n\t      });\n\t    }\n\t    else {\n\t      return callback(value, index, orig);\n\t    }\n\t  }\n\n\t  return recurse(array, []);\n\t}\n\n\texports.name = 'map';\n\texports.path = 'expression.transform';\n\texports.factory = factory;\n\n\n/***/ },\n/* 308 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a new matrix or array with the results of the callback function executed on\n\t   * each entry of the matrix/array.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.map(x, callback)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.map([1, 2, 3], function(value) {\n\t   *      return value * value;\n\t   *    });  // returns [1, 4, 9]\n\t   *\n\t   * See also:\n\t   *\n\t   *    filter, forEach, sort\n\t   *\n\t   * @param {Matrix | Array} x    The matrix to iterate on.\n\t   * @param {Function} callback   The callback method is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the matrix being traversed.\n\t   * @return {Matrix | array}     Transformed map of x\n\t   */\n\t  var map = typed('map', {\n\t    'Array, function': _map,\n\n\t    'Matrix, function': function (x, callback) {\n\t      return x.map(callback);\n\t    }\n\t  });\n\n\t  map.toTex = undefined; // use default template\n\n\t  return map;\n\t}\n\n\t/**\n\t * Map for a multi dimensional array\n\t * @param {Array} array\n\t * @param {Function} callback\n\t * @return {Array}\n\t * @private\n\t */\n\tfunction _map (array, callback) {\n\t  var recurse = function (value, index) {\n\t    if (Array.isArray(value)) {\n\t      return value.map(function (child, i) {\n\t        // we create a copy of the index array and append the new index value\n\t        return recurse(child, index.concat(i));\n\t      });\n\t    }\n\t    else {\n\t      return callback(value, index, array);\n\t    }\n\t  };\n\n\t  return recurse(array, []);\n\t}\n\n\texports.name = 'map';\n\texports.factory = factory;\n\n\n/***/ },\n/* 309 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar errorTransform = __webpack_require__(275).transform;\n\tvar isCollection = __webpack_require__(310);\n\n\t/**\n\t * Attach a transform function to math.max\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function max\n\t * from one-based to zero based\n\t */\n\tfunction factory (type, config, load, typed) {\n\t  var max = load(__webpack_require__(311));\n\n\t  return typed('max', {\n\t    '...any': function (args) {\n\t      // change last argument dim from one-based to zero-based\n\t      if (args.length == 2 && isCollection(args[0])) {\n\t        var dim = args[1];\n\t        if (typeof dim === 'number') {\n\t          args[1] = dim - 1;\n\t        }\n\t        else if (dim && dim.isBigNumber === true) {\n\t          args[1] = dim.minus(1);\n\t        }\n\t      }\n\n\t      try {\n\t        return max.apply(null, args);\n\t      }\n\t      catch (err) {\n\t        throw errorTransform(err);\n\t      }\n\t    }\n\t  });\n\t}\n\n\texports.name = 'max';\n\texports.path = 'expression.transform';\n\texports.factory = factory;\n\n\n/***/ },\n/* 310 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/**\n\t * Test whether a value is a collection: an Array or Matrix\n\t * @param {*} x\n\t * @returns {boolean} isCollection\n\t */\n\tmodule.exports = function isCollection (x) {\n\t  return (Array.isArray(x) || (x && x.isMatrix === true));\n\t};\n\n\n/***/ },\n/* 311 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepForEach = __webpack_require__(312);\n\tvar reduce = __webpack_require__(313);\n\tvar containsCollections = __webpack_require__(314);\n\n\tfunction factory (type, config, load, typed) {\n\t  var larger = load(__webpack_require__(64));\n\n\t  /**\n\t   * Compute the maximum value of a matrix or a  list with values.\n\t   * In case of a multi dimensional array, the maximum of the flattened array\n\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.max(a, b, c, ...)\n\t   *     math.max(A)\n\t   *     math.max(A, dim)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.max(2, 1, 4, 3);                  // returns 4\n\t   *     math.max([2, 1, 4, 3]);                // returns 4\n\t   *\n\t   *     // maximum over a specified dimension (zero-based)\n\t   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]\n\t   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]\n\t   *\n\t   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n\t   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, min, prod, std, sum, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The maximum value\n\t   */\n\t  var max = typed('max', {\n\t    // max([a, b, c, d, ...])\n\t    'Array | Matrix': _max,\n\n\t    // max([a, b, c, d, ...], dim)\n\t    'Array | Matrix, number | BigNumber': function (array, dim) {\n\t      return reduce(array, dim.valueOf(), _largest);\n\t    },\n\n\t    // max(a, b, c, d, ...)\n\t    '...': function (args) {\n\t      if (containsCollections(args)) {\n\t        throw new TypeError('Scalar values expected in function max');\n\t      }\n\n\t      return _max(args);\n\t    }\n\t  });\n\n\t  max.toTex = '\\\\max\\\\left(${args}\\\\right)';\n\n\t  return max;\n\n\t  /**\n\t   * Return the largest of two values\n\t   * @param {*} x\n\t   * @param {*} y\n\t   * @returns {*} Returns x when x is largest, or y when y is largest\n\t   * @private\n\t   */\n\t  function _largest(x, y){\n\t    return larger(x, y) ? x : y;\n\t  }\n\n\t  /**\n\t   * Recursively calculate the maximum value in an n-dimensional array\n\t   * @param {Array} array\n\t   * @return {number} max\n\t   * @private\n\t   */\n\t  function _max(array) {\n\t    var max = undefined;\n\n\t    deepForEach(array, function (value) {\n\t      if (max === undefined || larger(value, max)) {\n\t        max = value;\n\t      }\n\t    });\n\n\t    if (max === undefined) {\n\t      throw new Error('Cannot calculate max of an empty array');\n\t    }\n\n\t    return max;\n\t  }\n\t}\n\n\texports.name = 'max';\n\texports.factory = factory;\n\n\n/***/ },\n/* 312 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/**\n\t * Recursively loop over all elements in a given multi dimensional array\n\t * and invoke the callback on each of the elements.\n\t * @param {Array | Matrix} array\n\t * @param {Function} callback     The callback method is invoked with one\n\t *                                parameter: the current element in the array\n\t */\n\tmodule.exports = function deepForEach (array, callback) {\n\t  if (array && array.isMatrix === true) {\n\t    array = array.valueOf();\n\t  }\n\n\t  for (var i = 0, ii = array.length; i < ii; i++) {\n\t    var value = array[i];\n\n\t    if (Array.isArray(value)) {\n\t      deepForEach(value, callback);\n\t    }\n\t    else {\n\t      callback(value);\n\t    }\n\t  }\n\t};\n\n\n/***/ },\n/* 313 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar arraySize = __webpack_require__(40).size;\n\tvar IndexError = __webpack_require__(43);\n\n\t/**\n\t * Reduce a given matrix or array to a new matrix or\n\t * array with one less dimension, applying the given\n\t * callback in the selected dimension.\n\t * @param {Array | Matrix} mat\n\t * @param {number} dim\n\t * @param {Function} callback\n\t * @return {Array | Matrix} res\n\t */\n\tmodule.exports = function(mat, dim, callback) {\n\t  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n\t  if (dim < 0 || (dim >= size.length)) {\n\t    // TODO: would be more clear when throwing a DimensionError here\n\t    throw new IndexError(dim, size.length);\n\t  }\n\n\t  if (mat && mat.isMatrix === true) {\n\t    return mat.create(_reduce(mat.valueOf(), dim, callback));\n\t  }else {\n\t    return _reduce(mat, dim, callback);\n\t  }\n\t};\n\n\t/**\n\t * Recursively reduce a matrix\n\t * @param {Array} mat\n\t * @param {number} dim\n\t * @param {Function} callback\n\t * @returns {Array} ret\n\t * @private\n\t */\n\tfunction _reduce(mat, dim, callback){\n\t  var i, ret, val, tran;\n\n\t  if(dim<=0){\n\t    if( !Array.isArray(mat[0]) ){\n\t      val = mat[0];\n\t      for(i=1; i<mat.length; i++){\n\t        val = callback(val, mat[i]);\n\t      }\n\t      return val;\n\t    }else{\n\t      tran = _switch(mat);\n\t      ret = [];\n\t      for(i=0; i<tran.length; i++){\n\t        ret[i] = _reduce(tran[i], dim-1, callback);\n\t      }\n\t      return ret;\n\t    }\n\t  }else{\n\t    ret = [];\n\t    for(i=0; i<mat.length; i++){\n\t      ret[i] = _reduce(mat[i], dim-1, callback);\n\t    }\n\t    return ret;\n\t  }\n\t}\n\n\t/**\n\t * Transpose a matrix\n\t * @param {Array} mat\n\t * @returns {Array} ret\n\t * @private\n\t */\n\tfunction _switch(mat){\n\t  var I = mat.length;\n\t  var J = mat[0].length;\n\t  var i, j;\n\t  var ret = [];\n\t  for( j=0; j<J; j++) {\n\t    var tmp = [];\n\t    for( i=0; i<I; i++) {\n\t      tmp.push(mat[i][j]);\n\t    }\n\t    ret.push(tmp);\n\t  }\n\t  return ret;\n\t}\n\n\n/***/ },\n/* 314 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isCollection = __webpack_require__(310);\n\n\t/**\n\t * Test whether an array contains collections\n\t * @param {Array} array\n\t * @returns {boolean} Returns true when the array contains one or multiple\n\t *                    collections (Arrays or Matrices). Returns false otherwise.\n\t */\n\tmodule.exports = function containsCollections (array) {\n\t  for (var i = 0; i < array.length; i++) {\n\t    if (isCollection(array[i])) {\n\t      return true;\n\t    }\n\t  }\n\t  return false;\n\t};\n\n\n/***/ },\n/* 315 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar errorTransform = __webpack_require__(275).transform;\n\tvar isCollection = __webpack_require__(310);\n\n\t/**\n\t * Attach a transform function to math.mean\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function mean\n\t * from one-based to zero based\n\t */\n\tfunction factory (type, config, load, typed) {\n\t  var mean = load(__webpack_require__(316));\n\n\t  return typed('mean', {\n\t    '...any': function (args) {\n\t      // change last argument dim from one-based to zero-based\n\t      if (args.length == 2 && isCollection(args[0])) {\n\t        var dim = args[1];\n\t        if (typeof dim === 'number') {\n\t          args[1] = dim - 1;\n\t        }\n\t        else if (dim && dim.isBigNumber === true) {\n\t          args[1] = dim.minus(1);\n\t        }\n\t      }\n\n\t      try {\n\t        return mean.apply(null, args);\n\t      }\n\t      catch (err) {\n\t        throw errorTransform(err);\n\t      }\n\t    }\n\t  });\n\t}\n\n\texports.name = 'mean';\n\texports.path = 'expression.transform';\n\texports.factory = factory;\n\n\n/***/ },\n/* 316 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar size = __webpack_require__(40).size;\n\tvar deepForEach = __webpack_require__(312);\n\tvar reduce = __webpack_require__(313);\n\tvar containsCollections = __webpack_require__(314);\n\n\tfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var divide = load(__webpack_require__(317));\n\n\t  /**\n\t   * Compute the mean value of matrix or a list with values.\n\t   * In case of a multi dimensional array, the mean of the flattened array\n\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.mean(a, b, c, ...)\n\t   *     math.mean(A)\n\t   *     math.mean(A, dim)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.mean(2, 1, 4, 3);                     // returns 2.5\n\t   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725\n\t   *\n\t   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]\n\t   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]\n\t   *\n\t   * See also:\n\t   *\n\t   *     median, min, max, sum, prod, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The mean of all values\n\t   */\n\t  var mean = typed('mean', {\n\t      // mean([a, b, c, d, ...])\n\t    'Array | Matrix': _mean,\n\n\t      // mean([a, b, c, d, ...], dim)\n\t    'Array | Matrix, number | BigNumber': _nmean,\n\n\t    // mean(a, b, c, d, ...)\n\t    '...': function (args) {\n\t      if (containsCollections(args)) {\n\t        throw new TypeError('Scalar values expected in function mean');\n\t      }\n\n\t      return _mean(args);\n\t    }\n\t  });\n\n\t  mean.toTex = undefined; // use default template\n\n\t  return mean;\n\n\t  /**\n\t   * Calculate the mean value in an n-dimensional array, returning a\n\t   * n-1 dimensional array\n\t   * @param {Array} array\n\t   * @param {number} dim\n\t   * @return {number} mean\n\t   * @private\n\t   */\n\t  function _nmean(array, dim){\n\t    var sum = reduce(array, dim, add);\n\t    var s = Array.isArray(array) ? size(array) : array.size();\n\t    return divide(sum, s[dim]);\n\t  }\n\n\t  /**\n\t   * Recursively calculate the mean value in an n-dimensional array\n\t   * @param {Array} array\n\t   * @return {number} mean\n\t   * @private\n\t   */\n\t  function _mean(array) {\n\t    var sum = 0;\n\t    var num = 0;\n\n\t    deepForEach(array, function (value) {\n\t      sum = add(sum, value);\n\t      num++;\n\t    });\n\n\t    if (num === 0) {\n\t      throw new Error('Cannot calculate mean of an empty array');\n\t    }\n\n\t    return divide(sum, num);\n\t  }\n\t}\n\n\texports.name = 'mean';\n\texports.factory = factory;\n\n\n/***/ },\n/* 317 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar extend = __webpack_require__(3).extend;\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiply     = load(__webpack_require__(84));\n\t  var inv          = load(__webpack_require__(318));\n\t  var matrix       = load(__webpack_require__(52));\n\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Divide two values, `x / y`.\n\t   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.divide(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.divide(2, 3);            // returns number 0.6666666666666666\n\t   *\n\t   *    var a = math.complex(5, 14);\n\t   *    var b = math.complex(4, 1);\n\t   *    math.divide(a, b);            // returns Complex 2 + 3i\n\t   *\n\t   *    var c = [[7, -6], [13, -4]];\n\t   *    var d = [[1, 2], [4, 3]];\n\t   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]\n\t   *\n\t   *    var e = math.unit('18 km');\n\t   *    math.divide(e, 4.5);          // returns Unit 4 km\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n\t   */\n\t  var divide = typed('divide', extend({\n\t    // we extend the signatures of divideScalar with signatures dealing with matrices\n\n\t    'Array | Matrix, Array | Matrix': function (x, y) {\n\t      // TODO: implement matrix right division using pseudo inverse\n\t      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html\n\t      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n\t      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n\t      return multiply(x, inv(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, divideScalar, false);\n\t          break;\n\t        case 'dense':\n\t          c = algorithm14(x, y, divideScalar, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\t    \n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n\t    },\n\n\t    'any, Array | Matrix': function (x, y) {\n\t      return multiply(x, inv(y));\n\t    }\n\t  }, divideScalar.signatures));\n\n\t  divide.toTex = {2: '\\\\frac{${args[0]}}{${args[1]}}'};\n\n\t  return divide;\n\t}\n\n\texports.name = 'divide';\n\texports.factory = factory;\n\n\n/***/ },\n/* 318 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar util = __webpack_require__(39);\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix       = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var addScalar    = load(__webpack_require__(53));\n\t  var multiply     = load(__webpack_require__(84));\n\t  var unaryMinus   = load(__webpack_require__(78));\n\t  var det          = load(__webpack_require__(319));\n\t  var eye          = load(__webpack_require__(83));\n\n\t  /**\n\t   * Calculate the inverse of a square matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.inv(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]\n\t   *     math.inv(4);                 // returns 0.25\n\t   *     1 / 4;                       // returns 0.25\n\t   *\n\t   * See also:\n\t   *\n\t   *     det, transpose\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n\t   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n\t   */\n\t  var inv = typed('inv', {\n\t    'Array | Matrix': function (x) {\n\t      var size = (x.isMatrix === true) ? x.size() : util.array.size(x);\n\t      switch (size.length) {\n\t        case 1:\n\t          // vector\n\t          if (size[0] == 1) {\n\t            if (x.isMatrix === true) {\n\t              return matrix([\n\t                divideScalar(1, x.valueOf()[0])\n\t              ]);\n\t            }\n\t            else {\n\t              return [\n\t                divideScalar(1, x[0])\n\t              ];\n\t            }\n\t          }\n\t          else {\n\t            throw new RangeError('Matrix must be square ' +\n\t            '(size: ' + util.string.format(size) + ')');\n\t          }\n\n\t        case 2:\n\t          // two dimensional array\n\t          var rows = size[0];\n\t          var cols = size[1];\n\t          if (rows == cols) {\n\t            if (x.isMatrix === true) {\n\t              return matrix(\n\t                  _inv(x.valueOf(), rows, cols),\n\t                  x.storage()\n\t              );\n\t            }\n\t            else {\n\t              // return an Array\n\t              return _inv(x, rows, cols);\n\t            }\n\t          }\n\t          else {\n\t            throw new RangeError('Matrix must be square ' +\n\t            '(size: ' + util.string.format(size) + ')');\n\t          }\n\n\t        default:\n\t          // multi dimensional array\n\t          throw new RangeError('Matrix must be two dimensional ' +\n\t          '(size: ' + util.string.format(size) + ')');\n\t      }\n\t    },\n\n\t    'any': function (x) {\n\t      // scalar\n\t      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers\n\t    }\n\t  });\n\n\t  /**\n\t   * Calculate the inverse of a square matrix\n\t   * @param {Array[]} mat     A square matrix\n\t   * @param {number} rows     Number of rows\n\t   * @param {number} cols     Number of columns, must equal rows\n\t   * @return {Array[]} inv    Inverse matrix\n\t   * @private\n\t   */\n\t  function _inv (mat, rows, cols){\n\t    var r, s, f, value, temp;\n\n\t    if (rows == 1) {\n\t      // this is a 1 x 1 matrix\n\t      value = mat[0][0];\n\t      if (value == 0) {\n\t        throw Error('Cannot calculate inverse, determinant is zero');\n\t      }\n\t      return [[\n\t        divideScalar(1, value)\n\t      ]];\n\t    }\n\t    else if (rows == 2) {\n\t      // this is a 2 x 2 matrix\n\t      var d = det(mat);\n\t      if (d == 0) {\n\t        throw Error('Cannot calculate inverse, determinant is zero');\n\t      }\n\t      return [\n\t        [\n\t          divideScalar(mat[1][1], d),\n\t          divideScalar(unaryMinus(mat[0][1]), d)\n\t        ],\n\t        [\n\t          divideScalar(unaryMinus(mat[1][0]), d),\n\t          divideScalar(mat[0][0], d)\n\t        ]\n\t      ];\n\t    }\n\t    else {\n\t      // this is a matrix of 3 x 3 or larger\n\t      // calculate inverse using gauss-jordan elimination\n\t      //      http://en.wikipedia.org/wiki/Gaussian_elimination\n\t      //      http://mathworld.wolfram.com/MatrixInverse.html\n\t      //      http://math.uww.edu/~mcfarlat/inverse.htm\n\n\t      // make a copy of the matrix (only the arrays, not of the elements)\n\t      var A = mat.concat();\n\t      for (r = 0; r < rows; r++) {\n\t        A[r] = A[r].concat();\n\t      }\n\n\t      // create an identity matrix which in the end will contain the\n\t      // matrix inverse\n\t      var B = eye(rows).valueOf();\n\n\t      // loop over all columns, and perform row reductions\n\t      for (var c = 0; c < cols; c++) {\n\t        // element Acc should be non zero. if not, swap content\n\t        // with one of the lower rows\n\t        r = c;\n\t        while (r < rows && A[r][c] == 0) {\n\t          r++;\n\t        }\n\t        if (r == rows || A[r][c] == 0) {\n\t          // TODO: in case of zero det, just return a matrix wih Infinity values? (like octave)\n\t          throw Error('Cannot calculate inverse, determinant is zero');\n\t        }\n\t        if (r != c) {\n\t          temp = A[c]; A[c] = A[r]; A[r] = temp;\n\t          temp = B[c]; B[c] = B[r]; B[r] = temp;\n\t        }\n\n\t        // eliminate non-zero values on the other rows at column c\n\t        var Ac = A[c],\n\t            Bc = B[c];\n\t        for (r = 0; r < rows; r++) {\n\t          var Ar = A[r],\n\t              Br = B[r];\n\t          if(r != c) {\n\t            // eliminate value at column c and row r\n\t            if (Ar[c] != 0) {\n\t              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);\n\n\t              // add (f * row c) to row r to eliminate the value\n\t              // at column c\n\t              for (s = c; s < cols; s++) {\n\t                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));\n\t              }\n\t              for (s = 0; s < cols; s++) {\n\t                Br[s] = addScalar(Br[s],  multiply(f, Bc[s]));\n\t              }\n\t            }\n\t          }\n\t          else {\n\t            // normalize value at Acc to 1,\n\t            // divide each value on row r with the value at Acc\n\t            f = Ac[c];\n\t            for (s = c; s < cols; s++) {\n\t              Ar[s] = divideScalar(Ar[s], f);\n\t            }\n\t            for (s = 0; s < cols; s++) {\n\t              Br[s] = divideScalar(Br[s], f);\n\t            }\n\t          }\n\t        }\n\t      }\n\t      return B;\n\t    }\n\t  }\n\n\t  inv.toTex = {1: '\\\\left(${args[0]}\\\\right)^{-1}'};\n\n\t  return inv;\n\t}\n\n\texports.name = 'inv';\n\texports.factory = factory;\n\n\n/***/ },\n/* 319 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar util = __webpack_require__(39);\n\tvar object = util.object;\n\tvar string = util.string;\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var add = load(__webpack_require__(51));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(84));\n\t  var unaryMinus = load(__webpack_require__(78));\n\n\t  /**\n\t   * Calculate the determinant of a matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.det(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.det([[1, 2], [3, 4]]); // returns -2\n\t   *\n\t   *    var A = [\n\t   *      [-2, 2, 3],\n\t   *      [-1, 1, 3],\n\t   *      [2, 0, -1]\n\t   *    ]\n\t   *    math.det(A); // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    inv\n\t   *\n\t   * @param {Array | Matrix} x  A matrix\n\t   * @return {number} The determinant of `x`\n\t   */\n\t  var det = typed('det', {\n\t    'any': function (x) {\n\t      return object.clone(x);\n\t    },\n\n\t    'Array | Matrix': function det (x) {\n\t      var size;\n\t      if (x && x.isMatrix === true) {\n\t        size = x.size();\n\t      }\n\t      else if (Array.isArray(x)) {\n\t        x = matrix(x);\n\t        size = x.size();\n\t      }\n\t      else {\n\t        // a scalar\n\t        size = [];\n\t      }\n\n\t      switch (size.length) {\n\t        case 0:\n\t          // scalar\n\t          return object.clone(x);\n\n\t        case 1:\n\t          // vector\n\t          if (size[0] == 1) {\n\t            return object.clone(x.valueOf()[0]);\n\t          }\n\t          else {\n\t            throw new RangeError('Matrix must be square ' +\n\t            '(size: ' + string.format(size) + ')');\n\t          }\n\n\t        case 2:\n\t          // two dimensional array\n\t          var rows = size[0];\n\t          var cols = size[1];\n\t          if (rows == cols) {\n\t            return _det(x.clone().valueOf(), rows, cols);\n\t          }\n\t          else {\n\t            throw new RangeError('Matrix must be square ' +\n\t            '(size: ' + string.format(size) + ')');\n\t          }\n\n\t        default:\n\t          // multi dimensional array\n\t          throw new RangeError('Matrix must be two dimensional ' +\n\t          '(size: ' + string.format(size) + ')');\n\t      }\n\t    }\n\t  });\n\n\t  det.toTex = {1: '\\\\det\\\\left(${args[0]}\\\\right)'};\n\n\t  return det;\n\n\t  /**\n\t   * Calculate the determinant of a matrix\n\t   * @param {Array[]} matrix  A square, two dimensional matrix\n\t   * @param {number} rows     Number of rows of the matrix (zero-based)\n\t   * @param {number} cols     Number of columns of the matrix (zero-based)\n\t   * @returns {number} det\n\t   * @private\n\t   */\n\t  function _det (matrix, rows, cols) {\n\t    if (rows == 1) {\n\t      // this is a 1 x 1 matrix\n\t      return object.clone(matrix[0][0]);\n\t    }\n\t    else if (rows == 2) {\n\t      // this is a 2 x 2 matrix\n\t      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n\t      return subtract(\n\t          multiply(matrix[0][0], matrix[1][1]),\n\t          multiply(matrix[1][0], matrix[0][1])\n\t      );\n\t    }\n\t    else {\n\t      // this is an n x n matrix\n\t      var compute_mu = function (matrix) {\n\t        var i, j;\n\n\t        // Compute the matrix with zero lower triangle, same upper triangle,\n\t        // and diagonals given by the negated sum of the below diagonal\n\t        // elements.\n\t        var mu = new Array(matrix.length);\n\t        var sum = 0;\n\t        for (i = 1; i < matrix.length; i++) {\n\t          sum = add(sum, matrix[i][i]);\n\t        }\n\n\t        for (i = 0; i < matrix.length; i++) {\n\t          mu[i] = new Array(matrix.length);\n\t          mu[i][i] = unaryMinus(sum);\n\n\t          for (j = 0; j < i; j++) {\n\t            mu[i][j] = 0; // TODO: make bignumber 0 in case of bignumber computation\n\t          }\n\n\t          for (j = i + 1; j < matrix.length; j++) {\n\t            mu[i][j] = matrix[i][j];\n\t          }\n\n\t          if (i+1 < matrix.length) {\n\t            sum = subtract(sum, matrix[i + 1][i + 1]);\n\t          }\n\t        }\n\n\t        return mu;\n\t      };\n\n\t      var fa = matrix;\n\t      for (var i = 0; i < rows - 1; i++) {\n\t        fa = multiply(compute_mu(fa), matrix);\n\t      }\n\n\t      if (rows % 2 == 0) {\n\t        return unaryMinus(fa[0][0]);\n\t      } else {\n\t        return fa[0][0];\n\t      }\n\t    }\n\t  }\n\t}\n\n\texports.name = 'det';\n\texports.factory = factory;\n\n\n\n/***/ },\n/* 320 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar errorTransform = __webpack_require__(275).transform;\n\tvar isCollection = __webpack_require__(310);\n\n\t/**\n\t * Attach a transform function to math.min\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function min\n\t * from one-based to zero based\n\t */\n\tfunction factory (type, config, load, typed) {\n\t  var min = load(__webpack_require__(321));\n\n\t  return typed('min', {\n\t    '...any': function (args) {\n\t      // change last argument dim from one-based to zero-based\n\t      if (args.length == 2 && isCollection(args[0])) {\n\t        var dim = args[1];\n\t        if (typeof dim === 'number') {\n\t          args[1] = dim - 1;\n\t        }\n\t        else if (dim && dim.isBigNumber === true) {\n\t          args[1] = dim.minus(1);\n\t        }\n\t      }\n\n\t      try {\n\t        return min.apply(null, args);\n\t      }\n\t      catch (err) {\n\t        throw errorTransform(err);\n\t      }\n\t    }\n\t  });\n\t}\n\n\texports.name = 'min';\n\texports.path = 'expression.transform';\n\texports.factory = factory;\n\n\n/***/ },\n/* 321 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepForEach = __webpack_require__(312);\n\tvar reduce = __webpack_require__(313);\n\tvar containsCollections = __webpack_require__(314);\n\n\tfunction factory (type, config, load, typed) {\n\t  var smaller = load(__webpack_require__(60));\n\t  \n\t  /**\n\t   * Compute the maximum value of a matrix or a  list of values.\n\t   * In case of a multi dimensional array, the maximum of the flattened array\n\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.min(a, b, c, ...)\n\t   *     math.min(A)\n\t   *     math.min(A, dim)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.min(2, 1, 4, 3);                  // returns 1\n\t   *     math.min([2, 1, 4, 3]);                // returns 1\n\t   *\n\t   *     // maximum over a specified dimension (zero-based)\n\t   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]\n\t   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]\n\t   *\n\t   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n\t   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, max, prod, std, sum, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The minimum value\n\t   */\n\t  var min = typed('min', {\n\t    // min([a, b, c, d, ...])\n\t    'Array | Matrix': _min,\n\n\t    // min([a, b, c, d, ...], dim)\n\t    'Array | Matrix, number | BigNumber': function (array, dim) {\n\t      return reduce(array, dim.valueOf(), _smallest);\n\t    },\n\n\t    // min(a, b, c, d, ...)\n\t    '...': function (args) {\n\t      if (containsCollections(args)) {\n\t        throw new TypeError('Scalar values expected in function min');\n\t      }\n\n\t      return _min(args);\n\t    }\n\t  });\n\n\t  min.toTex = '\\\\min\\\\left(${args}\\\\right)';\n\n\t  return min;\n\n\t  /**\n\t   * Return the smallest of two values\n\t   * @param {*} x\n\t   * @param {*} y\n\t   * @returns {*} Returns x when x is smallest, or y when y is smallest\n\t   * @private\n\t   */\n\t  function _smallest(x, y) {\n\t    return smaller(x, y) ? x : y;\n\t  }\n\n\t  /**\n\t   * Recursively calculate the minimum value in an n-dimensional array\n\t   * @param {Array} array\n\t   * @return {number} min\n\t   * @private\n\t   */\n\t  function _min(array) {\n\t    var min = undefined;\n\n\t    deepForEach(array, function (value) {\n\t      if (min === undefined || smaller(value, min)) {\n\t        min = value;\n\t      }\n\t    });\n\n\t    if (min === undefined) {\n\t      throw new Error('Cannot calculate min of an empty array');\n\t    }\n\n\t    return min;\n\t  }\n\t}\n\n\texports.name = 'min';\n\texports.factory = factory;\n\n\n/***/ },\n/* 322 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/**\n\t * Attach a transform function to math.range\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a range which includes the end value\n\t */\n\tfunction factory (type, config, load, typed) {\n\t  var range = load(__webpack_require__(323));\n\n\t  return typed('range', {\n\t    '...any': function (args) {\n\t      var lastIndex = args.length - 1;\n\t      var last = args[lastIndex];\n\t      if (typeof last !== 'boolean') {\n\t        // append a parameter includeEnd=true\n\t        args.push(true);\n\t      }\n\n\t      return range.apply(null, args);\n\t    }\n\t  });\n\t}\n\n\texports.name = 'range';\n\texports.path = 'expression.transform';\n\texports.factory = factory;\n\n\n/***/ },\n/* 323 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var ZERO = new type.BigNumber(0);\n\t  var ONE = new type.BigNumber(1);\n\n\t  /**\n\t   * Create an array from a range.\n\t   * By default, the range end is excluded. This can be customized by providing\n\t   * an extra parameter `includeEnd`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.range(str [, includeEnd])               // Create a range from a string,\n\t   *                                                  // where the string contains the\n\t   *                                                  // start, optional step, and end,\n\t   *                                                  // separated by a colon.\n\t   *     math.range(start, end [, includeEnd])        // Create a range with start and\n\t   *                                                  // end and a step size of 1.\n\t   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n\t   *                                                  // and end.\n\t   *\n\t   * Where:\n\t   *\n\t   * - `str: string`\n\t   *   A string 'start:end' or 'start:step:end'\n\t   * - `start: {number | BigNumber}`\n\t   *   Start of the range\n\t   * - `end: number | BigNumber`\n\t   *   End of the range, excluded by default, included when parameter includeEnd=true\n\t   * - `step: number | BigNumber`\n\t   *   Step size. Default value is 1.\n\t   * - `includeEnd: boolean`\n\t   *   Option to specify whether to include the end or not. False by default.\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.range(2, 6);        // [2, 3, 4, 5]\n\t   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]\n\t   *     math.range('2:1:6');     // [2, 3, 4, 5]\n\t   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]\n\t   *\n\t   * See also:\n\t   *\n\t   *     ones, zeros, size, subset\n\t   *\n\t   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n\t   * @return {Array | Matrix} range\n\t   */\n\t  var range = typed('range', {\n\t    // TODO: simplify signatures when typed-function supports default values and optional arguments\n\n\t    // TODO: a number or boolean should not be converted to string here\n\t    'string': _strRange,\n\t    'string, boolean': _strRange,\n\n\t    'number, number':  function (start, end) {\n\t      return _out(_rangeEx(start, end, 1));\n\t    },\n\t    'number, number, number': function (start, end, step) {\n\t      return _out(_rangeEx(start, end, step));\n\t    },\n\t    'number, number, boolean': function (start, end, includeEnd) {\n\t      return includeEnd\n\t          ? _out(_rangeInc(start, end, 1))\n\t          : _out(_rangeEx(start, end, 1));\n\t    },\n\t    'number, number, number, boolean': function (start, end, step, includeEnd) {\n\t      return includeEnd\n\t          ? _out(_rangeInc(start, end, step))\n\t          : _out(_rangeEx(start, end, step));\n\t    },\n\n\t    'BigNumber, BigNumber':  function (start, end) {\n\t      return _out(_bigRangeEx(start, end, ONE));\n\t    },\n\t    'BigNumber, BigNumber, BigNumber': function (start, end, step) {\n\t      return _out(_bigRangeEx(start, end, step));\n\t    },\n\t    'BigNumber, BigNumber, boolean': function (start, end, includeEnd) {\n\t      return includeEnd\n\t          ? _out(_bigRangeInc(start, end, ONE))\n\t          : _out(_bigRangeEx(start, end, ONE));\n\t    },\n\t    'BigNumber, BigNumber, BigNumber, boolean': function (start, end, step, includeEnd) {\n\t      return includeEnd\n\t          ? _out(_bigRangeInc(start, end, step))\n\t          : _out(_bigRangeEx(start, end, step));\n\t    }\n\n\t  });\n\n\t  range.toTex = undefined; // use default template\n\n\t  return range;\n\n\t  function _out(arr) {\n\t    return config.matrix === 'Array' ? arr : matrix(arr);\n\t  }\n\n\t  function _strRange (str, includeEnd) {\n\t    var r = _parse(str);\n\t    if (!r){\n\t      throw new SyntaxError('String \"' + str + '\" is no valid range');\n\t    }\n\n\t    var fn;\n\t    if (config.number === 'BigNumber') {\n\t      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\n\t      return _out(fn(\n\t          new type.BigNumber(r.start),\n\t          new type.BigNumber(r.end),\n\t          new type.BigNumber(r.step)));\n\t    }\n\t    else {\n\t      fn = includeEnd ? _rangeInc : _rangeEx;\n\t      return _out(fn(r.start, r.end, r.step));\n\t    }\n\t  }\n\n\t  /**\n\t   * Create a range with numbers. End is excluded\n\t   * @param {number} start\n\t   * @param {number} end\n\t   * @param {number} step\n\t   * @returns {Array} range\n\t   * @private\n\t   */\n\t  function _rangeEx (start, end, step) {\n\t    var array = [],\n\t        x = start;\n\t    if (step > 0) {\n\t      while (x < end) {\n\t        array.push(x);\n\t        x += step;\n\t      }\n\t    }\n\t    else if (step < 0) {\n\t      while (x > end) {\n\t        array.push(x);\n\t        x += step;\n\t      }\n\t    }\n\n\t    return array;\n\t  }\n\n\t  /**\n\t   * Create a range with numbers. End is included\n\t   * @param {number} start\n\t   * @param {number} end\n\t   * @param {number} step\n\t   * @returns {Array} range\n\t   * @private\n\t   */\n\t  function _rangeInc (start, end, step) {\n\t    var array = [],\n\t        x = start;\n\t    if (step > 0) {\n\t      while (x <= end) {\n\t        array.push(x);\n\t        x += step;\n\t      }\n\t    }\n\t    else if (step < 0) {\n\t      while (x >= end) {\n\t        array.push(x);\n\t        x += step;\n\t      }\n\t    }\n\n\t    return array;\n\t  }\n\n\t  /**\n\t   * Create a range with big numbers. End is excluded\n\t   * @param {BigNumber} start\n\t   * @param {BigNumber} end\n\t   * @param {BigNumber} step\n\t   * @returns {Array} range\n\t   * @private\n\t   */\n\t  function _bigRangeEx (start, end, step) {\n\t    var array = [],\n\t        x = start;\n\t    if (step.gt(ZERO)) {\n\t      while (x.lt(end)) {\n\t        array.push(x);\n\t        x = x.plus(step);\n\t      }\n\t    }\n\t    else if (step.lt(ZERO)) {\n\t      while (x.gt(end)) {\n\t        array.push(x);\n\t        x = x.plus(step);\n\t      }\n\t    }\n\n\t    return array;\n\t  }\n\n\t  /**\n\t   * Create a range with big numbers. End is included\n\t   * @param {BigNumber} start\n\t   * @param {BigNumber} end\n\t   * @param {BigNumber} step\n\t   * @returns {Array} range\n\t   * @private\n\t   */\n\t  function _bigRangeInc (start, end, step) {\n\t    var array = [],\n\t        x = start;\n\t    if (step.gt(ZERO)) {\n\t      while (x.lte(end)) {\n\t        array.push(x);\n\t        x = x.plus(step);\n\t      }\n\t    }\n\t    else if (step.lt(ZERO)) {\n\t      while (x.gte(end)) {\n\t        array.push(x);\n\t        x = x.plus(step);\n\t      }\n\t    }\n\n\t    return array;\n\t  }\n\n\t  /**\n\t   * Parse a string into a range,\n\t   * The string contains the start, optional step, and end, separated by a colon.\n\t   * If the string does not contain a valid range, null is returned.\n\t   * For example str='0:2:11'.\n\t   * @param {string} str\n\t   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n\t   * @private\n\t   */\n\t  function _parse (str) {\n\t    var args = str.split(':');\n\n\t    // number\n\t    var nums = args.map(function (arg) {\n\t      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n\t      return Number(arg);\n\t    });\n\n\t    var invalid = nums.some(function (num) {\n\t      return isNaN(num);\n\t    });\n\t    if(invalid) {\n\t      return null;\n\t    }\n\n\t    switch (nums.length) {\n\t      case 2:\n\t        return {\n\t          start: nums[0],\n\t          end: nums[1],\n\t          step: 1\n\t        };\n\n\t      case 3:\n\t        return {\n\t          start: nums[0],\n\t          end: nums[2],\n\t          step: nums[1]\n\t        };\n\n\t      default:\n\t        return null;\n\t    }\n\t  }\n\n\t}\n\n\texports.name = 'range';\n\texports.factory = factory;\n\n\n/***/ },\n/* 324 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar errorTransform = __webpack_require__(275).transform;\n\n\t/**\n\t * Attach a transform function to math.subset\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a range which includes the end value\n\t */\n\tfunction factory (type, config, load, typed) {\n\t  var subset = load(__webpack_require__(276));\n\n\t  return typed('subset', {\n\t    '...any': function (args) {\n\t      try {\n\t        return subset.apply(null, args);\n\t      }\n\t      catch (err) {\n\t        throw errorTransform(err);\n\t      }\n\t    }\n\t  });\n\t}\n\n\texports.name = 'subset';\n\texports.path = 'expression.transform';\n\texports.factory = factory;\n\n\n/***/ },\n/* 325 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar object = __webpack_require__(3);\n\tvar string = __webpack_require__(23);\n\n\tfunction factory (type, config, load, typed) {\n\t  var parser = load(__webpack_require__(295))();\n\n\t  /**\n\t   * Documentation object\n\t   * @param {Object} doc  Object containing properties:\n\t   *                      {string} name\n\t   *                      {string} category\n\t   *                      {string} description\n\t   *                      {string[]} syntax\n\t   *                      {string[]} examples\n\t   *                      {string[]} seealso\n\t   * @constructor\n\t   */\n\t  function Help(doc) {\n\t    if (!(this instanceof Help)) {\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    }\n\n\t    if (!doc)  throw new Error('Argument \"doc\" missing');\n\n\t    this.doc = doc;\n\t  }\n\n\t  /**\n\t   * Attach type information\n\t   */\n\t  Help.prototype.type = 'Help';\n\t  Help.prototype.isHelp = true;\n\n\t  /**\n\t   * Generate a string representation of the Help object\n\t   * @return {string} Returns a string\n\t   * @private\n\t   */\n\t  Help.prototype.toString = function () {\n\t    var doc = this.doc || {};\n\t    var desc = '\\n';\n\n\t    if (doc.name) {\n\t      desc += 'Name: ' + doc.name + '\\n\\n';\n\t    }\n\t    if (doc.category) {\n\t      desc += 'Category: ' + doc.category + '\\n\\n';\n\t    }\n\t    if (doc.description) {\n\t      desc += 'Description:\\n    ' + doc.description + '\\n\\n';\n\t    }\n\t    if (doc.syntax) {\n\t      desc += 'Syntax:\\n    ' + doc.syntax.join('\\n    ') + '\\n\\n';\n\t    }\n\t    if (doc.examples) {\n\t      desc += 'Examples:\\n';\n\t      for (var i = 0; i < doc.examples.length; i++) {\n\t        var expr = doc.examples[i];\n\t        desc += '    ' + expr + '\\n';\n\n\t        var res;\n\t        try {\n\t          res = parser.eval(expr);\n\t        }\n\t        catch (e) {\n\t          res = e;\n\t        }\n\t        if (res && !res.isHelp) {\n\t          desc += '        ' + string.format(res, {precision: 14}) + '\\n';\n\t        }\n\t      }\n\t      desc += '\\n';\n\t    }\n\t    if (doc.seealso) {\n\t      desc += 'See also: ' + doc.seealso.join(', ') + '\\n';\n\t    }\n\n\t    return desc;\n\t  };\n\n\t  /**\n\t   * Export the help object to JSON\n\t   */\n\t  Help.prototype.toJSON = function () {\n\t    var obj = object.clone(this.doc);\n\t    obj.mathjs = 'Help';\n\t    return obj;\n\t  };\n\n\t  /**\n\t   * Instantiate a Help object from a JSON object\n\t   * @param {Object} json\n\t   * @returns {Help} Returns a new Help object\n\t   */\n\t  Help.fromJSON = function (json) {\n\t    var doc = {};\n\t    for (var prop in json) {\n\t      if (prop !== 'mathjs') { // ignore mathjs field\n\t        doc[prop] = json[prop];\n\t      }\n\t    }\n\t    return new Help(doc);\n\t  };\n\n\t  /**\n\t   * Returns a string representation of the Help object\n\t   */\n\t  Help.prototype.valueOf = Help.prototype.toString;\n\n\t  return Help;\n\t}\n\n\texports.name = 'Help';\n\texports.path = 'type';\n\texports.factory = factory;\n\n\n/***/ },\n/* 326 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(327),\n\t  __webpack_require__(354),\n\t  __webpack_require__(386),\n\t  __webpack_require__(402),\n\t  __webpack_require__(411),\n\t  __webpack_require__(416),\n\t  __webpack_require__(419),\n\t  __webpack_require__(425),\n\t  __webpack_require__(437),\n\t  __webpack_require__(446),\n\t  __webpack_require__(450),\n\t  __webpack_require__(457),\n\t  __webpack_require__(459),\n\t  __webpack_require__(485),\n\t  __webpack_require__(487)\n\t];\n\n\n/***/ },\n/* 327 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  // decomposition\n\t  __webpack_require__(328),\n\t  __webpack_require__(329),\n\n\t  // solver\n\t  __webpack_require__(349),\n\t  __webpack_require__(351),\n\t  __webpack_require__(353)\n\t];\n\n\n/***/ },\n/* 328 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar util = __webpack_require__(39);\n\n\tvar object = util.object;\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var abs = load(__webpack_require__(86));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var subtract = load(__webpack_require__(77));\n\t  var larger = load(__webpack_require__(64));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var unaryMinus = load(__webpack_require__(78));\n\t  \n\t  var SparseMatrix = type.SparseMatrix;\n\t  var DenseMatrix = type.DenseMatrix;\n\t  var Spa = type.Spa;\n\t  \n\t  /**\n\t   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n\t   * row permutation vector `p` where `A[p,:] = L * U`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lup(A);\n\t   *\n\t   * Example:\n\t   *\n\t   *    var m = [[2, 1], [1, 4]];\n\t   *    var r = math.lup();\n\t   *    // r = {\n\t   *    //   L: [[1, 0], [0.5, 1]],\n\t   *    //   U: [[2, 1], [0, 3.5]],\n\t   *    //   P: [0, 1]\n\t   *    // }\n\t   *\n\t   * See also:\n\t   *\n\t   *    slu, lsolve, lusolve, usolve\n\t   *\n\t   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n\t   *\n\t   * @return {Array<Matrix>}      The lower triangular matrix, the upper triangular matrix and the permutation matrix.\n\t   */\n\t  var lup = typed('lup', {\n\n\t    'DenseMatrix': function (m) {\n\t      return _denseLUP(m);\n\t    },\n\t    \n\t    'SparseMatrix': function (m) {\n\t      return _sparseLUP(m);\n\t    },\n\n\t    'Array': function (a) {\n\t      // create dense matrix from array\n\t      var m = matrix(a);\n\t      // lup, use matrix implementation\n\t      var r = _denseLUP(m);\n\t      // result\n\t      return {\n\t        L: r.L.valueOf(),\n\t        U: r.U.valueOf(),\n\t        p: r.p\n\t      };\n\t    }\n\t  });\n\n\t  var _denseLUP = function (m) {\n\t    // rows & columns\n\t    var rows = m._size[0];\n\t    var columns = m._size[1];\n\t    // minimum rows and columns\n\t    var n = Math.min(rows, columns);\n\t    // matrix array, clone original data\n\t    var data = object.clone(m._data);\n\t    // l matrix arrays\n\t    var ldata = [];\n\t    var lsize = [rows, n];\n\t    // u matrix arrays\n\t    var udata = [];\n\t    var usize = [n, columns];\n\t    // vars\n\t    var i, j, k;\n\t    // permutation vector    \n\t    var p = [];\n\t    for (i = 0; i < rows; i++)\n\t      p[i] = i;    \n\t    // loop columns\n\t    for (j = 0; j < columns; j++) {\n\t      // skip first column in upper triangular matrix\n\t      if (j > 0) {\n\t        // loop rows\n\t        for (i = 0; i < rows; i++) {\n\t          // min i,j\n\t          var min = Math.min(i, j);\n\t          // v[i, j]\n\t          var s = 0;\n\t          // loop up to min\n\t          for (k = 0; k < min; k++) {\n\t            // s = l[i, k] - data[k, j]\n\t            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));\n\t          }\n\t          data[i][j] = subtract(data[i][j], s);\n\t        }\n\t      }      \n\t      // row with larger value in cvector, row >= j\n\t      var pi = j;\n\t      var pabsv = 0;\n\t      var vjj = 0;\n\t      // loop rows\n\t      for (i = j; i < rows; i++) {\n\t        // data @ i, j\n\t        var v = data[i][j];\n\t        // absolute value\n\t        var absv = abs(v);\n\t        // value is greater than pivote value\n\t        if (larger(absv, pabsv)) {\n\t          // store row\n\t          pi = i;\n\t          // update max value\n\t          pabsv = absv;\n\t          // value @ [j, j]\n\t          vjj = v;\n\t        }\n\t      }\n\t      // swap rows (j <-> pi)\n\t      if (j !== pi) {\n\t        // swap values j <-> pi in p\n\t        p[j] = [p[pi], p[pi] = p[j]][0];\n\t        // swap j <-> pi in data\n\t        DenseMatrix._swapRows(j, pi, data);\n\t      }\n\t      // check column is in lower triangular matrix\n\t      if (j < rows) {\n\t        // loop rows (lower triangular matrix)\n\t        for (i = j + 1; i < rows; i++) {\n\t          // value @ i, j\n\t          var vij = data[i][j];\n\t          if (!equalScalar(vij, 0)) {\n\t            // update data\n\t            data[i][j] = divideScalar(data[i][j], vjj);\n\t          }\n\t        }\n\t      }\n\t    }\n\t    // loop columns\n\t    for (j = 0; j < columns; j++) {\n\t      // loop rows\n\t      for (i = 0; i < rows; i++) {\n\t        // initialize row in arrays\n\t        if (j === 0) {\n\t          // check row exists in upper triangular matrix\n\t          if (i < columns) {\n\t            // U\n\t            udata[i] = [];\n\t          }\n\t          // L\n\t          ldata[i] = [];\n\t        }\n\t        // check we are in the upper triangular matrix\n\t        if (i < j) {\n\t          // check row exists in upper triangular matrix\n\t          if (i < columns) {\n\t            // U\n\t            udata[i][j] = data[i][j];\n\t          }\n\t          // check column exists in lower triangular matrix\n\t          if (j < rows) {\n\t            // L\n\t            ldata[i][j] = 0;\n\t          }\n\t          continue;\n\t        }\n\t        // diagonal value\n\t        if (i === j) {\n\t          // check row exists in upper triangular matrix\n\t          if (i < columns) {\n\t            // U\n\t            udata[i][j] = data[i][j];\n\t          }\n\t          // check column exists in lower triangular matrix\n\t          if (j < rows) {\n\t            // L\n\t            ldata[i][j] = 1;\n\t          }\n\t          continue;\n\t        }\n\t        // check row exists in upper triangular matrix\n\t        if (i < columns) {\n\t          // U\n\t          udata[i][j] = 0;\n\t        }\n\t        // check column exists in lower triangular matrix\n\t        if (j < rows) {\n\t          // L\n\t          ldata[i][j] = data[i][j];\n\t        }\n\t      }\n\t    }\n\t    // l matrix\n\t    var l =  new DenseMatrix({\n\t      data: ldata,\n\t      size: lsize\n\t    });\n\t    // u matrix\n\t    var u =  new DenseMatrix({\n\t      data: udata,\n\t      size: usize\n\t    });\n\t    // p vector\n\t    var pv = [];\n\t    for (i = 0, n = p.length; i < n; i++)\n\t      pv[p[i]] = i;\n\t    // return matrices\n\t    return { \n\t      L: l, \n\t      U: u, \n\t      p: pv, \n\t      toString: function () {\n\t        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n\t      }\n\t    };\n\t  };\n\t  \n\t  var _sparseLUP = function (m) {\n\t    // rows & columns\n\t    var rows = m._size[0];\n\t    var columns = m._size[1];\n\t    // minimum rows and columns\n\t    var n = Math.min(rows, columns);\n\t    // matrix arrays (will not be modified, thanks to permutation vector)\n\t    var values = m._values;\n\t    var index = m._index;\n\t    var ptr = m._ptr;\n\t    // l matrix arrays\n\t    var lvalues = [];\n\t    var lindex = [];\n\t    var lptr = [];\n\t    var lsize = [rows, n];\n\t    // u matrix arrays\n\t    var uvalues = [];\n\t    var uindex = [];\n\t    var uptr = [];\n\t    var usize = [n, columns];\n\t    // vars\n\t    var i, j, k;\n\t    // permutation vectors, (current index -> original index) and (original index -> current index)\n\t    var pv_co = [];\n\t    var pv_oc = [];\n\t    for (i = 0; i < rows; i++) {\n\t      pv_co[i] = i;\n\t      pv_oc[i] = i;\n\t    }\n\t    // swap indices in permutation vectors (condition x < y)!\n\t    var swapIndeces = function (x, y) {      \n\t      // find pv indeces getting data from x and y\n\t      var kx = pv_oc[x];\n\t      var ky = pv_oc[y];\n\t      // update permutation vector current -> original\n\t      pv_co[kx] = y;\n\t      pv_co[ky] = x;\n\t      // update permutation vector original -> current\n\t      pv_oc[x] = ky;\n\t      pv_oc[y] = kx;\n\t    };\n\t    // loop columns\n\t    for (j = 0; j < columns; j++) {\n\t      // sparse accumulator\n\t      var spa = new Spa();            \n\t      // check lower triangular matrix has a value @ column j\n\t      if (j < rows) {\n\t        // update ptr\n\t        lptr.push(lvalues.length);\n\t        // first value in j column for lower triangular matrix\n\t        lvalues.push(1);\n\t        lindex.push(j);\n\t      }\n\t      // update ptr\n\t      uptr.push(uvalues.length);\n\t      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\t      var k0 = ptr[j];\n\t      var k1 = ptr[j + 1];\n\t      // copy column j into sparse accumulator\n\t      for (k = k0; k < k1; k++) {\n\t        // row\n\t        i = index[k];\n\t        // copy column values into sparse accumulator (use permutation vector)\n\t        spa.set(pv_co[i], values[k]);\n\t      }\n\t      // skip first column in upper triangular matrix\n\t      if (j > 0) {\n\t        // loop rows in column j (above diagonal)\n\t        spa.forEach(0, j - 1, function (k, vkj) {\n\t          // loop rows in column k (L)\n\t          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {\n\t            // check row is below k\n\t            if (i > k) {\n\t              // update spa value\n\t              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));\n\t            }\n\t          });\n\t        });        \n\t      }\n\t      // row with larger value in spa, row >= j\n\t      var pi = j;\n\t      var vjj = spa.get(j);\n\t      var pabsv = abs(vjj);      \n\t      // loop values in spa (order by row, below diagonal)\n\t      spa.forEach(j + 1, rows - 1, function (x, v) {\n\t        // absolute value\n\t        var absv = abs(v);\n\t        // value is greater than pivote value\n\t        if (larger(absv, pabsv)) {\n\t          // store row\n\t          pi = x;\n\t          // update max value\n\t          pabsv = absv;\n\t          // value @ [j, j]\n\t          vjj = v;\n\t        }\n\t      });\n\t      // swap rows (j <-> pi)\n\t      if (j !== pi) {\n\t        // swap values j <-> pi in L\n\t        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);\n\t        // swap values j <-> pi in U\n\t        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);\n\t        // swap values in spa\n\t        spa.swap(j, pi);\n\t        // update permutation vector (swap values @ j, pi)\n\t        swapIndeces(j, pi);\n\t      }\n\t      // loop values in spa (order by row)\n\t      spa.forEach(0, rows - 1, function (x, v) {\n\t        // check we are above diagonal\n\t        if (x <= j) {\n\t          // update upper triangular matrix\n\t          uvalues.push(v);\n\t          uindex.push(x);\n\t        }\n\t        else {\n\t          // update value\n\t          v = divideScalar(v, vjj);\n\t          // check value is non zero\n\t          if (!equalScalar(v, 0)) {\n\t            // update lower triangular matrix\n\t            lvalues.push(v);\n\t            lindex.push(x);\n\t          }\n\t        }\n\t      });\n\t    }\n\t    // update ptrs\n\t    uptr.push(uvalues.length);\n\t    lptr.push(lvalues.length);\n\n\t    // return matrices\n\t    return {\n\t      L: new SparseMatrix({\n\t        values: lvalues,\n\t        index: lindex,\n\t        ptr: lptr,\n\t        size: lsize\n\t      }), \n\t      U: new SparseMatrix({\n\t        values: uvalues,\n\t        index: uindex,\n\t        ptr: uptr,\n\t        size: usize\n\t      }),\n\t      p: pv_co,\n\t      toString: function () {\n\t        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n\t      }\n\t    };\n\t  };\n\t  \n\t  return lup;\n\t}\n\n\texports.name = 'lup';\n\texports.factory = factory;\n\n\n/***/ },\n/* 329 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar util = __webpack_require__(39);\n\n\tvar number = util.number,\n\t    \n\t    isInteger = number.isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var cs_sqr = load(__webpack_require__(330));\n\t  var cs_lu = load(__webpack_require__(341));\n\n\t  /**\n\t   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where\n\t   *\n\t   * `P * A * Q = L * U`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.slu(A, order, threshold);\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, lsolve, usolve, lusolve\n\t   *\n\t   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.\n\t   * @param {Number}       order          The Symbolic Ordering and Analysis order:\n\t   *                                       0 - Natural ordering, no permutation vector q is returned\n\t   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'\n\t   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. \n\t   *                                           This is appropriatefor LU factorization of unsymmetric matrices.\n\t   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.\n\t   *                                           A dense row is a row with more than 10*sqr(columns) entries.\n\t   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)\n\t   *\n\t   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.\n\t   */\n\t  var slu = typed('slu', {\n\n\t    'SparseMatrix, number, number': function (a, order, threshold) {\n\t      // verify order\n\t      if (!isInteger(order) || order < 0 || order > 3)\n\t        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');\n\t      // verify threshold\n\t      if (threshold < 0 || threshold > 1)\n\t        throw new Error('Partial pivoting threshold must be a number from 0 to 1');\n\t      \n\t      // perform symbolic ordering and analysis\n\t      var s = cs_sqr(order, a, false);\n\t      \n\t      // perform lu decomposition\n\t      var f = cs_lu(a, s, threshold);\n\t      \n\t      // return decomposition\n\t      return {\n\t        L: f.L,\n\t        U: f.U,\n\t        p: f.pinv,\n\t        q: s.q,\n\t        toString: function () {\n\t          return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\np: ' + this.p.toString() + (this.q ? '\\nq: ' + this.q.toString() : '') + '\\n';\n\t        }\n\t      };\n\t    }\n\t  });\n\n\t  return slu;\n\t}\n\n\texports.name = 'slu';\n\texports.factory = factory;\n\n\n/***/ },\n/* 330 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load) {\n\n\t  var cs_amd = load(__webpack_require__(331));\n\t  var cs_permute = load(__webpack_require__(336));\n\t  var cs_etree = load(__webpack_require__(337));\n\t  var cs_post = load(__webpack_require__(338));\n\t  var cs_counts = load(__webpack_require__(339));\n\n\t  /**\n\t   * Symbolic ordering and analysis for QR and LU decompositions.\n\t   *\n\t   * @param {Number}  order           The ordering strategy (see cs_amd for more details)\n\t   * @param {Matrix}  a               The A matrix\n\t   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or\n\t   *                                  symbolic ordering and analysis for LU decomposition (false)\n\t   *\n\t   * @return {Object}                 The Symbolic ordering and analysis for matrix A\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_sqr = function (order, a, qr) {\n\t    // a arrays\n\t    var aptr = a._ptr;\n\t    var asize = a._size;\n\t    // columns\n\t    var n = asize[1];\n\t    // vars\n\t    var k;\n\t    // symbolic analysis result\n\t    var s = {};    \n\t    // fill-reducing ordering\n\t    s.q = cs_amd(order, a);\n\t    // validate results\n\t    if (order && !s.q) \n\t      return null;\n\t    // QR symbolic analysis\n\t    if (qr) {\n\t      // apply permutations if needed\n\t      var c = order ? cs_permute(a, null, s.q, 0) : a;\n\t      // etree of C'*C, where C=A(:,q)\n\t      s.parent = cs_etree(c, 1);\n\t      // post order elimination tree\n\t      var post = cs_post (s.parent, n);\n\t      // col counts chol(C'*C)\n\t      s.cp = cs_counts(c, s.parent, post, 1);\n\t      // check we have everything needed to calculate number of nonzero elements\n\t      if (c && s.parent && s.cp && _vcount(c, s)) {\n\t        // calculate number of nonzero elements\n\t        for (s.unz = 0, k = 0; k < n; k++) \n\t          s.unz += s.cp[k];\n\t      }\n\t    }\n\t    else {\n\t      // for LU factorization only, guess nnz(L) and nnz(U)\n\t      s.unz = 4 * (aptr[n]) + n;\n\t      s.lnz = s.unz;\n\t    }\n\t    // return result S\n\t    return s;\n\t  };\n\t  \n\t  /**\n\t   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent\n\t   */\n\t  var _vcount = function (a, s) {\n\t    // a arrays\n\t    var aptr = a._ptr;\n\t    var aindex = a._index;\n\t    var asize = a._size;\n\t    // rows & columns\n\t    var m = asize[0];\n\t    var n = asize[1];\n\t    // initialize s arrays\n\t    s.pinv = []; // (m + n);\n\t    s.leftmost = []; // (m);\n\t    // vars\n\t    var parent = s.parent;\n\t    var pinv = s.pinv;\n\t    var leftmost = s.leftmost;\n\t    // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries\n\t    var w = []; // (m + 3 * n);\n\t    var next = 0;\n\t    var head = m;\n\t    var tail = m + n;\n\t    var nque = m + 2 * n;\n\t    // vars\n\t    var i, k, p, p0, p1;\n\t    // initialize w\n\t    for (k = 0; k < n; k++) {\n\t      // queue k is empty\n\t      w[head + k] = -1;\n\t      w[tail + k] = -1;\n\t      w[nque + k] = 0;\n\t    }\n\t    // initialize row arrays\n\t    for (i = 0; i < m; i++) \n\t      leftmost[i] = -1;\n\t    // loop columns backwards    \n\t    for (k = n - 1; k >= 0; k--) {\n\t      // values & index for column k\n\t      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n\t        // leftmost[i] = min(find(A(i,:)))\n\t        leftmost[aindex[p]] = k;\n\t      }\n\t    }\n\t    // scan rows in reverse order\n\t    for (i = m - 1; i >= 0; i--) {\n\t      // row i is not yet ordered\n\t      pinv[i] = -1;\n\t      k = leftmost[i];\n\t      // check row i is empty\n\t      if (k == -1) \n\t        continue;\n\t      // first row in queue k\n\t      if (w[nque + k]++ === 0) \n\t        w[tail + k] = i;\n\t      // put i at head of queue k\n\t      w[next + i] = w[head + k];\n\t      w[head + k] = i;\n\t    }\n\t    s.lnz = 0;\n\t    s.m2 = m;\n\t    // find row permutation and nnz(V)\n\t    for (k = 0; k < n; k++) {\n\t      // remove row i from queue k\n\t      i = w[head + k];\n\t      // count V(k,k) as nonzero\n\t      s.lnz++;\n\t      // add a fictitious row\n\t      if (i < 0) \n\t        i = s.m2++;\n\t      // associate row i with V(:,k)\n\t      pinv[i] = k;\n\t      // skip if V(k+1:m,k) is empty\n\t      if (--nque[k] <= 0) \n\t        continue;\n\t      // nque[k] is nnz (V(k+1:m,k))\n\t      s.lnz += w[nque + k];\n\t      // move all rows to parent of k\n\t      var pa = parent[k];\n\t      if (pa != -1) {\n\t        if (w[nque + pa] === 0) \n\t          w[tail + pa] = w[tail + k];\n\t        w[next + w[tail + k]] = w[head + pa];\n\t        w[head + pa] = w[next + i];\n\t        w[nque + pa] += w[nque + k];\n\t      }\n\t    }\n\t    for (i = 0; i < m; i++) {\n\t      if (pinv[i] < 0) \n\t        pinv[i] = k++;\n\t    }\n\t    return true;\n\t  };\n\n\t  return cs_sqr;\n\t}\n\n\texports.name = 'cs_sqr';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 331 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load) {\n\n\t  var cs_flip = load(__webpack_require__(332));\n\t  var cs_fkeep = load(__webpack_require__(333));\n\t  var cs_tdfs = load(__webpack_require__(334));\n\t  \n\t  var add       = load(__webpack_require__(51));\n\t  var multiply  = load(__webpack_require__(84));\n\t  var transpose = load(__webpack_require__(335));\n\n\t  /**\n\t   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used \n\t   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n\t   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n\t   * of a right looking sparse Cholesky factorization.\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   *\n\t   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n\t   * @param {Matrix} m        Sparse Matrix\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_amd = function (order, a) {\n\t    // check input parameters\n\t    if (!a || order <= 0 || order > 3)\n\t      return null;\n\t    // a matrix arrays\n\t    var asize = a._size;\n\t    // rows and columns\n\t    var m = asize[0];\n\t    var n = asize[1];    \n\t    // initialize vars\n\t    var lemax = 0;\n\t    // dense threshold\n\t    var dense = Math.max(16, 10 * Math.sqrt(n));\n\t    dense = Math.min(n - 2, dense);\n\t    // create target matrix C\n\t    var cm = _createTargetMatrix(order, a, m, n, dense);\n\t    // drop diagonal entries\n\t    cs_fkeep(cm, _diag, null);\n\t    // C matrix arrays\n\t    var cindex = cm._index;\n\t    var cptr = cm._ptr;\n\n\t    // number of nonzero elements in C\n\t    var cnz = cptr[n];\n\t    \n\t    // allocate result (n+1)\n\t    var P = [];\n\t    \n\t    // create workspace (8 * (n + 1))\n\t    var W = [];\n\t    var len = 0; // first n + 1 entries\n\t    var nv = n + 1; // next n + 1 entries\n\t    var next = 2 * (n + 1); // next n + 1 entries\n\t    var head = 3 * (n + 1);  // next n + 1 entries\n\t    var elen = 4 * (n + 1);  // next n + 1 entries\n\t    var degree = 5 * (n + 1);  // next n + 1 entries\n\t    var w = 6 * (n + 1);  // next n + 1 entries\n\t    var hhead = 7 * (n + 1);  // last n + 1 entries    \n\n\t    // use P as workspace for last\n\t    var last = P;\n\t    \n\t    // initialize quotient graph\n\t    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);\n\t    \n\t    // initialize degree lists\n\t    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);\n\t    \n\t    // minimum degree node\n\t    var mindeg = 0;\n\t    \n\t    // vars\n\t    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;\n\t    \n\t    // while (selecting pivots) do\n\t    while (nel < n) {\n\t      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n\t      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n\t      // many nodes have been eliminated.\n\t      for (k = -1; mindeg < n && (k = W[head + mindeg]) == -1; mindeg++);      \n\t      if (W[next + k] != -1) \n\t        last[W[next + k]] = -1;\n\t      // remove k from degree list\n\t      W[head + mindeg] = W[next + k];\n\t      // elenk = |Ek|\n\t      var elenk = W[elen + k];\n\t      // # of nodes k represents\n\t      var nvk = W[nv + k];\n\t      // W[nv + k] nodes of A eliminated\n\t      nel += nvk;\n\n\t      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is \n\t      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n\t      // degree lists. All elements e in Ek are absorved into element k.\n\t      var dk = 0;\n\t      // flag k as in Lk\n\t      W[nv + k] = -nvk;\n\t      var p = cptr[k];\n\t      // do in place if W[elen + k] == 0\n\t      var pk1 = (elenk === 0) ? p : cnz;\n\t      var pk2 = pk1;\n\t      for (k1 = 1; k1 <= elenk + 1; k1++) {\n\t        if (k1 > elenk) {\n\t          // search the nodes in k\n\t          e = k;\n\t          // list of nodes starts at cindex[pj]\n\t          pj = p;\n\t          // length of list of nodes in k\n\t          ln = W[len + k] - elenk;\n\t        }\n\t        else {\n\t          // search the nodes in e\n\t          e = cindex[p++];\n\t          pj = cptr[e];\n\t          // length of list of nodes in e\n\t          ln = W[len + e];\n\t        }\n\t        for (k2 = 1; k2 <= ln; k2++) {\n\t          i = cindex[pj++];\n\t          // check  node i dead, or seen\n\t          if ((nvi = W[nv + i]) <= 0) \n\t            continue;\n\t          // W[degree + Lk] += size of node i\n\t          dk += nvi;\n\t          // negate W[nv + i] to denote i in Lk\n\t          W[nv + i] = -nvi;\n\t          // place i in Lk\n\t          cindex[pk2++] = i;\n\t          if (W[next + i] != -1) \n\t            last[W[next + i]] = last[i];\n\t          // check we need to remove i from degree list\n\t          if (last[i] != -1) \n\t            W[next + last[i]] = W[next + i];\n\t          else\n\t            W[head + W[degree + i]] = W[next + i];\n\t        }\n\t        if (e != k) {\n\t          // absorb e into k\n\t          cptr[e] = cs_flip(k);\n\t          // e is now a dead element\n\t          W[w + e] = 0;\n\t        }\n\t      }\n\t      // cindex[cnz...nzmax] is free\n\t      if (elenk !== 0) \n\t        cnz = pk2;\n\t      // external degree of k - |Lk\\i|\n\t      W[degree + k] = dk;\n\t      // element k is in cindex[pk1..pk2-1]\n\t      cptr[k] = pk1;\n\t      W[len + k] = pk2 - pk1;\n\t      // k is now an element\n\t      W[elen + k] = -2;\n\t            \n\t      // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n\t      // scan, no entry in the w array is greater than or equal to mark.\n\t      \n\t      // clear w if necessary\n\t      mark = _wclear(mark, lemax, W, w, n);\n\t      // scan 1: find |Le\\Lk|\n\t      for (pk = pk1; pk < pk2; pk++) {\n\t        i = cindex[pk];\n\t        // check if W[elen + i] empty, skip it\n\t        if ((eln = W[elen + i]) <= 0) \n\t          continue;\n\t        // W[nv + i] was negated\n\t        nvi = -W[nv + i];\n\t        var wnvi = mark - nvi;\n\t        // scan Ei\n\t        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n\t          e = cindex[p];\n\t          if (W[w + e] >= mark) {\n\t            // decrement |Le\\Lk|\n\t            W[w + e] -= nvi;\n\t          }\n\t          else if (W[w + e] !== 0) {\n\t            // ensure e is a live element, 1st time e seen in scan 1\n\t            W[w + e] = W[degree + e] + wnvi;\n\t          }\n\t        }\n\t      }\n\t      \n\t      // degree update\n\t      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n\t      // function h(i) for all nodes in Lk.\n\t      \n\t      // scan2: degree update\n\t      for (pk = pk1; pk < pk2; pk++) {\n\t        // consider node i in Lk\n\t        i = cindex[pk];\n\t        p1 = cptr[i];\n\t        p2 = p1 + W[elen + i] - 1;\n\t        pn = p1;\n\t        // scan Ei\n\t        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n\t          e = cindex[p];\n\t          // check e is an unabsorbed element\n\t          if (W[w + e] !== 0) {\n\t            // dext = |Le\\Lk|\n\t            var dext = W[w + e] - mark;\n\t            if (dext > 0) {\n\t              // sum up the set differences\n\t              d += dext;\n\t              // keep e in Ei\n\t              cindex[pn++] = e;\n\t              // compute the hash of node i\n\t              h += e;\n\t            }\n\t            else {\n\t              // aggressive absorb. e->k\n\t              cptr[e] = cs_flip(k);\n\t              // e is a dead element\n\t              W[w + e] = 0;\n\t            }\n\t          }\n\t        }\n\t        // W[elen + i] = |Ei|\n\t        W[elen + i] = pn - p1 + 1;\n\t        var p3 = pn;\n\t        var p4 = p1 + W[len + i];\n\t        // prune edges in Ai\n\t        for (p = p2 + 1; p < p4; p++) {\n\t          j = cindex[p];\n\t          // check node j dead or in Lk\n\t          var nvj = W[nv + j];\n\t          if (nvj <= 0) \n\t            continue;\n\t          // degree(i) += |j|\n\t          d += nvj;\n\t          // place j in node list of i\n\t          cindex[pn++] = j;\n\t          // compute hash for node i\n\t          h += j;\n\t        }\n\t        // check for mass elimination\n\t        if (d === 0) {\n\t          // absorb i into k\n\t          cptr[i] = cs_flip(k);\n\t          nvi = -W[nv + i];\n\t          // |Lk| -= |i|\n\t          dk -= nvi;\n\t          // |k| += W[nv + i]\n\t          nvk += nvi;\n\t          nel += nvi;\n\t          W[nv + i] = 0;\n\t          // node i is dead\n\t          W[elen + i] = -1;\n\t        }\n\t        else {\n\t          // update degree(i)\n\t          W[degree + i] = Math.min(W[degree + i], d);\n\t          // move first node to end\n\t          cindex[pn] = cindex[p3];\n\t          // move 1st el. to end of Ei\n\t          cindex[p3] = cindex[p1];\n\t          // add k as 1st element in of Ei\n\t          cindex[p1] = k;\n\t          // new len of adj. list of node i\n\t          W[len + i] = pn - p1 + 1;\n\t          // finalize hash of i\n\t          h = (h < 0 ? -h : h) % n;\n\t          // place i in hash bucket\n\t          W[next + i] = W[hhead + h];\n\t          W[hhead + h] = i;\n\t          // save hash of i in last[i]\n\t          last[i] = h;\n\t        }\n\t      }\n\t      // finalize |Lk|\n\t      W[degree + k] = dk;\n\t      lemax = Math.max(lemax, dk);\n\t      // clear w\n\t      mark = _wclear(mark + lemax, lemax, W, w, n);\n\t      \n\t      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n\t      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n\t      for (pk = pk1; pk < pk2; pk++) {\n\t        i = cindex[pk];\n\t        // check i is dead, skip it\n\t        if (W[nv + i] >= 0) \n\t          continue;\n\t        // scan hash bucket of node i\n\t        h = last[i];\n\t        i = W[hhead + h];\n\t        // hash bucket will be empty\n\t        W[hhead + h] = -1;\n\t        for (; i != -1 && W[next + i] != -1; i = W[next + i], mark++) {\n\t          ln = W[len + i];\n\t          eln = W[elen + i];\n\t          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) \n\t            W[w + cindex[p]] = mark;\n\t          var jlast = i;\n\t          // compare i with all j\n\t          for (j = W[next + i]; j != -1; ) {\n\t            var ok = W[len + j] === ln && W[elen + j] === eln;\n\t            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n\t              // compare i and j\n\t              if (W[w + cindex[p]] != mark) \n\t                ok = 0;\n\t            }\n\t            // check i and j are identical\n\t            if (ok) {\n\t              // absorb j into i\n\t              cptr[j] = cs_flip(i);\n\t              W[nv + i] += W[nv + j];\n\t              W[nv + j] = 0;\n\t              // node j is dead\n\t              W[elen + j] = -1;\n\t              // delete j from hash bucket\n\t              j = W[next + j];\n\t              W[next + jlast] = j;\n\t            }\n\t            else {\n\t              // j and i are different\n\t              jlast = j;\n\t              j = W[next + j];\n\t            }\n\t          }\n\t        }\n\t      }\n\t      \n\t      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n\t      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n\t      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n\t        i = cindex[pk];\n\t        // check  i is dead, skip it\n\t        if ((nvi = -W[nv + i]) <= 0) \n\t          continue;\n\t        // restore W[nv + i]\n\t        W[nv + i] = nvi;\n\t        // compute external degree(i)\n\t        d = W[degree + i] + dk - nvi;\n\t        d = Math.min(d, n - nel - nvi);\n\t        if (W[head + d] != -1) \n\t          last[W[head + d]] = i;\n\t        // put i back in degree list\n\t        W[next + i] = W[head + d];\n\t        last[i] = -1;\n\t        W[head + d] = i;\n\t        // find new minimum degree\n\t        mindeg = Math.min(mindeg, d);\n\t        W[degree + i] = d;\n\t        // place i in Lk\n\t        cindex[p++] = i;\n\t      }\n\t      // # nodes absorbed into k\n\t      W[nv + k] = nvk;\n\t      // length of adj list of element k\n\t      if ((W[len + k] = p - pk1) === 0) {\n\t        // k is a root of the tree\n\t        cptr[k] = -1;\n\t        // k is now a dead element\n\t        W[w + k] = 0;\n\t      }\n\t      if (elenk !== 0) {\n\t        // free unused space in Lk\n\t        cnz = p;\n\t      }\n\t    }\n\t    \n\t    // Postordering. The elimination is complete, but no permutation has been computed. All that is left \n\t    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n\t    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n\t    // is computed. The tree is restored by unflipping all of ptr.\n\t    \n\t    // fix assembly tree\n\t    for (i = 0; i < n; i++) \n\t      cptr[i] = cs_flip(cptr[i]);\n\t    for (j = 0; j <= n; j++) \n\t      W[head + j] = -1;\n\t    // place unordered nodes in lists\n\t    for (j = n; j >= 0; j--) {\n\t      // skip if j is an element\n\t      if (W[nv + j] > 0)\n\t        continue;\n\t      // place j in list of its parent\n\t      W[next + j] = W[head + cptr[j]];\n\t      W[head + cptr[j]] = j;\n\t    }\n\t    // place elements in lists\n\t    for (e = n; e >= 0; e--) {\n\t      // skip unless e is an element\n\t      if (W[nv + e] <= 0)\n\t        continue;\n\t      if (cptr[e] != -1) {\n\t        // place e in list of its parent\n\t        W[next + e] = W[head + cptr[e]];\n\t        W[head + cptr[e]] = e;\n\t      }\n\t    }\n\t    // postorder the assembly tree\n\t    for (k = 0, i = 0; i <= n; i++) {\n\t      if (cptr[i] == -1) \n\t        k = cs_tdfs(i, k, W, head, next, P, w);\n\t    }\n\t    // remove last item in array\n\t    P.splice(P.length - 1, 1);\n\t    // return P\n\t    return P;\n\t  };\n\t  \n\t  /**\n\t   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n\t   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n\t   *\n\t   * Order: 0\n\t   *   A natural ordering P=null matrix is returned.\n\t   *\n\t   * Order: 1\n\t   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n\t   *   P = M + M'\n\t   *\n\t   * Order: 2\n\t   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n\t   *   P = M' * M\n\t   * \n\t   * Order: 3\n\t   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n\t   *   P = M' * M\n\t   */\n\t  var _createTargetMatrix = function (order, a, m, n, dense) {\n\t    // compute A'\n\t    var at = transpose(a);\n\n\t    // check order = 1, matrix must be square\n\t    if (order === 1 && n === m) {\n\t      // C = A + A'\n\t      return add(a, at);\n\t    }\n\t    \n\t    // check order = 2, drop dense columns from M'\n\t    if (order == 2) {\n\t      // transpose arrays\n\t      var tindex = at._index;\n\t      var tptr = at._ptr;\n\t      // new column index\n\t      var p2 = 0;\n\t      // loop A' columns (rows)\n\t      for (var j = 0; j < m; j++) {\n\t        // column j of AT starts here\n\t        var p = tptr[j];\n\t        // new column j starts here\n\t        tptr[j] = p2;\n\t        // skip dense col j\n\t        if (tptr[j + 1] - p > dense) \n\t          continue;\n\t        // map rows in column j of A\n\t        for (var p1 = tptr[j + 1]; p < p1; p++) \n\t          tindex[p2++] = tindex[p];\n\t      }\n\t      // finalize AT\n\t      tptr[m] = p2;\n\t      // recreate A from new transpose matrix\n\t      a = transpose(at);\n\t      // use A' * A\n\t      return multiply(at, a);\n\t    }\n\t    \n\t    // use A' * A, square or rectangular matrix\n\t    return multiply(at, a);\n\t  };\n\n\t  /**\n\t   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n\t   *\n\t   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n\t   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n\t   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n\t   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n\t   */\n\t  var _initializeQuotientGraph = function (n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n\t    // Initialize quotient graph\n\t    for (var k = 0; k < n; k++) \n\t      W[len + k] = cptr[k + 1] - cptr[k];\n\t    W[len + n] = 0;\n\t    // initialize workspace\n\t    for (var i = 0; i <= n; i++) {\n\t      // degree list i is empty\n\t      W[head + i] = -1;\n\t      last[i] = -1;\n\t      W[next + i] = -1;\n\t      // hash list i is empty\n\t      W[hhead + i] = -1;\n\t      // node i is just one node\n\t      W[nv + i] = 1;\n\t      // node i is alive\n\t      W[w + i] = 1;\n\t      // Ek of node i is empty\n\t      W[elen + i] = 0;\n\t      // degree of node i\n\t      W[degree + i] = W[len + i];\n\t    }\n\t    // clear w\n\t    var mark = _wclear(0, 0, W, w, n);\n\t    // n is a dead element\n\t    W[elen + n] = -2;\n\t    // n is a root of assembly tree\n\t    cptr[n] = -1;\n\t    // n is a dead element\n\t    W[w + n] = 0;\n\t    // return mark\n\t    return mark;\n\t  };\n\n\t  /**\n\t   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with \n\t   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n\t   * output permutation p.\n\t   */\n\t  var _initializeDegreeLists = function (n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n\t    // result\n\t    var nel = 0;\n\t    // loop columns\n\t    for (var i = 0; i < n; i++) {\n\t      // degree @ i\n\t      var d = W[degree + i];\n\t      // check node i is empty\n\t      if (d === 0) {\n\t        // element i is dead\n\t        W[elen + i] = -2;\n\t        nel++;\n\t        // i is a root of assembly tree\n\t        cptr[i] = -1;\n\t        W[w + i] = 0;\n\t      }\n\t      else if (d > dense) {\n\t        // absorb i into element n\n\t        W[nv + i] = 0;\n\t        // node i is dead\n\t        W[elen + i] = -1;\n\t        nel++;\n\t        cptr[i] = cs_flip(n);\n\t        W[nv + n]++;\n\t      }\n\t      else {\n\t        var h = W[head + d];\n\t        if (h != -1)\n\t          last[h] = i;\n\t        // put node i in degree list d\n\t        W[next + i] = W[head + d];\n\t        W[head + d] = i;\n\t      }\n\t    }\n\t    return nel;\n\t  };\n\n\t  var _wclear = function(mark, lemax, W, w, n) {\n\t    if (mark < 2 || (mark + lemax < 0)) {\n\t      for (var k = 0; k < n; k++) {\n\t        if (W[w + k] !== 0)\n\t          W[w + k] = 1;\n\t      }\n\t      mark = 2 ;\n\t    }\n\t    // at this point, W [0..n-1] < mark holds\n\t    return mark;\n\t  };\n\t  \n\t  var _diag = function (i, j) { \n\t    return i != j;\n\t  };\n\t  \n\t  return cs_amd;\n\t}\n\n\texports.name = 'cs_amd';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 332 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory () {\n\n\t  /**\n\t   * This function \"flips\" its input about the integer -1.\n\t   *\n\t   * @param {Number}  i               The value to flip\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_flip = function (i) {\n\t    // flip the value\n\t    return -i - 2;\n\t  };\n\n\t  return cs_flip;\n\t}\n\n\texports.name = 'cs_flip';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 333 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory () {\n\n\t  /**\n\t   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\n\t   *\n\t   * @param {Matrix}   a              The sparse matrix\n\t   * @param {function} callback       The callback function, function will be invoked with the following args:\n\t   *                                    - The entry row\n\t   *                                    - The entry column\n\t   *                                    - The entry value\n\t   *                                    - The state parameter\n\t   * @param {any}      other          The state\n\t   *\n\t   * @return                          The number of nonzero elements in the matrix\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_fkeep = function (a, callback, other) {\n\t    // a arrays\n\t    var avalues = a._values;\n\t    var aindex = a._index;\n\t    var aptr = a._ptr;\n\t    var asize = a._size;\n\t    // columns\n\t    var n = asize[1];\n\t    // nonzero items\n\t    var nz = 0;\n\t    // loop columns\n\t    for (var j = 0; j < n; j++) {\n\t      // get current location of col j\n\t      var p = aptr[j];\n\t      // record new location of col j\n\t      aptr[j] = nz;\n\t      for (; p < aptr[j+1]; p++) {\n\t        // check we need to keep this item\n\t        if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {\n\t          // keep A(i,j)\n\t          aindex[nz] = aindex[p];\n\t          // check we need to process values (pattern only)\n\t          if (avalues) \n\t            avalues[nz] = avalues[p];\n\t          // increment nonzero items\n\t          nz++;\n\t        }\n\t      }\n\t    }\n\t    // finalize A\n\t    aptr[n] = nz;\n\t    // trim arrays\n\t    aindex.splice(nz, aindex.length - nz);\n\t    // check we need to process values (pattern only)\n\t    if (avalues)\n\t      avalues.splice(nz, avalues.length - nz);    \n\t    // return number of nonzero items\n\t    return (nz);\n\t  };\n\t  \n\t  return cs_fkeep;\n\t}\n\n\texports.name = 'cs_fkeep';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 334 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory () {\n\n\t  /**\n\t   * Depth-first search and postorder of a tree rooted at node j\n\t   *\n\t   * @param {Number}  j               The tree node\n\t   * @param {Number}  k               \n\t   * @param {Array}   w               The workspace array\n\t   * @param {Number}  head            The index offset within the workspace for the head array\n\t   * @param {Number}  next            The index offset within the workspace for the next array\n\t   * @param {Array}   post            The post ordering array\n\t   * @param {Number}  stack           The index offset within the workspace for the stack array\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_tdfs = function (j, k, w, head, next, post, stack) {\n\t    // variables\n\t    var top = 0;\n\t    // place j on the stack\n\t    w[stack] = j;\n\t    // while (stack is not empty) \n\t    while (top >= 0) {\n\t      // p = top of stack\n\t      var p = w[stack + top];\n\t      // i = youngest child of p\n\t      var i = w[head + p];\n\t      if (i == -1) {\n\t        // p has no unordered children left\n\t        top--;\n\t        // node p is the kth postordered node\n\t        post[k++] = p;\n\t      }\n\t      else {\n\t        // remove i from children of p\n\t        w[head + p] = w[next + i];\n\t        // increment top\n\t        ++top;\n\t        // start dfs on child node i\n\t        w[stack + top] = i;\n\t      }\n\t    }\n\t    return k;\n\t  };\n\n\t  return cs_tdfs;\n\t}\n\n\texports.name = 'cs_tdfs';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 335 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar clone = __webpack_require__(3).clone;\n\tvar format = __webpack_require__(23).format;\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var DenseMatrix = type.DenseMatrix,\n\t      SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Transpose a matrix. All values of the matrix are reflected over its\n\t   * main diagonal. Only two dimensional matrices are supported.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.transpose(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var A = [[1, 2, 3], [4, 5, 6]];\n\t   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]\n\t   *\n\t   * See also:\n\t   *\n\t   *     diag, inv, subset, squeeze\n\t   *\n\t   * @param {Array | Matrix} x  Matrix to be transposed\n\t   * @return {Array | Matrix}   The transposed matrix\n\t   */\n\t  var transpose = typed('transpose', {\n\n\t    'Array': function (x) {\n\t      // use dense matrix implementation\n\t      return transpose(matrix(x)).valueOf();\n\t    },\n\n\t    'Matrix': function (x) {\n\t      // matrix size\n\t      var size = x.size();\n\n\t      // result\n\t      var c;\n\t      \n\t      // process dimensions\n\t      switch (size.length) {\n\t        case 1:\n\t          // vector\n\t          c = x.clone();\n\t          break;\n\n\t        case 2:\n\t          // rows and columns\n\t          var rows = size[0];\n\t          var columns = size[1];\n\n\t          // check columns\n\t          if (columns === 0) {\n\t            // throw exception\n\t            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');\n\t          }\n\n\t          // process storage format\n\t          switch (x.storage()) {\n\t            case 'dense':\n\t              c = _denseTranspose(x, rows, columns);\n\t              break;\n\t            case 'sparse':\n\t              c = _sparseTranspose(x, rows, columns);\n\t              break;\n\t          }\n\t          break;\n\t          \n\t        default:\n\t          // multi dimensional\n\t          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');\n\t      }\n\t      return c;\n\t    },\n\n\t    // scalars\n\t    'any': function (x) {\n\t      return clone(x);\n\t    }\n\t  });\n\n\t  var _denseTranspose = function (m, rows, columns) {\n\t    // matrix array\n\t    var data = m._data;\n\t    // transposed matrix data\n\t    var transposed = [];\n\t    var transposedRow;\n\t    // loop columns\n\t    for (var j = 0; j < columns; j++) {\n\t      // initialize row\n\t      transposedRow = transposed[j] = [];\n\t      // loop rows\n\t      for (var i = 0; i < rows; i++) {\n\t        // set data\n\t        transposedRow[i] = clone(data[i][j]);\n\t      }\n\t    }\n\t    // return matrix\n\t    return new DenseMatrix({\n\t      data: transposed,\n\t      size: [columns, rows],\n\t      datatype: m._datatype\n\t    });\n\t  };\n\n\t  var _sparseTranspose = function (m, rows, columns) {\n\t    // matrix arrays\n\t    var values = m._values;\n\t    var index = m._index;\n\t    var ptr = m._ptr;\n\t    // result matrices\n\t    var cvalues = values ? [] : undefined;\n\t    var cindex = [];\n\t    var cptr = [];\n\t    // row counts\n\t    var w = [];\n\t    for (var x = 0; x < rows; x++)\n\t      w[x] = 0;\n\t    // vars\n\t    var p, l, j;\n\t    // loop values in matrix\n\t    for (p = 0, l = index.length; p < l; p++) {\n\t      // number of values in row\n\t      w[index[p]]++;\n\t    }\n\t    // cumulative sum\n\t    var sum = 0;\n\t    // initialize cptr with the cummulative sum of row counts\n\t    for (var i = 0; i < rows; i++) {\n\t      // update cptr\n\t      cptr.push(sum);\n\t      // update sum\n\t      sum += w[i];\n\t      // update w\n\t      w[i] = cptr[i];\n\t    }\n\t    // update cptr\n\t    cptr.push(sum);\n\t    // loop columns\n\t    for (j = 0; j < columns; j++) {\n\t      // values & index in column\n\t      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n\t        // C values & index\n\t        var q = w[index[k]]++;\n\t        // C[j, i] = A[i, j]\n\t        cindex[q] = j;\n\t        // check we need to process values (pattern matrix)\n\t        if (values)\n\t          cvalues[q] = clone(values[k]);\n\t      }\n\t    }\n\t    // return matrix\n\t    return new SparseMatrix({\n\t      values: cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [columns, rows],\n\t      datatype: m._datatype\n\t    });\n\t  };\n\n\t  transpose.toTex = {1: '\\\\left(${args[0]}\\\\right)' + latex.operators['transpose']};\n\n\t  return transpose;\n\t}\n\n\texports.name = 'transpose';\n\texports.factory = factory;\n\n\n/***/ },\n/* 336 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type) {\n\n\t  var SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Permutes a sparse matrix C = P * A * Q\n\t   *\n\t   * @param {Matrix}  a               The Matrix A\n\t   * @param {Array}   pinv            The row permutation vector\n\t   * @param {Array}   q               The column permutation vector\n\t   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n\t   *\n\t   * @return {Matrix}                 C = P * A * Q, null on error\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_permute = function (a, pinv, q, values) {\n\t    // a arrays\n\t    var avalues = a._values;\n\t    var aindex = a._index;\n\t    var aptr = a._ptr;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // rows & columns\n\t    var m = asize[0];\n\t    var n = asize[1];\n\t    // c arrays\n\t    var cvalues = values && a._values ? [] : null;\n\t    var cindex = []; // (aptr[n]);\n\t    var cptr = []; // (n + 1);\n\t    // initialize vars\n\t    var nz = 0;\n\t    // loop columns    \n\t    for (var k = 0; k < n; k++) {\n\t      // column k of C is column q[k] of A\n\t      cptr[k] = nz;\n\t      // apply column permutation\n\t      var j = q ? (q[k]) : k;\n\t      // loop values in column j of A\n\t      for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {\n\t        // row i of A is row pinv[i] of C\n\t        var r = pinv ? pinv[aindex[t]] : aindex[t];\n\t        // index\n\t        cindex[nz] = r;\n\t        // check we need to populate values\n\t        if (cvalues) \n\t          cvalues[nz] = avalues[t];\n\t        // increment number of nonzero elements\n\t        nz++;\n\t      }\n\t    }\n\t    // finalize the last column of C\n\t    cptr[n] = nz;\n\t    // return C matrix\n\t    return new SparseMatrix({\n\t      values: cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [m, n],\n\t      datatype: adt\n\t    });\n\t  };\n\n\t  return cs_permute;\n\t}\n\n\texports.name = 'cs_permute';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 337 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory () {\n\n\t  /**\n\t   * Computes the elimination tree of Matrix A (using triu(A)) or the \n\t   * elimination tree of A'A without forming A'A.\n\t   *\n\t   * @param {Matrix}  a               The A Matrix\n\t   * @param {boolean} ata             A value of true the function computes the etree of A'A\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_etree = function (a, ata) {\n\t    // check inputs\n\t    if (!a)\n\t      return null;\n\t    // a arrays\n\t    var aindex = a._index;\n\t    var aptr = a._ptr;\n\t    var asize = a._size;\n\t    // rows & columns\n\t    var m = asize[0];\n\t    var n = asize[1];\n\t    \n\t    // allocate result\n\t    var parent = []; // (n)\n\t    \n\t    // allocate workspace\n\t    var w = []; // (n + (ata ? m : 0))\n\t    var ancestor = 0; // first n entries in w\n\t    var prev = n; // last m entries (ata = true)\n\t    \n\t    var i, inext;\n\t    \n\t    // check we are calculating A'A\n\t    if (ata) {\n\t      // initialize workspace\n\t      for (i = 0; i < m; i++) \n\t        w[prev + i] = -1;\n\t    }\n\t    // loop columns\n\t    for (var k = 0; k < n; k++) {\n\t      // node k has no parent yet\n\t      parent[k] = -1;\n\t      // nor does k have an ancestor\n\t      w[ancestor + k] = -1;\n\t      // values in column k\n\t      for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n\t        // row\n\t        var r = aindex[p];\n\t        // node\n\t        i = ata ? (w[prev + r]) : r;\n\t        // traverse from i to k \n\t        for (; i != -1 && i < k; i = inext) {\n\t          // inext = ancestor of i\n\t          inext = w[ancestor + i];\n\t          // path compression\n\t          w[ancestor + i] = k;\n\t          // check no anc., parent is k\n\t          if (inext == -1) \n\t            parent[i] = k;\n\t        }\n\t        if (ata) \n\t          w[prev + r] = k;\n\t      }\n\t    }\n\t    return parent;\n\t  };\n\n\t  return cs_etree;\n\t}\n\n\texports.name = 'cs_etree';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 338 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load) {\n\n\t  var cs_tdfs = load(__webpack_require__(334));\n\n\t  /**\n\t   * Post order a tree of forest\n\t   *\n\t   * @param {Array}   parent          The tree or forest\n\t   * @param {Number}  n               Number of columns\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_post = function (parent, n) {\n\t    // check inputs\n\t    if (!parent) \n\t      return null;\n\t    // vars \n\t    var k = 0;\n\t    var j;\n\t    // allocate result\n\t    var post = []; // (n);\n\t    // workspace, head: first n entries, next: next n entries, stack: last n entries\n\t    var w = []; // (3 * n);\n\t    var head = 0; \n\t    var next = n; \n\t    var stack = 2 * n;\n\t    // initialize workspace\n\t    for (j = 0; j < n; j++) {\n\t      // empty linked lists\n\t      w[head + j] = -1;\n\t    }\n\t    // traverse nodes in reverse order\n\t    for (j = n-1; j >= 0; j--) {\n\t      // check j is a root\n\t      if (parent[j] == -1) \n\t        continue;\n\t      // add j to list of its parent\n\t      w[next + j] = w[head + parent[j]];\n\t      w[head + parent[j]] = j;\n\t    }\n\t    // loop nodes\n\t    for (j = 0; j < n; j++) {\n\t      // skip j if it is not a root\n\t      if (parent[j] != -1) \n\t        continue;\n\t      // depth-first search\n\t      k = cs_tdfs(j, k, w, head, next, post, stack);\n\t    }\n\t    return post;\n\t  };\n\n\t  return cs_post;\n\t}\n\n\texports.name = 'cs_post';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 339 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load) {\n\n\t  var transpose = load(__webpack_require__(335));\n\t  \n\t  var cs_leaf = load(__webpack_require__(340));\n\n\t  /**\n\t   * Computes the column counts using the upper triangular part of A.\n\t   * It transposes A internally, none of the input parameters are modified.\n\t   *\n\t   * @param {Matrix} a           The sparse matrix A\n\t   *\n\t   * @param {Matrix} ata         Count the columns of A'A instead\n\t   *\n\t   * @return                     An array of size n of the column counts or null on error\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_counts = function (a, parent, post, ata) {\n\t    // check inputs\n\t    if (!a || !parent || !post) \n\t      return null;\n\t    // a matrix arrays\n\t    var asize = a._size;\n\t    // rows and columns\n\t    var m = asize[0];\n\t    var n = asize[1];   \n\t    // variables\n\t    var i, j, k,  J,  p, p0, p1;\n\t    \n\t    // workspace size\n\t    var s = 4 * n + (ata ? (n + m + 1) : 0);\n\t    // allocate workspace\n\t    var w = []; // (s)\n\t    var ancestor = 0; // first n entries\n\t    var maxfirst = n; // next n entries\n\t    var prevleaf = 2 * n; // next n entries\n\t    var first = 3 * n; // next n entries\n\t    var head = 4 * n; // next n + 1 entries (used when ata is true)\n\t    var next = 5 * n + 1; // last entries in workspace\n\t    // clear workspace w[0..s-1]\n\t    for (k = 0; k < s; k++) \n\t      w[k] = -1;\n\t    \n\t    // allocate result\n\t    var colcount = []; // (n);\n\t    \n\t    // AT = A'\n\t    var at = transpose(a);\n\t    // at arrays\n\t    var tindex = at._index;\n\t    var tptr = at._ptr;\n\n\t    // find w[first + j]\n\t    for (k = 0; k < n; k++) {\n\t      j = post[k];\n\t      // colcount[j]=1 if j is a leaf\n\t      colcount[j] = (w[first + j] == -1) ? 1 : 0;\n\t      for (; j != -1 && w[first + j] == -1; j = parent[j]) \n\t        w[first + j] = k;\n\t    }\n\n\t    // initialize ata if needed\n\t    if (ata) {\n\t      // invert post\n\t      for (k = 0; k < n; k++) \n\t        w[post[k]] = k;\n\t      // loop rows (columns in AT)\n\t      for (i = 0; i < m; i++) {\n\t        // values in column i of AT\n\t        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) \n\t          k = Math.min(k, w[tindex[p]]);\n\t        // place row i in linked list k\n\t        w[next + i] = w[head + k];\n\t        w[head + k] = i;\n\t      }\n\t    }\n\t    \n\t    // each node in its own set\n\t    for (i = 0; i < n; i++) \n\t      w[ancestor + i] = i;\n\t    \n\t    for (k = 0; k < n; k++) {\n\t      // j is the kth node in postordered etree\n\t      j = post[k];\n\t      // check j is not a root\n\t      if (parent[j] != -1) \n\t        colcount[parent[j]]--;\n\t      \n\t      // J=j for LL'=A case\n\t      for (J = (ata ? w[head + k] : j); J != -1; J = (ata ? w[next + J] : -1)) {\n\t        for (p = tptr[J]; p < tptr[J+1]; p++) {\n\t          i = tindex[p];\n\t          var r = cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor);\n\t          // check A(i,j) is in skeleton\n\t          if (r.jleaf >= 1) \n\t            colcount[j]++;\n\t          // check account for overlap in q\n\t          if (r.jleaf == 2) \n\t            colcount[r.q]--;\n\t        }\n\t      }\n\t      if (parent[j] != -1) \n\t        w[ancestor + j] = parent[j];\n\t    }\n\t    // sum up colcount's of each child\n\t    for (j = 0; j < n; j++) {\n\t      if (parent[j] != -1) \n\t        colcount[parent[j]] += colcount[j];\n\t    }\n\t    return colcount;\n\t  };\n\n\t  return cs_counts;\n\t}\n\n\texports.name = 'cs_counts';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 340 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory () {\n\n\t  /**\n\t   * This function determines if j is a leaf of the ith row subtree.\n\t   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)\n\t   *\n\t   * @param {Number}  i               The ith row subtree\n\t   * @param {Number}  j               The node to test\n\t   * @param {Array}   w               The workspace array\n\t   * @param {Number}  first           The index offset within the workspace for the first array\n\t   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array\n\t   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array\n\t   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array\n\t   *\n\t   * @return {Object}\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_leaf = function (i, j, w, first, maxfirst, prevleaf, ancestor) {\n\t    \n\t    var s, sparent, jprev;\n\t    \n\t    // our result\n\t    var jleaf = 0;\n\t    var q;\n\t    \n\t    // check j is a leaf\n\t    if (i <= j || w[first + j] <= w[maxfirst + i]) \n\t      return (-1);\n\t    // update max first[j] seen so far\n\t    w[maxfirst + i] = w[first + j];\n\t    // jprev = previous leaf of ith subtree\n\t    jprev = w[prevleaf + i];\n\t    w[prevleaf + i] = j;\n\t    \n\t    // check j is first or subsequent leaf\n\t    if (jprev === -1) {\n\t      // 1st leaf, q = root of ith subtree\n\t      jleaf = 1;\n\t      q = i;\n\t    }\n\t    else {\n\t      // update jleaf\n\t      jleaf = 2;\n\t      // q = least common ancester (jprev,j)\n\t      for (q = jprev; q != w[ancestor + q]; q = w[ancestor + q]);\n\t      for (s = jprev; s != q; s = sparent) {\n\t        // path compression\n\t        sparent = w[ancestor + s];\n\t        w[ancestor + s] = q;\n\t      }      \n\t    }\n\t    return {\n\t      jleaf: jleaf,\n\t      q: q\n\t    };\n\t  };\n\n\t  return cs_leaf;\n\t}\n\n\texports.name = 'cs_leaf';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 341 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load) {\n\n\t  var abs = load(__webpack_require__(86));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiply = load(__webpack_require__(84));\n\t  \n\t  var larger = load(__webpack_require__(64));\n\t  var largerEq = load(__webpack_require__(342));\n\t  \n\t  var cs_spsolve = load(__webpack_require__(343));\n\n\t  var SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n\t   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L \n\t   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n\t   * L * U = A(p, q), where p is the inverse of pinv.\n\t   *\n\t   * @param {Matrix}  m               The A Matrix to factorize\n\t   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing \n\t   *                                  column ordering q\n\t   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n\t   *\n\t   * @return {Number}                 The numeric LU factorization of A or null\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_lu = function (m, s, tol) {\n\t    // validate input\n\t    if (!m)\n\t      return null;\n\t    // m arrays\n\t    var size = m._size;\n\t    // columns\n\t    var n = size[1];\n\t    // symbolic analysis result\n\t    var q;\n\t    var lnz = 100;\n\t    var unz = 100;\n\t    // update symbolic analysis parameters\n\t    if (s) {\n\t      q = s.q;\n\t      lnz = s.lnz || lnz;\n\t      unz = s.unz || unz;\n\t    }\n\t    // L arrays\n\t    var lvalues = []; // (lnz)\n\t    var lindex = []; // (lnz);\n\t    var lptr = []; // (n + 1);\n\t    // L\n\t    var L = new SparseMatrix({\n\t      values: lvalues,\n\t      index: lindex,\n\t      ptr: lptr,\n\t      size: [n, n]\n\t    });\n\t    // U arrays\n\t    var uvalues = []; // (unz);\n\t    var uindex = []; // (unz);\n\t    var uptr = []; // (n + 1);\n\t    // U\n\t    var U = new SparseMatrix({\n\t      values: uvalues,\n\t      index: uindex,\n\t      ptr: uptr,\n\t      size: [n, n]\n\t    });\n\t    // inverse of permutation vector\n\t    var pinv = []; // (n);\n\t    // vars \n\t    var i, p;\n\t    // allocate arrays\n\t    var x = []; // (n);\n\t    var xi = []; // (2 * n);\n\t    // initialize variables\n\t    for (i = 0; i < n; i++) {\n\t      // clear workspace\n\t      x[i] = 0;\n\t      // no rows pivotal yet\n\t      pinv[i] = -1;\n\t      // no cols of L yet\n\t      lptr[i + 1] = 0;\n\t    }\n\t    // reset number of nonzero elements in L and U\n\t    lnz = 0;\n\t    unz = 0;\n\t    // compute L(:,k) and U(:,k)\n\t    for (var k = 0; k < n; k++) {\n\t      // update ptr\n\t      lptr[k] = lnz;\n\t      uptr[k] = unz;\n\t      // apply column permutations if needed\n\t      var col = q ? q[k] : k;\n\t      // solve triangular system, x = L\\A(:,col)\n\t      var top = cs_spsolve(L, m, col, xi, x, pinv, 1);\n\t      // find pivot\n\t      var ipiv = -1;\n\t      var a = -1;\n\t      // loop xi[] from top -> n\n\t      for (p = top; p < n; p++) {\n\t        // x[i] is nonzero\n\t        i = xi[p];\n\t        // check row i is not yet pivotal\n\t        if (pinv[i] < 0) {\n\t          // absolute value of x[i]          \n\t          var xabs = abs(x[i]);\n\t          // check absoulte value is greater than pivot value\n\t          if (larger(xabs, a)) {\n\t            // largest pivot candidate so far\n\t            a = xabs;\n\t            ipiv = i;\n\t          }\n\t        }\n\t        else {\n\t          // x(i) is the entry U(pinv[i],k)\n\t          uindex[unz] = pinv[i];\n\t          uvalues[unz++] = x[i];\n\t        }\n\t      }\n\t      // validate we found a valid pivot\n\t      if (ipiv == -1 || a <= 0) \n\t        return null;\n\t      // update actual pivot column, give preference to diagonal value\n\t      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol)))\n\t        ipiv = col;\n\t      // the chosen pivot\n\t      var pivot = x[ipiv];\n\t      // last entry in U(:,k) is U(k,k)\n\t      uindex[unz] = k;\n\t      uvalues[unz++] = pivot;\n\t      // ipiv is the kth pivot row\n\t      pinv[ipiv] = k;\n\t      // first entry in L(:,k) is L(k,k) = 1\n\t      lindex[lnz] = ipiv;\n\t      lvalues[lnz++] = 1;\n\t      // L(k+1:n,k) = x / pivot      \n\t      for (p = top; p < n; p++) {\n\t        // row\n\t        i = xi[p];\n\t        // check x(i) is an entry in L(:,k)\n\t        if (pinv[i] < 0) {\n\t          // save unpermuted row in L\n\t          lindex[lnz] = i;\n\t          // scale pivot column\n\t          lvalues[lnz++] = divideScalar(x[i], pivot);\n\t        }\n\t        // x[0..n-1] = 0 for next k\n\t        x[i] = 0;\n\t      }\n\t    }\n\t    // update ptr\n\t    lptr[n] = lnz;\n\t    uptr[n] = unz;\n\t    // fix row indices of L for final pinv\n\t    for (p = 0; p < lnz; p++) \n\t      lindex[p] = pinv[lindex[p]];\n\t    // trim arrays\n\t    lvalues.splice(lnz, lvalues.length - lnz);\n\t    lindex.splice(lnz, lindex.length - lnz);\n\t    uvalues.splice(unz, uvalues.length - unz);\n\t    uindex.splice(unz, uindex.length - unz);    \n\t    // return LU factor\n\t    return {\n\t      L: L,\n\t      U: U,\n\t      pinv: pinv\n\t    };\n\t  };\n\n\t  return cs_lu;\n\t}\n\n\texports.name = 'cs_lu';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 342 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\n\n\tfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Test whether value x is larger or equal to y.\n\t   *\n\t   * The function returns true when x is larger than y or the relative\n\t   * difference between x and y is smaller than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.largerEq(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.larger(2, 1 + 1);         // returns false\n\t   *    math.largerEq(2, 1 + 1);       // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, smallerEq, larger, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false\n\t   */\n\t  var largerEq = typed('largerEq', {\n\n\t    'boolean, boolean': function (x, y) {\n\t      return x >= y;\n\t    },\n\n\t    'number, number': function (x, y) {\n\t      return x >= y || nearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return x.compare(y) !== -1;\n\t    },\n\n\t    'Complex, Complex': function () {\n\t      throw new TypeError('No ordering relation is defined for complex numbers');\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      if (!x.equalBase(y)) {\n\t        throw new Error('Cannot compare units with different base');\n\t      }\n\t      return largerEq(x.value, y.value);\n\t    },\n\n\t    'string, string': function (x, y) {\n\t      return x >= y;\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm07(x, y, largerEq);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm03(y, x, largerEq, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm03(x, y, largerEq, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, largerEq);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return largerEq(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return largerEq(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return largerEq(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(x, y, largerEq, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, largerEq, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, largerEq, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, largerEq, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, largerEq, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, largerEq, true).valueOf();\n\t    }\n\t  });\n\n\t  largerEq.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['largerEq'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return largerEq;\n\t}\n\n\texports.name = 'largerEq';\n\texports.factory = factory;\n\n\n/***/ },\n/* 343 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load) {\n\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiply = load(__webpack_require__(84));\n\t  var subtract = load(__webpack_require__(77));\n\n\t  var cs_reach = load(__webpack_require__(344));\n\n\t  /**\n\t   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the\n\t   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the\n\t   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U \n\t   * is upper triangular with the diagonal entry as the last entry in each column.\n\t   *\n\t   * @param {Matrix}  g               The G matrix\n\t   * @param {Matrix}  b               The B matrix\n\t   * @param {Number}  k               The kth column in B\n\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t   * @param {Array}   x               The soluton to the linear system G * x = b\n\t   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n\t   * @param {boolean} lo              The lower (true) upper triangular (false) flag\n\t   *\n\t   * @return {Number}                 The index for the nonzero pattern\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_spsolve = function (g, b, k, xi, x, pinv, lo) {\n\t    // g arrays\n\t    var gvalues = g._values;\n\t    var gindex = g._index;\n\t    var gptr = g._ptr;\n\t    var gsize = g._size;\n\t    // columns\n\t    var n = gsize[1];\n\t    // b arrays\n\t    var bvalues = b._values;\n\t    var bindex = b._index;\n\t    var bptr = b._ptr;\n\t    // vars\n\t    var p, p0, p1, q;\n\t    // xi[top..n-1] = cs_reach(B(:,k))\n\t    var top = cs_reach(g, b, k, xi, pinv);\n\t    // clear x\n\t    for (p = top; p < n; p++) \n\t      x[xi[p]] = 0;\n\t    // scatter b\n\t    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) \n\t      x[bindex[p]] = bvalues[p];\n\t    // loop columns\n\t    for (var px = top; px < n; px++) {\n\t      // x array index for px\n\t      var j = xi[px];\n\t      // apply permutation vector (U x = b), j maps to column J of G\n\t      var J = pinv ? pinv[j] : j;\n\t      // check column J is empty\n\t      if (J < 0)\n\t        continue;\n\t      // column value indeces in G, p0 <= p < p1\n\t      p0 = gptr[J];\n\t      p1 = gptr[J + 1];\n\t      // x(j) /= G(j,j)\n\t      x[j] = divideScalar(x[j], gvalues[lo ? p0 : (p1 - 1)]);\n\t      // first entry L(j,j)\n\t      p = lo ? (p0 + 1) : p0;\n\t      q = lo ? (p1) : (p1 - 1);\n\t      // loop\n\t      for ( ; p < q ; p++) {\n\t        // row\n\t        var i = gindex[p];\n\t        // x(i) -= G(i,j) * x(j)\n\t        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));\n\t      }\n\t    }\n\t    // return top of stack\n\t    return top;\n\t  };\n\t  \n\t  return cs_spsolve;\n\t}\n\n\texports.name = 'cs_spsolve';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 344 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load) {\n\n\t  var cs_dfs = load(__webpack_require__(345));\n\t  var cs_marked = load(__webpack_require__(346));\n\t  var cs_mark = load(__webpack_require__(347));\n\n\t  /**\n\t   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 \n\t   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\n\t   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\n\t   *\n\t   * @param {Matrix}  g               The G matrix\n\t   * @param {Matrix}  b               The B matrix\n\t   * @param {Number}  k               The kth column in B\n\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t   * @param {Array}   pinv            The inverse row permutation vector\n\t   *\n\t   * @return {Number}                 The index for the nonzero pattern\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_reach = function (g, b, k, xi, pinv) {\n\t    // g arrays\n\t    var gptr = g._ptr;\n\t    var gsize = g._size;\n\t    // b arrays\n\t    var bindex = b._index;\n\t    var bptr = b._ptr;\n\t    // columns\n\t    var n = gsize[1];\n\t    // vars\n\t    var p, p0, p1;\n\t    // initialize top\n\t    var top = n;\n\t    // loop column indeces in B\n\t    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {\n\t      // node i\n\t      var i = bindex[p];\n\t      // check node i is marked\n\t      if (!cs_marked(gptr, i)) {\n\t        // start a dfs at unmarked node i\n\t        top = cs_dfs(i, g, top, xi, pinv);\n\t      }\n\t    }\n\t    // loop columns from top -> n - 1\n\t    for (p = top; p < n; p++) {\n\t      // restore G\n\t      cs_mark(gptr, xi[p]);\n\t    }\n\t    return top;\n\t  };\n\n\t  return cs_reach;\n\t}\n\n\texports.name = 'cs_reach';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 345 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load) {\n\n\t  var cs_marked = load(__webpack_require__(346));\n\t  var cs_mark   = load(__webpack_require__(347));\n\t  var cs_unflip = load(__webpack_require__(348));\n\n\t  /**\n\t   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting\n\t   * at nodes in B (see cs_reach()).\n\t   *\n\t   * @param {Number}  j               The starting node for the DFS algorithm\n\t   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored\n\t   * @param {Number}  top             Start index in stack xi[top..n-1]\n\t   * @param {Number}  k               The kth column in B\n\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n\t   *\n\t   * @return {Number}                 New value of top\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_dfs = function (j, g, top, xi, pinv) {\n\t    // g arrays\n\t    var index = g._index;\n\t    var ptr = g._ptr;\n\t    var size = g._size;\n\t    // columns\n\t    var n = size[1];\n\t    // vars\n\t    var i, p, p2;\n\t    // initialize head\n\t    var head = 0;\n\t    // initialize the recursion stack\n\t    xi[0] = j;\n\t    // loop\n\t    while (head >= 0) {\n\t      // get j from the top of the recursion stack\n\t      j = xi[head];\n\t      // apply permutation vector\n\t      var jnew = pinv ? pinv[j] : j;\n\t      // check node j is marked\n\t      if (!cs_marked(ptr, j)) {\n\t        // mark node j as visited\n\t        cs_mark(ptr, j);\n\t        // update stack (last n entries in xi)\n\t        xi[n + head] = jnew < 0 ? 0 : cs_unflip(ptr[jnew]);\n\t      }\n\t      // node j done if no unvisited neighbors\n\t      var done = 1;\n\t      // examine all neighbors of j, stack (last n entries in xi)\n\t      for (p = xi[n + head], p2 = jnew < 0 ? 0 : cs_unflip(ptr[jnew+1]); p < p2; p++) {\n\t        // consider neighbor node i\n\t        i = index[p];\n\t        // check we have visited node i, skip it\n\t        if (cs_marked(ptr, i)) \n\t          continue;\n\t        // pause depth-first search of node j, update stack (last n entries in xi)\n\t        xi[n + head] = p;\n\t        // start dfs at node i\n\t        xi[++head] = i;\n\t        // node j is not done\n\t        done = 0;\n\t        // break, to start dfs(i)\n\t        break;\n\t      }\n\t      // check depth-first search at node j is done\n\t      if (done) {\n\t        // remove j from the recursion stack\n\t        head--;\n\t        // and place in the output stack\n\t        xi[--top] = j;\n\t      }\n\t    }\n\t    return top;    \n\t  };\n\n\t  return cs_dfs;\n\t}\n\n\texports.name = 'cs_dfs';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 346 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory () {\n\n\t  /**\n\t   * Checks if the node at w[j] is marked\n\t   *\n\t   * @param {Array}   w               The array\n\t   * @param {Number}  j               The array index\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_marked = function (w, j) {\n\t    // check node is marked\n\t    return w[j] < 0;\n\t  };\n\n\t  return cs_marked;\n\t}\n\n\texports.name = 'cs_marked';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 347 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load) {\n\n\t  var cs_flip = load(__webpack_require__(332));\n\n\t  /**\n\t   * Marks the node at w[j]\n\t   *\n\t   * @param {Array}   w               The array\n\t   * @param {Number}  j               The array index\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_mark = function (w, j) {\n\t    // mark w[j]\n\t    w[j] = cs_flip(w [j]);\n\t  };\n\n\t  return cs_mark;\n\t}\n\n\texports.name = 'cs_mark';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 348 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load) {\n\n\t  var cs_flip = load(__webpack_require__(332));\n\t  \n\t  /**\n\t   * Flips the value if it is negative of returns the same value otherwise.\n\t   *\n\t   * @param {Number}  i               The value to flip\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   */\n\t  var cs_unflip = function (i) {\n\t    // flip the value if it is negative\n\t    return i < 0 ? cs_flip(i) : i;\n\t  };\n\n\t  return cs_unflip;\n\t}\n\n\texports.name = 'cs_unflip';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 349 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var subtract = load(__webpack_require__(77));\n\t  var equalScalar = load(__webpack_require__(48));\n\n\t  var solveValidation = load(__webpack_require__(350));\n\n\t  var DenseMatrix = type.DenseMatrix;\n\n\t  /** \n\t   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.\n\t   *\n\t   * `L * x = b`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lsolve(L, b);\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = [[-2, 3], [2, 1]];\n\t   *    var b = [11, 9];\n\t   *    var x = lsolve(a, b);  // [[-5.5], [20]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, slu, usolve, lusolve\n\t   *\n\t   * @param {Matrix, Array} L       A N x N matrix or array (L)\n\t   * @param {Matrix, Array} b       A column vector with the b values\n\t   *\n\t   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n\t   */\n\t  var lsolve = typed('lsolve', {\n\n\t    'SparseMatrix, Array | Matrix': function (m, b) {\n\t      // process matrix\n\t      return _sparseForwardSubstitution(m, b);\n\t    },\n\t    \n\t    'DenseMatrix, Array | Matrix': function (m, b) {\n\t      // process matrix\n\t      return _denseForwardSubstitution(m, b);\n\t    },\n\t    \n\t    'Array, Array | Matrix': function (a, b) {\n\t      // create dense matrix from array\n\t      var m = matrix(a);\n\t      // use matrix implementation\n\t      var r = _denseForwardSubstitution(m, b);\n\t      // result\n\t      return r.valueOf();\n\t    }\n\t  });\n\n\t  var _denseForwardSubstitution = function (m, b) {\n\t    // validate matrix and vector, return copy of column vector b\n\t    b = solveValidation(m, b, true);\n\t    // column vector data\n\t    var bdata = b._data;\n\t    // rows & columns\n\t    var rows = m._size[0];\n\t    var columns = m._size[1];\n\t    // result\n\t    var x = [];\n\t    // data\n\t    var data = m._data;\n\t    // forward solve m * x = b, loop columns\n\t    for (var j = 0; j < columns; j++) {\n\t      // b[j]\n\t      var bj = bdata[j][0] || 0;\n\t      // x[j]\n\t      var xj;\n\t      // forward substitution (outer product) avoids inner looping when bj == 0\n\t      if (!equalScalar(bj, 0)) {\n\t        // value @ [j, j]\n\t        var vjj = data[j][j];\n\t        // check vjj\n\t        if (equalScalar(vjj, 0)) {\n\t          // system cannot be solved\n\t          throw new Error('Linear system cannot be solved since matrix is singular');\n\t        }\n\t        // calculate xj\n\t        xj = divideScalar(bj, vjj);\n\t        // loop rows\n\t        for (var i = j + 1; i < rows; i++) {\n\t          // update copy of b\n\t          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];\n\t        }\n\t      }\n\t      else {\n\t        // zero @ j\n\t        xj = 0;\n\t      }\n\t      // update x\n\t      x[j] = [xj];\n\t    }\n\t    // return vector\n\t    return new DenseMatrix({\n\t      data: x,\n\t      size: [rows, 1]\n\t    });\n\t  };\n\n\t  var _sparseForwardSubstitution = function (m, b) {\n\t    // validate matrix and vector, return copy of column vector b\n\t    b = solveValidation(m, b, true);\n\t    // column vector data\n\t    var bdata = b._data;\n\t    // rows & columns\n\t    var rows = m._size[0];\n\t    var columns = m._size[1];\n\t    // matrix arrays\n\t    var values = m._values;\n\t    var index = m._index;\n\t    var ptr = m._ptr;\n\t    // vars\n\t    var i, k;\n\t    // result\n\t    var x = [];\n\t    // forward solve m * x = b, loop columns\n\t    for (var j = 0; j < columns; j++) {\n\t      // b[j]\n\t      var bj = bdata[j][0] || 0;\n\t      // forward substitution (outer product) avoids inner looping when bj == 0\n\t      if (!equalScalar(bj, 0)) {\n\t        // value @ [j, j]\n\t        var vjj = 0;\n\t        // lower triangular matrix values & index (column j)\n\t        var jvalues = [];\n\t        var jindex = [];\n\t        // last index in column\n\t        var l = ptr[j + 1];\n\t        // values in column, find value @ [j, j]\n\t        for (k = ptr[j]; k < l; k++) {\n\t          // row\n\t          i = index[k];\n\t          // check row (rows are not sorted!)\n\t          if (i === j) {\n\t            // update vjj\n\t            vjj = values[k];\n\t          }\n\t          else if (i > j) {\n\t            // store lower triangular\n\t            jvalues.push(values[k]);\n\t            jindex.push(i);\n\t          }\n\t        }\n\t        // at this point we must have a value @ [j, j]\n\t        if (equalScalar(vjj, 0)) {\n\t          // system cannot be solved, there is no value @ [j, j]\n\t          throw new Error('Linear system cannot be solved since matrix is singular');\n\t        }\n\t        // calculate xj\n\t        var xj = divideScalar(bj, vjj);\n\t        // loop lower triangular\n\t        for (k = 0, l = jindex.length; k < l; k++) {\n\t          // row\n\t          i = jindex[k];\n\t          // update copy of b\n\t          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];\n\t        }\n\t        // update x\n\t        x[j] = [xj];\n\t      }\n\t      else {\n\t        // update x\n\t        x[j] = [0];\n\t      }\n\t    }\n\t    // return vector\n\t    return new DenseMatrix({\n\t      data: x,\n\t      size: [rows, 1]\n\t    });\n\t  };\n\n\t  return lsolve;\n\t}\n\n\texports.name = 'lsolve';\n\texports.factory = factory;\n\n\n/***/ },\n/* 350 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar util = __webpack_require__(39);\n\n\tvar string = util.string;\n\tvar array = util.array;\n\n\tvar isArray = Array.isArray;\n\n\tfunction factory (type) {\n\t  \n\t  var DenseMatrix = type.DenseMatrix;\n\n\t  /**\n\t   * Validates matrix and column vector b for backward/forward substitution algorithms.\n\t   *\n\t   * @param {Matrix} m            An N x N matrix\n\t   * @param {Array | Matrix} b    A column vector\n\t   * @param {Boolean} copy        Return a copy of vector b\n\t   *\n\t   * @return {DenseMatrix}        Dense column vector b\n\t   */\n\t  var solveValidation = function (m, b, copy) {\n\t    // matrix size\n\t    var size = m.size();\n\t    // validate matrix dimensions\n\t    if (size.length !== 2)\n\t      throw new RangeError('Matrix must be two dimensional (size: ' + string.format(size) + ')');\n\t    // rows & columns\n\t    var rows = size[0];\n\t    var columns = size[1];    \n\t    // validate rows & columns\n\t    if (rows !== columns) \n\t      throw new RangeError('Matrix must be square (size: ' + string.format(size) + ')');\n\t    // vars\n\t    var data, i, bdata;\n\t    // check b is matrix\n\t    if (b && b.isMatrix === true) {\n\t      // matrix size\n\t      var msize = b.size();\n\t      // vector\n\t      if (msize.length === 1) {\n\t        // check vector length\n\t        if (msize[0] !== rows)\n\t          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n\t        // create data array\n\t        data = [];\n\t        // matrix data (DenseMatrix)\n\t        bdata = b._data;\n\t        // loop b data\n\t        for (i = 0; i < rows; i++) {\n\t          // row array\n\t          data[i] = [bdata[i]];\n\t        }\n\t        // return Dense Matrix\n\t        return new DenseMatrix({\n\t          data: data,\n\t          size: [rows, 1],\n\t          datatype: b._datatype\n\t        });\n\t      }\n\t      // two dimensions\n\t      if (msize.length === 2) {\n\t        // array must be a column vector\n\t        if (msize[0] !== rows || msize[1] !== 1)\n\t          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n\t        // check matrix type\n\t        if (b.isDenseMatrix === true) {\n\t          // check a copy is needed\n\t          if (copy) {\n\t            // create data array\n\t            data = [];\n\t            // matrix data (DenseMatrix)\n\t            bdata = b._data;\n\t            // loop b data\n\t            for (i = 0; i < rows; i++) {\n\t              // row array\n\t              data[i] = [bdata[i][0]];\n\t            }\n\t            // return Dense Matrix\n\t            return new DenseMatrix({\n\t              data: data,\n\t              size: [rows, 1],\n\t              datatype: b._datatype\n\t            });\n\t          }\n\t          // b is already a column vector\n\t          return b;\n\t        }\n\t        // create data array\n\t        data = [];\n\t        for (i = 0; i < rows; i++)\n\t          data[i] = [0];\n\t        // sparse matrix arrays\n\t        var values = b._values;\n\t        var index = b._index;\n\t        var ptr = b._ptr;\n\t        // loop values in column 0\n\t        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n\t          // row\n\t          i = index[k];\n\t          // add to data\n\t          data[i][0] = values[k]; \n\t        }\n\t        // return Dense Matrix\n\t        return new DenseMatrix({\n\t          data: data,\n\t          size: [rows, 1],\n\t          datatype: b._datatype\n\t        });\n\t      }\n\t      // throw error\n\t      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n\t    }\n\t    // check b is array\n\t    if (isArray(b)) {\n\t      // size\n\t      var asize = array.size(b);\n\t      // check matrix dimensions, vector\n\t      if (asize.length === 1) {\n\t        // check vector length\n\t        if (asize[0] !== rows)\n\t          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');        \n\t        // create data array\n\t        data = [];\n\t        // loop b\n\t        for (i = 0; i < rows; i++) {\n\t          // row array\n\t          data[i] = [b[i]];\n\t        }\n\t        // return Dense Matrix\n\t        return new DenseMatrix({\n\t          data: data,\n\t          size: [rows, 1]\n\t        });\n\t      }\n\t      if (asize.length === 2) {\n\t        // array must be a column vector\n\t        if (asize[0] !== rows || asize[1] !== 1)\n\t          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n\t        // create data array\n\t        data = [];\n\t        // loop b data\n\t        for (i = 0; i < rows; i++) {\n\t          // row array\n\t          data[i] = [b[i][0]];\n\t        }\n\t        // return Dense Matrix\n\t        return new DenseMatrix({\n\t          data: data,\n\t          size: [rows, 1]\n\t        });\n\t      }\n\t      // throw error\n\t      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');      \n\t    }\n\t  };\n\t  \n\t  return solveValidation;\n\t}\n\n\texports.factory = factory;\n\n/***/ },\n/* 351 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isArray = Array.isArray;\n\n\tfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var lup = load(__webpack_require__(328));\n\t  var slu = load(__webpack_require__(329));\n\t  var cs_ipvec = load(__webpack_require__(352));\n\n\t  var solveValidation = load(__webpack_require__(350));\n\n\t  var usolve = load(__webpack_require__(353));\n\t  var lsolve = load(__webpack_require__(349));\n\n\t  /**\n\t   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n\t   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];\n\t   *\n\t   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n\t   *\n\t   *    var f = math.lup(m);\n\t   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n\t   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]\n\t   *\n\t   *    var a = [[-2, 3], [2, 1]];\n\t   *    var b = [11, 9];\n\t   *    var x = lusolve(a, b);  // [[-5.5], [20]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, slu, lsolve, usolve\n\t   *\n\t   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n\t   * @param {Matrix | Array} b               Column Vector\n\t   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n\t   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n\t   *\n\t   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b\n\t   */\n\t  var lusolve = typed('lusolve', {\n\t    \n\t    'Array, Array | Matrix': function (a, b) {\n\t      // convert a to matrix\n\t      a = matrix(a);\n\t      // matrix lup decomposition\n\t      var d = lup(a);\n\t      // solve\n\t      var x = _lusolve(d.L, d.U, d.p, null, b);\n\t      // convert result to array\n\t      return x.valueOf();\n\t    },\n\t    \n\t    'DenseMatrix, Array | Matrix': function (a, b) {\n\t      // matrix lup decomposition\n\t      var d = lup(a);\n\t      // solve\n\t      return _lusolve(d.L, d.U, d.p, null, b);\n\t    },\n\t    \n\t    'SparseMatrix, Array | Matrix': function (a, b) {\n\t      // matrix lup decomposition\n\t      var d = lup(a);\n\t      // solve\n\t      return _lusolve(d.L, d.U, d.p, null, b);\n\t    },\n\t    \n\t    'SparseMatrix, Array | Matrix, number, number': function (a, b, order, threshold) {\n\t      // matrix lu decomposition\n\t      var d = slu(a, order, threshold);\n\t      // solve\n\t      return _lusolve(d.L, d.U, d.p, d.q, b);\n\t    },\n\n\t    'Object, Array | Matrix': function (d, b) {\n\t      // solve\n\t      return _lusolve(d.L, d.U, d.p, d.q, b);\n\t    }\n\t  });\n\t  \n\t  var _toMatrix = function (a) {\n\t    // check it is a matrix\n\t    if (a && a.isMatrix === true)\n\t      return a;\n\t    // check array\n\t    if (isArray(a))\n\t      return matrix(a);\n\t    // throw\n\t    throw new TypeError('Invalid Matrix LU decomposition');\n\t  };\n\t  \n\t  var _lusolve = function (l, u, p, q, b) {\n\t    // verify L, U, P\n\t    l = _toMatrix(l);\n\t    u = _toMatrix(u);\n\t    // validate matrix and vector\n\t    b = solveValidation(l, b, false);\n\t    // apply row permutations if needed (b is a DenseMatrix)\n\t    if (p)\n\t      b._data = cs_ipvec(p, b._data);\n\t    // use forward substitution to resolve L * y = b\n\t    var y = lsolve(l, b);\n\t    // use backward substitution to resolve U * x = y\n\t    var x = usolve(u, y);\n\t    // apply column permutations if needed (x is a DenseMatrix)\n\t    if (q)\n\t      x._data = cs_ipvec(q, x._data);\n\t    // return solution\n\t    return x;\n\t  };\n\n\t  return lusolve;\n\t}\n\n\texports.name = 'lusolve';\n\texports.factory = factory;\n\n\n/***/ },\n/* 352 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory () {\n\n\t  /**\n\t   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.\n\t   *\n\t   * @param {Array} p           The permutation vector of length n. null value denotes identity\n\t   * @param {Array} b           The input vector\n\t   *\n\t   * @return {Array}            The output vector x = P'b\n\t   */\n\t  var cs_ipvec = function (p, b, n) {\n\t    // vars \n\t    var k;\n\t    var n = b.length;\n\t    var x = [];\n\t    // check permutation vector was provided, p = null denotes identity\n\t    if (p) {\n\t      // loop vector\n\t      for (k = 0; k < n; k++) {\n\t        // apply permutation\n\t        x[p[k]] = b[k];\n\t      }\n\t    }\n\t    else {\n\t      // loop vector\n\t      for (k = 0; k < n; k++) {\n\t        // x[i] = b[i]\n\t        x[k] = b[k];\n\t      }\n\t    }\n\t    return x;\n\t  };\n\n\t  return cs_ipvec;\n\t}\n\n\texports.name = 'cs_ipvec';\n\texports.path = 'sparse';\n\texports.factory = factory;\n\n\n/***/ },\n/* 353 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var subtract = load(__webpack_require__(77));\n\t  var equalScalar = load(__webpack_require__(48));\n\n\t  var solveValidation = load(__webpack_require__(350));\n\t  \n\t  var DenseMatrix = type.DenseMatrix;\n\n\t  /**\n\t   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n\t   *\n\t   * `U * x = b`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.usolve(U, b);\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = [[-2, 3], [2, 1]];\n\t   *    var b = [11, 9];\n\t   *    var x = usolve(a, b);  // [[8], [9]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, slu, usolve, lusolve\n\t   *\n\t   * @param {Matrix, Array} U       A N x N matrix or array (U)\n\t   * @param {Matrix, Array} b       A column vector with the b values\n\t   *\n\t   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n\t   */\n\t  var usolve = typed('usolve', {\n\t    \n\t    'SparseMatrix, Array | Matrix': function (m, b) {\n\t      // process matrix\n\t      return _sparseBackwardSubstitution(m, b);\n\t    },\n\n\t    'DenseMatrix, Array | Matrix': function (m, b) {\n\t      // process matrix\n\t      return _denseBackwardSubstitution(m, b);\n\t    },\n\n\t    'Array, Array | Matrix': function (a, b) {\n\t      // create dense matrix from array\n\t      var m = matrix(a);\n\t      // use matrix implementation\n\t      var r = _denseBackwardSubstitution(m, b);\n\t      // result\n\t      return r.valueOf();\n\t    }\n\t  });\n\n\t  var _denseBackwardSubstitution = function (m, b) {\n\t    // validate matrix and vector, return copy of column vector b\n\t    b = solveValidation(m, b, true);\n\t    // column vector data\n\t    var bdata = b._data;\n\t    // rows & columns\n\t    var rows = m._size[0];\n\t    var columns = m._size[1];\n\t    // result\n\t    var x = [];\n\t    // arrays\n\t    var data = m._data;\n\t    // backward solve m * x = b, loop columns (backwards)\n\t    for (var j = columns - 1; j >= 0 ; j--) {\n\t      // b[j]\n\t      var bj = bdata[j][0] || 0;\n\t      // x[j]\n\t      var xj;\n\t      // backward substitution (outer product) avoids inner looping when bj == 0\n\t      if (!equalScalar(bj, 0)) {\n\t        // value @ [j, j]\n\t        var vjj = data[j][j];\n\t        // check vjj\n\t        if (equalScalar(vjj, 0)) {\n\t          // system cannot be solved\n\t          throw new Error('Linear system cannot be solved since matrix is singular');\n\t        }\n\t        // calculate xj\n\t        xj = divideScalar(bj, vjj);        \n\t        // loop rows\n\t        for (var i = j - 1; i >= 0; i--) {\n\t          // update copy of b\n\t          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];\n\t        }\n\t      }\n\t      else {\n\t        // zero value @ j\n\t        xj = 0;\n\t      }\n\t      // update x\n\t      x[j] = [xj];\n\t    }\n\t    // return column vector\n\t    return new DenseMatrix({\n\t      data: x,\n\t      size: [rows, 1]\n\t    });\n\t  };\n\t  \n\t  var _sparseBackwardSubstitution = function (m, b) {\n\t    // validate matrix and vector, return copy of column vector b\n\t    b = solveValidation(m, b, true);\n\t    // column vector data\n\t    var bdata = b._data;\n\t    // rows & columns\n\t    var rows = m._size[0];\n\t    var columns = m._size[1];\n\t    // matrix arrays\n\t    var values = m._values;\n\t    var index = m._index;\n\t    var ptr = m._ptr;\n\t    // vars\n\t    var i, k;\n\t    // result\n\t    var x = [];\n\t    // backward solve m * x = b, loop columns (backwards)\n\t    for (var j = columns - 1; j >= 0 ; j--) {\n\t      // b[j]\n\t      var bj = bdata[j][0] || 0;\n\t      // backward substitution (outer product) avoids inner looping when bj == 0\n\t      if (!equalScalar(bj, 0)) {\n\t        // value @ [j, j]\n\t        var vjj = 0;\n\t        // upper triangular matrix values & index (column j)\n\t        var jvalues = [];\n\t        var jindex = [];\n\t        // first & last indeces in column\n\t        var f = ptr[j];\n\t        var l = ptr[j + 1];\n\t        // values in column, find value @ [j, j], loop backwards\n\t        for (k = l - 1; k >= f; k--) {\n\t          // row\n\t          i = index[k];\n\t          // check row\n\t          if (i === j) {\n\t            // update vjj\n\t            vjj = values[k];\n\t          }\n\t          else if (i < j) {\n\t            // store upper triangular\n\t            jvalues.push(values[k]);\n\t            jindex.push(i);\n\t          }\n\t        }\n\t        // at this point we must have a value @ [j, j]\n\t        if (equalScalar(vjj, 0)) {\n\t          // system cannot be solved, there is no value @ [j, j]\n\t          throw new Error('Linear system cannot be solved since matrix is singular');\n\t        }\n\t        // calculate xj\n\t        var xj = divideScalar(bj, vjj);\n\t        // loop upper triangular\n\t        for (k = 0, l = jindex.length; k < l; k++) {\n\t          // row\n\t          i = jindex[k];\n\t          // update copy of b\n\t          bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];\n\t        }\n\t        // update x\n\t        x[j] = [xj];\n\t      }\n\t      else {\n\t        // update x\n\t        x[j] = [0];\n\t      }\n\t    }\n\t    // return vector\n\t    return new DenseMatrix({\n\t      data: x,\n\t      size: [rows, 1]\n\t    });\n\t  };\n\t  \n\t  return usolve;\n\t}\n\n\texports.name = 'usolve';\n\texports.factory = factory;\n\n\n/***/ },\n/* 354 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(86),\n\t  __webpack_require__(51),\n\t  __webpack_require__(53),\n\t  __webpack_require__(355),\n\t  __webpack_require__(357),\n\t  __webpack_require__(358),\n\t  __webpack_require__(317),\n\t  __webpack_require__(359),\n\t  __webpack_require__(361),\n\t  __webpack_require__(363),\n\t  __webpack_require__(364),\n\t  __webpack_require__(365),\n\t  __webpack_require__(366),\n\t  __webpack_require__(367),\n\t  __webpack_require__(368),\n\t  __webpack_require__(371),\n\t  __webpack_require__(374),\n\t  __webpack_require__(375),\n\t  __webpack_require__(376),\n\t  __webpack_require__(84),\n\t  __webpack_require__(377),\n\t  __webpack_require__(379),\n\t  __webpack_require__(82),\n\t  __webpack_require__(380),\n\t  __webpack_require__(382),\n\t  __webpack_require__(369),\n\t  __webpack_require__(383),\n\t  __webpack_require__(77),\n\t  __webpack_require__(78),\n\t  __webpack_require__(384),\n\t  __webpack_require__(385)\n\t];\n\n\n/***/ },\n/* 355 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  var unaryMinus = load(__webpack_require__(78));\n\t  var isNegative = load(__webpack_require__(356));\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Calculate the cubic root of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cbrt(x)\n\t   *    math.cbrt(x, allRoots)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cbrt(27);                  // returns 3\n\t   *    math.cube(3);                   // returns 27\n\t   *    math.cbrt(-64);                 // returns -4\n\t   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m\n\t   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]\n\t   *\n\t   *    var x = math.complex('8i');\n\t   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i\n\t   *    math.cbrt(x, true);             // returns Matrix [\n\t   *                                    //    1.7320508075689 + i\n\t   *                                    //   -1.7320508075689 + i\n\t   *                                    //   -2i\n\t   *                                    // ]\n\t   *\n\t   * See also:\n\t   *\n\t   *    square, sqrt, cube\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x\n\t   *            Value for which to calculate the cubic root.\n\t   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n\t   *            when `x` is a number or complex number. If true, all complex\n\t   *            roots are returned, if false (default) the principal root is\n\t   *            returned.\n\t   * @return {number | BigNumber | Complex | Unit | Array | Matrix}\n\t   *            Returns the cubic root of `x`\n\t   */\n\t  var cbrt = typed('cbrt', {\n\t    'number': _cbrtNumber,\n\t    // note: signature 'number, boolean' is also supported,\n\t    //       created by typed as it knows how to convert number to Complex\n\n\t    'Complex': _cbrtComplex,\n\n\t    'Complex, boolean': _cbrtComplex,\n\n\t    'BigNumber': function (x) {\n\t      return x.cbrt();\n\t    },\n\n\t    'Unit': _cbrtUnit,\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since cbrt(0) = 0\n\t      return deepMap(x, cbrt, true);\n\t    }\n\t  });\n\n\t  /**\n\t   * Calculate the cubic root for a complex number\n\t   * @param {Complex} x\n\t   * @param {boolean} [allRoots]   If true, the function will return an array\n\t   *                               with all three roots. If false or undefined,\n\t   *                               the principal root is returned.\n\t   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n\t   * @private\n\t   */\n\t  function _cbrtComplex(x, allRoots) {\n\t    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n\n\t    var arg_3 = x.arg() / 3;\n\t    var abs = x.abs();\n\n\t    // principal root:\n\t    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(\n\t        new type.Complex(0, arg_3).exp());\n\n\t    if (allRoots) {\n\t      var all = [\n\t          principal,\n\t          new type.Complex(_cbrtNumber(abs), 0).mul(\n\t            new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()),\n\t          new type.Complex(_cbrtNumber(abs), 0).mul(\n\t            new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp())\n\t      ];\n\n\t      return (config.matrix === 'Array') ? all : matrix(all);\n\t    }\n\t    else {\n\t      return principal;\n\t    }\n\t  }\n\n\t  /**\n\t   * Calculate the cubic root for a Unit\n\t   * @param {Unit} x\n\t   * @return {Unit} Returns the cubic root of x\n\t   * @private\n\t   */\n\t  function _cbrtUnit(x) {\n\t    if(x.value && x.value.isComplex) {\n\t      var result = x.clone();\n\t      result.value = 1.0;\n\t      result = result.pow(1.0/3);           // Compute the units\n\t      result.value = _cbrtComplex(x.value); // Compute the value\n\t      return result;\n\t    }\n\t    else {\n\t      var negate = isNegative(x.value);\n\t      if (negate) {\n\t        x.value = unaryMinus(x.value);\n\t      }\n\n\t      // TODO: create a helper function for this\n\t      var third;\n\t      if (x.value && x.value.isBigNumber) {\n\t        third = new type.BigNumber(1).div(3);\n\t      }\n\t      else if (x.value && x.value.isFraction) {\n\t        third = new type.Fraction(1, 3);\n\t      }\n\t      else {\n\t        third = 1/3;\n\t      }\n\n\t      var result = x.pow(third);\n\n\t      if (negate) {\n\t        result.value = unaryMinus(result.value);\n\t      }\n\n\t      return result;\n\t    }\n\t  }\n\n\t  cbrt.toTex = {1: '\\\\sqrt[3]{${args[0]}}'};\n\n\t  return cbrt;\n\t}\n\n\t/**\n\t * Calculate cbrt for a number\n\t *\n\t * Code from es6-shim.js:\n\t *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n\t *\n\t * @param {number} x\n\t * @returns {number | Complex} Returns the cubic root of x\n\t * @private\n\t */\n\tvar _cbrtNumber = Math.cbrt || function (x) {\n\t  if (x === 0) {\n\t    return x;\n\t  }\n\n\t  var negate = x < 0;\n\t  var result;\n\t  if (negate) {\n\t    x = -x;\n\t  }\n\n\t  if (isFinite(x)) {\n\t    result = Math.exp(Math.log(x) / 3);\n\t    // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n\t    result = (x / (result * result) + (2 * result)) / 3;\n\t  } else {\n\t    result = x;\n\t  }\n\n\t  return negate ? -result : result;\n\t};\n\n\texports.name = 'cbrt';\n\texports.factory = factory;\n\n\n/***/ },\n/* 356 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is negative: smaller than zero.\n\t   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isNegative(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isNegative(3);                     // returns false\n\t   *    math.isNegative(-2);                    // returns true\n\t   *    math.isNegative(0);                     // returns false\n\t   *    math.isNegative(-0);                    // returns false\n\t   *    math.isNegative(math.bignumber(2));     // returns false\n\t   *    math.isNegative(math.fraction(-2, 5));  // returns true\n\t   *    math.isNegative('-2');                  // returns true\n\t   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isPositive, isZero, isInteger\n\t   *\n\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t   *                    Throws an error in case of an unknown data type.\n\t   */\n\t  var isNegative = typed('isNegative', {\n\t    'number': function (x) {\n\t      return x < 0;\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.isNeg() && !x.isZero() && !x.isNaN();\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.s < 0; // It's enough to decide on the sign\n\t    },\n\n\t    'Unit': function (x) {\n\t      return isNegative(x.value);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, isNegative);\n\t    }\n\t  });\n\n\t  return isNegative;\n\t}\n\n\texports.name = 'isNegative';\n\texports.factory = factory;\n\n\n/***/ },\n/* 357 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Round a value towards plus infinity\n\t   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.ceil(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.ceil(3.2);               // returns number 4\n\t   *    math.ceil(3.8);               // returns number 4\n\t   *    math.ceil(-4.2);              // returns number -4\n\t   *    math.ceil(-4.7);              // returns number -4\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.ceil(c);                 // returns Complex 4 - 2i\n\t   *\n\t   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]\n\t   *\n\t   * See also:\n\t   *\n\t   *    floor, fix, round\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n\t   */\n\t  var ceil = typed('ceil', {\n\t    'number': Math.ceil,\n\n\t    'Complex': function (x) {\n\t      return x.ceil();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.ceil();\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.ceil();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since ceil(0) = 0\n\t      return deepMap(x, ceil, true);\n\t    }\n\t  });\n\n\t  ceil.toTex = {1: '\\\\left\\\\lceil${args[0]}\\\\right\\\\rceil'};\n\n\t  return ceil;\n\t}\n\n\texports.name = 'ceil';\n\texports.factory = factory;\n\n\n/***/ },\n/* 358 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Compute the cube of a value, `x * x * x`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cube(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cube(2);            // returns number 8\n\t   *    math.pow(2, 3);          // returns number 8\n\t   *    math.cube(4);            // returns number 64\n\t   *    4 * 4 * 4;               // returns number 64\n\t   *\n\t   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, square, pow, cbrt\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x\n\t   */\n\t  var cube = typed('cube', {\n\t    'number': function (x) {\n\t      return x * x * x;\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.mul(x).mul(x); // Is faster than pow(x, 3)\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.times(x).times(x);\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.pow(3); // Is faster than mul()mul()mul()\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since cube(0) = 0\n\t      return deepMap(x, cube, true);\n\t    },\n\n\t    'Unit': function(x) {\n\t      return x.pow(3);\n\t    }\n\t  });\n\n\t  cube.toTex = {1: '\\\\left(${args[0]}\\\\right)^3'};\n\n\t  return cube;\n\t}\n\n\texports.name = 'cube';\n\texports.factory = factory;\n\n\n/***/ },\n/* 359 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var latex = __webpack_require__(32);\n\t  \n\t  var algorithm02 = load(__webpack_require__(360));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Divide two matrices element wise. The function accepts both matrices and\n\t   * scalar values.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dotDivide(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dotDivide(2, 4);   // returns 0.5\n\t   *\n\t   *    a = [[9, 5], [6, 1]];\n\t   *    b = [[3, 2], [5, 2]];\n\t   *\n\t   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]\n\t   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    divide, multiply, dotMultiply\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\n\t   */\n\t  var dotDivide = typed('dotDivide', {\n\t    \n\t    'any, any': divideScalar,\n\t    \n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse ./ sparse\n\t              c = algorithm07(x, y, divideScalar, false);\n\t              break;\n\t            default:\n\t              // sparse ./ dense\n\t              c = algorithm02(y, x, divideScalar, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense ./ sparse\n\t              c = algorithm03(x, y, divideScalar, false);\n\t              break;\n\t            default:\n\t              // dense ./ dense\n\t              c = algorithm13(x, y, divideScalar);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return dotDivide(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return dotDivide(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return dotDivide(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, divideScalar, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, divideScalar, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, divideScalar, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, divideScalar, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, divideScalar, true).valueOf();\n\t    }\n\t  });\n\n\t  dotDivide.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\\\right)'\n\t  };\n\t  \n\t  return dotDivide;\n\t}\n\n\texports.name = 'dotDivide';\n\texports.factory = factory;\n\n\n/***/ },\n/* 360 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var equalScalar = load(__webpack_require__(48));\n\n\t  var SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n\t   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n\t   *\n\t   *\n\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤\n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n\t   */\n\t  var algorithm02 = function (denseMatrix, sparseMatrix, callback, inverse) {\n\t    // dense matrix arrays\n\t    var adata = denseMatrix._data;\n\t    var asize = denseMatrix._size;\n\t    var adt = denseMatrix._datatype;\n\t    // sparse matrix arrays\n\t    var bvalues = sparseMatrix._values;\n\t    var bindex = sparseMatrix._index;\n\t    var bptr = sparseMatrix._ptr;\n\t    var bsize = sparseMatrix._size;\n\t    var bdt = sparseMatrix._datatype;\n\n\t    // validate dimensions\n\t    if (asize.length !== bsize.length)\n\t      throw new DimensionError(asize.length, bsize.length);\n\n\t    // check rows & columns\n\t    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n\t      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n\t    // sparse matrix cannot be a Pattern matrix\n\t    if (!bvalues)\n\t      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\t    \n\t    // datatype\n\t    var dt;\n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string' && adt === bdt) {\n\t      // datatype\n\t      dt = adt;\n\t      // find signature that matches (dt, dt)\n\t      eq = typed.find(equalScalar, [dt, dt]);\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\n\t    // result (SparseMatrix)\n\t    var cvalues = [];\n\t    var cindex = [];\n\t    var cptr = [];\n\n\t    // loop columns in b\n\t    for (var j = 0; j < columns; j++) {\n\t      // update cptr\n\t      cptr[j] = cindex.length;\n\t      // values in column j\n\t      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n\t        // row\n\t        var i = bindex[k];\n\t        // update C(i,j)\n\t        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n\t        // check for nonzero\n\t        if (!eq(cij, zero)) {\n\t          // push i & v\n\t          cindex.push(i);\n\t          cvalues.push(cij);\n\t        }\n\t      }\n\t    }\n\t    // update cptr\n\t    cptr[columns] = cindex.length;\n\n\t    // return sparse matrix\n\t    return new SparseMatrix({\n\t      values: cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\t  };\n\t  \n\t  return algorithm02;\n\t}\n\n\texports.name = 'algorithm02';\n\texports.factory = factory;\n\n\n/***/ },\n/* 361 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var latex = __webpack_require__(32);\n\n\t  var algorithm02 = load(__webpack_require__(360));\n\t  var algorithm09 = load(__webpack_require__(362));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Multiply two matrices element wise. The function accepts both matrices and\n\t   * scalar values.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dotMultiply(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dotMultiply(2, 4); // returns 8\n\t   *\n\t   *    a = [[9, 5], [6, 1]];\n\t   *    b = [[3, 2], [5, 2]];\n\t   *\n\t   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]\n\t   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, divide, dotDivide\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`\n\t   */\n\t  var dotMultiply = typed('dotMultiply', {\n\t    \n\t    'any, any': multiplyScalar,\n\t    \n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse .* sparse\n\t              c = algorithm09(x, y, multiplyScalar, false);\n\t              break;\n\t            default:\n\t              // sparse .* dense\n\t              c = algorithm02(y, x, multiplyScalar, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense .* sparse\n\t              c = algorithm02(x, y, multiplyScalar, false);\n\t              break;\n\t            default:\n\t              // dense .* dense\n\t              c = algorithm13(x, y, multiplyScalar);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\t    \n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return dotMultiply(matrix(x), matrix(y)).valueOf();\n\t    },\n\t    \n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return dotMultiply(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return dotMultiply(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, multiplyScalar, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, multiplyScalar, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(y, x, multiplyScalar, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, multiplyScalar, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n\t    }\n\t  });\n\n\t  dotMultiply.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\\\right)'\n\t  };\n\t  \n\t  return dotMultiply;\n\t}\n\n\texports.name = 'dotMultiply';\n\texports.factory = factory;\n\n\n/***/ },\n/* 362 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var equalScalar = load(__webpack_require__(48));\n\n\t  var SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked NZA times, number of nonzero elements in A.\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n\t   */\n\t  var algorithm09 = function (a, b, callback) {\n\t    // sparse matrix arrays\n\t    var avalues = a._values;\n\t    var aindex = a._index;\n\t    var aptr = a._ptr;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // sparse matrix arrays\n\t    var bvalues = b._values;\n\t    var bindex = b._index;\n\t    var bptr = b._ptr;\n\t    var bsize = b._size;\n\t    var bdt = b._datatype;\n\n\t    // validate dimensions\n\t    if (asize.length !== bsize.length)\n\t      throw new DimensionError(asize.length, bsize.length);\n\n\t    // check rows & columns\n\t    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n\t      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string' && adt === bdt) {\n\t      // datatype\n\t      dt = adt;\n\t      // find signature that matches (dt, dt)\n\t      eq = typed.find(equalScalar, [dt, dt]);\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\n\t    // result arrays\n\t    var cvalues = avalues && bvalues ? [] : undefined;\n\t    var cindex = [];\n\t    var cptr = [];\n\t    // matrix\n\t    var c = new SparseMatrix({\n\t      values: cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\n\t    // workspaces\n\t    var x = cvalues ? [] : undefined;\n\t    // marks indicating we have a value in x for a given column\n\t    var w = [];\n\n\t    // vars\n\t    var i, j, k, k0, k1;\n\t    \n\t    // loop columns\n\t    for (j = 0; j < columns; j++) {\n\t      // update cptr\n\t      cptr[j] = cindex.length;\n\t      // column mark\n\t      var mark = j + 1;\n\t      // check we need to process values\n\t      if (x) {\n\t        // loop B(:,j)\n\t        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n\t          // row\n\t          i = bindex[k];\n\t          // update workspace\n\t          w[i] = mark;\n\t          x[i] = bvalues[k];\n\t        }\n\t      }\n\t      // loop A(:,j)\n\t      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t        // row\n\t        i = aindex[k];\n\t        // check we need to process values\n\t        if (x) {\n\t          // b value @ i,j\n\t          var vb = w[i] === mark ? x[i] : zero;\n\t          // invoke f\n\t          var vc = cf(avalues[k], vb);\n\t          // check zero value\n\t          if (!eq(vc, zero)) {\n\t            // push index\n\t            cindex.push(i);\n\t            // push value\n\t            cvalues.push(vc);\n\t          }\n\t        }\n\t        else {\n\t          // push index\n\t          cindex.push(i);\n\t        }\n\t      }\n\t    }\n\t    // update cptr\n\t    cptr[columns] = cindex.length;\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\n\t  return algorithm09;\n\t}\n\n\texports.name = 'algorithm09';\n\texports.factory = factory;\n\n\n/***/ },\n/* 363 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var pow = load(__webpack_require__(82));\n\t  var latex = __webpack_require__(32);\n\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Calculates the power of x to y element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dotPow(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dotPow(2, 3);            // returns number 8\n\t   *\n\t   *    var a = [[1, 2], [4, 3]];\n\t   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]\n\t   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    pow, sqrt, multiply\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n\t   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\n\t   */\n\t  var dotPow = typed('dotPow', {\n\t    \n\t    'any, any': pow,\n\t    \n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse .^ sparse\n\t              c = algorithm07(x, y, pow, false);\n\t              break;\n\t            default:\n\t              // sparse .^ dense\n\t              c = algorithm03(y, x, pow, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense .^ sparse\n\t              c = algorithm03(x, y, pow, false);\n\t              break;\n\t            default:\n\t              // dense .^ dense\n\t              c = algorithm13(x, y, pow);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return dotPow(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return dotPow(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return dotPow(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, dotPow, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, dotPow, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, dotPow, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, dotPow, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, dotPow, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, dotPow, true).valueOf();\n\t    }\n\t  });\n\n\t  dotPow.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\\\right)'\n\t  };\n\t  \n\t  return dotPow;\n\t}\n\n\texports.name = 'dotPow';\n\texports.factory = factory;\n\n\n/***/ },\n/* 364 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the exponent of a value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.exp(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.exp(2);                  // returns number 7.3890560989306495\n\t   *    math.pow(math.e, 2);          // returns number 7.3890560989306495\n\t   *    math.log(math.exp(2));        // returns number 2\n\t   *\n\t   *    math.exp([1, 2, 3]);\n\t   *    // returns Array [\n\t   *    //   2.718281828459045,\n\t   *    //   7.3890560989306495,\n\t   *    //   20.085536923187668\n\t   *    // ]\n\t   *\n\t   * See also:\n\t   *\n\t   *    log, pow\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n\t   */\n\t  var exp = typed('exp', {\n\t    'number': Math.exp,\n\n\t    'Complex': function (x) {\n\t      return x.exp();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.exp();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // TODO: exp(sparse) should return a dense matrix since exp(0)==1\n\t      return deepMap(x, exp);\n\t    }\n\t  });\n\n\t  exp.toTex = {1: '\\\\exp\\\\left(${args[0]}\\\\right)'};\n\n\t  return exp;\n\t}\n\n\texports.name = 'exp';\n\texports.factory = factory;\n\n\n/***/ },\n/* 365 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Round a value towards zero.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.fix(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.fix(3.2);                // returns number 3\n\t   *    math.fix(3.8);                // returns number 3\n\t   *    math.fix(-4.2);               // returns number -4\n\t   *    math.fix(-4.7);               // returns number -4\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.fix(c);                  // returns Complex 3 - 2i\n\t   *\n\t   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ceil, floor, round\n\t   *\n\t   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value\n\t   */\n\t  var fix = typed('fix', {\n\t    'number': function (x) {\n\t      return (x > 0) ? Math.floor(x) : Math.ceil(x);\n\t    },\n\n\t    'Complex': function (x) {\n\t      return new type.Complex(\n\t          (x.re > 0) ? Math.floor(x.re) : Math.ceil(x.re),\n\t          (x.im > 0) ? Math.floor(x.im) : Math.ceil(x.im)\n\t      );\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.isNegative() ? x.ceil() : x.floor();\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.s < 0 ? x.ceil() : x.floor();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since fix(0) = 0\n\t      return deepMap(x, fix, true);\n\t    }\n\t  });\n\n\t  fix.toTex = {1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'};\n\n\t  return fix;\n\t}\n\n\texports.name = 'fix';\n\texports.factory = factory;\n\n\n/***/ },\n/* 366 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Round a value towards minus infinity.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.floor(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.floor(3.2);              // returns number 3\n\t   *    math.floor(3.8);              // returns number 3\n\t   *    math.floor(-4.2);             // returns number -5\n\t   *    math.floor(-4.7);             // returns number -5\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.floor(c);                // returns Complex 3 - 3i\n\t   *\n\t   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ceil, fix, round\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n\t   */\n\t  var floor = typed('floor', {\n\t    'number': Math.floor,\n\n\t    'Complex': function (x) {\n\t      return x.floor();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.floor();\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.floor();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since floor(0) = 0\n\t      return deepMap(x, floor, true);\n\t    }\n\t  });\n\n\t  floor.toTex = {1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rfloor'};\n\n\t  return floor;\n\t}\n\n\texports.name = 'floor';\n\texports.factory = factory;\n\n\n/***/ },\n/* 367 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm04 = load(__webpack_require__(55));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Calculate the greatest common divisor for two or more values or arrays.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.gcd(a, b)\n\t   *    math.gcd(a, b, c, ...)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.gcd(8, 12);              // returns 4\n\t   *    math.gcd(-4, 6);              // returns 2\n\t   *    math.gcd(25, 15, -10);        // returns 5\n\t   *\n\t   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lcm, xgcd\n\t   *\n\t   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n\t   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n\t   */\n\t  var gcd = typed('gcd', {\n\n\t    'number, number': _gcd,\n\n\t    'BigNumber, BigNumber': _gcdBigNumber,\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return x.gcd(y);\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm04(x, y, gcd);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm01(y, x, gcd, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm01(x, y, gcd, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, gcd);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return gcd(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return gcd(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return gcd(x, matrix(y));\n\t    },\n\t    \n\t    'Matrix, number | BigNumber': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm10(x, y, gcd, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, gcd, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'number | BigNumber, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm10(y, x, gcd, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, gcd, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, number | BigNumber': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, gcd, false).valueOf();\n\t    },\n\n\t    'number | BigNumber, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, gcd, true).valueOf();\n\t    },\n\n\t    // TODO: need a smarter notation here\n\t    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {\n\t      var res = gcd(a, b);\n\t      for (var i = 0; i < args.length; i++) {\n\t        res = gcd(res, args[i]);\n\t      }\n\t      return res;\n\t    }\n\t  });\n\n\t  gcd.toTex = '\\\\gcd\\\\left(${args}\\\\right)';\n\n\t  return gcd;\n\n\t  /**\n\t   * Calculate gcd for BigNumbers\n\t   * @param {BigNumber} a\n\t   * @param {BigNumber} b\n\t   * @returns {BigNumber} Returns greatest common denominator of a and b\n\t   * @private\n\t   */\n\t  function _gcdBigNumber(a, b) {\n\t    if (!a.isInt() || !b.isInt()) {\n\t      throw new Error('Parameters in function gcd must be integer numbers');\n\t    }\n\n\t    // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\t    var zero = new type.BigNumber(0);\n\t    while (!b.isZero()) {\n\t      var r = a.mod(b);\n\t      a = b;\n\t      b = r;\n\t    }\n\t    return a.lt(zero) ? a.neg() : a;\n\t  }\n\t}\n\n\t/**\n\t * Calculate gcd for numbers\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number} Returns the greatest common denominator of a and b\n\t * @private\n\t */\n\tfunction _gcd(a, b) {\n\t  if (!isInteger(a) || !isInteger(b)) {\n\t    throw new Error('Parameters in function gcd must be integer numbers');\n\t  }\n\n\t  // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\t  var r;\n\t  while (b != 0) {\n\t    r = a % b;\n\t    a = b;\n\t    b = r;\n\t  }\n\t  return (a < 0) ? -a : a;\n\t}\n\n\texports.name = 'gcd';\n\texports.factory = factory;\n\n\n/***/ },\n/* 368 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar flatten = __webpack_require__(40).flatten;\n\n\tfunction factory (type, config, load, typed) {\n\t  var abs = load(__webpack_require__(86));\n\t  var add = load(__webpack_require__(53));\n\t  var divide = load(__webpack_require__(81));\n\t  var multiply = load(__webpack_require__(80));\n\t  var sqrt = load(__webpack_require__(369));\n\t  var smaller = load(__webpack_require__(60));\n\t  var isPositive = load(__webpack_require__(370));\n\n\t  /**\n\t   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n\t   *\n\t   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n\t   *\n\t   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.hypot(a, b, ...)\n\t   *     math.hypot([a, b, c, ...])\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.hypot(3, 4);      // 5\n\t   *     math.hypot(3, 4, 5);   // 7.0710678118654755\n\t   *     math.hypot([3, 4, 5]); // 7.0710678118654755\n\t   *     math.hypot(-2);        // 2\n\t   *\n\t   * See also:\n\t   *\n\t   *     abs, norm\n\t   *\n\t   * @param {... number | BigNumber} args\n\t   * @return {number | BigNumber} Returns the hypothenusa of the input values.\n\t   */\n\t  var hypot = typed('hypot', {\n\t    '... number | BigNumber': _hypot,\n\n\t    'Array': function (x) {\n\t      return hypot.apply(hypot, flatten(x));\n\t    },\n\n\t    'Matrix': function (x) {\n\t      return hypot.apply(hypot, flatten(x.toArray()));\n\t    }\n\t  });\n\n\t  /**\n\t   * Calculate the hypotenusa for an Array with values\n\t   * @param {Array.<number | BigNumber>} args\n\t   * @return {number | BigNumber} Returns the result\n\t   * @private\n\t   */\n\t  function _hypot (args) {\n\t    // code based on `hypot` from es6-shim:\n\t    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n\t    var result = 0;\n\t    var largest = 0;\n\n\t    for (var i = 0; i < args.length; i++) {\n\t      var value = abs(args[i]);\n\t      if (smaller(largest, value)) {\n\t        result = multiply(result, multiply(divide(largest, value), divide(largest, value)));\n\t        result = add(result, 1);\n\t        largest = value;\n\t      } else {\n\t        result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);\n\t      }\n\t    }\n\n\t    return multiply(largest, sqrt(result));\n\t  }\n\n\t  hypot.toTex = '\\\\hypot\\\\left(${args}\\\\right)';\n\n\t  return hypot;\n\t}\n\n\texports.name = 'hypot';\n\texports.factory = factory;\n\n\n/***/ },\n/* 369 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the square root of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sqrt(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sqrt(25);                // returns 5\n\t   *    math.square(5);               // returns 25\n\t   *    math.sqrt(-4);                // returns Complex 2i\n\t   *\n\t   * See also:\n\t   *\n\t   *    square, multiply, cube, cbrt\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n\t   *            Value for which to calculate the square root.\n\t   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n\t   *            Returns the square root of `x`\n\t   */\n\t  var sqrt = typed('sqrt', {\n\t    'number': _sqrtNumber,\n\n\t    'Complex': function (x) {\n\t        return x.sqrt();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      if (!x.isNegative() || config.predictable) {\n\t        return x.sqrt();\n\t      }\n\t      else {\n\t        // negative value -> downgrade to number to do complex value computation\n\t        return _sqrtNumber(x.toNumber());\n\t      }\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since sqrt(0) = 0\n\t      return deepMap(x, sqrt, true);\n\t    },\n\n\t    'Unit': function (x) {\n\t      // Someday will work for complex units when they are implemented\n\t      return x.pow(0.5);\n\t    }\n\n\t  });\n\n\t  /**\n\t   * Calculate sqrt for a number\n\t   * @param {number} x\n\t   * @returns {number | Complex} Returns the square root of x\n\t   * @private\n\t   */\n\t  function _sqrtNumber(x) {\n\t    if (x >= 0 || config.predictable) {\n\t      return Math.sqrt(x);\n\t    }\n\t    else {\n\t      return new type.Complex(x, 0).sqrt();\n\t    }\n\t  }\n\n\t  sqrt.toTex = {1: '\\\\sqrt{${args[0]}}'};\n\n\t  return sqrt;\n\t}\n\n\texports.name = 'sqrt';\n\texports.factory = factory;\n\n\n/***/ },\n/* 370 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is positive: larger than zero.\n\t   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isPositive(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isPositive(3);                     // returns true\n\t   *    math.isPositive(-2);                    // returns false\n\t   *    math.isPositive(0);                     // returns false\n\t   *    math.isPositive(-0);                    // returns false\n\t   *    math.isPositive(0.5);                   // returns true\n\t   *    math.isPositive(math.bignumber(2));     // returns true\n\t   *    math.isPositive(math.fraction(-2, 5));  // returns false\n\t   *    math.isPositive(math.fraction(1,3));    // returns false\n\t   *    math.isPositive('2');                   // returns true\n\t   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isZero, isNegative, isInteger\n\t   *\n\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t   *                    Throws an error in case of an unknown data type.\n\t   */\n\t  var isPositive = typed('isPositive', {\n\t    'number': function (x) {\n\t      return x > 0;\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return !x.isNeg() && !x.isZero() && !x.isNaN();\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.s > 0 && x.n > 0;\n\t    },\n\n\t    'Unit': function (x) {\n\t      return isPositive(x.value);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, isPositive);\n\t    }\n\t  });\n\n\t  return isPositive;\n\t}\n\n\texports.name = 'isPositive';\n\texports.factory = factory;\n\n\n/***/ },\n/* 371 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm02 = load(__webpack_require__(360));\n\t  var algorithm06 = load(__webpack_require__(372));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Calculate the least common multiple for two or more values or arrays.\n\t   *\n\t   * lcm is defined as:\n\t   *\n\t   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lcm(a, b)\n\t   *    math.lcm(a, b, c, ...)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.lcm(4, 6);               // returns 12\n\t   *    math.lcm(6, 21);              // returns 42\n\t   *    math.lcm(6, 21, 5);           // returns 210\n\t   *\n\t   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]\n\t   *\n\t   * See also:\n\t   *\n\t   *    gcd, xgcd\n\t   *\n\t   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n\t   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n\t   */\n\t  var lcm = typed('lcm', {\n\t    'number, number': _lcm,\n\n\t    'BigNumber, BigNumber': _lcmBigNumber,\n\n\t    'Fraction, Fraction': function (x, y) {\n\n\t      return x.lcm(y);\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm06(x, y, lcm);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm02(y, x, lcm, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm02(x, y, lcm, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, lcm);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return lcm(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return lcm(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return lcm(x, matrix(y));\n\t    },\n\n\t    'Matrix, number | BigNumber': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, lcm, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, lcm, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'number | BigNumber, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(y, x, lcm, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, lcm, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, number | BigNumber': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, lcm, false).valueOf();\n\t    },\n\n\t    'number | BigNumber, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, lcm, true).valueOf();\n\t    },\n\n\t    // TODO: need a smarter notation here\n\t    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {\n\t      var res = lcm(a, b);\n\t      for (var i = 0; i < args.length; i++) {\n\t        res = lcm(res, args[i]);\n\t      }\n\t      return res;\n\t    }\n\t  });\n\n\t  lcm.toTex = undefined;  // use default template\n\n\t  return lcm;\n\n\t  /**\n\t   * Calculate lcm for two BigNumbers\n\t   * @param {BigNumber} a\n\t   * @param {BigNumber} b\n\t   * @returns {BigNumber} Returns the least common multiple of a and b\n\t   * @private\n\t   */\n\t  function _lcmBigNumber(a, b) {\n\t    if (!a.isInt() || !b.isInt()) {\n\t      throw new Error('Parameters in function lcm must be integer numbers');\n\t    }\n\n\t    if (a.isZero() || b.isZero()) {\n\t      return new type.BigNumber(0);\n\t    }\n\n\t    // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\t    // evaluate lcm here inline to reduce overhead\n\t    var prod = a.times(b);\n\t    while (!b.isZero()) {\n\t      var t = b;\n\t      b = a.mod(t);\n\t      a = t;\n\t    }\n\t    return prod.div(a).abs();\n\t  }\n\t}\n\n\t/**\n\t * Calculate lcm for two numbers\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number} Returns the least common multiple of a and b\n\t * @private\n\t */\n\tfunction _lcm (a, b) {\n\t  if (!isInteger(a) || !isInteger(b)) {\n\t    throw new Error('Parameters in function lcm must be integer numbers');\n\t  }\n\n\t  if (a == 0 || b == 0) {\n\t    return 0;\n\t  }\n\n\t  // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\t  // evaluate lcm here inline to reduce overhead\n\t  var t;\n\t  var prod = a * b;\n\t  while (b != 0) {\n\t    t = b;\n\t    b = a % t;\n\t    a = t;\n\t  }\n\t  return Math.abs(prod / a);\n\t}\n\n\texports.name = 'lcm';\n\texports.factory = factory;\n\n\n/***/ },\n/* 372 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar scatter = __webpack_require__(373);\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var equalScalar = load(__webpack_require__(48));\n\n\t  var SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n\t   */\n\t  var algorithm06 = function (a, b, callback) {\n\t    // sparse matrix arrays\n\t    var avalues = a._values;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // sparse matrix arrays\n\t    var bvalues = b._values;\n\t    var bsize = b._size;\n\t    var bdt = b._datatype;\n\n\t    // validate dimensions\n\t    if (asize.length !== bsize.length)\n\t      throw new DimensionError(asize.length, bsize.length);\n\n\t    // check rows & columns\n\t    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n\t      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string' && adt === bdt) {\n\t      // datatype\n\t      dt = adt;\n\t      // find signature that matches (dt, dt)\n\t      eq = typed.find(equalScalar, [dt, dt]);\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\n\t    // result arrays\n\t    var cvalues = avalues && bvalues ? [] : undefined;\n\t    var cindex = [];\n\t    var cptr = [];\n\t    // matrix\n\t    var c = new SparseMatrix({\n\t      values: cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\n\t    // workspaces\n\t    var x = cvalues ? [] : undefined;\n\t    // marks indicating we have a value in x for a given column\n\t    var w = [];\n\t    // marks indicating value in a given row has been updated\n\t    var u = [];\n\n\t    // loop columns\n\t    for (var j = 0; j < columns; j++) {\n\t      // update cptr\n\t      cptr[j] = cindex.length;\n\t      // columns mark\n\t      var mark = j + 1;\n\t      // scatter the values of A(:,j) into workspace\n\t      scatter(a, j, w, x, u, mark, c, cf);\n\t      // scatter the values of B(:,j) into workspace\n\t      scatter(b, j, w, x, u, mark, c, cf);\n\t      // check we need to process values (non pattern matrix)\n\t      if (x) {\n\t        // initialize first index in j\n\t        var k = cptr[j];\n\t        // loop index in j\n\t        while (k < cindex.length) {\n\t          // row\n\t          var i = cindex[k];\n\t          // check function was invoked on current row (Aij !=0 && Bij != 0)\n\t          if (u[i] === mark) {\n\t            // value @ i\n\t            var v = x[i];\n\t            // check for zero value\n\t            if (!eq(v, zero)) {\n\t              // push value\n\t              cvalues.push(v);\n\t              // increment pointer\n\t              k++;\n\t            }\n\t            else {\n\t              // remove value @ i, do not increment pointer\n\t              cindex.splice(k, 1);\n\t            }\n\t          }\n\t          else {\n\t            // remove value @ i, do not increment pointer\n\t            cindex.splice(k, 1);\n\t          }\n\t        }\n\t      }\n\t      else {\n\t        // initialize first index in j\n\t        var p = cptr[j];\n\t        // loop index in j\n\t        while (p < cindex.length) {\n\t          // row\n\t          var r = cindex[p];\n\t          // check function was invoked on current row (Aij !=0 && Bij != 0)\n\t          if (u[r] !== mark) {\n\t            // remove value @ i, do not increment pointer\n\t            cindex.splice(p, 1);\n\t          }\n\t          else {\n\t            // increment pointer\n\t            p++;\n\t          }\n\t        }\n\t      }\n\t    }\n\t    // update cptr\n\t    cptr[columns] = cindex.length;\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\t  \n\t  return algorithm06;\n\t}\n\n\texports.name = 'algorithm06';\n\texports.factory = factory;\n\n\n/***/ },\n/* 373 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {\n\t  // a arrays\n\t  var avalues = a._values;\n\t  var aindex = a._index;\n\t  var aptr = a._ptr;\n\t  // c arrays\n\t  var cindex = c._index;\n\n\t  // vars\n\t  var k, k0, k1, i;\n\n\t  // check we need to process values (pattern matrix)\n\t  if (x) {\n\t    // values in j\n\t    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t      // row\n\t      i = aindex[k];\n\t      // check value exists in current j\n\t      if (w[i] !== mark) {\n\t        // i is new entry in j\n\t        w[i] = mark;\n\t        // add i to pattern of C\n\t        cindex.push(i);\n\t        // x(i) = A, check we need to call function this time\n\t        if (update) {\n\t          // copy value to workspace calling callback function\n\t          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);\n\t          // function was called on current row\n\t          u[i] = mark;\n\t        }\n\t        else {\n\t          // copy value to workspace\n\t          x[i] = avalues[k];\n\t        }\n\t      }\n\t      else {\n\t        // i exists in C already\n\t        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);\n\t        // function was called on current row\n\t        u[i] = mark;\n\t      }\n\t    }\n\t  }\n\t  else {\n\t    // values in j\n\t    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t      // row\n\t      i = aindex[k];\n\t      // check value exists in current j\n\t      if (w[i] !== mark) {\n\t        // i is new entry in j\n\t        w[i] = mark;\n\t        // add i to pattern of C\n\t        cindex.push(i);\n\t      }\n\t      else {\n\t        // indicate function was called on current row\n\t        u[i] = mark;\n\t      }\n\t    }\n\t  }\n\t};\n\n\n/***/ },\n/* 374 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  var divideScalar = load(__webpack_require__(81));\n\n\t  /**\n\t   * Calculate the logarithm of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.log(x)\n\t   *    math.log(x, base)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.log(3.5);                  // returns 1.252762968495368\n\t   *    math.exp(math.log(2.4));        // returns 2.4\n\t   *\n\t   *    math.pow(10, 4);                // returns 10000\n\t   *    math.log(10000, 10);            // returns 4\n\t   *    math.log(10000) / math.log(10); // returns 4\n\t   *\n\t   *    math.log(1024, 2);              // returns 10\n\t   *    math.pow(2, 10);                // returns 1024\n\t   *\n\t   * See also:\n\t   *\n\t   *    exp, log10\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            Value for which to calculate the logarithm.\n\t   * @param {number | BigNumber | Complex} [base=e]\n\t   *            Optional base for the logarithm. If not provided, the natural\n\t   *            logarithm of `x` is calculated.\n\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t   *            Returns the logarithm of `x`\n\t   */\n\t  var log = typed('log', {\n\t    'number': function (x) {\n\t      if (x >= 0 || config.predictable) {\n\t        return Math.log(x);\n\t      }\n\t      else {\n\t        // negative value -> complex value computation\n\t        return new type.Complex(x, 0).log();\n\t      }\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.log();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      if (!x.isNegative() || config.predictable) {\n\t        return x.ln();\n\t      }\n\t      else {\n\t        // downgrade to number, return Complex valued result\n\t        return new type.Complex(x.toNumber(), 0).log();\n\t      }\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, log);\n\t    },\n\n\t    'any, any': function (x, base) {\n\t      // calculate logarithm for a specified base, log(x, base)\n\t      return divideScalar(log(x), log(base));\n\t    }\n\t  });\n\n\t  log.toTex = {\n\t    1: '\\\\ln\\\\left(${args[0]}\\\\right)',\n\t    2: '\\\\log_{${args[1]}}\\\\left(${args[0]}\\\\right)'\n\t  };\n\n\t  return log;\n\t}\n\n\texports.name = 'log';\n\texports.factory = factory;\n\n\n/***/ },\n/* 375 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.log10(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.log10(0.00001);            // returns -5\n\t   *    math.log10(10000);              // returns 4\n\t   *    math.log(10000) / math.log(10); // returns 4\n\t   *    math.pow(10, 4);                // returns 10000\n\t   *\n\t   * See also:\n\t   *\n\t   *    exp, log\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            Value for which to calculate the logarithm.\n\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t   *            Returns the 10-base logarithm of `x`\n\t   */\n\t  var log10 = typed('log10', {\n\t    'number': function (x) {\n\t      if (x >= 0 || config.predictable) {\n\t        return _log10(x);\n\t      }\n\t      else {\n\t        // negative value -> complex value computation\n\t        return new type.Complex(x, 0).log().div(Math.LN10);\n\t      }\n\t    },\n\n\t    'Complex': function (x) {\n\t      return new type.Complex(x).log().div(Math.LN10);\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      if (!x.isNegative() || config.predictable) {\n\t        return x.log();\n\t      }\n\t      else {\n\t        // downgrade to number, return Complex valued result\n\t        return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);\n\t      }\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, log10);\n\t    }\n\t  });\n\n\t  log10.toTex = {1: '\\\\log_{10}\\\\left(${args[0]}\\\\right)'};\n\n\t  return log10;\n\t}\n\n\t/**\n\t * Calculate the 10-base logarithm of a number\n\t * @param {number} x\n\t * @return {number}\n\t * @private\n\t */\n\tvar _log10 = Math.log10 || function (x) {\n\t  return Math.log(x) / Math.LN10;\n\t};\n\n\texports.name = 'log10';\n\texports.factory = factory;\n\n\n\n/***/ },\n/* 376 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var latex = __webpack_require__(32);\n\n\t  var algorithm02 = load(__webpack_require__(360));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Calculates the modulus, the remainder of an integer division.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * The modulus is defined as:\n\t   *\n\t   *     x - y * floor(x / y)\n\t   *\n\t   * See http://en.wikipedia.org/wiki/Modulo_operation.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.mod(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.mod(8, 3);                // returns 2\n\t   *    math.mod(11, 2);               // returns 1\n\t   *\n\t   *    function isOdd(x) {\n\t   *      return math.mod(x, 2) != 0;\n\t   *    }\n\t   *\n\t   *    isOdd(2);                      // returns false\n\t   *    isOdd(3);                      // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    divide\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n\t   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n\t   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n\t   */\n\t  var mod = typed('mod', {\n\n\t    'number, number': _mod,\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return y.isZero() ? x : x.mod(y);\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return x.mod(y);\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // mod(sparse, sparse)\n\t              c = algorithm05(x, y, mod, false);\n\t              break;\n\t            default:\n\t              // mod(sparse, dense)\n\t              c = algorithm02(y, x, mod, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // mod(dense, sparse)\n\t              c = algorithm03(x, y, mod, false);\n\t              break;\n\t            default:\n\t              // mod(dense, dense)\n\t              c = algorithm13(x, y, mod);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\t    \n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return mod(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return mod(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return mod(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, mod, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, mod, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, mod, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, mod, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, mod, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, mod, true).valueOf();\n\t    }\n\t  });\n\n\t  mod.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return mod;\n\n\t  /**\n\t   * Calculate the modulus of two numbers\n\t   * @param {number} x\n\t   * @param {number} y\n\t   * @returns {number} res\n\t   * @private\n\t   */\n\t  function _mod(x, y) {\n\t    if (y > 0) {\n\t      // We don't use JavaScript's % operator here as this doesn't work\n\t      // correctly for x < 0 and x == 0\n\t      // see http://en.wikipedia.org/wiki/Modulo_operation\n\t      return x - y * Math.floor(x / y);\n\t    }\n\t    else if (y === 0) {\n\t      return x;\n\t    }\n\t    else { // y < 0\n\t      // TODO: implement mod for a negative divisor\n\t      throw new Error('Cannot calculate mod for a negative divisor');\n\t    }\n\t  }\n\t}\n\n\texports.name = 'mod';\n\texports.factory = factory;\n\n\n/***/ },\n/* 377 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  \n\t  var abs         = load(__webpack_require__(86));\n\t  var add         = load(__webpack_require__(51));\n\t  var pow         = load(__webpack_require__(82));\n\t  var sqrt        = load(__webpack_require__(369));\n\t  var multiply    = load(__webpack_require__(84));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var larger      = load(__webpack_require__(64));\n\t  var smaller     = load(__webpack_require__(60));\n\t  var matrix      = load(__webpack_require__(52));\n\t  var trace       = load(__webpack_require__(378));\n\t  var transpose   = load(__webpack_require__(335));\n\n\n\t  /**\n\t   * Calculate the norm of a number, vector or matrix.\n\t   *\n\t   * The second parameter p is optional. If not provided, it defaults to 2.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.norm(x)\n\t   *    math.norm(x, p)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.abs(-3.5);                         // returns 3.5\n\t   *    math.norm(-3.5);                        // returns 3.5\n\t   *\n\t   *    math.norm(math.complex(3, -4));         // returns 5\n\t   *\n\t   *    math.norm([1, 2, -3], Infinity);        // returns 3\n\t   *    math.norm([1, 2, -3], -Infinity);       // returns 1\n\t   *\n\t   *    math.norm([3, 4], 2);                   // returns 5\n\t   *\n\t   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n\t   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7\n\t   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661\n\t   *\n\t   * See also:\n\t   *\n\t   *    abs, hypot\n\t   *\n\t   * @param  {number | BigNumber | Complex | Array | Matrix} x\n\t   *            Value for which to calculate the norm\n\t   * @param  {number | BigNumber | string} [p=2]\n\t   *            Vector space.\n\t   *            Supported numbers include Infinity and -Infinity.\n\t   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n\t   * @return {number | BigNumber} the p-norm\n\t   */\n\t  var norm = typed('norm', {\n\t    'number': Math.abs,\n\n\t    'Complex': function (x) {\n\t      return x.abs();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      // norm(x) = abs(x)\n\t      return x.abs();\n\t    },\n\t    \n\t    'boolean | null' : function (x) {\n\t      // norm(x) = abs(x)\n\t      return Math.abs(x);\n\t    },\n\n\t    'Array': function (x) {\n\t      return _norm(matrix(x), 2);\n\t    },\n\t    \n\t    'Matrix': function (x) {\n\t      return _norm(x, 2);\n\t    },\n\n\t    'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function (x) {\n\t      // ignore second parameter, TODO: remove the option of second parameter for these types\n\t      return norm(x);\n\t    },\n\n\t    'Array, number | BigNumber | string': function (x, p) {\n\t      return _norm(matrix(x), p);\n\t    },\n\t    \n\t    'Matrix, number | BigNumber | string': function (x, p) {\n\t      return _norm(x, p);\n\t    }\n\t  });\n\n\t  /**\n\t   * Calculate the norm for an array\n\t   * @param {Array} x\n\t   * @param {number | string} p\n\t   * @returns {number} Returns the norm\n\t   * @private\n\t   */\n\t  function _norm (x, p) {\n\t    // size\n\t    var sizeX = x.size();\n\t    \n\t    // check if it is a vector\n\t    if (sizeX.length == 1) {\n\t      // check p\n\t      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n\t        // norm(x, Infinity) = max(abs(x))\n\t        var pinf = 0;\n\t        // skip zeros since abs(0) == 0\n\t        x.forEach(\n\t          function (value) {\n\t            var v = abs(value);\n\t            if (larger(v, pinf))\n\t              pinf = v;\n\t          },\n\t          true);\n\t        return pinf;\n\t      }\n\t      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n\t        // norm(x, -Infinity) = min(abs(x))\n\t        var ninf;\n\t        // skip zeros since abs(0) == 0\n\t        x.forEach(\n\t          function (value) {\n\t            var v = abs(value);\n\t            if (!ninf || smaller(v, ninf))\n\t              ninf = v;\n\t          },\n\t          true);\n\t        return ninf || 0;\n\t      }\n\t      if (p === 'fro') {\n\t        return _norm(x, 2);\n\t      }\n\t      if (typeof p === 'number' && !isNaN(p)) {\n\t        // check p != 0\n\t        if (!equalScalar(p, 0)) {\n\t          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n\t          var n = 0;\n\t          // skip zeros since abs(0) == 0\n\t          x.forEach(\n\t            function (value) {\n\t              n = add(pow(abs(value), p), n);\n\t            },\n\t            true);\n\t          return pow(n, 1 / p);\n\t        }\n\t        return Number.POSITIVE_INFINITY;\n\t      }\n\t      // invalid parameter value\n\t      throw new Error('Unsupported parameter value');\n\t    }\n\t    // MxN matrix\n\t    if (sizeX.length == 2) {\n\t      // check p\n\t      if (p === 1) {\n\t        // norm(x) = the largest column sum\n\t        var c = [];\n\t        // result\n\t        var maxc = 0;\n\t        // skip zeros since abs(0) == 0\n\t        x.forEach(\n\t          function (value, index) {\n\t            var j = index[1];\n\t            var cj = add(c[j] || 0, abs(value));\n\t            if (larger(cj, maxc))\n\t              maxc = cj;\n\t            c[j] = cj;\n\t          },\n\t          true);\n\t        return maxc;\n\t      }\n\t      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n\t        // norm(x) = the largest row sum\n\t        var r = [];\n\t        // result\n\t        var maxr = 0;\n\t        // skip zeros since abs(0) == 0\n\t        x.forEach(\n\t          function (value, index) {\n\t            var i = index[0];\n\t            var ri = add(r[i] || 0, abs(value));\n\t            if (larger(ri, maxr))\n\t              maxr = ri;\n\t            r[i] = ri;\n\t          },\n\t          true);\n\t        return maxr;\n\t      }\n\t      if (p === 'fro') {\n\t        // norm(x) = sqrt(sum(diag(x'x)))\n\t        return sqrt(trace(multiply(transpose(x), x)));\n\t      }\n\t      if (p === 2) {\n\t        // not implemented\n\t        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');\n\t      }\n\t      // invalid parameter value\n\t      throw new Error('Unsupported parameter value');\n\t    }\n\t  }\n\n\t  norm.toTex = {\n\t    1: '\\\\left\\\\|${args[0]}\\\\right\\\\|',\n\t    2: undefined  // use default template\n\t  };\n\n\t  return norm;\n\t}\n\n\texports.name = 'norm';\n\texports.factory = factory;\n\n\n/***/ },\n/* 378 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar clone = __webpack_require__(3).clone;\n\tvar format = __webpack_require__(23).format;\n\n\tfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var add = load(__webpack_require__(51));\n\n\t  /**\n\t   * Calculate the trace of a matrix: the sum of the elements on the main\n\t   * diagonal of a square matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.trace(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.trace([[1, 2], [3, 4]]); // returns 5\n\t   *\n\t   *    var A = [\n\t   *      [1, 2, 3],\n\t   *      [-1, 2, 3],\n\t   *      [2, 0, 3]\n\t   *    ]\n\t   *    math.trace(A); // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    diag\n\t   *\n\t   * @param {Array | Matrix} x  A matrix\n\t   *\n\t   * @return {number} The trace of `x`\n\t   */\n\t  var trace = typed('trace', {\n\t    \n\t    'Array': function (x) {\n\t      // use dense matrix implementation\n\t      return trace(matrix(x));\n\t    },\n\n\t    'Matrix': function (x) {\n\t      // result\n\t      var c;\n\t      // process storage format\n\t      switch (x.storage()) {\n\t        case 'dense':\n\t          c = _denseTrace(x);\n\t          break;\n\t        case 'sparse':\n\t          c = _sparseTrace(x);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\t    \n\t    'any': clone\n\t  });\n\t  \n\t  var _denseTrace = function (m) {\n\t    // matrix size & data\n\t    var size = m._size;\n\t    var data = m._data;\n\t    \n\t    // process dimensions\n\t    switch (size.length) {\n\t      case 1:\n\t        // vector\n\t        if (size[0] == 1) {\n\t          // return data[0]\n\t          return clone(data[0]);\n\t        }\n\t        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n\t      case 2:\n\t        // two dimensional\n\t        var rows = size[0];\n\t        var cols = size[1];\n\t        if (rows === cols) {\n\t          // calulate sum\n\t          var sum = 0;\n\t          // loop diagonal\n\t          for (var i = 0; i < rows; i++)\n\t            sum = add(sum, data[i][i]);\n\t          // return trace\n\t          return sum;\n\t        }\n\t        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');        \n\t      default:\n\t        // multi dimensional\n\t        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');\n\t    }\n\t  };\n\t  \n\t  var _sparseTrace = function (m) {\n\t    // matrix arrays\n\t    var values = m._values;\n\t    var index = m._index;\n\t    var ptr = m._ptr;\n\t    var size = m._size;\n\t    // check dimensions\n\t    var rows = size[0];\n\t    var columns = size[1];\n\t    // matrix must be square\n\t    if (rows === columns) {\n\t      // calulate sum\n\t      var sum = 0;\n\t      // check we have data (avoid looping columns)\n\t      if (values.length > 0) {\n\t        // loop columns\n\t        for (var j = 0; j < columns; j++) {\n\t          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\t          var k0 = ptr[j];\n\t          var k1 = ptr[j + 1];\n\t          // loop k within [k0, k1[\n\t          for (var k = k0; k < k1; k++) {\n\t            // row index\n\t            var i = index[k];\n\t            // check row\n\t            if (i === j) {\n\t              // accumulate value\n\t              sum = add(sum, values[k]);\n\t              // exit loop\n\t              break;\n\t            }\n\t            if (i > j) {\n\t              // exit loop, no value on the diagonal for column j\n\t              break;\n\t            }\n\t          }\n\t        }\n\t      }\n\t      // return trace\n\t      return sum;\n\t    }\n\t    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');   \n\t  };\n\n\t  trace.toTex = {1: '\\\\mathrm{tr}\\\\left(${args[0]}\\\\right)'};\n\t  \n\t  return trace;\n\t}\n\n\texports.name = 'trace';\n\texports.factory = factory;\n\n\n/***/ },\n/* 379 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(360));\n\t  var algorithm06 = load(__webpack_require__(372));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Calculate the nth root of a value.\n\t   * The principal nth root of a positive real number A, is the positive real\n\t   * solution of the equation\n\t   *\n\t   *     x^root = A\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.nthRoot(a)\n\t   *     math.nthRoot(a, root)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9\n\t   *     math.sqrt(9);          // returns 3, as 3^2 == 9\n\t   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64\n\t   *\n\t   * See also:\n\t   *\n\t   *     sqrt, pow\n\t   *\n\t   * @param {number | BigNumber | Array | Matrix | Complex} a\n\t   *              Value for which to calculate the nth root\n\t   * @param {number | BigNumber} [root=2]    The root.\n\t   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n\t   */\n\t  var nthRoot = typed('nthRoot', {\n\t    \n\t    'number': function (x) {\n\t      return _nthRoot(x, 2);\n\t    },\n\t    'number, number': _nthRoot,\n\n\t    'BigNumber': function (x) {\n\t      return _bigNthRoot(x, new type.BigNumber(2));\n\t    },\n\t    'Complex' : function(x) {\n\t      return _nthComplexRoot(x, 2);\n\t    }, \n\t    'Complex, number' : _nthComplexRoot,\n\t    'BigNumber, BigNumber': _bigNthRoot,\n\n\t    'Array | Matrix': function (x) {\n\t      return nthRoot(x, 2);\n\t    },\n\t    \n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // density must be one (no zeros in matrix)\n\t              if (y.density() === 1) {\n\t                // sparse + sparse\n\t                c = algorithm06(x, y, nthRoot);\n\t              }\n\t              else {\n\t                // throw exception\n\t                throw new Error('Root must be non-zero');\n\t              }\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm02(y, x, nthRoot, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // density must be one (no zeros in matrix)\n\t              if (y.density() === 1) {\n\t                // dense + sparse\n\t                c = algorithm01(x, y, nthRoot, false);\n\t              }\n\t              else {\n\t                // throw exception\n\t                throw new Error('Root must be non-zero');\n\t              }\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, nthRoot);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return nthRoot(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return nthRoot(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return nthRoot(x, matrix(y));\n\t    },\n\t    \n\t    'Matrix, number | BigNumber': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, nthRoot, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, nthRoot, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'number | BigNumber, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          // density must be one (no zeros in matrix)\n\t          if (y.density() === 1) {\n\t            // sparse - scalar\n\t            c = algorithm11(y, x, nthRoot, true);\n\t          }\n\t          else {\n\t            // throw exception\n\t            throw new Error('Root must be non-zero');\n\t          }\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, nthRoot, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, number | BigNumber': function (x, y) {\n\t      // use matrix implementation\n\t      return nthRoot(matrix(x), y).valueOf();\n\t    },\n\n\t    'number | BigNumber, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return nthRoot(x, matrix(y)).valueOf();\n\t    }\n\t  });\n\n\t  nthRoot.toTex = {2: '\\\\sqrt[${args[1]}]{${args[0]}}'};\n\n\t  return nthRoot;\n\n\t  /**\n\t   * Calculate the nth root of a for BigNumbers, solve x^root == a\n\t   * http://rosettacode.org/wiki/Nth_root#JavaScript\n\t   * @param {BigNumber} a\n\t   * @param {BigNumber} root\n\t   * @private\n\t   */\n\t  function _bigNthRoot(a, root) {\n\t    var precision = type.BigNumber.precision;\n\t    var Big = type.BigNumber.clone({precision: precision + 2});\n\t    var zero = new type.BigNumber(0);\n\n\t    var one = new Big(1);\n\t    var inv = root.isNegative();\n\t    if (inv) {\n\t      root = root.neg();\n\t    }\n\n\t    if (root.isZero()) {\n\t      throw new Error('Root must be non-zero');\n\t    }\n\t    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n\t      throw new Error('Root must be odd when a is negative.');\n\t    }\n\n\t    // edge cases zero and infinity\n\t    if (a.isZero()) {\n\t      return inv ? new Big(Infinity) : 0;\n\t    }\n\t    if (!a.isFinite()) {\n\t      return inv ? zero : a;\n\t    }\n\n\t    var x = a.abs().pow(one.div(root));\n\t    // If a < 0, we require that root is an odd integer,\n\t    // so (-1) ^ (1/root) = -1\n\t    x = a.isNeg() ? x.neg() : x;\n\t    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n\t  }\n\t}\n\n\t/**\n\t * Calculate the nth root of a, solve x^root == a\n\t * http://rosettacode.org/wiki/Nth_root#JavaScript\n\t * @param {number} a\n\t * @param {number} root\n\t * @private\n\t */\n\tfunction _nthRoot(a, root) {\n\t  var inv = root < 0;\n\t  if (inv) {\n\t    root = -root;\n\t  }\n\n\t  if (root === 0) {\n\t    throw new Error('Root must be non-zero');\n\t  }\n\t  if (a < 0 && (Math.abs(root) % 2 != 1)) {\n\t    throw new Error('Root must be odd when a is negative.');\n\t  }\n\n\t  // edge cases zero and infinity\n\t  if (a == 0) {\n\t    return inv ? Infinity : 0;\n\t  }\n\t  if (!isFinite(a)) {\n\t    return inv ? 0 : a;\n\t  }\n\n\t  var x = Math.pow(Math.abs(a), 1/root);\n\t  // If a < 0, we require that root is an odd integer,\n\t  // so (-1) ^ (1/root) = -1\n\t  x = a < 0 ? -x : x;\n\t  return inv ? 1 / x : x;\n\n\t  // Very nice algorithm, but fails with nthRoot(-2, 3).\n\t  // Newton's method has some well-known problems at times:\n\t  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n\t  /*\n\t  var x = 1; // Initial guess\n\t  var xPrev = 1;\n\t  var i = 0;\n\t  var iMax = 10000;\n\t  do {\n\t    var delta = (a / Math.pow(x, root - 1) - x) / root;\n\t    xPrev = x;\n\t    x = x + delta;\n\t    i++;\n\t  }\n\t  while (xPrev !== x && i < iMax);\n\n\t  if (xPrev !== x) {\n\t    throw new Error('Function nthRoot failed to converge');\n\t  }\n\n\t  return inv ? 1 / x : x;\n\t  */\n\t}\n\n\t/**\n\t * Calculate the nth root of a Complex Number a using De Moviers Theorem.\n\t * @param  {Complex} a\n\t * @param  {number} root\n\t * @return {Array} array or n Complex Roots in Polar Form.\n\t */\n\tfunction _nthComplexRoot(a, root) {\n\t  if (root < 0) throw new Error('Root must be greater than zero');\n\t  if (root === 0) throw new Error('Root must be non-zero');\n\t  if (root % 1 !== 0) throw new Error('Root must be an integer');  \n\t  var arg = a.arg();\n\t  var abs = a.abs();\n\t  var roots = [];\n\t  var r = Math.pow(abs, 1/root);\n\t  for(var k = 0; k < root; k++) {\n\t    roots.push({r: r, phi: (arg + 2 * Math.PI * k)/root});\n\t  }\n\t  return roots;\n\t}\n\n\texports.name = 'nthRoot';\n\texports.factory = factory;\n\n\n/***/ },\n/* 380 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar toFixed = __webpack_require__(6).toFixed;\n\tvar deepMap = __webpack_require__(19);\n\n\tvar NO_INT = 'Number of decimals in function round must be an integer';\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(381));\n\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Round a value towards the nearest integer.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.round(x)\n\t   *    math.round(x, n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.round(3.2);              // returns number 3\n\t   *    math.round(3.8);              // returns number 4\n\t   *    math.round(-4.2);             // returns number -4\n\t   *    math.round(-4.7);             // returns number -5\n\t   *    math.round(math.pi, 3);       // returns number 3.142\n\t   *    math.round(123.45678, 2);     // returns number 123.46\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.round(c);                // returns Complex 3 - 3i\n\t   *\n\t   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ceil, fix, floor\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n\t   */\n\t  var round = typed('round', {\n\n\t    'number': Math.round,\n\n\t    'number, number': function (x, n) {\n\t      if (!isInteger(n))   {throw new TypeError(NO_INT);}\n\t      if (n < 0 || n > 15) {throw new Error('Number of decimals in function round must be in te range of 0-15');}\n\n\t      return _round(x, n);\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.round();\n\t    },\n\n\t    'Complex, number': function (x, n) {\n\t      if (n % 1) {throw new TypeError(NO_INT);}\n\t      \n\t      return x.round(n);\n\t    },\n\n\t    'Complex, BigNumber': function (x, n) {\n\t      if (!n.isInteger()) {throw new TypeError(NO_INT);}\n\n\t      var _n = n.toNumber();\n\t      return x.round(_n);\n\t    },\n\n\t    'number, BigNumber': function (x, n) {\n\t      if (!n.isInteger()) {throw new TypeError(NO_INT);}\n\n\t      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.toDecimalPlaces(0);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, n) {\n\t      if (!n.isInteger()) {throw new TypeError(NO_INT);}\n\n\t      return x.toDecimalPlaces(n.toNumber());\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.round();\n\t    },\n\n\t    'Fraction, number': function (x, n) {\n\t      if (n % 1) {throw new TypeError(NO_INT);}\n\t      return x.round(n);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since round(0) = 0\n\t      return deepMap(x, round, true);\n\t    },\n\n\t    'Matrix, number | BigNumber': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, round, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, round, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'number | Complex | BigNumber, Matrix': function (x, y) {\n\t      // check scalar is zero\n\t      if (!equalScalar(x, 0)) {\n\t        // result\n\t        var c;\n\t        // check storage format\n\t        switch (y.storage()) {\n\t          case 'sparse':\n\t            c = algorithm12(y, x, round, true);\n\t            break;\n\t          default:\n\t            c = algorithm14(y, x, round, true);\n\t            break;\n\t        }\n\t        return c;\n\t      }\n\t      // do not execute algorithm, result will be a zero matrix\n\t      return zeros(y.size(), y.storage());\n\t    },\n\n\t    'Array, number | BigNumber': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, round, false).valueOf();\n\t    },\n\n\t    'number | Complex | BigNumber, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, round, true).valueOf();\n\t    }\n\t  });\n\n\t  round.toTex = {\n\t    1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rceil',\n\t    2: undefined  // use default template\n\t  };\n\n\t  return round;\n\t}\n\n\t/**\n\t * round a number to the given number of decimals, or to zero if decimals is\n\t * not provided\n\t * @param {number} value\n\t * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n\t * @return {number} roundedValue\n\t * @private\n\t */\n\tfunction _round (value, decimals) {\n\t  return parseFloat(toFixed(value, decimals));\n\t}\n\n\texports.name = 'round';\n\texports.factory = factory;\n\n\n/***/ },\n/* 381 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar resize = __webpack_require__(40).resize;\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Create a matrix filled with zeros. The created matrix can have one or\n\t   * multiple dimensions.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.zeros(m)\n\t   *    math.zeros(m, format)\n\t   *    math.zeros(m, n)\n\t   *    math.zeros(m, n, format)\n\t   *    math.zeros([m, n])\n\t   *    math.zeros([m, n], format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.zeros(3);                  // returns [0, 0, 0]\n\t   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]\n\t   *    math.zeros(3, 'dense');         // returns [0, 0, 0]\n\t   *\n\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ones, eye, size, range\n\t   *\n\t   * @param {...number | Array} size    The size of each dimension of the matrix\n\t   * @param {string} [format]           The Matrix storage format\n\t   *\n\t   * @return {Array | Matrix}           A matrix filled with zeros\n\t   */\n\t  var zeros = typed('zeros', {\n\t    '': function () {\n\t      return (config.matrix === 'Array')\n\t          ? _zeros([])\n\t          : _zeros([], 'default');\n\t    },\n\n\t    // math.zeros(m, n, p, ..., format)\n\t    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n\t    '...number | BigNumber | string': function (size) {\n\t      var last = size[size.length - 1];\n\t      if (typeof last === 'string') {\n\t        var format = size.pop();\n\t        return _zeros(size, format);\n\t      }\n\t      else if (config.matrix === 'Array') {\n\t        return _zeros(size);\n\t      }\n\t      else {\n\t        return _zeros(size, 'default');\n\t      }\n\t    },\n\n\t    'Array': _zeros,\n\n\t    'Matrix': function (size) {\n\t      var format = size.storage();\n\t      return _zeros(size.valueOf(), format);\n\t    },\n\n\t    'Array | Matrix, string': function (size, format) {\n\t      return _zeros (size.valueOf(), format);\n\t    }\n\t  });\n\n\t  zeros.toTex = undefined; // use default template\n\n\t  return zeros;\n\n\t  /**\n\t   * Create an Array or Matrix with zeros\n\t   * @param {Array} size\n\t   * @param {string} [format='default']\n\t   * @return {Array | Matrix}\n\t   * @private\n\t   */\n\t  function _zeros(size, format) {\n\t    var hasBigNumbers = _normalize(size);\n\t    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;\n\t    _validate(size);\n\n\t    if (format) {\n\t      // return a matrix\n\t      var m = matrix(format);\n\t      if (size.length > 0) {\n\t        return m.resize(size, defaultValue);\n\t      }\n\t      return m;\n\t    }\n\t    else {\n\t      // return an Array\n\t      var arr = [];\n\t      if (size.length > 0) {\n\t        return resize(arr, size, defaultValue);\n\t      }\n\t      return arr;\n\t    }\n\t  }\n\n\t  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\t  function _normalize(size) {\n\t    var hasBigNumbers = false;\n\t    size.forEach(function (value, index, arr) {\n\t      if (value && value.isBigNumber === true) {\n\t        hasBigNumbers = true;\n\t        arr[index] = value.toNumber();\n\t      }\n\t    });\n\t    return hasBigNumbers;\n\t  }\n\n\t  // validate arguments\n\t  function _validate (size) {\n\t    size.forEach(function (value) {\n\t      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n\t        throw new Error('Parameters in function zeros must be positive integers');\n\t      }\n\t    });\n\t  }\n\t}\n\n\t// TODO: zeros contains almost the same code as ones. Reuse this?\n\n\texports.name = 'zeros';\n\texports.factory = factory;\n\n\n/***/ },\n/* 382 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar number = __webpack_require__(6);\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the sign of a value. The sign of a value x is:\n\t   *\n\t   * -  1 when x > 1\n\t   * - -1 when x < 0\n\t   * -  0 when x == 0\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sign(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sign(3.5);               // returns 1\n\t   *    math.sign(-4.2);              // returns -1\n\t   *    math.sign(0);                 // returns 0\n\t   *\n\t   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]\n\t   *\n\t   * See also:\n\t   *\n\t   *    abs\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t   *            The number for which to determine the sign\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n\t   *            The sign of `x`\n\t   */\n\t  var sign = typed('sign', {\n\t    'number': number.sign,\n\n\t    'Complex': function (x) {\n\t      return x.sign();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.BigNumber(x.cmp(0));\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return new type.Fraction(x.s, 1);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since sign(0) = 0\n\t      return deepMap(x, sign, true);\n\t    },\n\n\t    'Unit': function(x) {\n\t      return sign(x.value);\n\t    }\n\t  });\n\n\t  sign.toTex = {1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'};\n\n\t  return sign;\n\t}\n\n\texports.name = 'sign';\n\texports.factory = factory;\n\n\n\n/***/ },\n/* 383 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the square of a value, `x * x`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.square(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.square(2);           // returns number 4\n\t   *    math.square(3);           // returns number 9\n\t   *    math.pow(3, 2);           // returns number 9\n\t   *    math.multiply(3, 3);      // returns number 9\n\t   *\n\t   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, cube, sqrt, pow\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t   *            Number for which to calculate the square\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n\t   *            Squared value\n\t   */\n\t  var square = typed('square', {\n\t    'number': function (x) {\n\t      return x * x;\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.mul(x);\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.times(x);\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.mul(x);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since square(0) = 0\n\t      return deepMap(x, square, true);\n\t    },\n\n\t    'Unit': function(x) {\n\t      return x.pow(2);\n\t    }\n\t  });\n\n\t  square.toTex = {1: '\\\\left(${args[0]}\\\\right)^2'};\n\n\t  return square;\n\t}\n\n\texports.name = 'square';\n\texports.factory = factory;\n\n\n/***/ },\n/* 384 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Unary plus operation.\n\t   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.unaryPlus(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.unaryPlus(3.5);      // returns 3.5\n\t   *    math.unaryPlus(1);     // returns 1\n\t   *\n\t   * See also:\n\t   *\n\t   *    unaryMinus, add, subtract\n\t   *\n\t   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n\t   *            Input value\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n\t   */\n\t  var unaryPlus = typed('unaryPlus', {\n\t    'number': function (x) {\n\t      return x;\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x; // complex numbers are immutable\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x; // bignumbers are immutable\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x; // fractions are immutable\n\t    },\n\n\t    'Unit': function (x) {\n\t      return x.clone();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since unaryPlus(0) = 0\n\t      return deepMap(x, unaryPlus, true);\n\t    },\n\n\t    'boolean | string | null': function (x) {\n\t      // convert to a number or bignumber\n\t      return (config.number == 'BigNumber') ? new type.BigNumber(+x): +x;\n\t    }\n\t  });\n\n\t  unaryPlus.toTex = {\n\t    1: latex.operators['unaryPlus'] + '\\\\left(${args[0]}\\\\right)'\n\t  };\n\n\t  return unaryPlus;\n\t}\n\n\texports.name = 'unaryPlus';\n\texports.factory = factory;\n\n\n/***/ },\n/* 385 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Calculate the extended greatest common divisor for two values.\n\t   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.xgcd(a, b)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.xgcd(8, 12);             // returns [4, -1, 1]\n\t   *    math.gcd(8, 12);              // returns 4\n\t   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]\n\t   *\n\t   * See also:\n\t   *\n\t   *    gcd, lcm\n\t   *\n\t   * @param {number | BigNumber} a  An integer number\n\t   * @param {number | BigNumber} b  An integer number\n\t   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n\t   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n\t   */\n\t  var xgcd = typed('xgcd', {\n\t    'number, number': _xgcd,\n\t    'BigNumber, BigNumber': _xgcdBigNumber\n\t    // TODO: implement support for Fraction\n\t  });\n\n\t  xgcd.toTex = undefined; // use default template\n\n\t  return xgcd;\n\n\t  /**\n\t   * Calculate xgcd for two numbers\n\t   * @param {number} a\n\t   * @param {number} b\n\t   * @return {number} result\n\t   * @private\n\t   */\n\t  function _xgcd (a, b) {\n\t    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n\t    var t, // used to swap two variables\n\t        q, // quotient\n\t        r, // remainder\n\t        x = 0, lastx = 1,\n\t        y = 1, lasty = 0;\n\n\t    if (!isInteger(a) || !isInteger(b)) {\n\t      throw new Error('Parameters in function xgcd must be integer numbers');\n\t    }\n\n\t    while (b) {\n\t      q = Math.floor(a / b);\n\t      r = a % b;\n\n\t      t = x;\n\t      x = lastx - q * x;\n\t      lastx = t;\n\n\t      t = y;\n\t      y = lasty - q * y;\n\t      lasty = t;\n\n\t      a = b;\n\t      b = r;\n\t    }\n\n\t    var res;\n\t    if (a < 0) {\n\t      res = [-a, -lastx, -lasty];\n\t    }\n\t    else {\n\t      res = [a, a ? lastx : 0, lasty];\n\t    }\n\t    return (config.matrix === 'Array') ? res : matrix(res);\n\t  }\n\n\t  /**\n\t   * Calculate xgcd for two BigNumbers\n\t   * @param {BigNumber} a\n\t   * @param {BigNumber} b\n\t   * @return {BigNumber[]} result\n\t   * @private\n\t   */\n\t  function _xgcdBigNumber(a, b) {\n\t    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n\t    var t, // used to swap two variables\n\t        q, // quotient\n\t        r, // remainder\n\t        zero = new type.BigNumber(0),\n\t        one = new type.BigNumber(1),\n\t        x = zero,\n\t        lastx = one,\n\t        y = one,\n\t        lasty = zero;\n\n\t    if (!a.isInt() || !b.isInt()) {\n\t      throw new Error('Parameters in function xgcd must be integer numbers');\n\t    }\n\n\t    //console.log('start', [a, b].toString())\n\n\t    while (!b.isZero()) {\n\t      //console.log('inner', [a, b, t, q, r, x, y, lastx, lasty].toString());\n\t      q = a.div(b).floor();\n\t      r = a.mod(b);\n\t      //console.log('MOD', [a, b, a.mod(b), r].toString())\n\n\t      t = x;\n\t      x = lastx.minus(q.times(x));\n\t      lastx = t;\n\n\t      t = y;\n\t      y = lasty.minus(q.times(y));\n\t      lasty = t;\n\n\t      a = b;\n\t      b = r;\n\n\t      //console.log('inner end', [a, b, t, q, r, x, y, lastx, lasty].toString());\n\t    }\n\n\t    //console.log('end', [a, lastx, lasty].toString())\n\n\t    var res;\n\t    if (a.lt(zero)) {\n\t      res = [a.neg(), lastx.neg(), lasty.neg()];\n\t    }\n\t    else {\n\t      res = [a, !a.isZero() ? lastx : 0, lasty];\n\t    }\n\t    return (config.matrix === 'Array') ? res : matrix(res);\n\t  }\n\t}\n\n\texports.name = 'xgcd';\n\texports.factory = factory;\n\n\n/***/ },\n/* 386 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(387),\n\t  __webpack_require__(391),\n\t  __webpack_require__(392),\n\t  __webpack_require__(394),\n\t  __webpack_require__(396),\n\t  __webpack_require__(399),\n\t  __webpack_require__(401)\n\t];\n\n\n/***/ },\n/* 387 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigBitAnd = __webpack_require__(388);\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm02 = load(__webpack_require__(360));\n\t  var algorithm06 = load(__webpack_require__(372));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Bitwise AND two values, `x & y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitAnd(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitAnd(53, 131);               // returns number 1\n\t   *\n\t   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x First value to and\n\t   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n\t   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n\t   */\n\t  var bitAnd = typed('bitAnd', {\n\n\t    'number, number': function (x, y) {\n\t      if (!isInteger(x) || !isInteger(y)) {\n\t        throw new Error('Integers expected in function bitAnd');\n\t      }\n\n\t      return x & y;\n\t    },\n\n\t    'BigNumber, BigNumber': bigBitAnd,\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse & sparse\n\t              c = algorithm06(x, y, bitAnd, false);\n\t              break;\n\t            default:\n\t              // sparse & dense\n\t              c = algorithm02(y, x, bitAnd, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense & sparse\n\t              c = algorithm02(x, y, bitAnd, false);\n\t              break;\n\t            default:\n\t              // dense & dense\n\t              c = algorithm13(x, y, bitAnd);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\t    \n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return bitAnd(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return bitAnd(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return bitAnd(x, matrix(y));\n\t    },\n\t    \n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, bitAnd, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, bitAnd, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(y, x, bitAnd, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, bitAnd, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, bitAnd, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, bitAnd, true).valueOf();\n\t    }\n\t  });\n\n\t  bitAnd.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['bitAnd'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return bitAnd;\n\t}\n\n\texports.name = 'bitAnd';\n\texports.factory = factory;\n\n\n/***/ },\n/* 388 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar bitwise = __webpack_require__(389);\n\n\t/**\n\t * Bitwise and for Bignumbers\n\t *\n\t * Special Cases:\n\t *   N &  n =  N\n\t *   n &  0 =  0\n\t *   n & -1 =  n\n\t *   n &  n =  n\n\t *   I &  I =  I\n\t *  -I & -I = -I\n\t *   I & -I =  0\n\t *   I &  n =  n\n\t *   I & -n =  I\n\t *  -I &  n =  0\n\t *  -I & -n = -I\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` & `y`, is fully precise\n\t * @private\n\t */\n\tmodule.exports = function bitAnd(x, y) {\n\t  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n\t    throw new Error('Integers expected in function bitAnd');\n\t  }\n\n\t  var BigNumber = x.constructor;\n\t  if (x.isNaN() || y.isNaN()) {\n\t    return new BigNumber(NaN);\n\t  }\n\n\t  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n\t    return x;\n\t  }\n\t  if (y.isZero() || x.eq(-1)) {\n\t    return y;\n\t  }\n\n\t  if (!x.isFinite() || !y.isFinite()) {\n\t    if (!x.isFinite() && !y.isFinite()) {\n\t      if (x.isNegative() == y.isNegative()) {\n\t        return x;\n\t      }\n\t      return new BigNumber(0);\n\t    }\n\t    if (!x.isFinite()) {\n\t      if (y.isNegative()) {\n\t        return x;\n\t      }\n\t      if (x.isNegative()) {\n\t        return new BigNumber(0);\n\t      }\n\t      return y;\n\t    }\n\t    if (!y.isFinite()) {\n\t      if (x.isNegative()) {\n\t        return y;\n\t      }\n\t      if (y.isNegative()) {\n\t        return new BigNumber(0);\n\t      }\n\t      return x;\n\t    }\n\t  }\n\t  return bitwise(x, y, function (a, b) { return a & b });\n\t};\n\n\n/***/ },\n/* 389 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar bitNot = __webpack_require__(390);\n\n\t/**\n\t * Applies bitwise function to numbers\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @param {function (a, b)} func\n\t * @return {BigNumber}\n\t */\n\tmodule.exports = function bitwise(x, y, func) {\n\t  var BigNumber = x.constructor;\n\n\t  var xBits, yBits;\n\t  var xSign = +(x.s < 0);\n\t  var ySign = +(y.s < 0);\n\t  if (xSign) {\n\t    xBits = decCoefficientToBinaryString(bitNot(x));\n\t    for (var i = 0; i < xBits.length; ++i) {\n\t      xBits[i] ^= 1;\n\t    }\n\t  } else {\n\t    xBits = decCoefficientToBinaryString(x);\n\t  }\n\t  if (ySign) {\n\t    yBits = decCoefficientToBinaryString(bitNot(y));\n\t    for (var i = 0; i < yBits.length; ++i) {\n\t      yBits[i] ^= 1;\n\t    }\n\t  } else {\n\t    yBits = decCoefficientToBinaryString(y);\n\t  }\n\n\t  var minBits, maxBits, minSign;\n\t  if (xBits.length <= yBits.length) {\n\t    minBits = xBits;\n\t    maxBits = yBits;\n\t    minSign = xSign;\n\t  } else {\n\t    minBits = yBits;\n\t    maxBits = xBits;\n\t    minSign = ySign;\n\t  }\n\n\t  var shortLen = minBits.length;\n\t  var longLen = maxBits.length;\n\t  var expFuncVal = func(xSign, ySign) ^ 1;\n\t  var outVal = new BigNumber(expFuncVal ^ 1);\n\t  var twoPower = new BigNumber(1);\n\t  var two = new BigNumber(2);\n\n\t  var prevPrec = BigNumber.precision;\n\t  BigNumber.config({precision: 1E9});\n\n\t  while (shortLen > 0) {\n\t    if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {\n\t      outVal = outVal.plus(twoPower);\n\t    }\n\t    twoPower = twoPower.times(two);\n\t  }\n\t  while (longLen > 0) {\n\t    if (func(minSign, maxBits[--longLen]) == expFuncVal) {\n\t      outVal = outVal.plus(twoPower);\n\t    }\n\t    twoPower = twoPower.times(two);\n\t  }\n\n\t  BigNumber.config({precision: prevPrec});\n\n\t  if (expFuncVal == 0) {\n\t    outVal.s = -outVal.s;\n\t  }\n\t  return outVal;\n\t};\n\n\t/* Extracted from decimal.js, and edited to specialize. */\n\tfunction decCoefficientToBinaryString (x) {\n\t  // Convert to string\n\t  var a = x.d; // array with digits\n\t  var r = a[0] + '';\n\n\t  for (var i = 1; i < a.length; ++i) {\n\t    var s = a[i] + '';\n\t    for (var z = 7 - s.length; z--; ) {\n\t      s = '0' + s;\n\t    }\n\n\t    r += s;\n\t  }\n\n\t  var j;\n\t  for (j = r.length - 1; r.charAt(j) == '0'; --j);\n\n\t  var xe = x.e;\n\t  var str = r.slice(0, j + 1 || 1);\n\t  var strL = str.length;\n\t  if (xe > 0) {\n\t    if (++xe > strL) {\n\t      // Append zeros.\n\t      for (xe -= strL; xe--; str += '0');\n\t    } else if (xe < strL) {\n\t      str = str.slice(0, xe) + '.' + str.slice(xe);\n\t    }\n\t  }\n\n\t  // Convert from base 10 (decimal) to base 2\n\t  var arr = [0];\n\t  for (var i = 0; i < str.length; ) {\n\t    for (var arrL = arr.length; arrL--; arr[arrL] *= 10);\n\n\t    arr[0] += str.charAt(i++) << 0;  // convert to int\n\t    for (var j = 0; j < arr.length; ++j) {\n\t      if (arr[j] > 1) {\n\t        if (arr[j + 1] == null) {\n\t          arr[j + 1] = 0;\n\t        }\n\n\t        arr[j + 1] += arr[j] >> 1;\n\t        arr[j] &= 1;\n\t      }\n\t    }\n\t  }\n\n\t  return arr.reverse();\n\t}\n\n\n/***/ },\n/* 390 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Bitwise not\n\t * @param {BigNumber} value\n\t * @return {BigNumber} Result of ~`x`, fully precise\n\t *\n\t */\n\tmodule.exports = function bitNot (x) {\n\t  if (x.isFinite() && !x.isInteger()) {\n\t    throw new Error('Integer expected in function bitNot');\n\t  }\n\n\t  var BigNumber = x.constructor;\n\t  var prevPrec = BigNumber.precision;\n\t  BigNumber.config({precision: 1E9});\n\n\t  var x = x.plus(new BigNumber(1));\n\t  x.s = -x.s || null;\n\n\t  BigNumber.config({precision: prevPrec});\n\t  return x;\n\t};\n\n\n/***/ },\n/* 391 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\tvar bigBitNot = __webpack_require__(390);\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Bitwise NOT value, `~x`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitNot(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitNot(1);               // returns number -2\n\t   *\n\t   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x Value to not\n\t   * @return {number | BigNumber | Array | Matrix} NOT of `x`\n\t   */\n\t  var bitNot = typed('bitNot', {\n\t    'number': function (x) {\n\t      if (!isInteger(x)) {\n\t        throw new Error('Integer expected in function bitNot');\n\t      }\n\n\t      return ~x;\n\t    },\n\n\t    'BigNumber': bigBitNot,\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, bitNot);\n\t    }\n\t  });\n\n\t  bitNot.toTex = {\n\t    1: latex.operators['bitNot'] + '\\\\left(${args[0]}\\\\right)'\n\t  };\n\n\t  return bitNot;\n\t}\n\n\texports.name = 'bitNot';\n\texports.factory = factory;\n\n\n/***/ },\n/* 392 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigBitOr = __webpack_require__(393);\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm04 = load(__webpack_require__(55));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Bitwise OR two values, `x | y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the lowest print base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitOr(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitOr(1, 2);               // returns number 3\n\t   *\n\t   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x First value to or\n\t   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n\t   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`\n\t   */\n\t  var bitOr = typed('bitOr', {\n\n\t    'number, number': function (x, y) {\n\t      if (!isInteger(x) || !isInteger(y)) {\n\t        throw new Error('Integers expected in function bitOr');\n\t      }\n\n\t      return x | y;\n\t    },\n\n\t    'BigNumber, BigNumber': bigBitOr,\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm04(x, y, bitOr);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm01(y, x, bitOr, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm01(x, y, bitOr, false);\n\t              break;\n\t            default:\n\t              c = algorithm13(x, y, bitOr);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return bitOr(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return bitOr(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return bitOr(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm10(x, y, bitOr, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, bitOr, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm10(y, x, bitOr, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, bitOr, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, bitOr, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, bitOr, true).valueOf();\n\t    }\n\t  });\n\n\t  bitOr.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['bitOr'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return bitOr;\n\t}\n\n\texports.name = 'bitOr';\n\texports.factory = factory;\n\n\n/***/ },\n/* 393 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar bitwise = __webpack_require__(389);\n\n\t/**\n\t * Bitwise OR for BigNumbers\n\t *\n\t * Special Cases:\n\t *   N |  n =  N\n\t *   n |  0 =  n\n\t *   n | -1 = -1\n\t *   n |  n =  n\n\t *   I |  I =  I\n\t *  -I | -I = -I\n\t *   I | -n = -1\n\t *   I | -I = -1\n\t *   I |  n =  I\n\t *  -I |  n = -I\n\t *  -I | -n = -n\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` | `y`, fully precise\n\t */\n\tmodule.exports = function bitOr (x, y) {\n\t  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n\t    throw new Error('Integers expected in function bitOr');\n\t  }\n\n\t  var BigNumber = x.constructor;\n\t  if (x.isNaN() || y.isNaN()) {\n\t    return new BigNumber(NaN);\n\t  }\n\n\t  var negOne = new BigNumber(-1);\n\t  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n\t    return y;\n\t  }\n\t  if (y.isZero() || x.eq(negOne)) {\n\t    return x;\n\t  }\n\n\t  if (!x.isFinite() || !y.isFinite()) {\n\t    if ((!x.isFinite() && !x.isNegative() && y.isNegative()) ||\n\t        (x.isNegative() && !y.isNegative() && !y.isFinite())) {\n\t      return negOne;\n\t    }\n\t    if (x.isNegative() && y.isNegative()) {\n\t      return x.isFinite() ? x : y;\n\t    }\n\t    return x.isFinite() ? y : x;\n\t  }\n\n\t  return bitwise(x, y, function (a, b) { return a | b });\n\t};\n\n\n/***/ },\n/* 394 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigBitXor = __webpack_require__(395);\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Bitwise XOR two values, `x ^ y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitXor(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitXor(1, 2);               // returns number 3\n\t   *\n\t   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x First value to xor\n\t   * @param  {number | BigNumber | Array | Matrix} y Second value to xor\n\t   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`\n\t   */\n\t  var bitXor = typed('bitXor', {\n\n\t    'number, number': function (x, y) {\n\t      if (!isInteger(x) || !isInteger(y)) {\n\t        throw new Error('Integers expected in function bitXor');\n\t      }\n\n\t      return x ^ y;\n\t    },\n\n\t    'BigNumber, BigNumber': bigBitXor,\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm07(x, y, bitXor);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm03(y, x, bitXor, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm03(x, y, bitXor, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, bitXor);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return bitXor(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return bitXor(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return bitXor(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(x, y, bitXor, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, bitXor, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, bitXor, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, bitXor, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, bitXor, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, bitXor, true).valueOf();\n\t    }\n\t  });\n\n\t  bitXor.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['bitXor'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return bitXor;\n\t}\n\n\texports.name = 'bitXor';\n\texports.factory = factory;\n\n\n/***/ },\n/* 395 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar bitwise = __webpack_require__(389);\n\tvar bitNot = __webpack_require__(390);\n\n\t/**\n\t * Bitwise XOR for BigNumbers\n\t *\n\t * Special Cases:\n\t *   N ^  n =  N\n\t *   n ^  0 =  n\n\t *   n ^  n =  0\n\t *   n ^ -1 = ~n\n\t *   I ^  n =  I\n\t *   I ^ -n = -I\n\t *   I ^ -I = -1\n\t *  -I ^  n = -I\n\t *  -I ^ -n =  I\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` ^ `y`, fully precise\n\t *\n\t */\n\tmodule.exports = function bitXor(x, y) {\n\t  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n\t    throw new Error('Integers expected in function bitXor');\n\t  }\n\n\t  var BigNumber = x.constructor;\n\t  if (x.isNaN() || y.isNaN()) {\n\t    return new BigNumber(NaN);\n\t  }\n\t  if (x.isZero()) {\n\t    return y;\n\t  }\n\t  if (y.isZero()) {\n\t    return x;\n\t  }\n\n\t  if (x.eq(y)) {\n\t    return new BigNumber(0);\n\t  }\n\n\t  var negOne = new BigNumber(-1);\n\t  if (x.eq(negOne)) {\n\t    return bitNot(y);\n\t  }\n\t  if (y.eq(negOne)) {\n\t    return bitNot(x);\n\t  }\n\n\t  if (!x.isFinite() || !y.isFinite()) {\n\t    if (!x.isFinite() && !y.isFinite()) {\n\t      return negOne;\n\t    }\n\t    return new BigNumber(x.isNegative() == y.isNegative()\n\t        ?  Infinity\n\t        : -Infinity);\n\t  }\n\t  return bitwise(x, y, function (a, b) { return a ^ b });\n\t};\n\n\n/***/ },\n/* 396 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigLeftShift = __webpack_require__(397);\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(381));\n\n\t  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(360));\n\t  var algorithm08 = load(__webpack_require__(398));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.leftShift(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.leftShift(1, 2);               // returns number 4\n\t   *\n\t   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]\n\t   *\n\t   * See also:\n\t   *\n\t   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n\t   * @param  {number | BigNumber} y Amount of shifts\n\t   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\n\t   */\n\t  var leftShift = typed('leftShift', {\n\t    \n\t    'number, number': function (x, y) {\n\t      if (!isInteger(x) || !isInteger(y)) {\n\t        throw new Error('Integers expected in function leftShift');\n\t      }\n\n\t      return x << y;\n\t    },\n\n\t    'BigNumber, BigNumber': bigLeftShift,\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse & sparse\n\t              c = algorithm08(x, y, leftShift, false);\n\t              break;\n\t            default:\n\t              // sparse & dense\n\t              c = algorithm02(y, x, leftShift, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense & sparse\n\t              c = algorithm01(x, y, leftShift, false);\n\t              break;\n\t            default:\n\t              // dense & dense\n\t              c = algorithm13(x, y, leftShift);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return leftShift(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return leftShift(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return leftShift(x, matrix(y));\n\t    },\n\n\t    'Matrix, number | BigNumber': function (x, y) {\n\t      // check scalar\n\t      if (!equalScalar(y, 0)) {\n\t        // result\n\t        var c;\n\t        // check storage format\n\t        switch (x.storage()) {\n\t          case 'sparse':\n\t            c = algorithm11(x, y, leftShift, false);\n\t            break;\n\t          default:\n\t            c = algorithm14(x, y, leftShift, false);\n\t            break;\n\t        }\n\t        return c;\n\t      }\n\t      return x.clone();\n\t    },\n\n\t    'number | BigNumber, Matrix': function (x, y) {\n\t      // check scalar\n\t      if (!equalScalar(x, 0)) {\n\t        // result\n\t        var c;\n\t        // check storage format\n\t        switch (y.storage()) {\n\t          case 'sparse':\n\t            c = algorithm10(y, x, leftShift, true);\n\t            break;\n\t          default:\n\t            c = algorithm14(y, x, leftShift, true);\n\t            break;\n\t        }\n\t        return c;\n\t      }\n\t      return zeros(y.size(), y.storage());\n\t    },\n\n\t    'Array, number | BigNumber': function (x, y) {\n\t      // use matrix implementation\n\t      return leftShift(matrix(x), y).valueOf();\n\t    },\n\n\t    'number | BigNumber, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return leftShift(x, matrix(y)).valueOf();\n\t    }\n\t  });\n\n\t  leftShift.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['leftShift'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return leftShift;\n\t}\n\n\texports.name = 'leftShift';\n\texports.factory = factory;\n\n\n/***/ },\n/* 397 */\n/***/ function(module, exports) {\n\n\t\n\t/**\n\t * Bitwise left shift\n\t *\n\t * Special Cases:\n\t *  n << -n = N\n\t *  n <<  N = N\n\t *  N <<  n = N\n\t *  n <<  0 = n\n\t *  0 <<  n = 0\n\t *  I <<  I = N\n\t *  I <<  n = I\n\t *  n <<  I = I\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` << `y`\n\t *\n\t */\n\tmodule.exports = function leftShift (x, y) {\n\t  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n\t    throw new Error('Integers expected in function leftShift');\n\t  }\n\n\t  var BigNumber = x.constructor;\n\t  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {\n\t    return new BigNumber(NaN);\n\t  }\n\t  if (x.isZero() || y.isZero()) {\n\t    return x;\n\t  }\n\t  if (!x.isFinite() && !y.isFinite()) {\n\t    return new BigNumber(NaN);\n\t  }\n\n\t  // Math.pow(2, y) is fully precise for y < 55, and fast\n\t  if (y.lt(55)) {\n\t    return x.times(Math.pow(2, y.toNumber()) + '');\n\t  }\n\t  return x.times(new BigNumber(2).pow(y));\n\t};\n\n\n/***/ },\n/* 398 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar DimensionError = __webpack_require__(42);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var equalScalar = load(__webpack_require__(48));\n\n\t  var SparseMatrix = type.SparseMatrix;\n\n\t  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n\t   */\n\t  var algorithm08 = function (a, b, callback) {\n\t    // sparse matrix arrays\n\t    var avalues = a._values;\n\t    var aindex = a._index;\n\t    var aptr = a._ptr;\n\t    var asize = a._size;\n\t    var adt = a._datatype;\n\t    // sparse matrix arrays\n\t    var bvalues = b._values;\n\t    var bindex = b._index;\n\t    var bptr = b._ptr;\n\t    var bsize = b._size;\n\t    var bdt = b._datatype;\n\n\t    // validate dimensions\n\t    if (asize.length !== bsize.length)\n\t      throw new DimensionError(asize.length, bsize.length);\n\n\t    // check rows & columns\n\t    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n\t      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n\t    // sparse matrix cannot be a Pattern matrix\n\t    if (!avalues || !bvalues)\n\t      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n\n\t    // rows & columns\n\t    var rows = asize[0];\n\t    var columns = asize[1];\n\n\t    // datatype\n\t    var dt;\n\t    // equal signature to use\n\t    var eq = equalScalar;\n\t    // zero value\n\t    var zero = 0;\n\t    // callback signature to use\n\t    var cf = callback;\n\n\t    // process data types\n\t    if (typeof adt === 'string' && adt === bdt) {\n\t      // datatype\n\t      dt = adt;\n\t      // find signature that matches (dt, dt)\n\t      eq = typed.find(equalScalar, [dt, dt]);\n\t      // convert 0 to the same datatype\n\t      zero = typed.convert(0, dt);\n\t      // callback\n\t      cf = typed.find(callback, [dt, dt]);\n\t    }\n\n\t    // result arrays\n\t    var cvalues = [];\n\t    var cindex = [];\n\t    var cptr = [];\n\t    // matrix\n\t    var c = new SparseMatrix({\n\t      values: cvalues,\n\t      index: cindex,\n\t      ptr: cptr,\n\t      size: [rows, columns],\n\t      datatype: dt\n\t    });\n\n\t    // workspace\n\t    var x = [];\n\t    // marks indicating we have a value in x for a given column\n\t    var w = [];\n\n\t    // vars\n\t    var k, k0, k1, i;\n\n\t    // loop columns\n\t    for (var j = 0; j < columns; j++) {\n\t      // update cptr\n\t      cptr[j] = cindex.length;\n\t      // columns mark\n\t      var mark = j + 1;\n\t      // loop values in a\n\t      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t        // row\n\t        i = aindex[k];\n\t        // mark workspace\n\t        w[i] = mark;\n\t        // set value\n\t        x[i] = avalues[k];\n\t        // add index\n\t        cindex.push(i);\n\t      }\n\t      // loop values in b\n\t      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n\t        // row\n\t        i = bindex[k];\n\t        // check value exists in workspace\n\t        if (w[i] === mark) {\n\t          // evaluate callback\n\t          x[i] = cf(x[i], bvalues[k]);\n\t        }\n\t      }\n\t      // initialize first index in j\n\t      k = cptr[j];\n\t      // loop index in j\n\t      while (k < cindex.length) {\n\t        // row\n\t        i = cindex[k];\n\t        // value @ i\n\t        var v = x[i];\n\t        // check for zero value\n\t        if (!eq(v, zero)) {\n\t          // push value\n\t          cvalues.push(v);\n\t          // increment pointer\n\t          k++;\n\t        }\n\t        else {\n\t          // remove value @ i, do not increment pointer\n\t          cindex.splice(k, 1);\n\t        }\n\t      }      \n\t    }\n\t    // update cptr\n\t    cptr[columns] = cindex.length;\n\n\t    // return sparse matrix\n\t    return c;\n\t  };\n\n\t  return algorithm08;\n\t}\n\n\texports.name = 'algorithm08';\n\texports.factory = factory;\n\n\n/***/ },\n/* 399 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigRightArithShift = __webpack_require__(400);\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(381));\n\n\t  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(360));\n\t  var algorithm08 = load(__webpack_require__(398));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.rightArithShift(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.rightArithShift(4, 2);               // returns number 1\n\t   *\n\t   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n\t   * @param  {number | BigNumber} y Amount of shifts\n\t   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times\n\t   */\n\t  var rightArithShift = typed('rightArithShift', {\n\n\t    'number, number': function (x, y) {\n\t      if (!isInteger(x) || !isInteger(y)) {\n\t        throw new Error('Integers expected in function rightArithShift');\n\t      }\n\n\t      return x >> y;\n\t    },\n\n\t    'BigNumber, BigNumber': bigRightArithShift,\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse & sparse\n\t              c = algorithm08(x, y, rightArithShift, false);\n\t              break;\n\t            default:\n\t              // sparse & dense\n\t              c = algorithm02(y, x, rightArithShift, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense & sparse\n\t              c = algorithm01(x, y, rightArithShift, false);\n\t              break;\n\t            default:\n\t              // dense & dense\n\t              c = algorithm13(x, y, rightArithShift);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return rightArithShift(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return rightArithShift(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return rightArithShift(x, matrix(y));\n\t    },\n\n\t    'Matrix, number | BigNumber': function (x, y) {\n\t      // check scalar\n\t      if (!equalScalar(y, 0)) {\n\t        // result\n\t        var c;\n\t        // check storage format\n\t        switch (x.storage()) {\n\t          case 'sparse':\n\t            c = algorithm11(x, y, rightArithShift, false);\n\t            break;\n\t          default:\n\t            c = algorithm14(x, y, rightArithShift, false);\n\t            break;\n\t        }\n\t        return c;\n\t      }\n\t      return x.clone();\n\t    },\n\n\t    'number | BigNumber, Matrix': function (x, y) {\n\t      // check scalar\n\t      if (!equalScalar(x, 0)) {\n\t        // result\n\t        var c;\n\t        // check storage format\n\t        switch (y.storage()) {\n\t          case 'sparse':\n\t            c = algorithm10(y, x, rightArithShift, true);\n\t            break;\n\t          default:\n\t            c = algorithm14(y, x, rightArithShift, true);\n\t            break;\n\t        }\n\t        return c;\n\t      }\n\t      return zeros(y.size(), y.storage());\n\t    },\n\n\t    'Array, number | BigNumber': function (x, y) {\n\t      // use matrix implementation\n\t      return rightArithShift(matrix(x), y).valueOf();\n\t    },\n\n\t    'number | BigNumber, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return rightArithShift(x, matrix(y)).valueOf();\n\t    }\n\t  });\n\n\t  rightArithShift.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['rightArithShift'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return rightArithShift;\n\t}\n\n\texports.name = 'rightArithShift';\n\texports.factory = factory;\n\n\n/***/ },\n/* 400 */\n/***/ function(module, exports) {\n\n\t/*\n\t * Special Cases:\n\t *   n >> -n =  N\n\t *   n >>  N =  N\n\t *   N >>  n =  N\n\t *   I >>  I =  N\n\t *   n >>  0 =  n\n\t *   I >>  n =  I\n\t *  -I >>  n = -I\n\t *  -I >>  I = -I\n\t *   n >>  I =  I\n\t *  -n >>  I = -1\n\t *   0 >>  n =  0\n\t *\n\t * @param {BigNumber} value\n\t * @param {BigNumber} value\n\t * @return {BigNumber} Result of `x` >> `y`\n\t *\n\t */\n\tmodule.exports = function rightArithShift (x, y) {\n\t  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n\t    throw new Error('Integers expected in function rightArithShift');\n\t  }\n\n\t  var BigNumber = x.constructor;\n\t  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {\n\t    return new BigNumber(NaN);\n\t  }\n\t  if (x.isZero() || y.isZero()) {\n\t    return x;\n\t  }\n\t  if (!y.isFinite()) {\n\t    if (x.isNegative()) {\n\t      return new BigNumber(-1);\n\t    }\n\t    if (!x.isFinite()) {\n\t      return new BigNumber(NaN);\n\t    }\n\t    return new BigNumber(0);\n\t  }\n\n\t  // Math.pow(2, y) is fully precise for y < 55, and fast\n\t  if (y.lt(55)) {\n\t    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n\t  }\n\t  return x.div(new BigNumber(2).pow(y)).floor();\n\t};\n\n\n/***/ },\n/* 401 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(381));\n\n\t  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(360));\n\t  var algorithm08 = load(__webpack_require__(398));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.rightLogShift(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.rightLogShift(4, 2);               // returns number 1\n\t   *\n\t   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n\t   *\n\t   * @param  {number | Array | Matrix} x Value to be shifted\n\t   * @param  {number} y Amount of shifts\n\t   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n\t   */\n\n\t  var rightLogShift = typed('rightLogShift', {\n\n\t    'number, number': function (x, y) {\n\t      if (!isInteger(x) || !isInteger(y)) {\n\t        throw new Error('Integers expected in function rightLogShift');\n\t      }\n\n\t      return x >>> y;\n\t    },\n\n\t    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse & sparse\n\t              c = algorithm08(x, y, rightLogShift, false);\n\t              break;\n\t            default:\n\t              // sparse & dense\n\t              c = algorithm02(y, x, rightLogShift, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense & sparse\n\t              c = algorithm01(x, y, rightLogShift, false);\n\t              break;\n\t            default:\n\t              // dense & dense\n\t              c = algorithm13(x, y, rightLogShift);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return rightLogShift(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return rightLogShift(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return rightLogShift(x, matrix(y));\n\t    },\n\n\t    'Matrix, number | BigNumber': function (x, y) {\n\t      // check scalar\n\t      if (!equalScalar(y, 0)) {\n\t        // result\n\t        var c;\n\t        // check storage format\n\t        switch (x.storage()) {\n\t          case 'sparse':\n\t            c = algorithm11(x, y, rightLogShift, false);\n\t            break;\n\t          default:\n\t            c = algorithm14(x, y, rightLogShift, false);\n\t            break;\n\t        }\n\t        return c;\n\t      }\n\t      return x.clone();\n\t    },\n\n\t    'number | BigNumber, Matrix': function (x, y) {\n\t      // check scalar\n\t      if (!equalScalar(x, 0)) {\n\t        // result\n\t        var c;\n\t        // check storage format\n\t        switch (y.storage()) {\n\t          case 'sparse':\n\t            c = algorithm10(y, x, rightLogShift, true);\n\t            break;\n\t          default:\n\t            c = algorithm14(y, x, rightLogShift, true);\n\t            break;\n\t        }\n\t        return c;\n\t      }\n\t      return zeros(y.size(), y.storage());\n\t    },\n\n\t    'Array, number | BigNumber': function (x, y) {\n\t      // use matrix implementation\n\t      return rightLogShift(matrix(x), y).valueOf();\n\t    },\n\n\t    'number | BigNumber, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return rightLogShift(x, matrix(y)).valueOf();\n\t    }\n\t  });\n\n\t  rightLogShift.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['rightLogShift'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return rightLogShift;\n\t}\n\n\texports.name = 'rightLogShift';\n\texports.factory = factory;\n\n\n/***/ },\n/* 402 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(403),\n\t  __webpack_require__(409),\n\t  __webpack_require__(404),\n\t  __webpack_require__(410)\n\t];\n\n\n/***/ },\n/* 403 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var stirlingS2 = load(__webpack_require__(404));\n\t  var isNegative = load(__webpack_require__(356));\n\t  var isInteger = load(__webpack_require__(408));\n\n\t  /**\n\t   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\n\t   * bellNumbers only takes integer arguments.\n\t   * The following condition must be enforced: n >= 0\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.bellNumbers(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bellNumbers(3); // returns 5;\n\t   *    math.bellNumbers(8); // returns 4140;\n\t   *\n\t   * See also:\n\t   *\n\t   *    stirlingS2\n\t   *\n\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t   * @return {Number | BigNumber}     B(n)\n\t   */\n\t  var bellNumbers = typed('bellNumbers', {\n\t    'number | BigNumber': function (n) {\n\n\t      if (!isInteger(n) || isNegative(n)) {\n\t        throw new TypeError('Non-negative integer value expected in function bellNumbers');\n\t      }\n\n\t      // Sum (k=0, n) S(n,k).\n\t      var result = 0;\n\t      for(var i = 0; i <= n; i++) {\n\t        result = add(result, stirlingS2(n, i));\n\t      }\n\n\t      return result;\n\t    }\n\t  });\n\n\t  bellNumbers.toTex = {1: '\\\\mathrm{B}_{${args[0]}}'};\n\n\t  return bellNumbers;\n\t}\n\n\texports.name = 'bellNumbers';\n\texports.factory = factory;\n\n\n/***/ },\n/* 404 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(84));\n\t  var divide = load(__webpack_require__(317));\n\t  var pow = load(__webpack_require__(82));\n\t  var factorial = load(__webpack_require__(405));\n\t  var combinations = load(__webpack_require__(407));\n\t  var isNegative = load(__webpack_require__(356));\n\t  var isInteger = load(__webpack_require__(408));\n\t  var larger = load(__webpack_require__(64));\n\n\t  /**\n\t   * The Stirling numbers of the second kind, counts the number of ways to partition\n\t   * a set of n labelled objects into k nonempty unlabelled subsets.\n\t   * stirlingS2 only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   *  If n = k or k = 1, then s(n,k) = 1\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.stirlingS2(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.stirlingS2(5, 3); //returns 25\n\t   *\n\t   * See also:\n\t   *\n\t   *    Bell numbers\n\t   *\n\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t   * @param {Number | BigNumber} k    Number of objects in the subset\n\t   * @return {Number | BigNumber}     S(n,k)\n\t   */\n\t  var stirlingS2 = typed('stirlingS2', {\n\t    'number | BigNumber, number | BigNumber': function (n, k) {\n\t      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n\t        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n\t      }\n\t      else if (larger(k, n)) {\n\t        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n\t      }\n\n\t      // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]\n\t      var kFactorial = factorial(k);\n\t      var result = 0;\n\t      for(var i = 0; i <= k; i++) {\n\t        var negativeOne = pow(-1, subtract(k,i));\n\t        var kChooseI = combinations(k,i);\n\t        var iPower = pow(i,n);\n\n\t        result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));\n\t      }\n\n\t      return divide(result, kFactorial);\n\t    }\n\t  });\n\n\t  stirlingS2.toTex = {2: '\\\\mathrm{S}\\\\left(${args}\\\\right)'};\n\n\t  return stirlingS2;\n\t}\n\n\texports.name = 'stirlingS2';\n\texports.factory = factory;\n\n\n/***/ },\n/* 405 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  var gamma = load(__webpack_require__(406));\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Compute the factorial of a value\n\t   *\n\t   * Factorial only supports an integer value as argument.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.factorial(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.factorial(5);    // returns 120\n\t   *    math.factorial(3);    // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, gamma, permutations\n\t   *\n\t   * @param {number | BigNumber | Array | Matrix} n   An integer number\n\t   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`\n\t   */\n\t  var factorial = typed('factorial', {\n\t    'number': function (n) {\n\t      if (n < 0) {\n\t        throw new Error('Value must be non-negative');\n\t      }\n\n\t      return gamma(n + 1);\n\t    },\n\n\t    'BigNumber': function (n) {\n\t      if (n.isNegative()) {\n\t        throw new Error('Value must be non-negative');\n\t      }\n\n\t      return gamma(n.plus(1));\n\t    },\n\n\t    'Array | Matrix': function (n) {\n\t      return deepMap(n, factorial);\n\t    }\n\t  });\n\n\t  factorial.toTex = {\n\t    1: '\\\\left(${args[0]}\\\\right)' + latex.operators['factorial']\n\t  };\n\n\t  return factorial;\n\t}\n\n\texports.name = 'factorial';\n\texports.factory = factory;\n\n\n/***/ },\n/* 406 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\t  var multiply = load(__webpack_require__(84));\n\t  var pow = load(__webpack_require__(82));\n\n\t  /**\n\t   * Compute the gamma function of a value using Lanczos approximation for\n\t   * small values, and an extended Stirling approximation for large values.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.gamma(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.gamma(5);       // returns 24\n\t   *    math.gamma(-0.5);    // returns -3.5449077018110335\n\t   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, factorial, permutations\n\t   *\n\t   * @param {number | Array | Matrix} n   A real or complex number\n\t   * @return {number | Array | Matrix}    The gamma of `n`\n\t   */\n\t  var gamma = typed('gamma', {\n\t    'number': function (n) {\n\t      var t, x;\n\n\t      if (isInteger(n)) {\n\t        if (n <= 0) {\n\t          return isFinite(n) ? Infinity : NaN;\n\t        }\n\n\t        if (n > 171) {\n\t          return Infinity;                  // Will overflow\n\t        }\n\n\t        var value = n - 2;\n\t        var res = n - 1;\n\t        while (value > 1) {\n\t          res *= value;\n\t          value--;\n\t        }\n\n\t        if (res == 0) {\n\t          res = 1;                          // 0! is per definition 1\n\t        }\n\n\t        return res;\n\t      }\n\n\t      if (n < 0.5) {\n\t        return Math.PI / (Math.sin(Math.PI * n) * gamma(1-n));\n\t      }\n\n\t      if (n >= 171.35) {\n\t        return Infinity;                    // will overflow\n\t      }\n\n\t      if (n > 85.0) {                       // Extended Stirling Approx\n\t        var twoN = n*n;\n\t        var threeN = twoN*n;\n\t        var fourN = threeN*n;\n\t        var fiveN = fourN*n;\n\t        return Math.sqrt(2*Math.PI/n) * Math.pow((n/Math.E), n) *\n\t            (1 + 1/(12*n) + 1/(288*twoN) - 139/(51840*threeN) -\n\t            571/(2488320*fourN) + 163879/(209018880*fiveN) +\n\t            5246819/(75246796800*fiveN*n));\n\t      }\n\n\t      --n;\n\t      x = p[0];\n\t      for (var i = 1; i < p.length; ++i) {\n\t        x += p[i] / (n+i);\n\t      }\n\n\t      t = n + g + 0.5;\n\t      return Math.sqrt(2*Math.PI) * Math.pow(t, n+0.5) * Math.exp(-t) * x;\n\t    },\n\n\t    'Complex': function (n) {\n\t      var t, x;\n\n\t      if (n.im == 0) {\n\t        return gamma(n.re);\n\t      }\n\n\t      n = new type.Complex(n.re - 1, n.im);\n\t      x = new type.Complex(p[0], 0);\n\t      for (var i = 1; i < p.length; ++i) {\n\t        var real = n.re + i;                // x += p[i]/(n+i)\n\t        var den = real*real + n.im*n.im;\n\t        if (den != 0) {\n\t          x.re += p[i] * real / den;\n\t          x.im += -(p[i] * n.im) / den;\n\t        } else {\n\t          x.re = p[i] < 0\n\t              ? -Infinity\n\t              :  Infinity;\n\t        }\n\t      }\n\n\t      t = new type.Complex(n.re + g + 0.5, n.im);\n\t      var twoPiSqrt = Math.sqrt(2*Math.PI);\n\n\t      n.re += 0.5;\n\t      var result = pow(t, n);\n\t      if (result.im == 0) {                 // sqrt(2*PI)*result\n\t        result.re *= twoPiSqrt;\n\t      } else if (result.re == 0) {\n\t        result.im *= twoPiSqrt;\n\t      } else {\n\t        result.re *= twoPiSqrt;\n\t        result.im *= twoPiSqrt;\n\t      }\n\n\t      var r = Math.exp(-t.re);              // exp(-t)\n\t      t.re = r * Math.cos(-t.im);\n\t      t.im = r * Math.sin(-t.im);\n\n\t      return multiply(multiply(result, t), x);\n\t    },\n\n\t    'BigNumber': function (n) {\n\t      if (n.isInteger()) {\n\t        return (n.isNegative() || n.isZero())\n\t            ? new type.BigNumber(Infinity)\n\t            : bigFactorial(n.minus(1));\n\t      }\n\n\t      if (!n.isFinite()) {\n\t        return new type.BigNumber(n.isNegative() ? NaN : Infinity);\n\t      }\n\n\t      throw new Error('Integer BigNumber expected');\n\t    },\n\n\t    'Array | Matrix': function (n) {\n\t      return deepMap(n, gamma);\n\t    }\n\t  });\n\n\t  /**\n\t   * Calculate factorial for a BigNumber\n\t   * @param {BigNumber} n\n\t   * @returns {BigNumber} Returns the factorial of n\n\t   */\n\t  function bigFactorial(n) {\n\t    if (n.isZero()) {\n\t      return new type.BigNumber(1); // 0! is per definition 1\n\t    }\n\n\t    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n\t    var Big = type.BigNumber.clone({precision: precision});\n\n\t    var res = new Big(n);\n\t    var value = n.toNumber() - 1; // number\n\t    while (value > 1) {\n\t      res = res.times(value);\n\t      value--;\n\t    }\n\n\t    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));\n\t  }\n\n\t  gamma.toTex = {1: '\\\\Gamma\\\\left(${args[0]}\\\\right)'};\n\n\t  return gamma;\n\t}\n\n\t// TODO: comment on the variables g and p\n\n\tvar g = 4.7421875;\n\n\tvar p = [\n\t  0.99999999999999709182,\n\t  57.156235665862923517,\n\t  -59.597960355475491248,\n\t  14.136097974741747174,\n\t  -0.49191381609762019978,\n\t  0.33994649984811888699e-4,\n\t  0.46523628927048575665e-4,\n\t  -0.98374475304879564677e-4,\n\t  0.15808870322491248884e-3,\n\t  -0.21026444172410488319e-3,\n\t  0.21743961811521264320e-3,\n\t  -0.16431810653676389022e-3,\n\t  0.84418223983852743293e-4,\n\t  -0.26190838401581408670e-4,\n\t  0.36899182659531622704e-5\n\t];\n\n\texports.name = 'gamma';\n\texports.factory = factory;\n\n\n/***/ },\n/* 407 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the number of ways of picking `k` unordered outcomes from `n`\n\t   * possibilities.\n\t   *\n\t   * Combinations only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.combinations(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.combinations(7, 5); // returns 21\n\t   *\n\t   * See also:\n\t   *\n\t   *    permutations, factorial\n\t   *\n\t   * @param {number | BigNumber} n    Total number of objects in the set\n\t   * @param {number | BigNumber} k    Number of objects in the subset\n\t   * @return {number | BigNumber}     Number of possible combinations.\n\t   */\n\t  var combinations = typed('combinations', {\n\t    'number, number': function (n, k) {\n\t      var max, result, i;\n\n\t      if (!isInteger(n) || n < 0) {\n\t        throw new TypeError('Positive integer value expected in function combinations');\n\t      }\n\t      if (!isInteger(k) || k < 0) {\n\t        throw new TypeError('Positive integer value expected in function combinations');\n\t      }\n\t      if (k > n) {\n\t        throw new TypeError('k must be less than or equal to n');\n\t      }\n\n\t      max = Math.max(k, n - k);\n\t      result = 1;\n\t      for (i = 1; i <= n - max; i++) {\n\t        result = result * (max + i) / i;\n\t      }\n\n\t      return result;\n\t    },\n\n\t    'BigNumber, BigNumber': function (n, k) {\n\t      var max, result, i, ii;\n\t      var one = new type.BigNumber(1);\n\n\t      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n\t        throw new TypeError('Positive integer value expected in function combinations');\n\t      }\n\t      if (k.gt(n)) {\n\t        throw new TypeError('k must be less than n in function combinations');\n\t      }\n\n\t      max = n.minus(k);\n\t      if (k.lt(max)) max = k;\n\t      result = one;\n\t      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {\n\t        result = result.times(max.plus(i)).dividedBy(i);\n\t      }\n\n\t      return result;\n\t    }\n\n\t    // TODO: implement support for collection in combinations\n\t  });\n\n\t  combinations.toTex = {2: '\\\\binom{${args[0]}}{${args[1]}}'};\n\n\t  return combinations;\n\t}\n\n\t/**\n\t * Test whether BigNumber n is a positive integer\n\t * @param {BigNumber} n\n\t * @returns {boolean} isPositiveInteger\n\t */\n\tfunction isPositiveInteger(n) {\n\t  return n.isInteger() && n.gte(0);\n\t}\n\n\texports.name = 'combinations';\n\texports.factory = factory;\n\n\n/***/ },\n/* 408 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is an integer number.\n\t   * The function supports `number`, `BigNumber`, and `Fraction`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isInteger(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isInteger(2);                     // returns true\n\t   *    math.isInteger(0);                     // returns true\n\t   *    math.isInteger(0.5);                   // returns false\n\t   *    math.isInteger(math.bignumber(500));   // returns true\n\t   *    math.isInteger(math.fraction(4));      // returns true\n\t   *    math.isInteger('3');                   // returns true\n\t   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]\n\t   *    math.isInteger(math.complex('2-4i');   // throws an error\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isPositive, isNegative, isZero\n\t   *\n\t   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n\t   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n\t   *                    Throws an error in case of an unknown data type.\n\t   */\n\t  var isInteger = typed('isInteger', {\n\t    'number': number.isInteger, // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n\n\t    'BigNumber': function (x) {\n\t      return x.isInt();\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.d === 1 && isFinite(x.n);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, isInteger);\n\t    }\n\t  });\n\n\t  return isInteger;\n\t}\n\n\texports.name = 'isInteger';\n\texports.factory = factory;\n\n\n/***/ },\n/* 409 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var combinations = load(__webpack_require__(407));\n\t  var add = load(__webpack_require__(53));\n\t  var isPositive = load(__webpack_require__(370));\n\t  var isInteger = load(__webpack_require__(408));\n\t  var larger = load(__webpack_require__(64));\n\n\t  /**\n\t   * The composition counts of n into k parts.\n\t   *\n\t   * composition only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.composition(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.composition(5, 3); // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations\n\t   *\n\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t   * @param {Number | BigNumber} k    Number of objects in the subset\n\t   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n\t   */\n\t  var composition =  typed('composition', {\n\t    'number | BigNumber, number | BigNumber': function (n, k) {\n\t      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n\t        throw new TypeError('Positive integer value expected in function composition');\n\t      }\n\t      else if (larger(k, n)) {\n\t        throw new TypeError('k must be less than or equal to n in function composition');\n\t      }\n\n\t      return combinations(add(n, -1), add(k, -1));\n\t    }\n\t  });\n\n\t  composition.toTex = undefined; // use default template\n\n\t  return composition;\n\t}\n\n\texports.name = 'composition';\n\texports.factory = factory;\n\n\n/***/ },\n/* 410 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var divide = load(__webpack_require__(317));\n\t  var multiply = load(__webpack_require__(84));\n\t  var combinations = load(__webpack_require__(407));\n\t  var isNegative = load(__webpack_require__(356));\n\t  var isInteger = load(__webpack_require__(408));\n\n\n\t  /**\n\t   * The Catalan Numbers enumerate combinatorial structures of many different types.\n\t   * catalan only takes integer arguments.\n\t   * The following condition must be enforced: n >= 0\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.catalan(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.catalan(3); // returns 5;\n\t   *    math.catalan(8); // returns 1430;\n\t   *\n\t   * See also:\n\t   *\n\t   *    bellNumbers\n\t   *\n\t   * @param {Number | BigNumber} n    nth Catalan number\n\t   * @return {Number | BigNumber}     Cn(n)\n\t   */\n\t  var catalan = typed('catalan', {\n\t    'number | BigNumber': function (n) {\n\n\t      if (!isInteger(n) || isNegative(n)) {\n\t        throw new TypeError('Non-negative integer value expected in function catalan');\n\t      }\n\t       \n\t      return divide(combinations(multiply(n,2), n), add(n,1));\n\n\t    }\n\t  });\n\n\t  catalan.toTex = {1: '\\\\mathrm{C}_{${args[0]}}'};\n\n\t  return catalan;\n\t}\n\n\texports.name = 'catalan';\n\texports.factory = factory;\n\n\n/***/ },\n/* 411 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(412),\n\t  __webpack_require__(413),\n\t  __webpack_require__(414),\n\t  __webpack_require__(415)\n\t];\n\n\n/***/ },\n/* 412 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the argument of a complex value.\n\t   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.arg(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(2, 2);\n\t   *    math.arg(a) / math.pi;          // returns number 0.25\n\t   *\n\t   *    var b = math.complex('2 + 3i');\n\t   *    math.arg(b);                    // returns number 0.982793723247329\n\t   *    math.atan2(3, 2);               // returns number 0.982793723247329\n\t   *\n\t   * See also:\n\t   *\n\t   *    re, im, conj, abs\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | Array | Matrix} The argument of x\n\t   */\n\t  var arg = typed('arg', {\n\t    'number': function (x) {\n\t      return Math.atan2(0, x);\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.arg();\n\t    },\n\n\t    // TODO: implement BigNumber support for function arg\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, arg);\n\t    }\n\t  });\n\n\t  arg.toTex = {1: '\\\\arg\\\\left(${args[0]}\\\\right)'};\n\n\t  return arg;\n\t}\n\n\texports.name = 'arg';\n\texports.factory = factory;\n\n\n/***/ },\n/* 413 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the complex conjugate of a complex value.\n\t   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.conj(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i\n\t   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i\n\t   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i\n\t   *\n\t   * See also:\n\t   *\n\t   *    re, im, arg, abs\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t   *            The complex conjugate of x\n\t   */\n\t  var conj = typed('conj', {\n\t    'number': function (x) {\n\t      return x;\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x;\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.conjugate();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, conj);\n\t    }\n\t  });\n\n\t  conj.toTex = {1: '\\\\left(${args[0]}\\\\right)^*'};\n\n\t  return conj;\n\t}\n\n\texports.name = 'conj';\n\texports.factory = factory;\n\n\n/***/ },\n/* 414 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Get the imaginary part of a complex number.\n\t   * For a complex number `a + bi`, the function returns `b`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.im(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    math.re(a);                     // returns number 2\n\t   *    math.im(a);                     // returns number 3\n\t   *\n\t   *    math.re(math.complex('-5.2i')); // returns number -5.2\n\t   *    math.re(math.complex(2.4));     // returns number 0\n\t   *\n\t   * See also:\n\t   *\n\t   *    re, conj, abs, arg\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | BigNumber | Array | Matrix} The imaginary part of x\n\t   */\n\t  var im = typed('im', {\n\t    'number': function (x) {\n\t      return 0;\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.BigNumber(0);\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.im;\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, im);\n\t    }\n\t  });\n\n\t  im.toTex = {1: '\\\\Im\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'};\n\n\t  return im;\n\t}\n\n\texports.name = 'im';\n\texports.factory = factory;\n\n\n/***/ },\n/* 415 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Get the real part of a complex number.\n\t   * For a complex number `a + bi`, the function returns `a`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.re(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    math.re(a);                     // returns number 2\n\t   *    math.im(a);                     // returns number 3\n\t   *\n\t   *    math.re(math.complex('-5.2i')); // returns number 0\n\t   *    math.re(math.complex(2.4));     // returns number 2.4\n\t   *\n\t   * See also:\n\t   *\n\t   *    im, conj, abs, arg\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | BigNumber | Array | Matrix} The real part of x\n\t   */\n\t  var re = typed('re', {\n\t    'number': function (x) {\n\t      return x;\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x;\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.re;\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, re);\n\t    }\n\t  });\n\n\t  re.toTex = {1: '\\\\Re\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'};\n\n\t  return re;\n\t}\n\n\texports.name = 're';\n\texports.factory = factory;\n\n\n/***/ },\n/* 416 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(417),\n\t  __webpack_require__(418)\n\t];\n\n\n/***/ },\n/* 417 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var abs = load(__webpack_require__(86));\n\t  var add = load(__webpack_require__(51));\n\t  var matrix = load(__webpack_require__(52));\n\t  var multiply = load(__webpack_require__(84));\n\t  var subtract = load(__webpack_require__(77));\n\n\t  /**\n\t   * Calculates the point of intersection of two lines in two or three dimensions\n\t   * and of a line and a plane in three dimensions. The inputs are in the form of\n\t   * arrays or 1 dimensional matrices. The line intersection functions return null\n\t   * if the lines do not meet.\n\t   *\n\t   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n\t   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]\n\t   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]\n\t   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]\n\t   *\n\t   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n\t   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n\t   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n\t   *                              OR Co-efficients of the plane's equation\n\t   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n\t   *                              OR null if the calculation is for line and plane\n\t   * @return {Array}              Returns the point of intersection of lines/lines-planes\n\t   */\n\t  var intersect = typed('intersect', {\n\t    'Array, Array, Array': function (x, y, plane) {\n\t      if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n\t      if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n\t      if (!_4d(plane)) { throw new TypeError('Array with 4 numbers expected as third argument'); }\n\n\t      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n\t    },\n\n\t    'Array, Array, Array, Array': function (w, x, y, z) {\n\t      if (w.length === 2) {\n\t        if (!_2d(w)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n\t        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for second argument'); }\n\t        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for third argument'); }\n\t        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for fourth argument'); }\n\n\t        return _intersect2d(w, x, y, z);\n\t      }\n\t      else if (w.length === 3) {\n\t        if (!_3d(w)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n\t        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n\t        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for third argument'); }\n\t        if (!_3d(z)) { throw new TypeError('Array with 3 numbers expected for fourth argument'); }\n\n\t        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n\t      }\n\t      else {\n\t        throw new TypeError('Arrays with two or thee dimensional points expected');\n\t      }\n\t    },\n\n\t    'Matrix, Matrix, Matrix': function (x, y, plane) {\n\t      return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));\n\t    },\n\n\t    'Matrix, Matrix, Matrix, Matrix': function (w, x, y, z) {\n\t      // TODO: output matrix type should match input matrix type\n\t      return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));\n\t    }\n\t  });\n\n\t  function _2d(x) {\n\t    return x.length === 2 && typeof x[0] === 'number' && typeof x[1] === 'number';\n\t  }\n\n\t  function _3d(x) {\n\t    return x.length === 3 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number';\n\t  }\n\n\t  function _4d(x) {\n\t    return x.length === 4 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number' && typeof x[3] === 'number';\n\t  }\n\n\t  function _intersect2d(p1a, p1b, p2a, p2b){\n\t    var o1 = p1a;\n\t    var o2 = p2a;\n\t    var d1 = subtract(o1, p1b);\n\t    var d2 = subtract(o2, p2b);\n\t    var det = d1[0]*d2[1] - d2[0]*d1[1];\n\t    if (abs(det) < config.epsilon) {\n\t      return null;\n\t    }\n\t    var t = (d2[0]*o1[1] - d2[1]*o1[0] - d2[0]*o2[1] + d2[1]*o2[0]) / det;\n\t    return add(multiply(d1, t), o1); \n\t  }\n\n\t  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4){\n\t    var d1343 = (x1 - x3)*(x4 - x3) + (y1 - y3)*(y4 - y3) + (z1 - z3)*(z4 - z3);\n\t    var d4321 = (x4 - x3)*(x2 - x1) + (y4 - y3)*(y2 - y1) + (z4 - z3)*(z2 - z1);\n\t    var d1321 = (x1 - x3)*(x2 - x1) + (y1 - y3)*(y2 - y1) + (z1 - z3)*(z2 - z1);\n\t    var d4343 = (x4 - x3)*(x4 - x3) + (y4 - y3)*(y4 - y3) + (z4 - z3)*(z4 - z3);\n\t    var d2121 = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1) + (z2 - z1)*(z2 - z1);\n\t    var ta = ( d1343*d4321 - d1321*d4343 ) / ( d2121*d4343 - d4321*d4321 );\n\t    var tb = ( d1343 + ta * d4321 ) / (d4343);\n\n\t    var pax = x1 + ta * (x2 - x1);\n\t    var pay = y1 + ta * (y2 - y1);\n\t    var paz = z1 + ta * (z2 - z1);\n\t    var pbx = x3 + tb * (x4 - x3);\n\t    var pby = y3 + tb * (y4 - y3);\n\t    var pbz = z3 + tb * (z4 - z3);\n\t    if (pax === pbx && pay === pby && paz === pbz){\n\t      return [pax, pay, paz];\n\t    }\n\t    else{\n\t      return null;\n\t    }\n\t  }\n\n\t  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c){\n\t    var t = (c - x1*x - y1*y - z1*z)/(x2*x + y2*y + z2*z - x1 - y1 - z1);\n\t    var px = x1 + t * (x2 - x1);\n\t    var py = y1 + t * (y2 - y1);\n\t    var pz = z1 + t * (z2 - z1);\n\t    return [px, py, pz];\n\t    // TODO: Add cases when line is parallel to the plane:\n\t    //       (a) no intersection,\n\t    //       (b) line contained in plane\n\t  }\n\n\t  return intersect;\n\t}\n\n\texports.name = 'intersect';\n\texports.factory = factory;\n\n\n/***/ },\n/* 418 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t    * Calculates:\n\t    *    The eucledian distance between two points in 2 and 3 dimensional spaces.\n\t    *    Distance between point and a line in 2 and 3 dimensional spaces.\n\t    *    Pairwise distance between a set of 2D or 3D points\n\t    * NOTE:\n\t    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n\t    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n\t    *\n\t    * Syntax:\n\t    *    math.distance([x1, y1], [x2, y2])\n\t    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n\t    *    math.distance([x1, y1, z1], [x2, y2, z2])\n\t    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n\t    *    math.distance([[A], [B], [C]...])\n\t    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n\t    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n\t    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n\t    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n\t    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n\t    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n\t    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n\t    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n\t    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n\t    *\n\t    * Examples:\n\t    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n\t    *    math.distance(\n\t    *     {pointOneX: 0, pointOneY: 0},\n\t    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n\t    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n\t    *    math.distance(\n\t    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n\t    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n\t    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n\t    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n\t    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n\t    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n\t    *    math.distance(\n\t    *     {pointX: 1, pointY: 4},\n\t    *     {lineOnePtX: 6, lineOnePtY: 3},\n\t    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n\t    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n\t    *    math.distance(\n\t    *     {pointX: 2, pointY: 3, pointZ: 1},\n\t    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n\t    *\n\t    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n\t    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n\t    * @return {Number | BigNumber} Returns the distance from two/three points\n\t  */\n\n\t  var distance = typed('distance', {\n\t    'Array, Array, Array': function(x, y, z){\n\t      // Point to Line 2D; (x=Point, y=LinePoint1, z=LinePoint2)\n\t      if (x.length == 2 && y.length == 2 && z.length == 2){\n\t        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n\t        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }\n\t        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for third argument'); }\n\t        var m = (z[1]-z[0])/(y[1]-y[0]);\n\t        var xCoeff = m*m*y[0];\n\t        var yCoeff = -1*(m*y[0]);\n\t        var constant = x[1];\n\n\t        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n\t      }\n\t      else{\n\t        throw new TypeError('Invalid Arguments: Try again');\n\t      }\n\t    },\n\t    'Object, Object, Object': function(x, y, z){\n\t      if (Object.keys(x).length == 2 && Object.keys(y).length == 2 && Object.keys(z).length == 2){\n\t        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }\n\t        if (!_2d(y)) { throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers'); }\n\t        if (!_2d(z)) { throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers'); }\n\t        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') &&\n\t          y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')){\n\t          var m = (z.lineTwoPtY-z.lineTwoPtX)/(y.lineOnePtY-y.lineOnePtX);\n\t          var xCoeff = m*m*y.lineOnePtX;\n\t          var yCoeff = -1*(m*y.lineOnePtX);\n\t          var constant = x.pointX;\n\n\t          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n\t        }\n\t        else{\n\t          throw new TypeError('Key names do not match');\n\t        }\n\t      }\n\t      else{\n\t        throw new TypeError('Invalid Arguments: Try again');\n\t      }\n\t    },\n\t    'Array, Array': function(x, y){\n\t      // Point to Line 2D; (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n\t      if (x.length == 2 && y.length == 3){\n\t        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n\t        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n\n\t        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n\t      }\n\t      // Point to Line 3D\n\t      else if (x.length == 3 && y.length == 6){\n\t        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n\t        if (!_parametricLine(y)) { throw new TypeError('Array with 6 numbers expected for second argument'); }\n\n\t        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n\t      }\n\t      // Point to Point 2D\n\t      else if (x.length == 2 && y.length == 2){\n\t        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n\t        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }\n\n\t        return _distance2d(x[0], x[1], y[0], y[1]);\n\t      }\n\t      // Point to Point 3D\n\t      else if(x.length == 3 && y.length == 3){\n\t        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n\t        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n\n\t        return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);\n\t      }\n\t      else{\n\t        throw new TypeError('Invalid Arguments: Try again');\n\t      }\n\t    },\n\t    'Object, Object': function(x, y){\n\t      if (Object.keys(x).length == 2 && Object.keys(y).length == 3){\n\t        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }\n\t        if (!_3d(y)) { throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers'); }\n\t        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') &&\n\t          y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('yCoeffLine')){\n\n\t          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n\t        }\n\t        else{\n\t          throw new TypeError('Key names do not match');\n\t        }\n\t      }\n\t      // Point to Line 3D\n\t      else if (Object.keys(x).length == 3 && Object.keys(y).length == 6){\n\t        if (!_3d(x)) { throw new TypeError('Values of pointX, pointY and pointZ should be numbers'); }\n\t        if (!_parametricLine(y)) { throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers'); }\n\t        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') &&\n\t          y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') &&\n\t          y.hasOwnProperty('b') && y.hasOwnProperty('c')){\n\n\t          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n\t        }\n\t        else{\n\t          throw new TypeError('Key names do not match');\n\t        }\n\t      }\n\t      // Point to Point 2D\n\t      else if (Object.keys(x).length == 2 && Object.keys(y).length == 2){\n\t        if (!_2d(x)) { throw new TypeError('Values of pointOneX and pointOneY should be numbers'); }\n\t        if (!_2d(y)) { throw new TypeError('Values of pointTwoX and pointTwoY should be numbers'); }\n\t        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') &&\n\t          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')){\n\n\t          return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);\n\t        }\n\t        else{\n\t          throw new TypeError('Key names do not match');\n\t        }\n\t      }\n\t      // Point to Point 3D\n\t      else if(Object.keys(x).length == 3 && Object.keys(y).length == 3){\n\t        if (!_3d(x)) { throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers'); }\n\t        if (!_3d(y)) { throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers'); }\n\t        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') &&\n\t          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')){\n\n\t          return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);\n\t        }\n\t        else {\n\t          throw new TypeError('Key names do not match');\n\t        }\n\t      }\n\t      else{\n\t        throw new TypeError('Invalid Arguments: Try again');\n\t      }\n\t    },\n\t    'Array': function(arr){\n\t      if (!_pairwise(arr)) { throw new TypeError('Incorrect array format entered for pairwise distance calculation'); }\n\n\t      return _distancePairwise(arr);\n\t    }\n\t  });\n\t  return distance;\n\t}\n\n\tfunction _2d(a){\n\t  // checks if the number of arguments are correct in count and are valid (should be numbers)\n\t  if (a.constructor !== Array){\n\t    a = _objectToArray(a);\n\t  }\n\t  return typeof a[0] === 'number' && typeof a[1] === 'number';\n\t}\n\n\tfunction _3d(a){\n\t  // checks if the number of arguments are correct in count and are valid (should be numbers)\n\t  if (a.constructor !== Array){\n\t    a = _objectToArray(a);\n\t  }\n\t  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number';\n\t}\n\n\tfunction _parametricLine(a){\n\t  if (a.constructor !== Array){\n\t    a = _objectToArray(a);\n\t  }\n\t  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number' &&\n\t    typeof a[3] === 'number' && typeof a[4] === 'number' && typeof a[5] === 'number';\n\n\t}\n\n\tfunction _objectToArray(o){\n\t  var keys = Object.keys(o);\n\t  var a = [];\n\t  for (var i = 0; i < keys.length; i++) {\n\t    a.push(o[keys[i]]);\n\t  }\n\t  return a;\n\t}\n\n\tfunction _pairwise(a){\n\t  //checks for valid arguments passed to _distancePairwise(Array)\n\t  if (a[0].length == 2 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number'){\n\t    for(var i in a){\n\t      if (a[i].length != 2 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number'){\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t  else if (a[0].length == 3 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number' && typeof a[0][2] === 'number'){\n\t    for(var i in a){\n\t      if (a[i].length != 3 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number' || typeof a[i][2] !== 'number'){\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t  else{\n\t    return false;\n\t  }\n\t  return true;\n\t}\n\n\tfunction _distancePointLine2D(x, y, a, b, c){\n\t  var num =  Math.abs(a*x + b*y + c);\n\t  var den = Math.pow((a*a + b*b), 0.5);\n\t  var result = (num/den);\n\t  return result;\n\t}\n\n\tfunction _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c){\n\t  var num = [((y0-y)*(c))-((z0-z)*(b)), ((z0-z)*(a))-((x0-x)*(c)), ((x0-x)*(b))-((y0-y)*(a))]\n\t  num = Math.pow(num[0]*num[0] + num[1]*num[1] + num[2]*num[2], 0.5);\n\t  var den = Math.pow(a*a + b*b + c*c, 0.5);\n\t  var result = num/den;\n\t  return result;\n\t}\n\n\tfunction _distance2d(x1, y1, x2, y2){\n\t  var yDiff = y2 - y1;\n\t  var xDiff = x2 - x1;\n\t  var radicant = yDiff * yDiff + xDiff * xDiff;\n\t  var result = Math.pow(radicant, 0.5);\n\t  return result;\n\t}\n\n\tfunction _distance3d(x1, y1, z1, x2, y2, z2){\n\t  var zDiff = z2 - z1;\n\t  var yDiff = y2 - y1;\n\t  var xDiff = x2 - x1;\n\t  var radicant = zDiff * zDiff + yDiff * yDiff + xDiff * xDiff;\n\t  var result = Math.pow(radicant, 0.5);\n\t  return result;\n\t}\n\n\tfunction _distancePairwise(a){\n\t  var result = [];\n\t  for(var i = 0; i < a.length-1; i++){\n\t    for(var j = i+1; j < a.length; j++){\n\t      if (a[0].length == 2){\n\t        result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));\n\t      }\n\t      else if (a[0].length == 3){\n\t        result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));\n\t      }\n\t    }\n\t  }\n\t  return result;\n\t}\n\n\texports.name = 'distance';\n\texports.factory = factory;\n\n\n/***/ },\n/* 419 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(420),\n\t  __webpack_require__(421),\n\t  __webpack_require__(423),\n\t  __webpack_require__(424)\n\t];\n\n\n/***/ },\n/* 420 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\t  var zeros = load(__webpack_require__(381));\n\t  var not = load(__webpack_require__(421));\n\t  var isZero = load(__webpack_require__(422));\n\n\t  var algorithm02 = load(__webpack_require__(360));\n\t  var algorithm06 = load(__webpack_require__(372));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.and(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.and(2, 4);   // returns true\n\t   *\n\t   *    a = [2, 0, 0];\n\t   *    b = [3, 7, 0];\n\t   *    c = 0;\n\t   *\n\t   *    math.and(a, b);   // returns [true, false, false]\n\t   *    math.and(a, c);   // returns [false, false, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    not, or, xor\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n\t   */\n\t  var and = typed('and', {\n\n\t    'number, number': function (x, y) {\n\t      return !!(x && y);\n\t    },\n\n\t    'Complex, Complex': function (x, y) {\n\t      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      return and(x.value, y.value);\n\t    },\n\t    \n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse & sparse\n\t              c = algorithm06(x, y, and, false);\n\t              break;\n\t            default:\n\t              // sparse & dense\n\t              c = algorithm02(y, x, and, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense & sparse\n\t              c = algorithm02(x, y, and, false);\n\t              break;\n\t            default:\n\t              // dense & dense\n\t              c = algorithm13(x, y, and);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return and(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return and(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return and(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // check scalar\n\t      if (not(y)) {\n\t        // return zero matrix\n\t        return zeros(x.size(), x.storage());\n\t      }\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, and, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, and, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // check scalar\n\t      if (not(x)) {\n\t        // return zero matrix\n\t        return zeros(x.size(), x.storage());\n\t      }\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(y, x, and, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, and, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return and(matrix(x), y).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return and(x, matrix(y)).valueOf();\n\t    }\n\t  });\n\n\t  and.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['and'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return and;\n\t}\n\n\texports.name = 'and';\n\texports.factory = factory;\n\n\n/***/ },\n/* 421 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Logical `not`. Flips boolean value of a given parameter.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.not(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.not(2);      // returns false\n\t   *    math.not(0);      // returns true\n\t   *    math.not(true);   // returns false\n\t   *\n\t   *    a = [2, -7, 0];\n\t   *    math.not(a);      // returns [false, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    and, or, xor\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when input is a zero or empty value.\n\t   */\n\t  var not = typed('not', {\n\t    'number': function (x) {\n\t      return !x;\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.re === 0 && x.im === 0;\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.isZero() || x.isNaN();\n\t    },\n\n\t    'Unit': function (x) {\n\t      return not(x.value);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, not);\n\t    }\n\t  });\n\n\t  not.toTex = {\n\t    1: latex.operators['not'] + '\\\\left(${args[0]}\\\\right)'\n\t  };\n\n\t  return not;\n\t}\n\n\texports.name = 'not';\n\texports.factory = factory;\n\n\n/***/ },\n/* 422 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is zero.\n\t   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n\t   * `Complex`, and `Unit`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isZero(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isZero(0);                     // returns true\n\t   *    math.isZero(2);                     // returns false\n\t   *    math.isZero(0.5);                   // returns false\n\t   *    math.isZero(math.bignumber(0));     // returns true\n\t   *    math.isZero(math.fraction(0));      // returns true\n\t   *    math.isZero(math.fraction(1,3));    // returns false\n\t   *    math.isZero(math.complex('2 - 4i'); // returns false\n\t   *    math.isZero(math.complex('0i');     // returns true\n\t   *    math.isZero('0');                   // returns true\n\t   *    math.isZero('2');                   // returns false\n\t   *    math.isZero([2, 0, -3]');           // returns [false, true, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isPositive, isNegative, isInteger\n\t   *\n\t   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n\t   * @return {boolean}  Returns true when `x` is zero.\n\t   *                    Throws an error in case of an unknown data type.\n\t   */\n\t  var isZero = typed('isZero', {\n\t    'number': function (x) {\n\t      return x === 0;\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.isZero();\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.re === 0 && x.im === 0;\n\t    },\n\n\t    'Fraction': function (x) {\n\t      return x.d === 1 && x.n === 0;\n\t    },\n\n\t    'Unit': function (x) {\n\t      return isZero(x.value);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, isZero);\n\t    }\n\t  });\n\n\t  return isZero;\n\t}\n\n\texports.name = 'isZero';\n\texports.factory = factory;\n\n\n/***/ },\n/* 423 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.or(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.or(2, 4);   // returns true\n\t   *\n\t   *    a = [2, 5, 0];\n\t   *    b = [0, 22, 0];\n\t   *    c = 0;\n\t   *\n\t   *    math.or(a, b);   // returns [true, true, false]\n\t   *    math.or(b, c);   // returns [false, true, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    and, not, xor\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n\t   */\n\t  var or = typed('or', {\n\n\t    'number, number': function (x, y) {\n\t      return !!(x || y);\n\t    },\n\n\t    'Complex, Complex': function (x, y) {\n\t      return (x.re !== 0 || x.im !== 0) || (y.re !== 0 || y.im !== 0);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return (!x.isZero() && !x.isNaN()) || (!y.isZero() && !y.isNaN());\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      return or(x.value, y.value);\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm05(x, y, or);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm03(y, x, or, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm03(x, y, or, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, or);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return or(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return or(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return or(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(x, y, or, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, or, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, or, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, or, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, or, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, or, true).valueOf();\n\t    }\n\t  });\n\n\t  or.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['or'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return or;\n\t}\n\n\texports.name = 'or';\n\texports.factory = factory;\n\n\n/***/ },\n/* 424 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.xor(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.xor(2, 4);   // returns false\n\t   *\n\t   *    a = [2, 0, 0];\n\t   *    b = [2, 7, 0];\n\t   *    c = 0;\n\t   *\n\t   *    math.xor(a, b);   // returns [false, true, false]\n\t   *    math.xor(a, c);   // returns [true, false, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    and, not, or\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n\t   */\n\t  var xor = typed('xor', {\n\t \n\t    'number, number': function (x, y) {\n\t      return !!(!!x ^ !!y);\n\t    },\n\n\t    'Complex, Complex': function (x, y) {\n\t      return ((x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0));\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return ((!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN()));\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      return xor(x.value, y.value);\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm07(x, y, xor);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm03(y, x, xor, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm03(x, y, xor, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, xor);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return xor(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return xor(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return xor(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(x, y, xor, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, xor, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, xor, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, xor, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, xor, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, xor, true).valueOf();\n\t    }\n\t  });\n\n\t  xor.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['xor'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return xor;\n\t}\n\n\texports.name = 'xor';\n\texports.factory = factory;\n\n\n/***/ },\n/* 425 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(301),\n\t  __webpack_require__(426),\n\t  __webpack_require__(319),\n\t  __webpack_require__(427),\n\t  __webpack_require__(428),\n\t  __webpack_require__(83),\n\t  __webpack_require__(303),\n\t  __webpack_require__(429),\n\t  __webpack_require__(305),\n\t  __webpack_require__(318),\n\t  __webpack_require__(308),\n\t  __webpack_require__(430),\n\t  __webpack_require__(431),\n\t  __webpack_require__(323),\n\t  __webpack_require__(433),\n\t  __webpack_require__(434),\n\t  __webpack_require__(435),\n\t  __webpack_require__(436),\n\t  __webpack_require__(276),\n\t  __webpack_require__(378),\n\t  __webpack_require__(335),\n\t  __webpack_require__(381)\n\t];\n\n\n/***/ },\n/* 426 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar size = __webpack_require__(40).size;\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix   = load(__webpack_require__(52));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(84));\n\n\t  /**\n\t   * Calculate the cross product for two vectors in three dimensional space.\n\t   * The cross product of `A = [a1, a2, a3]` and `B =[b1, b2, b3]` is defined\n\t   * as:\n\t   *\n\t   *    cross(A, B) = [\n\t   *      a2 * b3 - a3 * b2,\n\t   *      a3 * b1 - a1 * b3,\n\t   *      a1 * b2 - a2 * b1\n\t   *    ]\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cross(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cross([1, 1, 0],  [0, 1, 1]);  // Returns [1, -1, 1]\n\t   *    math.cross([3, -3, 1], [4, 9, 2]);  // Returns [-15, -2, 39]\n\t   *    math.cross([2, 3, 4],  [5, 6, 7]);  // Returns [-3, 6, -3]\n\t   *\n\t   * See also:\n\t   *\n\t   *    dot, multiply\n\t   *\n\t   * @param  {Array | Matrix} x   First vector\n\t   * @param  {Array | Matrix} y   Second vector\n\t   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\n\t   */\n\t  var cross = typed('cross', {\n\t    'Matrix, Matrix': function (x, y) {\n\t      return matrix(_cross(x.toArray(), y.toArray()));\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      return matrix(_cross(x.toArray(), y));\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      return matrix(_cross(x, y.toArray()));\n\t    },\n\n\t    'Array, Array': _cross\n\t  });\n\n\t  cross.toTex = {\n\t    2: '\\\\left(${args[0]}\\\\right)\\\\times\\\\left(${args[1]}\\\\right)'\n\t  };\n\n\t  return cross;\n\n\t  /**\n\t   * Calculate the cross product for two arrays\n\t   * @param {Array} x  First vector\n\t   * @param {Array} y  Second vector\n\t   * @returns {Array} Returns the cross product of x and y\n\t   * @private\n\t   */\n\t  function _cross(x, y) {\n\t    var xSize= size(x);\n\t    var ySize = size(y);\n\n\t    if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {\n\t      throw new RangeError('Vectors with length 3 expected ' +\n\t      '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\n\t    }\n\n\t    return [\n\t      subtract(multiply(x[1], y[2]), multiply(x[2], y[1])),\n\t      subtract(multiply(x[2], y[0]), multiply(x[0], y[2])),\n\t      subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))\n\t    ];\n\t  }\n\t}\n\n\texports.name = 'cross';\n\texports.factory = factory;\n\n\n/***/ },\n/* 427 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar array     = __webpack_require__(40);\n\tvar clone     = __webpack_require__(3).clone;\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\t  \n\t  /**\n\t   * Create a diagonal matrix or retrieve the diagonal of a matrix\n\t   *\n\t   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n\t   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n\t   * When k is positive, the values are placed on the super diagonal.\n\t   * When k is negative, the values are placed on the sub diagonal.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.diag(X)\n\t   *     math.diag(X, format)\n\t   *     math.diag(X, k)\n\t   *     math.diag(X, k, format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     // create a diagonal matrix\n\t   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\t   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n\t   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\t   *\n\t   *    // retrieve the diagonal from a matrix\n\t   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\t   *    math.diag(a);   // returns [1, 5, 9]\n\t   *\n\t   * See also:\n\t   *\n\t   *     ones, zeros, eye\n\t   *\n\t   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n\t   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n\t   *                                    in or retrieved.\n\t   * @param {string} [format='dense']   The matrix storage format.\n\t   *\n\t   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.\n\t   */\n\t  var diag = typed('diag', {\n\t    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments\n\n\t    'Array': function (x) {\n\t      return _diag(x, 0, array.size(x), null);\n\t    },\n\n\t    'Array, number': function (x, k) {\n\t      return _diag(x, k, array.size(x), null);\n\t    },\n\t    \n\t    'Array, BigNumber': function (x, k) {\n\t      return _diag(x, k.toNumber(), array.size(x), null);\n\t    },\n\n\t    'Array, string': function (x, format) {\n\t      return _diag(x, 0, array.size(x), format);\n\t    },\n\n\t    'Array, number, string': function (x, k, format) {\n\t      return _diag(x, k, array.size(x), format);\n\t    },\n\n\t    'Array, BigNumber, string': function (x, k, format) {\n\t      return _diag(x, k.toNumber(), array.size(x), format);\n\t    },\n\n\t    'Matrix': function (x) {\n\t      return _diag(x, 0, x.size(), x.storage());\n\t    },\n\n\t    'Matrix, number': function (x, k) {\n\t      return _diag(x, k, x.size(), x.storage());\n\t    },\n\n\t    'Matrix, BigNumber': function (x, k) {\n\t      return _diag(x, k.toNumber(), x.size(), x.storage());\n\t    },\n\n\t    'Matrix, string': function (x, format) {\n\t      return _diag(x, 0, x.size(), format);\n\t    },\n\n\t    'Matrix, number, string': function (x, k, format) {\n\t      return _diag(x, k, x.size(), format);\n\t    },\n\n\t    'Matrix, BigNumber, string': function (x, k, format) {\n\t      return _diag(x, k.toNumber(), x.size(), format);\n\t    }\n\t  });\n\n\t  diag.toTex = undefined; // use default template\n\n\t  return diag;\n\n\t  /**\n\t   * Creeate diagonal matrix from a vector or vice versa\n\t   * @param {Array | Matrix} x\n\t   * @param {number} k\n\t   * @param {string} format Storage format for matrix. If null,\n\t   *                          an Array is returned\n\t   * @returns {Array | Matrix}\n\t   * @private\n\t   */\n\t  function _diag (x, k, size, format) {\n\t    if (!isInteger(k)) {\n\t      throw new TypeError ('Second parameter in function diag must be an integer');\n\t    }\n\t    \n\t    var kSuper = k > 0 ? k : 0;\n\t    var kSub = k < 0 ? -k : 0;\n\n\t    // check dimensions\n\t    switch (size.length) {\n\t      case 1:\n\t        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);\n\t      case 2:\n\t        return _getDiagonal(x, k, format, size, kSub, kSuper);\n\t    }\n\t    throw new RangeError('Matrix for function diag must be 2 dimensional');\n\t  }\n\t  \n\t  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {\n\t    // matrix size\n\t    var ms = [l + kSub, l + kSuper];\n\t    // get matrix constructor\n\t    var F = type.Matrix.storage(format || 'dense');\n\t    // create diagonal matrix\n\t    var m = F.diagonal(ms, x, k);\n\t    // check we need to return a matrix\n\t    return format !== null ? m : m.valueOf();\n\t  }\n\t  \n\t  function _getDiagonal(x, k, format, s, kSub, kSuper) {\n\t    // check x is a Matrix\n\t    if (x && x.isMatrix === true) {\n\t      // get diagonal matrix\n\t      var dm = x.diagonal(k);\n\t      // check we need to return a matrix\n\t      if (format !== null) {\n\t        // check we need to change matrix format\n\t        if (format !== dm.storage())\n\t          return matrix(dm, format);\n\t        return dm;\n\t      }\n\t      return dm.valueOf();\n\t    }\n\t    // vector size\n\t    var n = Math.min(s[0] - kSub, s[1] - kSuper);\n\t    // diagonal values\n\t    var vector = [];\n\t    // loop diagonal\n\t    for (var i = 0; i < n; i++) {\n\t      vector[i] = x[i + kSub][i + kSuper];\n\t    }\n\t    // check we need to return a matrix\n\t    return format !== null ? matrix(vector) : vector;\n\t  }\n\t}\n\n\texports.name = 'diag';\n\texports.factory = factory;\n\n\n/***/ },\n/* 428 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar size = __webpack_require__(40).size;\n\n\tfunction factory (type, config, load, typed) {\n\t  var add      = load(__webpack_require__(51));\n\t  var multiply = load(__webpack_require__(84));\n\n\t  /**\n\t   * Calculate the dot product of two vectors. The dot product of\n\t   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:\n\t   *\n\t   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dot(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15\n\t   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, cross\n\t   *\n\t   * @param  {Array | Matrix} x     First vector\n\t   * @param  {Array | Matrix} y     Second vector\n\t   * @return {number}               Returns the dot product of `x` and `y`\n\t   */\n\t  var dot = typed('dot', {\n\t    'Matrix, Matrix': function (x, y) {\n\t      return _dot(x.toArray(), y.toArray());\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      return _dot(x.toArray(), y);\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      return _dot(x, y.toArray());\n\t    },\n\n\t    'Array, Array': _dot\n\t  });\n\t  \n\t  dot.toTex = {2: '\\\\left(${args[0]}\\\\cdot${args[1]}\\\\right)'};\n\n\t  return dot;\n\n\t  /**\n\t   * Calculate the dot product for two arrays\n\t   * @param {Array} x  First vector\n\t   * @param {Array} y  Second vector\n\t   * @returns {number} Returns the dot product of x and y\n\t   * @private\n\t   */\n\t  // TODO: double code with math.multiply\n\t  function _dot(x, y) {\n\t    var xSize= size(x);\n\t    var ySize = size(y);\n\t    var len = xSize[0];\n\n\t    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message\n\t    if (xSize[0] != ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');\n\t    if (len == 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n\n\t    var prod = 0;\n\t    for (var i = 0; i < len; i++) {\n\t      prod = add(prod, multiply(x[i], y[i]));\n\t    }\n\n\t    return prod;\n\t  }\n\t}\n\n\texports.name = 'dot';\n\texports.factory = factory;\n\n\n/***/ },\n/* 429 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar clone = __webpack_require__(3).clone;\n\tvar _flatten = __webpack_require__(40).flatten;\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Flatten a multi dimensional matrix into a single dimensional matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.flatten(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]\n\t   *\n\t   * See also:\n\t   *\n\t   *    concat, resize, size, squeeze\n\t   *\n\t   * @param {Matrix | Array} x   Matrix to be flattened\n\t   * @return {Matrix | Array} Returns the flattened matrix\n\t   */\n\t  var flatten = typed('flatten', {\n\t    'Array': function (x) {\n\t      return _flatten(clone(x));\n\t    },\n\n\t    'Matrix': function (x) {\n\t      var flat = _flatten(clone(x.toArray()));\n\t      // TODO: return the same matrix type as x\n\t      return matrix(flat);\n\t    }\n\t  });\n\n\t  flatten.toTex = undefined; // use default template\n\n\t  return flatten;\n\t}\n\n\texports.name = 'flatten';\n\texports.factory = factory;\n\n\n/***/ },\n/* 430 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar resize = __webpack_require__(40).resize;\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Create a matrix filled with ones. The created matrix can have one or\n\t   * multiple dimensions.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.ones(m)\n\t   *    math.ones(m, format)\n\t   *    math.ones(m, n)\n\t   *    math.ones(m, n, format)\n\t   *    math.ones([m, n])\n\t   *    math.ones([m, n], format)\n\t   *    math.ones([m, n, p, ...])\n\t   *    math.ones([m, n, p, ...], format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.ones(3);                   // returns [1, 1, 1]\n\t   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]\n\t   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n\t   *\n\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    zeros, eye, size, range\n\t   *\n\t   * @param {...number | Array} size    The size of each dimension of the matrix\n\t   * @param {string} [format]           The Matrix storage format\n\t   *\n\t   * @return {Array | Matrix | number}  A matrix filled with ones\n\t   */\n\t  var ones = typed('ones', {\n\t    '': function () {\n\t      return (config.matrix === 'Array')\n\t          ? _ones([])\n\t          : _ones([], 'default');\n\t    },\n\n\t    // math.ones(m, n, p, ..., format)\n\t    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n\t    '...number | BigNumber | string': function (size) {\n\t      var last = size[size.length - 1];\n\t      if (typeof last === 'string') {\n\t        var format = size.pop();\n\t        return _ones(size, format);\n\t      }\n\t      else if (config.matrix === 'Array') {\n\t        return _ones(size);\n\t      }\n\t      else {\n\t        return _ones(size, 'default');\n\t      }\n\t    },\n\n\t    'Array': _ones,\n\n\t    'Matrix': function (size) {\n\t      var format = size.storage();\n\t      return _ones(size.valueOf(), format);\n\t    },\n\n\t    'Array | Matrix, string': function (size, format) {\n\t      return _ones (size.valueOf(), format);\n\t    }\n\t  });\n\n\t  ones.toTex = undefined; // use default template\n\n\t  return ones;\n\n\t  /**\n\t   * Create an Array or Matrix with ones\n\t   * @param {Array} size\n\t   * @param {string} [format='default']\n\t   * @return {Array | Matrix}\n\t   * @private\n\t   */\n\t  function _ones(size, format) {\n\t    var hasBigNumbers = _normalize(size);\n\t    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;\n\t    _validate(size);\n\n\t    if (format) {\n\t      // return a matrix\n\t      var m = matrix(format);\n\t      if (size.length > 0) {\n\t        return m.resize(size, defaultValue);\n\t      }\n\t      return m;\n\t    }\n\t    else {\n\t      // return an Array\n\t      var arr = [];\n\t      if (size.length > 0) {\n\t        return resize(arr, size, defaultValue);\n\t      }\n\t      return arr;\n\t    }\n\t  }\n\n\t  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\t  function _normalize(size) {\n\t    var hasBigNumbers = false;\n\t    size.forEach(function (value, index, arr) {\n\t      if (value && value.isBigNumber === true) {\n\t        hasBigNumbers = true;\n\t        arr[index] = value.toNumber();\n\t      }\n\t    });\n\t    return hasBigNumbers;\n\t  }\n\n\t  // validate arguments\n\t  function _validate (size) {\n\t    size.forEach(function (value) {\n\t      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n\t        throw new Error('Parameters in function ones must be positive integers');\n\t      }\n\t    });\n\t  }\n\t}\n\n\texports.name = 'ones';\n\texports.factory = factory;\n\n\n/***/ },\n/* 431 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\t  var asc = load(__webpack_require__(432));\n\t  function desc(a, b) {\n\t    return -asc(a, b);\n\t  }\n\n\t  /**\n\t   * Partition-based selection of an array or 1D matrix.\n\t   * Will find the kth smallest value, and mutates the input array.\n\t   * Uses Quickselect.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.partitionSelect(x, k)\n\t   *    math.partitionSelect(x, k, compare)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.partitionSelect([5, 10, 1], 2);           // returns 10\n\t   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'\n\t   *\n\t   *    function sortByLength (a, b) {\n\t   *      return a.length - b.length;\n\t   *    }\n\t   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'\n\t   *\n\t   * See also:\n\t   *\n\t   *    sort\n\t   *\n\t   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n\t   * @param {Number} k            The kth smallest value to be retrieved; zero-based index\n\t   * @param {Function | 'asc' | 'desc'} [compare='asc']\n\t   *        An optional comparator function. The function is called as\n\t   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n\t   *        and 0 when a == b.\n\t   * @return {*} Returns the kth lowest value.\n\t   */\n\t  return typed('partitionSelect', {\n\t    'Array | Matrix, number': function (x, k) {\n\t      return _partitionSelect(x, k, asc);\n\t    },\n\n\t    'Array | Matrix, number, string': function (x, k, compare) {\n\t      if (compare === 'asc') {\n\t        return _partitionSelect(x, k, asc);\n\t      }\n\t      else if (compare === 'desc') {\n\t        return _partitionSelect(x, k, desc);\n\t      }\n\t      else {\n\t        throw new Error('Compare string must be \"asc\" or \"desc\"');\n\t      }\n\t    },\n\n\t    'Array | Matrix, number, function': _partitionSelect\n\t  });\n\n\t  function _partitionSelect(x, k, compare) {\n\t    if (!isInteger(k) || k < 0) {\n\t      throw new Error('k must be a non-negative integer');\n\t    }\n\n\t    if (x && x.isMatrix) {\n\t      var size = x.size();\n\t      if (size.length > 1) {\n\t        throw new Error('Only one dimensional matrices supported');\n\t      }\n\t      return quickSelect(x.valueOf(), k, compare);\n\t    }\n\n\t    if (Array.isArray(x)) {\n\t      return quickSelect(x, k, compare);\n\t    }\n\t  }\n\n\t  /**\n\t   * Quickselect algorithm.\n\t   * Code adapted from:\n\t   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n\t   *\n\t   * @param {Array} arr\n\t   * @param {Number} k\n\t   * @param {Function} compare\n\t   * @private\n\t   */\n\t  function quickSelect(arr, k, compare) {\n\t    if (k >= arr.length) {\n\t      throw new Error('k out of bounds');\n\t    }\n\n\t    var from = 0;\n\t    var to = arr.length - 1;\n\n\t    // if from == to we reached the kth element\n\t    while (from < to) {\n\t      var r = from;\n\t      var w = to;\n\t      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];\n\n\t      // stop if the reader and writer meets\n\t      while (r < w) {\n\t        // arr[r] >= pivot\n\t        if (compare(arr[r], pivot) >= 0) { // put the large values at the end\n\t          var tmp = arr[w];\n\t          arr[w] = arr[r];\n\t          arr[r] = tmp;\n\t          --w;\n\t        } else { // the value is smaller than the pivot, skip\n\t          ++r;\n\t        }\n\t      }\n\n\t      // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n\t      if (compare(arr[r], pivot) > 0) {\n\t        --r;\n\t      }\n\n\t      // the r pointer is on the end of the first k elements\n\t      if (k <= r) {\n\t        to = r;\n\t      } else {\n\t        from = r + 1;\n\t      }\n\t    }\n\n\t    return arr[k];\n\t  }\n\t}\n\n\texports.name = 'partitionSelect';\n\texports.factory = factory;\n\n\n/***/ },\n/* 432 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n\t   *\n\t   * x and y are considered equal when the relative difference between x and y\n\t   * is smaller than the configured epsilon. The function cannot be used to\n\t   * compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.compare(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.compare(6, 1);           // returns 1\n\t   *    math.compare(2, 3);           // returns -1\n\t   *    math.compare(7, 7);           // returns 0\n\t   *\n\t   *    var a = math.unit('5 cm');\n\t   *    var b = math.unit('40 mm');\n\t   *    math.compare(a, b);           // returns 1\n\t   *\n\t   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, smallerEq, larger, largerEq\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.\n\t   */\n\t  var compare = typed('compare', {\n\n\t    'boolean, boolean': function (x, y) {\n\t      return x === y ? 0 : (x > y ? 1 : -1);\n\t    },\n\n\t    'number, number': function (x, y) {\n\t      return (x === y || nearlyEqual(x, y, config.epsilon))\n\t          ? 0\n\t          : (x > y ? 1 : -1);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return (x.eq(y) || bigNearlyEqual(x, y, config.epsilon))\n\t          ? new type.BigNumber(0)\n\t          : new type.BigNumber(x.cmp(y));\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return new type.Fraction(x.compare(y));\n\t    },\n\n\t    'Complex, Complex': function () {\n\t      throw new TypeError('No ordering relation is defined for complex numbers');\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      if (!x.equalBase(y)) {\n\t        throw new Error('Cannot compare units with different base');\n\t      }\n\t      return compare(x.value, y.value);\n\t    },\n\n\t    'string, string': function (x, y) {\n\t      return x === y ? 0 : (x > y ? 1 : -1);\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm05(x, y, compare);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm03(y, x, compare, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm03(x, y, compare, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, compare);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return compare(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return compare(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return compare(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(x, y, compare, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, compare, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, compare, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, compare, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, compare, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, compare, true).valueOf();\n\t    }\n\t  });\n\n\t  compare.toTex = undefined; // use default template\n\n\t  return compare;\n\t}\n\n\texports.name = 'compare';\n\texports.factory = factory;\n\n\n/***/ },\n/* 433 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar DimensionError = __webpack_require__(42);\n\tvar ArgumentsError = __webpack_require__(11);\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar format = __webpack_require__(23).format;\n\tvar clone = __webpack_require__(3).clone;\n\tvar array = __webpack_require__(40);\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Resize a matrix\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.resize(x, size)\n\t   *     math.resize(x, size, defaultValue)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]\n\t   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]\n\t   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n\t   *     math.resize(\"hello\", [8], \"!\");    // returns string 'hello!!!'\n\t   *\n\t   * See also:\n\t   *\n\t   *     size, squeeze, subset\n\t   *\n\t   * @param {Array | Matrix | *} x             Matrix to be resized\n\t   * @param {Array | Matrix} size              One dimensional array with numbers\n\t   * @param {number | string} [defaultValue=0] Zero by default, except in\n\t   *                                           case of a string, in that case\n\t   *                                           defaultValue = ' '\n\t   * @return {* | Array | Matrix} A resized clone of matrix `x`\n\t   */\n\t  // TODO: rework resize to a typed-function\n\t  var resize = function resize (x, size, defaultValue) {\n\t    if (arguments.length != 2 && arguments.length != 3) {\n\t      throw new ArgumentsError('resize', arguments.length, 2, 3);\n\t    }\n\n\t    if (size && size.isMatrix === true) {\n\t      size = size.valueOf(); // get Array\n\t    }\n\n\t    if (size.length && size[0] && size[0].isBigNumber === true) {\n\t      // convert bignumbers to numbers\n\t      size = size.map(function (value) {\n\t        return (value && value.isBigNumber === true) ? value.toNumber() : value;\n\t      });\n\t    }\n\t    \n\t    // check x is a Matrix\n\t    if (x && x.isMatrix === true) {\n\t      // use optimized matrix implementation, return copy\n\t      return x.resize(size, defaultValue, true);\n\t    }\n\t    \n\t    if (typeof x === 'string') {\n\t      // resize string\n\t      return _resizeString(x, size, defaultValue);\n\t    }\n\t    \n\t    // check result should be a matrix\n\t    var asMatrix = Array.isArray(x) ? false : (config.matrix !== 'Array');\n\n\t    if (size.length == 0) {\n\t      // output a scalar\n\t      while (Array.isArray(x)) {\n\t        x = x[0];\n\t      }\n\n\t      return clone(x);\n\t    }\n\t    else {\n\t      // output an array/matrix\n\t      if (!Array.isArray(x)) {\n\t        x = [x];\n\t      }\n\t      x = clone(x);\n\n\t      var res = array.resize(x, size, defaultValue);\n\t      return asMatrix ? matrix(res) : res;\n\t    }\n\t  };\n\n\t  resize.toTex = undefined; // use default template\n\n\t  return resize;\n\n\t  /**\n\t   * Resize a string\n\t   * @param {string} str\n\t   * @param {number[]} size\n\t   * @param {string} [defaultChar=' ']\n\t   * @private\n\t   */\n\t  function _resizeString(str, size, defaultChar) {\n\t    if (defaultChar !== undefined) {\n\t      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\n\t        throw new TypeError('Single character expected as defaultValue');\n\t      }\n\t    }\n\t    else {\n\t      defaultChar = ' ';\n\t    }\n\n\t    if (size.length !== 1) {\n\t      throw new DimensionError(size.length, 1);\n\t    }\n\t    var len = size[0];\n\t    if (typeof len !== 'number' || !isInteger(len)) {\n\t      throw new TypeError('Invalid size, must contain positive integers ' +\n\t          '(size: ' + format(size) + ')');\n\t    }\n\n\t    if (str.length > len) {\n\t      return str.substring(0, len);\n\t    }\n\t    else if (str.length < len) {\n\t      var res = str;\n\t      for (var i = 0, ii = len - str.length; i < ii; i++) {\n\t        res += defaultChar;\n\t      }\n\t      return res;\n\t    }\n\t    else {\n\t      return str;\n\t    }\n\t  }\n\t}\n\n\texports.name = 'resize';\n\texports.factory = factory;\n\n\n/***/ },\n/* 434 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar array = __webpack_require__(40);\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Calculate the size of a matrix or scalar.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.size(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.size(2.3);                  // returns []\n\t   *     math.size('hello world');        // returns [11]\n\t   *\n\t   *     var A = [[1, 2, 3], [4, 5, 6]];\n\t   *     math.size(A);                    // returns [2, 3]\n\t   *     math.size(math.range(1,6));      // returns [5]\n\t   *\n\t   * See also:\n\t   *\n\t   *     resize, squeeze, subset\n\t   *\n\t   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\n\t   * @return {Array | Matrix} A vector with size of `x`.\n\t   */\n\t  var size = typed('size', {\n\t    'Matrix': function (x) {\n\t      // TODO: return the same matrix type as the input\n\t      return matrix(x.size());\n\t    },\n\n\t    'Array': array.size,\n\n\t    'string': function (x) {\n\t      return (config.matrix === 'Array') ? [x.length] : matrix([x.length]);\n\t    },\n\n\t    'number | Complex | BigNumber | Unit | boolean | null': function (x) {\n\t      // scalar\n\t      return (config.matrix === 'Array') ? [] : matrix([]);\n\t    }\n\t  });\n\n\t  size.toTex = undefined; // use default template\n\n\t  return size;\n\t}\n\n\texports.name = 'size';\n\texports.factory = factory;\n\n\n/***/ },\n/* 435 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar size = __webpack_require__(40).size;\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var asc = load(__webpack_require__(432));\n\t  var desc = function (a, b) {\n\t    return -asc(a, b);\n\t  };\n\n\t  /**\n\t   * Sort the items in a matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sort(x)\n\t   *    math.sort(x, compare)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sort([5, 10, 1]); // returns [1, 5, 10]\n\t   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']\n\t   *\n\t   *    function sortByLength (a, b) {\n\t   *      return a.length - b.length;\n\t   *    }\n\t   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']\n\t   *\n\t   * See also:\n\t   *\n\t   *    filter, forEach, map\n\t   *\n\t   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n\t   * @param {Function | 'asc' | 'desc'} [compare='asc']\n\t   *        An optional _comparator function. The function is called as\n\t   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n\t   *        and 0 when a == b.\n\t   * @return {Matrix | Array} Returns the sorted matrix.\n\t   */\n\t  var sort = typed('sort', {\n\t    'Array': function (x) {\n\t      _arrayIsVector(x);\n\t      return x.sort(asc);\n\t    },\n\n\t    'Matrix': function (x) {\n\t      _matrixIsVector(x);\n\t      return matrix(x.toArray().sort(asc), x.storage());\n\t    },\n\n\t    'Array, function': function (x, _comparator) {\n\t      _arrayIsVector(x);\n\t      return x.sort(_comparator);\n\t    },\n\n\t    'Matrix, function': function (x, _comparator) {\n\t      _matrixIsVector(x);\n\t      return matrix(x.toArray().sort(_comparator), x.storage());\n\t    },\n\n\t    'Array, string': function (x, order) {\n\t      _arrayIsVector(x);\n\t      return x.sort(_comparator(order));\n\t    },\n\n\t    'Matrix, string': function (x, order) {\n\t      _matrixIsVector(x);\n\t      return matrix(x.toArray().sort(_comparator(order)), x.storage());\n\t    }\n\t  });\n\n\t  sort.toTex = undefined; // use default template\n\n\t  /**\n\t   * Get the comparator for given order ('asc' or 'desc')\n\t   * @param {'asc' | 'desc'} order\n\t   * @return {Function} Returns a _comparator function\n\t   */\n\t  function _comparator (order) {\n\t    if (order === 'asc') {\n\t      return asc;\n\t    }\n\t    else if (order === 'desc') {\n\t      return desc;\n\t    }\n\t    else {\n\t      throw new Error('String \"asc\" or \"desc\" expected');\n\t    }\n\t  }\n\n\t  /**\n\t   * Validate whether an array is one dimensional\n\t   * Throws an error when this is not the case\n\t   * @param {Array} array\n\t   * @private\n\t   */\n\t  function _arrayIsVector (array) {\n\t    if (size(array).length !== 1) {\n\t      throw new Error('One dimensional array expected');\n\t    }\n\t  }\n\n\t  /**\n\t   * Validate whether a matrix is one dimensional\n\t   * Throws an error when this is not the case\n\t   * @param {Matrix} matrix\n\t   * @private\n\t   */\n\t  function _matrixIsVector (matrix) {\n\t    if (matrix.size().length !== 1) {\n\t      throw new Error('One dimensional matrix expected');\n\t    }\n\t  }\n\n\t  return sort;\n\t}\n\n\texports.name = 'sort';\n\texports.factory = factory;\n\n\n/***/ },\n/* 436 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar object = __webpack_require__(3);\n\tvar array = __webpack_require__(40);\n\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\n\t  /**\n\t   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.squeeze(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.squeeze([3]);           // returns 3\n\t   *     math.squeeze([[3]]);         // returns 3\n\t   *\n\t   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)\n\t   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)\n\t   *\n\t   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)\n\t   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)\n\t   *\n\t   *     // only inner and outer dimensions are removed\n\t   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n\t   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n\t   *\n\t   * See also:\n\t   *\n\t   *     subset\n\t   *\n\t   * @param {Matrix | Array} x      Matrix to be squeezed\n\t   * @return {Matrix | Array} Squeezed matrix\n\t   */\n\t  var squeeze = typed('squeeze', {\n\t    'Array': function (x) {\n\t      return array.squeeze(object.clone(x));\n\t    },\n\n\t    'Matrix': function (x) {\n\t      var res = array.squeeze(x.toArray());\n\t      // FIXME: return the same type of matrix as the input\n\t      return Array.isArray(res) ? matrix(res) : res;\n\t    },\n\n\t    'any': function (x) {\n\t      // scalar\n\t      return object.clone(x);\n\t    }\n\t  });\n\n\t  squeeze.toTex = undefined; // use default template\n\n\t  return squeeze;\n\t}\n\n\texports.name = 'squeeze';\n\texports.factory = factory;\n\n\n/***/ },\n/* 437 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  //require('./distribution'), // TODO: rethink math.distribution\n\t  __webpack_require__(407),\n\t  __webpack_require__(405),\n\t  __webpack_require__(406),\n\t  __webpack_require__(438),\n\t  __webpack_require__(440),\n\t  __webpack_require__(441),\n\t  __webpack_require__(442),\n\t  __webpack_require__(444),\n\t  __webpack_require__(445)\n\t];\n\n\n/***/ },\n/* 438 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\tfunction factory(type, config, load, typed) {\n\t    var matrix = load(__webpack_require__(52));\n\t    var divide = load(__webpack_require__(317));\n\t    var sum = load(__webpack_require__(439));\n\t    var multiply = load(__webpack_require__(84));\n\t    var dotDivide = load(__webpack_require__(359));\n\t    var log = load(__webpack_require__(374));\n\t    var isNumeric = load(__webpack_require__(88));\n\n\t    /**\n\t     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n\t     *\n\t     * Syntax:\n\t     *\n\t     *     math.kldivergence(x, y)\n\t     *\n\t     * Examples:\n\t     *\n\t     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153\n\t     *\n\t     *\n\t     * @param  {Array | Matrix} q    First vector\n\t     * @param  {Array | Matrix} p    Second vector\n\t     * @return {number}              Returns distance between q and p\n\t     */\n\t    var kldivergence = typed('kldivergence', {\n\t        'Array, Array': function(q, p) {\n\t            return _kldiv(matrix(q), matrix(p));\n\t        },\n\n\t        'Matrix, Array': function(q, p) {\n\t            return _kldiv(q, matrix(p));\n\t        },\n\n\t        'Array, Matrix': function(q, p){\n\t            return _kldiv(matrix(q), p);\n\t        },\n\n\t        'Matrix, Matrix': function(q, p){\n\t            return _kldiv(q, p);\n\t        }\n\n\t    });\n\n\t    function _kldiv(q, p) {\n\t        var plength = p.size().length;\n\t        var qlength = q.size().length;\n\t        if (plength > 1) {\n\t            throw new Error('first object must be one dimensional');\n\t        }\n\t        \n\t        if (qlength > 1) {\n\t            throw new Error('second object must be one dimensional');\n\t        }\n\t        \n\t        if(plength !== qlength){\n\t            throw new Error(\"Length of two vectors must be equal\");\n\t        }\n\t        \n\t        //Before calculation, apply normalization\n\t        var sumq = sum(q);\n\t        if (sumq === 0) {\n\t            throw new Error(\"Sum of elements in first object must be non zero\");\n\t        }\n\n\t        var sump = sum(p);\n\t        if (sump === 0) {\n\t            throw new Error(\"Sum of elements in second object must be non zero\");\n\t        }\n\t        var qnorm = divide(q, sum(q));\n\t        var pnorm = divide(p, sum(p));\n\n\t        var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));\n\t        if (isNumeric(result)) {\n\t            return result;\n\t        }\n\t        else {\n\t            return Number.NaN;\n\t        }\n\t    }\n\n\t    return kldivergence;\n\t}\n\n\n\texports.name = 'kldivergence';\n\texports.factory = factory;\n\t \n\n\n/***/ },\n/* 439 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepForEach = __webpack_require__(312);\n\n\tfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(53));\n\n\t  /**\n\t   * Compute the sum of a matrix or a list with values.\n\t   * In case of a (multi dimensional) array or matrix, the sum of all\n\t   * elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.sum(a, b, c, ...)\n\t   *     math.sum(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.sum(2, 1, 4, 3);               // returns 10\n\t   *     math.sum([2, 1, 4, 3]);             // returns 10\n\t   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, min, max, prod, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The sum of all values\n\t   */\n\t  var sum = typed('sum', {\n\t    'Array | Matrix': function (args) {\n\t      // sum([a, b, c, d, ...])\n\t      return _sum(args);\n\t    },\n\n\t    'Array | Matrix, number | BigNumber': function () {\n\t      // sum([a, b, c, d, ...], dim)\n\t      // TODO: implement sum(A, dim)\n\t      throw new Error('sum(A, dim) is not yet supported');\n\t    },\n\n\t    '...': function (args) {\n\t      // sum(a, b, c, d, ...)\n\t      return _sum(args);\n\t    }\n\t  });\n\n\t  sum.toTex = undefined; // use default template\n\n\t  return sum;\n\n\t  /**\n\t   * Recursively calculate the sum of an n-dimensional array\n\t   * @param {Array} array\n\t   * @return {number} sum\n\t   * @private\n\t   */\n\t  function _sum(array) {\n\t    var sum = undefined;\n\n\t    deepForEach(array, function (value) {\n\t      sum = (sum === undefined) ? value : add(sum, value);\n\t    });\n\n\t    if (sum === undefined) {\n\t      switch (config.number) {\n\t        case 'number':\n\t          return 0;\n\t        case 'BigNumber':\n\t          return new type.BigNumber(0);\n\t        case 'Fraction':\n\t          return new type.Fraction(0);\n\t        default:\n\t          return 0;\n\t      }\n\t    }\n\n\t    return sum;\n\t  }\n\t}\n\n\texports.name = 'sum';\n\texports.factory = factory;\n\n\n/***/ },\n/* 440 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepForEach = __webpack_require__(312);\n\n\tfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var multiply = load(__webpack_require__(84));\n\t  var divide = load(__webpack_require__(317));\n\t  var factorial = load(__webpack_require__(405));\n\t  var isInteger = load(__webpack_require__(408));\n\t  var isPositive = load(__webpack_require__(370));\n\n\t  /**\n\t   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n\t   *\n\t   * multinomial takes one array of integers as an argument.\n\t   * The following condition must be enforced: every ai <= 0\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.multinomial(a) // a is an array type\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.multinomial([1,2,1]); // returns 12\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, factorial\n\t   *\n\t   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n\t   * @return {Number | BigNumber}         Multinomial coefficient.\n\t   */\n\t  return typed('multinomial', {\n\t    'Array | Matrix': function (a) {\n\t      var sum = 0;\n\t      var denom = 1;\n\n\t      deepForEach(a, function(ai) {\n\t        if(!isInteger(ai) || !isPositive(ai)) {\n\t          throw new TypeError('Positive integer value expected in function multinomial');\n\t        }\n\t        sum = add(sum, ai);\n\t        denom = multiply(denom, factorial(ai));\n\t      });\n\n\t      return divide(factorial(sum), denom);\n\t    }\n\t  });\n\t}\n\n\texports.name = 'multinomial';\n\texports.factory = factory;\n\n\n/***/ },\n/* 441 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\n\tfunction factory (type, config, load, typed) {\n\t  var factorial = load(__webpack_require__(405));\n\n\t  /**\n\t   * Compute the number of ways of obtaining an ordered subset of `k` elements\n\t   * from a set of `n` elements.\n\t   *\n\t   * Permutations only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.permutations(n)\n\t   *     math.permutations(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.permutations(5);     // 120\n\t   *    math.permutations(5, 3);  // 60\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, factorial\n\t   *\n\t   * @param {number | BigNumber} n   The number of objects in total\n\t   * @param {number | BigNumber} [k] The number of objects in the subset\n\t   * @return {number | BigNumber}    The number of permutations\n\t   */\n\t  var permutations = typed('permutations', {\n\t    'number | BigNumber': factorial,\n\n\t    'number, number': function (n, k) {\n\t      var result, i;\n\n\t      if (!isInteger(n) || n < 0) {\n\t        throw new TypeError('Positive integer value expected in function permutations');\n\t      }\n\t      if (!isInteger(k) || k < 0) {\n\t        throw new TypeError('Positive integer value expected in function permutations');\n\t      }\n\t      if (k > n) {\n\t        throw new TypeError('second argument k must be less than or equal to first argument n');\n\t      }\n\n\t      // Permute n objects, k at a time\n\t      result = 1;\n\t      for (i = n - k + 1; i <= n; i++) {\n\t        result = result * i;\n\t      }\n\n\t      return result;\n\t    },\n\n\t    'BigNumber, BigNumber': function (n, k) {\n\t      var result, i;\n\n\t      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n\t        throw new TypeError('Positive integer value expected in function permutations');\n\t      }\n\t      if (k.gt(n)) {\n\t        throw new TypeError('second argument k must be less than or equal to first argument n');\n\t      }\n\n\t      result = new type.BigNumber(1);\n\t      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n\t        result = result.times(i);\n\t      }\n\n\t      return result;\n\t    }\n\n\t    // TODO: implement support for collection in permutations\n\t  });\n\n\t  permutations.toTex = undefined; // use default template\n\n\t  return permutations;\n\t}\n\n\t/**\n\t * Test whether BigNumber n is a positive integer\n\t * @param {BigNumber} n\n\t * @returns {boolean} isPositiveInteger\n\t */\n\tfunction isPositiveInteger(n) {\n\t  return n.isInteger() && n.gte(0);\n\t}\n\n\texports.name = 'permutations';\n\texports.factory = factory;\n\n\n/***/ },\n/* 442 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var distribution = load(__webpack_require__(443));\n\n\t  /**\n\t   * Random pick a value from a one dimensional array.\n\t   * Array element is picked using a random function with uniform distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.pickRandom(array)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.pickRandom([3, 6, 12, 2]);       // returns one of the values in the array\n\t   *\n\t   * See also:\n\t   *\n\t   *     random, randomInt\n\t   *\n\t   * @param {Array} array     A one dimensional array\n\t   * @return {number} One of the elements of the provided input array\n\t   */\n\t  // TODO: rework pickRandom to a typed-function\n\t  var pickRandom =  distribution('uniform').pickRandom;\n\n\t  pickRandom.toTex = undefined; // use default template\n\n\t  return pickRandom;\n\t}\n\n\texports.name = 'pickRandom';\n\texports.factory = factory;\n\n\n/***/ },\n/* 443 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar ArgumentsError = __webpack_require__(11);\n\tvar isCollection = __webpack_require__(310);\n\n\t// TODO: rethink math.distribution\n\t// TODO: rework to a typed function\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var array = __webpack_require__(40);\n\n\t  /**\n\t   * Create a distribution object with a set of random functions for given\n\t   * random distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.distribution(name)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var normalDist = math.distribution('normal'); // create a normal distribution\n\t   *     normalDist.random(0, 10);                     // get a random value between 0 and 10\n\t   *\n\t   * See also:\n\t   *\n\t   *     random, randomInt, pickRandom\n\t   *\n\t   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.\n\t   * @return {Object}       Returns a distribution object containing functions:\n\t   *                        `random([size] [, min] [, max])`,\n\t   *                        `randomInt([min] [, max])`,\n\t   *                        `pickRandom(array)`\n\t   */\n\t  function distribution(name) {\n\t    if (!distributions.hasOwnProperty(name))\n\t      throw new Error('Unknown distribution ' + name);\n\n\t    var args = Array.prototype.slice.call(arguments, 1),\n\t        distribution = distributions[name].apply(this, args);\n\n\t    return (function(distribution) {\n\n\t      // This is the public API for all distributions\n\t      var randFunctions = {\n\n\t        random: function(arg1, arg2, arg3) {\n\t          var size, min, max;\n\t          if (arguments.length > 3) {\n\t            throw new ArgumentsError('random', arguments.length, 0, 3);\n\n\t          // `random(max)` or `random(size)`\n\t          } else if (arguments.length === 1) {\n\t            if (isCollection(arg1)) {\n\t              size = arg1;\n\t            }\n\t            else {\n\t              max = arg1;\n\t            }\n\t          // `random(min, max)` or `random(size, max)`\n\t          } else if (arguments.length === 2) {\n\t            if (isCollection(arg1)) {\n\t              size = arg1;\n\t              max = arg2;\n\t            }\n\t            else {\n\t              min = arg1;\n\t              max = arg2;\n\t            }\n\t          // `random(size, min, max)`\n\t          } else {\n\t            size = arg1;\n\t            min = arg2;\n\t            max = arg3;\n\t          }\n\n\t          // TODO: validate type of min, max, and size\n\n\t          if (max === undefined) max = 1;\n\t          if (min === undefined) min = 0;\n\t          if (size !== undefined) {\n\t            var res = _randomDataForMatrix(size.valueOf(), min, max, _random);\n\t            return (size && size.isMatrix === true) ? matrix(res) : res;\n\t          }\n\t          else return _random(min, max);\n\t        },\n\n\t        randomInt: function(arg1, arg2, arg3) {\n\t          var size, min, max;\n\t          if (arguments.length > 3 || arguments.length < 1)\n\t            throw new ArgumentsError('randomInt', arguments.length, 1, 3);\n\n\t          // `random(max)` or `random(size)`\n\t          else if (arguments.length === 1)\n\t            if (isCollection(arg1)) {\n\t              size = arg1;\n\t            }\n\t            else {\n\t              max = arg1;\n\t            }\n\t          // `randomInt(min, max)` or `randomInt(size, max)`\n\t          else if (arguments.length === 2) {\n\t            if (isCollection(arg1)) {\n\t              size = arg1;\n\t              max = arg2;\n\t            }\n\t            else {\n\t              min = arg1;\n\t              max = arg2;\n\t            }\n\t          // `randomInt(size, min, max)`\n\t          } else {\n\t            size = arg1;\n\t            min = arg2;\n\t            max = arg3;\n\t          }\n\n\t          // TODO: validate type of min, max, and size\n\n\t          if (min === undefined) min = 0;\n\t          if (size !== undefined) {\n\t            var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);\n\t            return (size && size.isMatrix === true) ? matrix(res) : res;\n\t          }\n\t          else return _randomInt(min, max);\n\t        },\n\n\t        pickRandom: function(possibles) {\n\t          if (arguments.length !== 1) {\n\t            throw new ArgumentsError('pickRandom', arguments.length, 1);\n\t          }\n\t          if (possibles && possibles.isMatrix === true) {\n\t            possibles = possibles.valueOf(); // get Array\n\t          }\n\t          else if (!Array.isArray(possibles)) {\n\t            throw new TypeError('Unsupported type of value in function pickRandom');\n\t          }\n\n\t          if (array.size(possibles).length > 1) {\n\t            throw new Error('Only one dimensional vectors supported');\n\t          }\n\n\t          // TODO: add support for multi dimensional matrices\n\t          return possibles[Math.floor(Math.random() * possibles.length)];\n\t        }\n\n\t      };\n\n\t      var _random = function(min, max) {\n\t        return min + distribution() * (max - min);\n\t      };\n\n\t      var _randomInt = function(min, max) {\n\t        return Math.floor(min + distribution() * (max - min));\n\t      };\n\n\t      // This is a function for generating a random matrix recursively.\n\t      var _randomDataForMatrix = function(size, min, max, randFunc) {\n\t        var data = [], length, i;\n\t        size = size.slice(0);\n\n\t        if (size.length > 1) {\n\t          for (i = 0, length = size.shift(); i < length; i++)\n\t            data.push(_randomDataForMatrix(size, min, max, randFunc));\n\t        } else {\n\t          for (i = 0, length = size.shift(); i < length; i++)\n\t            data.push(randFunc(min, max));\n\t        }\n\n\t        return data;\n\t      };\n\n\t      return randFunctions;\n\n\t    })(distribution);\n\t  }\n\n\t  // Each distribution is a function that takes no argument and when called returns\n\t  // a number between 0 and 1.\n\t  var distributions = {\n\n\t    uniform: function() {\n\t      return Math.random;\n\t    },\n\n\t    // Implementation of normal distribution using Box-Muller transform\n\t    // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform\n\t    // We take : mean = 0.5, standard deviation = 1/6\n\t    // so that 99.7% values are in [0, 1].\n\t    normal: function() {\n\t      return function() {\n\t        var u1, u2,\n\t            picked = -1;\n\t        // We reject values outside of the interval [0, 1]\n\t        // TODO: check if it is ok to do that?\n\t        while (picked < 0 || picked > 1) {\n\t          u1 = Math.random();\n\t          u2 = Math.random();\n\t          picked = 1/6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;\n\t        }\n\t        return picked;\n\t      }\n\t    }\n\t  };\n\n\t  distribution.toTex = undefined; // use default template\n\n\t  return distribution;\n\t}\n\n\texports.name = 'distribution';\n\texports.factory = factory;\n\n\n/***/ },\n/* 444 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var distribution = load(__webpack_require__(443));\n\n\t  /**\n\t   * Return a random number larger or equal to `min` and smaller than `max`\n\t   * using a uniform distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.random()                // generate a random number between 0 and 1\n\t   *     math.random(max)             // generate a random number between 0 and max\n\t   *     math.random(min, max)        // generate a random number between min and max\n\t   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n\t   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n\t   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.random();       // returns a random number between 0 and 1\n\t   *     math.random(100);    // returns a random number between 0 and 100\n\t   *     math.random(30, 40); // returns a random number between 30 and 40\n\t   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1\n\t   *\n\t   * See also:\n\t   *\n\t   *     randomInt, pickRandom\n\t   *\n\t   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n\t   *                                size and filled with random values is returned\n\t   * @param {number} [min]  Minimum boundary for the random value, included\n\t   * @param {number} [max]  Maximum boundary for the random value, excluded\n\t   * @return {number | Array | Matrix} A random number\n\t   */\n\t  // TODO: rework random to a typed-function\n\t  var random = distribution('uniform').random;\n\n\t  random.toTex = undefined; // use default template\n\n\t  return random;\n\t}\n\n\texports.name = 'random';\n\texports.factory = factory;\n\n\n/***/ },\n/* 445 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var distribution = load(__webpack_require__(443));\n\n\t  /**\n\t   * Return a random integer number larger or equal to `min` and smaller than `max`\n\t   * using a uniform distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.randomInt(max)             // generate a random integer between 0 and max\n\t   *     math.randomInt(min, max)        // generate a random integer between min and max\n\t   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n\t   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n\t   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.randomInt(100);    // returns a random integer between 0 and 100\n\t   *     math.randomInt(30, 40); // returns a random integer between 30 and 40\n\t   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1\n\t   *\n\t   * See also:\n\t   *\n\t   *     random, pickRandom\n\t   *\n\t   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n\t   *                                size and filled with random values is returned\n\t   * @param {number} [min]  Minimum boundary for the random value, included\n\t   * @param {number} [max]  Maximum boundary for the random value, excluded\n\t   * @return {number | Array | Matrix} A random integer value\n\t   */\n\t  // TODO: rework randomInt to a typed-function\n\t  var randomInt = distribution('uniform').randomInt;\n\n\t  randomInt.toTex = undefined; // use default template\n\n\t  return randomInt;\n\t}\n\n\texports.name = 'randomInt';\n\texports.factory = factory;\n\n\n/***/ },\n/* 446 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(432),\n\t  __webpack_require__(447),\n\t  __webpack_require__(87),\n\t  __webpack_require__(64),\n\t  __webpack_require__(342),\n\t  __webpack_require__(60),\n\t  __webpack_require__(448),\n\t  __webpack_require__(449)\n\t];\n\n\n/***/ },\n/* 447 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var equal = load(__webpack_require__(87));\n\n\t  /**\n\t   * Test element wise whether two matrices are equal.\n\t   * The function accepts both matrices and scalar values.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.deepEqual(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.deepEqual(2, 4);   // returns false\n\t   *\n\t   *    a = [2, 5, 1];\n\t   *    b = [2, 7, 1];\n\t   *\n\t   *    math.deepEqual(a, b);   // returns false\n\t   *    math.equal(a, b);       // returns [true, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t   *            Returns true when the input matrices have the same size and each of their elements is equal.\n\t   */\n\t  var deepEqual = typed('deepEqual', {\n\t    'any, any': function (x, y) {\n\t      return _deepEqual(x.valueOf(), y.valueOf());\n\t    }\n\t  });\n\n\t  deepEqual.toTex = undefined; // use default template\n\n\t  return deepEqual;\n\n\t  /**\n\t   * Test whether two arrays have the same size and all elements are equal\n\t   * @param {Array | *} x\n\t   * @param {Array | *} y\n\t   * @return {boolean} Returns true if both arrays are deep equal\n\t   */\n\t  function _deepEqual(x, y) {\n\t    if (Array.isArray(x)) {\n\t      if (Array.isArray(y)) {\n\t        var len = x.length;\n\t        if (len !== y.length) {\n\t          return false;\n\t        }\n\n\t        for (var i = 0; i < len; i++) {\n\t          if (!_deepEqual(x[i], y[i])) {\n\t            return false;\n\t          }\n\t        }\n\n\t        return true;\n\t      }\n\t      else {\n\t        return false;\n\t      }\n\t    }\n\t    else {\n\t      if (Array.isArray(y)) {\n\t        return false;\n\t      }\n\t      else {\n\t        return equal(x, y);\n\t      }\n\t    }\n\t  }\n\t}\n\n\texports.name = 'deepEqual';\n\texports.factory = factory;\n\n\n/***/ },\n/* 448 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Test whether value x is smaller or equal to y.\n\t   *\n\t   * The function returns true when x is smaller than y or the relative\n\t   * difference between x and y is smaller than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.smallerEq(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.smaller(1 + 2, 3);        // returns false\n\t   *    math.smallerEq(1 + 2, 3);      // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, larger, largerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n\t   */\n\t  var smallerEq = typed('smallerEq', {\n\n\t    'boolean, boolean': function (x, y) {\n\t      return x <= y;\n\t    },\n\n\t    'number, number': function (x, y) {\n\t      return x <= y || nearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return x.compare(y) !== 1;\n\t    },\n\n\t    'Complex, Complex': function () {\n\t      throw new TypeError('No ordering relation is defined for complex numbers');\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      if (!x.equalBase(y)) {\n\t        throw new Error('Cannot compare units with different base');\n\t      }\n\t      return smallerEq(x.value, y.value);\n\t    },\n\n\t    'string, string': function (x, y) {\n\t      return x <= y;\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm07(x, y, smallerEq);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm03(y, x, smallerEq, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm03(x, y, smallerEq, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, smallerEq);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return smallerEq(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return smallerEq(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return smallerEq(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(x, y, smallerEq, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, smallerEq, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, smallerEq, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, smallerEq, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, smallerEq, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, smallerEq, true).valueOf();\n\t    }\n\t  });\n\n\t  smallerEq.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['smallerEq'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return smallerEq;\n\t}\n\n\texports.name = 'smallerEq';\n\texports.factory = factory;\n\n\n/***/ },\n/* 449 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  var latex = __webpack_require__(32);\n\n\t  /**\n\t   * Test whether two values are unequal.\n\t   *\n\t   * The function tests whether the relative difference between x and y is\n\t   * larger than the configured epsilon. The function cannot be used to compare\n\t   * values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n\t   *\n\t   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n\t   * with everything except `null`, and `undefined` is unequal with everying\n\t   * except. `undefined`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.unequal(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.unequal(2 + 2, 3);       // returns true\n\t   *    math.unequal(2 + 2, 4);       // returns false\n\t   *\n\t   *    var a = math.unit('50 cm');\n\t   *    var b = math.unit('5 m');\n\t   *    math.unequal(a, b);           // returns false\n\t   *\n\t   *    var c = [2, 5, 1];\n\t   *    var d = [2, 7, 1];\n\t   *\n\t   *    math.unequal(c, d);           // returns [false, true, false]\n\t   *    math.deepEqual(c, d);         // returns false\n\t   *\n\t   *    math.unequal(0, null);        // returns true\n\t   * See also:\n\t   *\n\t   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\n\t   */\n\t  var unequal = typed('unequal', {\n\t    \n\t    'any, any': function (x, y) {\n\t      // strict equality for null and undefined?\n\t      if (x === null) { return y !== null; }\n\t      if (y === null) { return x !== null; }\n\t      if (x === undefined) { return y !== undefined; }\n\t      if (y === undefined) { return x !== undefined; }\n\n\t      return _unequal(x, y);\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse + sparse\n\t              c = algorithm07(x, y, _unequal);\n\t              break;\n\t            default:\n\t              // sparse + dense\n\t              c = algorithm03(y, x, _unequal, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense + sparse\n\t              c = algorithm03(x, y, _unequal, false);\n\t              break;\n\t            default:\n\t              // dense + dense\n\t              c = algorithm13(x, y, _unequal);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return unequal(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return unequal(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return unequal(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(x, y, _unequal, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, _unequal, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, _unequal, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, _unequal, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, _unequal, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, _unequal, true).valueOf();\n\t    }\n\t  });\n\n\t  var _unequal = typed('_unequal', {\n\n\t    'boolean, boolean': function (x, y) {\n\t      return x !== y;\n\t    },\n\n\t    'number, number': function (x, y) {\n\t      return !nearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'BigNumber, BigNumber': function (x, y) {\n\t      return !bigNearlyEqual(x, y, config.epsilon);\n\t    },\n\n\t    'Fraction, Fraction': function (x, y) {\n\t      return !x.equals(y);\n\t    },\n\n\t    'Complex, Complex': function (x, y) {\n\t      return !x.equals(y);\n\t    },\n\n\t    'Unit, Unit': function (x, y) {\n\t      if (!x.equalBase(y)) {\n\t        throw new Error('Cannot compare units with different base');\n\t      }\n\t      return unequal(x.value, y.value);\n\t    },\n\n\t    'string, string': function (x, y) {\n\t      return x !== y;\n\t    }\n\t  });\n\n\t  unequal.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['unequal'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return unequal;\n\t}\n\n\texports.name = 'unequal';\n\texports.factory = factory;\n\n\n/***/ },\n/* 450 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(311),\n\t  __webpack_require__(316),\n\t  __webpack_require__(451),\n\t  __webpack_require__(321),\n\t  __webpack_require__(452),\n\t  __webpack_require__(453),\n\t  __webpack_require__(454),\n\t  __webpack_require__(455),\n\t  __webpack_require__(439),\n\t  __webpack_require__(456)\n\t];\n\n/***/ },\n/* 451 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar flatten = __webpack_require__(40).flatten;\n\tvar reduce = __webpack_require__(313);\n\tvar containsCollections = __webpack_require__(314);\n\n\tfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(53));\n\t  var divide = load(__webpack_require__(81));\n\t  var compare = load(__webpack_require__(432));\n\t  var partitionSelect = load(__webpack_require__(431));\n\n\t  /**\n\t   * Compute the median of a matrix or a list with values. The values are\n\t   * sorted and the middle value is returned. In case of an even number of\n\t   * values, the average of the two middle values is returned.\n\t   * Supported types of values are: Number, BigNumber, Unit\n\t   *\n\t   * In case of a (multi dimensional) array or matrix, the median of all\n\t   * elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.median(a, b, c, ...)\n\t   *     math.median(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.median(5, 2, 7);        // returns 5\n\t   *     math.median([3, -1, 5, 7]);  // returns 4\n\t   *\n\t   * See also:\n\t   *\n\t   *     mean, min, max, sum, prod, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The median\n\t   */\n\t  var median = typed('median', {\n\t    // median([a, b, c, d, ...])\n\t    'Array | Matrix': _median,\n\n\t    // median([a, b, c, d, ...], dim)\n\t    'Array | Matrix, number | BigNumber': function (array, dim) {\n\t      // TODO: implement median(A, dim)\n\t      throw new Error('median(A, dim) is not yet supported');\n\t      //return reduce(arguments[0], arguments[1], ...);\n\t    },\n\n\t    // median(a, b, c, d, ...)\n\t    '...': function (args) {\n\t      if (containsCollections(args)) {\n\t          throw new TypeError('Scalar values expected in function median');\n\t      }\n\n\t      return _median(args);\n\t    }\n\t  });\n\n\n\t  /**\n\t   * Recursively calculate the median of an n-dimensional array\n\t   * @param {Array} array\n\t   * @return {Number} median\n\t   * @private\n\t   */\n\t  function _median(array) {\n\t    array = flatten(array.valueOf());\n\n\t    var num = array.length;\n\t    if (num == 0) {\n\t      throw new Error('Cannot calculate median of an empty array');\n\t    }\n\n\t    if (num % 2 == 0) {\n\t      // even: return the average of the two middle values\n\t      var mid = num / 2 - 1;\n\t      var right = partitionSelect(array, mid + 1);\n\n\t      // array now partitioned at mid + 1, take max of left part\n\t      var left = array[mid];\n\t      for (var i = 0; i < mid; ++i) {\n\t        if (compare(array[i], left) > 0) {\n\t          left = array[i];\n\t        }\n\t      }\n\n\t      return middle2(left, right);\n\t    }\n\t    else {\n\t      // odd: return the middle value\n\t      var m = partitionSelect(array, (num - 1) / 2);\n\n\t      return middle(m);\n\t    }\n\t  }\n\n\t  // helper function to type check the middle value of the array\n\t  var middle = typed({\n\t    'number | BigNumber | Unit': function (value) {\n\t      return value;\n\t    }\n\t  });\n\n\t  // helper function to type check the two middle value of the array\n\t  var middle2 = typed({\n\t    'number | BigNumber | Unit, number | BigNumber | Unit': function (left, right) {\n\t      return divide(add(left, right), 2);\n\t    }\n\t  });\n\n\t  median.toTex = undefined; // use default template\n\n\t  return median;\n\t}\n\n\texports.name = 'median';\n\texports.factory = factory;\n\n\n/***/ },\n/* 452 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar flatten = __webpack_require__(40).flatten;\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n\t  * If there are more than one modes, it returns a list of those values.\n\t  *\n\t  * Syntax:\n\t  *\n\t  *     math.mode(a, b, c, ...)\n\t  *     math.mode(A)\n\t  *\n\t  * Examples:\n\t  *\n\t  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]\n\t  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]\n\t  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n\t  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n\t  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n\t  *\n\t  * See also:\n\t  *\n\t  *     median,\n\t  *     mean\n\t  *\n\t  * @param {... *} args  A single matrix\n\t  * @return {*} The mode of all values\n\t  */\n\n\t  var mode = typed('mode', {\n\t    'Array | Matrix' : _mode,\n\t    \n\t    '...': function (args) {\n\t      return _mode(args);\n\t    }\n\t  });\n\t  \n\t  return mode;\n\n\t  /**\n\t   * Calculates the mode in an 1-dimensional array\n\t   * @param {Array} values\n\t   * @return {number} mode\n\t   * @private\n\t   */\n\t  function _mode(values) {\n\t    values = flatten(values.valueOf());\n\t    var num = values.length;\n\t    if (num == 0) {\n\t      throw new Error('Cannot calculate mode of an empty array');\n\t    }\n\t    \n\t    var count = {},\n\t        mode = [],\n\t        max = 0;\n\t    for (var i in values) {\n\t      if (!(values[i] in count)){\n\t        count[values[i]] = 0;\n\t      }\n\t      count[values[i]]++;\n\t      if (count[values[i]] == max){\n\t        mode.push(values[i]);\n\t      }\n\t      else if (count[values[i]] > max) {\n\t        max = count[values[i]];\n\t        mode = [values[i]];\n\t      }\n\t    }\n\t    return mode; \n\t  };\n\t}\n\n\texports.name = 'mode';\n\texports.factory = factory;\n\n/***/ },\n/* 453 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepForEach = __webpack_require__(312);\n\n\tfunction factory (type, config, load, typed) {\n\t  var multiply = load(__webpack_require__(80));\n\n\t  /**\n\t   * Compute the product of a matrix or a list with values.\n\t   * In case of a (multi dimensional) array or matrix, the sum of all\n\t   * elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.prod(a, b, c, ...)\n\t   *     math.prod(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.multiply(2, 3);           // returns 6\n\t   *     math.prod(2, 3);               // returns 6\n\t   *     math.prod(2, 3, 4);            // returns 24\n\t   *     math.prod([2, 3, 4]);          // returns 24\n\t   *     math.prod([[2, 5], [4, 3]]);   // returns 120\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, min, max, sum, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The product of all values\n\t   */\n\t  var prod = typed('prod', {\n\t    // prod([a, b, c, d, ...])\n\t    'Array | Matrix': _prod,\n\n\t    // prod([a, b, c, d, ...], dim)\n\t    'Array | Matrix, number | BigNumber': function (array, dim) {\n\t      // TODO: implement prod(A, dim)\n\t      throw new Error('prod(A, dim) is not yet supported');\n\t      //return reduce(arguments[0], arguments[1], math.prod);\n\t    },\n\n\t    // prod(a, b, c, d, ...)\n\t    '...': function (args) {\n\t      return _prod(args);\n\t    }\n\t  });\n\n\t  prod.toTex = undefined; // use default template\n\n\t  return prod;\n\n\t  /**\n\t   * Recursively calculate the product of an n-dimensional array\n\t   * @param {Array} array\n\t   * @return {number} prod\n\t   * @private\n\t   */\n\t  function _prod(array) {\n\t    var prod = undefined;\n\n\t    deepForEach(array, function (value) {\n\t      prod = (prod === undefined) ? value : multiply(prod, value);\n\t    });\n\n\t    if (prod === undefined) {\n\t      throw new Error('Cannot calculate prod of an empty array');\n\t    }\n\n\t    return prod;\n\t  }\n\t}\n\n\texports.name = 'prod';\n\texports.factory = factory;\n\n\n/***/ },\n/* 454 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar isNumber = __webpack_require__(6).isNumber;\n\tvar flatten = __webpack_require__(40).flatten;\n\tvar isCollection = __webpack_require__(310);\n\n\tfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var multiply = load(__webpack_require__(84));\n\t  var partitionSelect = load(__webpack_require__(431));\n\t  var compare = load(__webpack_require__(432));\n\n\t  /**\n\t   * Compute the prob order quantile of a matrix or a list with values.\n\t   * The sequence is sorted and the middle value is returned.\n\t   * Supported types of sequence values are: Number, BigNumber, Unit\n\t   * Supported types of probability are: Number, BigNumber\n\t   *\n\t   * In case of a (multi dimensional) array or matrix, the prob order quantile\n\t   * of all elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.quantileSeq(A, prob[, sorted])\n\t   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])\n\t   *     math.quantileSeq(A, N[, sorted])\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4\n\t   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]\n\t   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]\n\t   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4\n\t   *\n\t   * See also:\n\t   *\n\t   *     median, mean, min, max, sum, prod, std, var\n\t   *\n\t   * @param {Array, Matrix} data                A single matrix or Array\n\t   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is\n\t   *                                            the amount of evenly distributed steps of\n\t   *                                            probabilities; only one of these options can\n\t   *                                            be provided\n\t   * @param {Boolean} sorted=false              is data sorted in ascending order\n\t   * @return {Number, BigNumber, Unit, Array}   Quantile(s)\n\t   */\n\t  function quantileSeq(data, probOrN, sorted) {\n\t    var probArr, dataArr, one;\n\n\t    if (arguments.length < 2 || arguments.length > 3) {\n\t      throw new SyntaxError('Function quantileSeq requires two or three parameters');\n\t    }\n\n\t    if (isCollection(data)) {\n\t      sorted = sorted || false;\n\t      if (typeof sorted === 'boolean') {\n\t        dataArr = data.valueOf();\n\t        if (isNumber(probOrN)) {\n\t          if (probOrN < 0) {\n\t            throw new Error('N/prob must be non-negative');\n\t          }\n\n\t          if (probOrN <= 1) {\n\t            // quantileSeq([a, b, c, d, ...], prob[,sorted])\n\t            return _quantileSeq(dataArr, probOrN, sorted);\n\t          }\n\n\t          if (probOrN > 1) {\n\t            // quantileSeq([a, b, c, d, ...], N[,sorted])\n\t            if (!isInteger(probOrN)) {\n\t              throw new Error('N must be a positive integer');\n\t            }\n\n\t            var nPlusOne = probOrN + 1;\n\t            probArr = new Array(probOrN);\n\t            for (var i = 0; i < probOrN;) {\n\t              probArr[i] = _quantileSeq(dataArr, (++i) / nPlusOne, sorted);\n\t            }\n\t            return probArr;\n\t          }\n\t        }\n\n\t        if (probOrN && probOrN.isBigNumber) {\n\t          if (probOrN.isNegative()) {\n\t            throw new Error('N/prob must be non-negative');\n\t          }\n\n\t          one = new probOrN.constructor(1);\n\n\t          if (probOrN.lte(one)) {\n\t            // quantileSeq([a, b, c, d, ...], prob[,sorted])\n\t            return _quantileSeq(dataArr, probOrN, sorted);\n\t          }\n\n\t          if (probOrN.gt(one)) {\n\t            // quantileSeq([a, b, c, d, ...], N[,sorted])\n\t            if (!probOrN.isInteger()) {\n\t              throw new Error('N must be a positive integer');\n\t            }\n\n\t            // largest possible Array length is 2^32-1;\n\t            // 2^32 < 10^15, thus safe conversion guaranteed\n\t            var intN = probOrN.toNumber();\n\t            if (intN > 4294967295) {\n\t              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');\n\t            }\n\n\t            var nPlusOne = new type.BigNumber(intN + 1);\n\t            probArr = new Array(intN);\n\t            for (var i = 0; i < intN;) {\n\t              probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);\n\t            }\n\t            return probArr;\n\t          }\n\t        }\n\n\t        if (Array.isArray(probOrN)) {\n\t          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])\n\t          probArr = new Array(probOrN.length);\n\t          for (var i = 0; i < probArr.length; ++i) {\n\t            var currProb = probOrN[i];\n\t            if (isNumber(currProb)) {\n\t              if (currProb < 0 || currProb > 1) {\n\t                throw new Error('Probability must be between 0 and 1, inclusive');\n\t              }\n\t            } else if (currProb && currProb.isBigNumber) {\n\t              one = new currProb.constructor(1);\n\t              if (currProb.isNegative() || currProb.gt(one)) {\n\t                throw new Error('Probability must be between 0 and 1, inclusive');\n\t              }\n\t            } else {\n\t              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n\t            }\n\n\t            probArr[i] = _quantileSeq(dataArr, currProb, sorted);\n\t          }\n\t          return probArr;\n\t        }\n\n\t        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n\t      }\n\n\t      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n\t    }\n\n\t    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n\t  }\n\n\t  /**\n\t   * Calculate the prob order quantile of an n-dimensional array.\n\t   * \n\t   * @param {Array} array\n\t   * @param {Number, BigNumber} prob\n\t   * @param {Boolean} sorted\n\t   * @return {Number, BigNumber, Unit} prob order quantile\n\t   * @private\n\t   */\n\t  function _quantileSeq(array, prob, sorted) {\n\t    var flat = flatten(array);\n\t    var len = flat.length;\n\t    if (len === 0) {\n\t      throw new Error('Cannot calculate quantile of an empty sequence');\n\t    }\n\n\t    if (isNumber(prob)) {\n\t      var index = prob * (len-1);\n\t      var fracPart = index % 1;\n\t      if (fracPart === 0) {\n\t        var value = sorted ? flat[index] : partitionSelect(flat, index);\n\n\t        validate(value);\n\n\t        return value;\n\t      }\n\n\t      var integerPart = Math.floor(index);\n\n\t      var left, right;\n\t      if (sorted) {\n\t        left = flat[integerPart];\n\t        right = flat[integerPart+1];\n\t      } else {\n\t        right = partitionSelect(flat, integerPart+1);\n\n\t        // max of partition is kth largest\n\t        left = flat[integerPart];\n\t        for (var i = 0; i < integerPart; ++i) {\n\t          if (compare(flat[i], left) > 0) {\n\t            left = flat[i];\n\t          }\n\t        }\n\t      }\n\n\t      validate(left);\n\t      validate(right);\n\n\t      // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]\n\t      return add(multiply(left, 1 - fracPart), multiply(right, fracPart));\n\t    }\n\n\t    // If prob is a BigNumber\n\t    var index = prob.times(len-1);\n\t    if (index.isInteger()) {\n\t      index = index.toNumber();\n\t      var value = sorted ? flat[index] : partitionSelect(flat, index);\n\n\t      validate(value);\n\n\t      return value;\n\t    }\n\n\t    var integerPart = index.floor();\n\t    var fracPart = index.minus(integerPart);\n\t    var integerPartNumber = integerPart.toNumber();\n\n\t    var left, right;\n\t    if (sorted) {\n\t      left = flat[integerPartNumber];\n\t      right = flat[integerPartNumber+1];\n\t    } else {\n\t      right = partitionSelect(flat, integerPartNumber+1);\n\n\t      // max of partition is kth largest\n\t      left = flat[integerPartNumber];\n\t      for (var i = 0; i < integerPartNumber; ++i) {\n\t        if (compare(flat[i], left) > 0) {\n\t          left = flat[i];\n\t        }\n\t      }\n\t    }\n\n\t    validate(left);\n\t    validate(right);\n\n\t    // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]\n\t    var one = new fracPart.constructor(1);\n\t    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));\n\t  }\n\n\t  /**\n\t   * Check if array value types are valid, throw error otherwise.\n\t   * @param {number | BigNumber | Unit} x\n\t   * @param {number | BigNumber | Unit} x\n\t   * @private\n\t   */\n\t  var validate = typed({\n\t    'number | BigNumber | Unit': function (x) {\n\t      return x;\n\t    }\n\t  });\n\n\t  return quantileSeq;\n\t}\n\n\texports.name = 'quantileSeq';\n\texports.factory = factory;\n\n\n/***/ },\n/* 455 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var sqrt       = load(__webpack_require__(369));\n\t  var variance   = load(__webpack_require__(456));\n\n\t  /**\n\t   * Compute the standard deviation of a matrix or a  list with values.\n\t   * The standard deviations is defined as the square root of the variance:\n\t   * `std(A) = sqrt(var(A))`.\n\t   * In case of a (multi dimensional) array or matrix, the standard deviation\n\t   * over all elements will be calculated.\n\t   *\n\t   * Optionally, the type of normalization can be specified as second\n\t   * parameter. The parameter `normalization` can be one of the following values:\n\t   *\n\t   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\t   * - 'uncorrected'        The sum of squared errors is divided by n\n\t   * - 'biased'             The sum of squared errors is divided by (n + 1)\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.std(a, b, c, ...)\n\t   *     math.std(A)\n\t   *     math.std(A, normalization)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.std(2, 4, 6);                     // returns 2\n\t   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611\n\t   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979\n\t   *     math.std([2, 4, 6, 8], 'biased');      // returns 2\n\t   *\n\t   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, max, min, prod, sum, var\n\t   *\n\t   * @param {Array | Matrix} array\n\t   *                        A single matrix or or multiple scalar values\n\t   * @param {string} [normalization='unbiased']\n\t   *                        Determines how to normalize the variance.\n\t   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n\t   * @return {*} The standard deviation\n\t   */\n\t  var std = typed('std', {\n\t    // std([a, b, c, d, ...])\n\t    'Array | Matrix': _std,\n\n\t    // std([a, b, c, d, ...], normalization)\n\t    'Array | Matrix, string': _std,\n\n\t    // std(a, b, c, d, ...)\n\t    '...': function (args) {\n\t      return _std(args);\n\t    }\n\t  });\n\t  \n\t  std.toTex = undefined; // use default template\n\n\t  return std;\n\n\t  function _std(array, normalization) {\n\t    if (array.length == 0) {\n\t      throw new SyntaxError('Function std requires one or more parameters (0 provided)');\n\t    }\n\n\t    return sqrt(variance.apply(null, arguments));\n\t  }\n\t}\n\n\texports.name = 'std';\n\texports.factory = factory;\n\n\n/***/ },\n/* 456 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar DEFAULT_NORMALIZATION = 'unbiased';\n\n\tvar deepForEach = __webpack_require__(312);\n\n\tfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(53));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(80));\n\t  var divide = load(__webpack_require__(81));\n\n\t  /**\n\t   * Compute the variance of a matrix or a  list with values.\n\t   * In case of a (multi dimensional) array or matrix, the variance over all\n\t   * elements will be calculated.\n\t   *\n\t   * Optionally, the type of normalization can be specified as second\n\t   * parameter. The parameter `normalization` can be one of the following values:\n\t   *\n\t   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\t   * - 'uncorrected'        The sum of squared errors is divided by n\n\t   * - 'biased'             The sum of squared errors is divided by (n + 1)\n\t   *\n\t   * Note that older browser may not like the variable name `var`. In that\n\t   * case, the function can be called as `math['var'](...)` instead of\n\t   * `math.var(...)`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.var(a, b, c, ...)\n\t   *     math.var(A)\n\t   *     math.var(A, normalization)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.var(2, 4, 6);                     // returns 4\n\t   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667\n\t   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5\n\t   *     math.var([2, 4, 6, 8], 'biased');      // returns 4\n\t   *\n\t   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, max, min, prod, std, sum\n\t   *\n\t   * @param {Array | Matrix} array\n\t   *                        A single matrix or or multiple scalar values\n\t   * @param {string} [normalization='unbiased']\n\t   *                        Determines how to normalize the variance.\n\t   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n\t   * @return {*} The variance\n\t   */\n\t  var variance = typed('variance', {\n\t    // var([a, b, c, d, ...])\n\t    'Array | Matrix': function (array) {\n\t      return _var(array, DEFAULT_NORMALIZATION);\n\t    },\n\n\t    // var([a, b, c, d, ...], normalization)\n\t    'Array | Matrix, string': _var,\n\n\t    // var(a, b, c, d, ...)\n\t    '...': function (args) {\n\t      return _var(args, DEFAULT_NORMALIZATION);\n\t    }\n\t  });\n\n\t  variance.toTex = '\\\\mathrm{Var}\\\\left(${args}\\\\right)';\n\n\t  return variance;\n\n\t  /**\n\t   * Recursively calculate the variance of an n-dimensional array\n\t   * @param {Array} array\n\t   * @param {string} normalization\n\t   *                        Determines how to normalize the variance:\n\t   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\n\t   *                        - 'uncorrected' The sum of squared errors is divided by n\n\t   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\n\t   * @return {number | BigNumber} variance\n\t   * @private\n\t   */\n\t  function _var(array, normalization) {\n\t    var sum = 0;\n\t    var num = 0;\n\n\t    if (array.length == 0) {\n\t      throw new SyntaxError('Function var requires one or more parameters (0 provided)');\n\t    }\n\n\t    // calculate the mean and number of elements\n\t    deepForEach(array, function (value) {\n\t      sum = add(sum, value);\n\t      num++;\n\t    });\n\t    if (num === 0) throw new Error('Cannot calculate var of an empty array');\n\n\t    var mean = divide(sum, num);\n\n\t    // calculate the variance\n\t    sum = 0;\n\t    deepForEach(array, function (value) {\n\t      var diff = subtract(value, mean);\n\t      sum = add(sum, multiply(diff, diff));\n\t    });\n\n\t    switch (normalization) {\n\t      case 'uncorrected':\n\t        return divide(sum, num);\n\n\t      case 'biased':\n\t        return divide(sum, num + 1);\n\n\t      case 'unbiased':\n\t        var zero = (sum && sum.isBigNumber === true) ? new type.BigNumber(0) : 0;\n\t        return (num == 1) ? zero : divide(sum, num - 1);\n\n\t      default:\n\t        throw new Error('Unknown normalization \"' + normalization + '\". ' +\n\t        'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n\t    }\n\t  }\n\t}\n\n\texports.name = 'var';\n\texports.factory = factory;\n\n\n/***/ },\n/* 457 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(89),\n\t  __webpack_require__(458)\n\t];\n\n\n/***/ },\n/* 458 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar isString = __webpack_require__(23).isString;\n\tvar format = __webpack_require__(23).format;\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Interpolate values into a string template.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.print(template, values)\n\t   *     math.print(template, values, precision)\n\t   *     math.print(template, values, options)\n\t   *\n\t   * Example usage:\n\t   *\n\t   *     // the following outputs: 'Lucy is 5 years old'\n\t   *     math.print('Lucy is $age years old', {age: 5});\n\t   *\n\t   *     // the following outputs: 'The value of pi is 3.141592654'\n\t   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);\n\t   *\n\t   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\n\t   *     math.print('Hello $user.name! The date is $date', {\n\t   *       user: {\n\t   *         name: 'Mary',\n\t   *       },\n\t   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\n\t   *     });\n\t   *\n\t   * See also:\n\t   *\n\t   *     format\n\t   *\n\t   * @param {string} template     A string containing variable placeholders.\n\t   * @param {Object} values       An object containing variables which will\n\t   *                              be filled in in the template.\n\t   * @param {number | Object} [options]  Formatting options,\n\t   *                              or the number of digits to format numbers.\n\t   *                              See function math.format for a description\n\t   *                              of all options.\n\t   * @return {string} Interpolated string\n\t   */\n\t  var print = typed ('print', {\n\t    'string, Object': _print,\n\t    'string, Object, number': _print\n\t  });\n\n\t  print.toTex = undefined; // use default template\n\n\t  return print;\n\t}\n\n\t/**\n\t * Interpolate values into a string template.\n\t * @param {string} template\n\t * @param {Object} values\n\t * @param {number | Object} [options]\n\t * @returns {string} Interpolated string\n\t * @private\n\t */\n\tfunction _print(template, values, options) {\n\t  return template.replace(/\\$([\\w\\.]+)/g, function (original, key) {\n\t        var keys = key.split('.');\n\t        var value = values[keys.shift()];\n\t        while (keys.length && value !== undefined) {\n\t          var k = keys.shift();\n\t          value = k ? value[k] : value + '.';\n\t        }\n\n\t        if (value !== undefined) {\n\t          if (!isString(value)) {\n\t            return format(value, options);\n\t          }\n\t          else {\n\t            return value;\n\t          }\n\t        }\n\n\t        return original;\n\t      }\n\t  );\n\t}\n\n\texports.name = 'print';\n\texports.factory = factory;\n\n\n/***/ },\n/* 459 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(460),\n\t  __webpack_require__(461),\n\t  __webpack_require__(462),\n\t  __webpack_require__(463),\n\t  __webpack_require__(464),\n\t  __webpack_require__(465),\n\t  __webpack_require__(466),\n\t  __webpack_require__(467),\n\t  __webpack_require__(468),\n\t  __webpack_require__(469),\n\t  __webpack_require__(470),\n\t  __webpack_require__(471),\n\t  __webpack_require__(472),\n\t  __webpack_require__(473),\n\t  __webpack_require__(474),\n\t  __webpack_require__(475),\n\t  __webpack_require__(476),\n\t  __webpack_require__(477),\n\t  __webpack_require__(478),\n\t  __webpack_require__(479),\n\t  __webpack_require__(480),\n\t  __webpack_require__(481),\n\t  __webpack_require__(482),\n\t  __webpack_require__(483),\n\t  __webpack_require__(484)\n\t];\n\n\n/***/ },\n/* 460 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the inverse cosine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acos(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acos(0.5);           // returns number 1.0471975511965979\n\t   *    math.acos(math.cos(1.5)); // returns number 1.5\n\t   *\n\t   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, atan, asin\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x\n\t   */\n\t  var acos = typed('acos', {\n\t    'number': function (x) {\n\t      if ((x >= -1 && x <= 1) || config.predictable) {\n\t        return Math.acos(x);\n\t      }\n\t      else {\n\t        return new type.Complex(x, 0).acos();\n\t      }\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.acos();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.acos();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, acos);\n\t    }\n\t  });\n\n\t  acos.toTex = {1: '\\\\cos^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return acos;\n\t}\n\n\texports.name = 'acos';\n\texports.factory = factory;\n\n\n/***/ },\n/* 461 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the hyperbolic arccos of a value,\n\t   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acosh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acosh(1.5);       // returns 0.9624236501192069\n\t   *\n\t   * See also:\n\t   *\n\t   *    cosh, asinh, atanh\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x\n\t   */\n\t  var acosh = typed('acosh', {\n\t    'number': function (x) {\n\t      if (x >= 1 || config.predictable) {\n\t        return _acosh(x);\n\t      }\n\t      if (x <= -1) {\n\t        return new type.Complex(Math.log(Math.sqrt(x*x - 1) - x), Math.PI);\n\t      }\n\t      return new type.Complex(x, 0).acosh();\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.acosh();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.acosh();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, acosh);\n\t    }\n\t  });\n\n\t  acosh.toTex = {1: '\\\\cosh^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return acosh;\n\t}\n\n\t/**\n\t * Calculate the hyperbolic arccos of a number\n\t * @param {number} x\n\t * @return {number}\n\t * @private\n\t */\n\tvar _acosh = Math.acosh || function (x) {\n\t  return Math.log(Math.sqrt(x*x - 1) + x)\n\t};\n\n\texports.name = 'acosh';\n\texports.factory = factory;\n\n\n/***/ },\n/* 462 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acot(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acot(0.5);           // returns number 0.4636476090008061\n\t   *    math.acot(math.cot(1.5)); // returns number 1.5\n\t   *\n\t   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    cot, atan\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x   Function input\n\t   * @return {number | Complex | Array | Matrix} The arc cotangent of x\n\t   */\n\t  var acot = typed('acot', {\n\t    'number': function (x) {\n\t      return Math.atan(1 / x);\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.acot();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.BigNumber(1).div(x).atan();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, acot);\n\t    }\n\t  });\n\n\t  acot.toTex = {1: '\\\\cot^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return acot;\n\t}\n\n\texports.name = 'acot';\n\texports.factory = factory;\n\n\n/***/ },\n/* 463 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the hyperbolic arccotangent of a value,\n\t   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acoth(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acoth(0.5);       // returns 0.8047189562170503\n\t   *\n\t   * See also:\n\t   *\n\t   *    acsch, asech\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x\n\t   */\n\t  var acoth = typed('acoth', {\n\t    'number': function (x) {\n\t      if (x >= 1 || x <= -1 || config.predictable) {\n\t        return isFinite(x) ? (Math.log((x+1)/x) + Math.log(x/(x-1))) / 2 : 0;\n\t      }\n\t      return new type.Complex(x, 0).acoth();\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.acoth();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.BigNumber(1).div(x).atanh();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, acoth);\n\t    }\n\t  });\n\n\t  acoth.toTex = {1: '\\\\coth^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return acoth;\n\t}\n\n\texports.name = 'acoth';\n\texports.factory = factory;\n\n\n/***/ },\n/* 464 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acsc(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acsc(0.5);           // returns number 0.5235987755982989\n\t   *    math.acsc(math.csc(1.5)); // returns number ~1.5\n\t   *\n\t   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    csc, asin, asec\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x   Function input\n\t   * @return {number | Complex | Array | Matrix} The arc cosecant of x\n\t   */\n\t  var acsc = typed('acsc', {\n\t    'number': function (x) {\n\t      if (x <= -1 || x >= 1 || config.predictable) {\n\t        return Math.asin(1 / x);\n\t      }\n\t      return new type.Complex(x, 0).acsc();\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.acsc();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.BigNumber(1).div(x).asin();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, acsc);\n\t    }\n\t  });\n\n\t  acsc.toTex = {1: '\\\\csc^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return acsc;\n\t}\n\n\texports.name = 'acsc';\n\texports.factory = factory;\n\n\n/***/ },\n/* 465 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the hyperbolic arccosecant of a value,\n\t   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acsch(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acsch(0.5);       // returns 1.4436354751788103\n\t   *\n\t   * See also:\n\t   *\n\t   *    asech, acoth\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x\n\t   */\n\t  var acsch = typed('acsch', {\n\t    'number': function (x) {\n\t      x = 1 / x;\n\t      return Math.log(x + Math.sqrt(x*x + 1));\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.acsch();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.BigNumber(1).div(x).asinh();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, acsch);\n\t    }\n\t  });\n\n\t  acsch.toTex = {1: '\\\\mathrm{csch}^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return acsch;\n\t}\n\n\texports.name = 'acsch';\n\texports.factory = factory;\n\n\n/***/ },\n/* 466 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asec(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asec(0.5);           // returns 1.0471975511965979\n\t   *    math.asec(math.sec(1.5)); // returns 1.5\n\t   *\n\t   *    math.asec(2);             // returns 0 + 1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    acos, acot, acsc\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} The arc secant of x\n\t   */\n\t  var asec = typed('asec', {\n\t    'number': function (x) {\n\t      if (x <= -1 || x >= 1 || config.predictable) {\n\t        return Math.acos(1 / x);\n\t      }\n\t      return new type.Complex(x, 0).asec();\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.asec();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.BigNumber(1).div(x).acos();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, asec);\n\t    }\n\t  });\n\n\t  asec.toTex = {1: '\\\\sec^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return asec;\n\t}\n\n\texports.name = 'asec';\n\texports.factory = factory;\n\n\n/***/ },\n/* 467 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  var acosh = typed.find(load(__webpack_require__(461)), ['Complex']);\n\n\t  /**\n\t   * Calculate the hyperbolic arcsecant of a value,\n\t   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asech(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asech(0.5);       // returns 1.3169578969248166\n\t   *\n\t   * See also:\n\t   *\n\t   *    acsch, acoth\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x\n\t   */\n\t  var asech = typed('asech', {\n\t    'number': function (x) {\n\t      if ((x <= 1 && x >= -1) || config.predictable) {\n\t        x = 1 / x;\n\n\t        var ret = Math.sqrt(x*x - 1);\n\t        if (x > 0 || config.predictable) {\n\t          return Math.log(ret + x);\n\t        }\n\n\t        return new type.Complex(Math.log(ret - x), Math.PI);\n\t      }\n\n\t      return new type.Complex(x, 0).asech();\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.asech()\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.BigNumber(1).div(x).acosh();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, asech);\n\t    }\n\t  });\n\n\t  asech.toTex = {1: '\\\\mathrm{sech}^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return asech;\n\t}\n\n\texports.name = 'asech';\n\texports.factory = factory;\n\n\n/***/ },\n/* 468 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the inverse sine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asin(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asin(0.5);           // returns number 0.5235987755982989\n\t   *    math.asin(math.sin(1.5)); // returns number ~1.5\n\t   *\n\t   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    sin, atan, acos\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x\n\t   */\n\t  var asin = typed('asin', {\n\t    'number': function (x) {\n\t      if ((x >= -1 && x <= 1) || config.predictable) {\n\t        return Math.asin(x);\n\t      }\n\t      else {\n\t        return new type.Complex(x, 0).asin();\n\t      }\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.asin();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.asin();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since asin(0) = 0\n\t      return deepMap(x, asin, true);\n\t    }\n\t  });\n\n\t  asin.toTex = {1: '\\\\sin^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return asin;\n\t}\n\n\texports.name = 'asin';\n\texports.factory = factory;\n\n\n/***/ },\n/* 469 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the hyperbolic arcsine of a value,\n\t   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asinh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asinh(0.5);       // returns 0.48121182505960347\n\t   *\n\t   * See also:\n\t   *\n\t   *    acosh, atanh\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x\n\t   */\n\t  var asinh = typed('asinh', {\n\t    'number': Math.asinh || function (x) {\n\t      return Math.log(Math.sqrt(x*x + 1) + x);\n\t    },\n\n\t    'Complex': function (x) {\n\t        return x.asinh();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.asinh();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since asinh(0) = 0\n\t      return deepMap(x, asinh, true);\n\t    }\n\t  });\n\n\t  asinh.toTex = {1: '\\\\sinh^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return asinh;\n\t}\n\n\texports.name = 'asinh';\n\texports.factory = factory;\n\n\n/***/ },\n/* 470 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the inverse tangent of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.atan(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.atan(0.5);           // returns number 0.4636476090008061\n\t   *    math.atan(math.tan(1.5)); // returns number 1.5\n\t   *\n\t   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    tan, asin, acos\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x\n\t   */\n\t  var atan = typed('atan', {\n\t    'number': function (x) {\n\t      return Math.atan(x);\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.atan();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.atan();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since atan(0) = 0\n\t      return deepMap(x, atan, true);\n\t    }\n\t  });\n\n\t  atan.toTex = {1: '\\\\tan^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return atan;\n\t}\n\n\texports.name = 'atan';\n\texports.factory = factory;\n\n\n/***/ },\n/* 471 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm02 = load(__webpack_require__(360));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm09 = load(__webpack_require__(362));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Calculate the inverse tangent function with two arguments, y/x.\n\t   * By providing two arguments, the right quadrant of the computed angle can be\n\t   * determined.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.atan2(y, x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.atan2(2, 2) / math.pi;       // returns number 0.25\n\t   *\n\t   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg\n\t   *    var x = math.cos(angle);\n\t   *    var y = math.sin(angle);\n\t   *\n\t   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    tan, atan, sin, cos\n\t   *\n\t   * @param {number | Array | Matrix} y  Second dimension\n\t   * @param {number | Array | Matrix} x  First dimension\n\t   * @return {number | Array | Matrix} Four-quadrant inverse tangent\n\t   */\n\t  var atan2 = typed('atan2', {\n\n\t    'number, number': Math.atan2,\n\n\t    // Complex numbers doesn't seem to have a reasonable implementation of\n\t    // atan2(). Even Matlab removed the support, after they only calculated\n\t    // the atan only on base of the real part of the numbers and ignored the imaginary.\n\n\t    'BigNumber, BigNumber': function (y, x) {\n\t      return type.BigNumber.atan2(y, x);\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\n\t      // process matrix storage\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // sparse .* sparse\n\t              c = algorithm09(x, y, atan2, false);\n\t              break;\n\t            default:\n\t              // sparse .* dense\n\t              c = algorithm02(y, x, atan2, true);\n\t              break;\n\t          }\n\t          break;\n\t        default:\n\t          switch (y.storage()) {\n\t            case 'sparse':\n\t              // dense .* sparse\n\t              c = algorithm03(x, y, atan2, false);\n\t              break;\n\t            default:\n\t              // dense .* dense\n\t              c = algorithm13(x, y, atan2);\n\t              break;\n\t          }\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return atan2(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return atan2(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return atan2(x, matrix(y));\n\t    },\n\n\t    'Matrix, number | BigNumber': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (x.storage()) {\n\t        case 'sparse':\n\t          c = algorithm11(x, y, atan2, false);\n\t          break;\n\t        default:\n\t          c = algorithm14(x, y, atan2, false);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'number | BigNumber, Matrix': function (x, y) {\n\t      // result\n\t      var c;\n\t      // check storage format\n\t      switch (y.storage()) {\n\t        case 'sparse':\n\t          c = algorithm12(y, x, atan2, true);\n\t          break;\n\t        default:\n\t          c = algorithm14(y, x, atan2, true);\n\t          break;\n\t      }\n\t      return c;\n\t    },\n\n\t    'Array, number | BigNumber': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, atan2, false).valueOf();\n\t    },\n\n\t    'number | BigNumber, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, atan2, true).valueOf();\n\t    }\n\t  });\n\n\t  atan2.toTex = {2: '\\\\mathrm{atan2}\\\\left(${args}\\\\right)'};\n\n\t  return atan2;\n\t}\n\n\texports.name = 'atan2';\n\texports.factory = factory;\n\n\n/***/ },\n/* 472 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic arctangent of a value,\n\t   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.atanh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.atanh(0.5);       // returns 0.5493061443340549\n\t   *\n\t   * See also:\n\t   *\n\t   *    acosh, asinh\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x\n\t   */\n\t  var atanh = typed('atanh', {\n\t    'number': function (x) {\n\t      if ((x <= 1 && x >= -1) || config.predictable) {\n\t        return _atanh(x);\n\t      }\n\t      return new type.Complex(x, 0).atanh();\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.atanh();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.atanh();\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since atanh(0) = 0\n\t      return deepMap(x, atanh, true);\n\t    }\n\t  });\n\n\t  atanh.toTex = {1: '\\\\tanh^{-1}\\\\left(${args[0]}\\\\right)'};\n\n\t  return atanh;\n\t}\n\n\t/**\n\t * Calculate the hyperbolic arctangent of a number\n\t * @param {number} x\n\t * @return {number}\n\t * @private\n\t */\n\tvar _atanh = Math.atanh || function (x) {\n\t  return Math.log((1 + x)/(1 - x)) / 2\n\t};\n\n\texports.name = 'atanh';\n\texports.factory = factory;\n\n\n/***/ },\n/* 473 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the cosine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cos(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cos(2);                      // returns number -0.4161468365471422\n\t   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475\n\t   *    math.cos(math.unit(180, 'deg'));  // returns number -1\n\t   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5\n\t   *\n\t   *    var angle = 0.2;\n\t   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, tan\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x\n\t   */\n\t  var cos = typed('cos', {\n\t    'number': Math.cos,\n\n\t    'Complex': function (x) {\n\t      return x.cos();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.cos();\n\t    },\n\n\t    'Unit': function (x) {\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n\t        throw new TypeError ('Unit in function cos is no angle');\n\t      }\n\t      return cos(x.value);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, cos);\n\t    }\n\t  });\n\n\t  cos.toTex = {1: '\\\\cos\\\\left(${args[0]}\\\\right)'};\n\n\t  return cos;\n\t}\n\n\texports.name = 'cos';\n\texports.factory = factory;\n\n\n/***/ },\n/* 474 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\r\n\r\n\tvar deepMap = __webpack_require__(19);\r\n\r\n\tfunction factory (type, config, load, typed) {\r\n\t  /**\r\n\t   * Calculate the hyperbolic cosine of a value,\r\n\t   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\r\n\t   *\r\n\t   * For matrices, the function is evaluated element wise.\r\n\t   *\r\n\t   * Syntax:\r\n\t   *\r\n\t   *    math.cosh(x)\r\n\t   *\r\n\t   * Examples:\r\n\t   *\r\n\t   *    math.cosh(0.5);       // returns number 1.1276259652063807\r\n\t   *\r\n\t   * See also:\r\n\t   *\r\n\t   *    sinh, tanh\r\n\t   *\r\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\r\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x\r\n\t   */\r\n\t  var cosh = typed('cosh', {\r\n\t    'number': _cosh,\r\n\r\n\t    'Complex': function (x) {\r\n\t      return x.cosh();\r\n\t    },\r\n\r\n\t    'BigNumber': function (x) {\r\n\t      return x.cosh();\r\n\t    },\r\n\r\n\t    'Unit': function (x) {\r\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n\t        throw new TypeError ('Unit in function cosh is no angle');\r\n\t      }\r\n\t      return cosh(x.value);\r\n\t    },\r\n\r\n\t    'Array | Matrix': function (x) {\r\n\t      return deepMap(x, cosh);\r\n\t    }\r\n\t  });\r\n\r\n\t  cosh.toTex = {1: '\\\\cosh\\\\left(${args[0]}\\\\right)'};\r\n\r\n\t  return cosh;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the hyperbolic cosine of a number\r\n\t * @param {number} x\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\tvar _cosh = Math.cosh || function (x) {\r\n\t  return (Math.exp(x) + Math.exp(-x)) / 2;\r\n\t};\r\n\r\n\texports.name = 'cosh';\r\n\texports.factory = factory;\r\n\n\n/***/ },\n/* 475 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cot(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cot(2);      // returns number -0.45765755436028577\n\t   *    1 / math.tan(2);  // returns number -0.45765755436028577\n\t   *\n\t   * See also:\n\t   *\n\t   *    tan, sec, csc\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Cotangent of x\n\t   */\n\t  var cot = typed('cot', {\n\t    'number': function (x) {\n\t      return 1 / Math.tan(x);\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.cot();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.BigNumber(1).div(x.tan());\n\t    },\n\n\t    'Unit': function (x) {\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n\t        throw new TypeError ('Unit in function cot is no angle');\n\t      }\n\t      return cot(x.value);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, cot);\n\t    }\n\t  });\n\n\t  cot.toTex = {1: '\\\\cot\\\\left(${args[0]}\\\\right)'};\n\n\t  return cot;\n\t}\n\n\texports.name = 'cot';\n\texports.factory = factory;\n\n\n/***/ },\n/* 476 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\r\n\r\n\tvar deepMap = __webpack_require__(19);\r\n\r\n\tfunction factory (type, config, load, typed) {\r\n\t  /**\r\n\t   * Calculate the hyperbolic cotangent of a value,\r\n\t   * defined as `coth(x) = 1 / tanh(x)`.\r\n\t   *\r\n\t   * For matrices, the function is evaluated element wise.\r\n\t   *\r\n\t   * Syntax:\r\n\t   *\r\n\t   *    math.coth(x)\r\n\t   *\r\n\t   * Examples:\r\n\t   *\r\n\t   *    // coth(x) = 1 / tanh(x)\r\n\t   *    math.coth(2);         // returns 1.0373147207275482\r\n\t   *    1 / math.tanh(2);     // returns 1.0373147207275482\r\n\t   *\r\n\t   * See also:\r\n\t   *\r\n\t   *    sinh, tanh, cosh\r\n\t   *\r\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\r\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x\r\n\t   */\r\n\t  var coth = typed('coth', {\r\n\t    'number': _coth,\r\n\r\n\t    'Complex': function (x) {\r\n\t      return x.coth();\r\n\t    },\r\n\r\n\t    'BigNumber': function (x) {\r\n\t      return new type.BigNumber(1).div(x.tanh());\r\n\t    },\r\n\r\n\t    'Unit': function (x) {\r\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n\t        throw new TypeError ('Unit in function coth is no angle');\r\n\t      }\r\n\t      return coth(x.value);\r\n\t    },\r\n\r\n\t    'Array | Matrix': function (x) {\r\n\t      return deepMap(x, coth);\r\n\t    }\r\n\t  });\r\n\r\n\t  coth.toTex = {1: '\\\\coth\\\\left(${args[0]}\\\\right)'};\r\n\r\n\t  return coth;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the hyperbolic cosine of a number\r\n\t * @param {number} x\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\tfunction _coth(x) {\r\n\t  var e = Math.exp(2 * x);\r\n\t  return (e + 1) / (e - 1);\r\n\t}\r\n\r\n\texports.name = 'coth';\r\n\texports.factory = factory;\r\n\n\n/***/ },\n/* 477 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.csc(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.csc(2);      // returns number 1.099750170294617\n\t   *    1 / math.sin(2);  // returns number 1.099750170294617\n\t   *\n\t   * See also:\n\t   *\n\t   *    sin, sec, cot\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Cosecant of x\n\t   */\n\t  var csc = typed('csc', {\n\t    'number': function (x) {\n\t      return 1 / Math.sin(x);\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.csc();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.BigNumber(1).div(x.sin());\n\t    },\n\n\t    'Unit': function (x) {\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n\t        throw new TypeError ('Unit in function csc is no angle');\n\t      }\n\t      return csc(x.value);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, csc);\n\t    }\n\t  });\n\n\t  csc.toTex = {1: '\\\\csc\\\\left(${args[0]}\\\\right)'};\n\n\t  return csc;\n\t}\n\n\texports.name = 'csc';\n\texports.factory = factory;\n\n\n/***/ },\n/* 478 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\r\n\r\n\tvar deepMap = __webpack_require__(19);\r\n\tvar sign = __webpack_require__(6).sign;\r\n\r\n\tfunction factory (type, config, load, typed) {\r\n\t  /**\r\n\t   * Calculate the hyperbolic cosecant of a value,\r\n\t   * defined as `csch(x) = 1 / sinh(x)`.\r\n\t   *\r\n\t   * For matrices, the function is evaluated element wise.\r\n\t   *\r\n\t   * Syntax:\r\n\t   *\r\n\t   *    math.csch(x)\r\n\t   *\r\n\t   * Examples:\r\n\t   *\r\n\t   *    // csch(x) = 1/ sinh(x)\r\n\t   *    math.csch(0.5);       // returns 1.9190347513349437\r\n\t   *    1 / math.sinh(0.5);   // returns 1.9190347513349437\r\n\t   *\r\n\t   * See also:\r\n\t   *\r\n\t   *    sinh, sech, coth\r\n\t   *\r\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\r\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x\r\n\t   */\r\n\t  var csch = typed('csch', {\r\n\t    'number': _csch,\r\n\r\n\t    'Complex': function (x) {\r\n\t      return x.csch();\r\n\t    },\r\n\r\n\t    'BigNumber': function (x) {\r\n\t      return new type.BigNumber(1).div(x.sinh());\r\n\t    },\r\n\r\n\t    'Unit': function (x) {\r\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n\t        throw new TypeError ('Unit in function csch is no angle');\r\n\t      }\r\n\t      return csch(x.value);\r\n\t    },\r\n\r\n\t    'Array | Matrix': function (x) {\r\n\t      return deepMap(x, csch);\r\n\t    }\r\n\t  });\r\n\r\n\t  csch.toTex = {1: '\\\\mathrm{csch}\\\\left(${args[0]}\\\\right)'};\r\n\r\n\t  return csch;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the hyperbolic cosecant of a number\r\n\t * @param {number} x\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\tfunction _csch(x) {\r\n\t  // consider values close to zero (+/-)\r\n\t  if (x == 0) {\r\n\t    return Number.POSITIVE_INFINITY;\r\n\t  }\r\n\t  else {\r\n\t    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);\r\n\t  }\r\n\t}\r\n\r\n\texports.name = 'csch';\r\n\texports.factory = factory;\r\n\n\n/***/ },\n/* 479 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sec(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sec(2);      // returns number -2.4029979617223822\n\t   *    1 / math.cos(2);  // returns number -2.4029979617223822\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, csc, cot\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Secant of x\n\t   */\n\t  var sec = typed('sec', {\n\t    'number': function (x) {\n\t      return 1 / Math.cos(x);\n\t    },\n\n\t    'Complex': function (x) {\n\t      return x.sec();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return new type.BigNumber(1).div(x.cos());\n\t    },\n\n\t    'Unit': function (x) {\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n\t        throw new TypeError ('Unit in function sec is no angle');\n\t      }\n\t      return sec(x.value);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      return deepMap(x, sec);\n\t    }\n\t  });\n\n\t  sec.toTex = {1: '\\\\sec\\\\left(${args[0]}\\\\right)'};\n\n\t  return sec;\n\t}\n\n\texports.name = 'sec';\n\texports.factory = factory;\n\n\n/***/ },\n/* 480 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\r\n\r\n\tvar deepMap = __webpack_require__(19);\r\n\r\n\tfunction factory (type, config, load, typed) {\r\n\t  /**\r\n\t   * Calculate the hyperbolic secant of a value,\r\n\t   * defined as `sech(x) = 1 / cosh(x)`.\r\n\t   *\r\n\t   * For matrices, the function is evaluated element wise.\r\n\t   *\r\n\t   * Syntax:\r\n\t   *\r\n\t   *    math.sech(x)\r\n\t   *\r\n\t   * Examples:\r\n\t   *\r\n\t   *    // sech(x) = 1/ cosh(x)\r\n\t   *    math.sech(0.5);       // returns 0.886818883970074\r\n\t   *    1 / math.cosh(0.5);   // returns 0.886818883970074\r\n\t   *\r\n\t   * See also:\r\n\t   *\r\n\t   *    cosh, csch, coth\r\n\t   *\r\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\r\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x\r\n\t   */\r\n\t  var sech = typed('sech', {\r\n\t    'number': _sech,\r\n\r\n\t    'Complex': function (x) {\r\n\t      return x.sech();\r\n\t    },\r\n\r\n\t    'BigNumber': function (x) {\r\n\t      return new type.BigNumber(1).div(x.cosh());\r\n\t    },\r\n\r\n\t    'Unit': function (x) {\r\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n\t        throw new TypeError ('Unit in function sech is no angle');\r\n\t      }\r\n\t      return sech(x.value);\r\n\t    },\r\n\r\n\t    'Array | Matrix': function (x) {\r\n\t      return deepMap(x, sech);\r\n\t    }\r\n\t  });\r\n\r\n\t  sech.toTex = {1: '\\\\mathrm{sech}\\\\left(${args[0]}\\\\right)'};\r\n\r\n\t  return sech;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the hyperbolic secant of a number\r\n\t * @param {number} x\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\tfunction _sech(x) {\r\n\t  return 2 / (Math.exp(x) + Math.exp(-x));\r\n\t}\r\n\r\n\texports.name = 'sech';\r\n\texports.factory = factory;\r\n\n\n/***/ },\n/* 481 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\n\t  /**\n\t   * Calculate the sine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sin(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sin(2);                      // returns number 0.9092974268256813\n\t   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475\n\t   *    math.sin(math.unit(90, 'deg'));   // returns number 1\n\t   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5\n\t   *\n\t   *    var angle = 0.2;\n\t   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, tan\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x\n\t   */\n\t  var sin = typed('sin', {\n\t    'number': Math.sin,\n\n\t    'Complex': function (x) {\n\t      return x.sin();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.sin();\n\t    },\n\n\t    'Unit': function (x) {\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n\t        throw new TypeError ('Unit in function sin is no angle');\n\t      }\n\t      return sin(x.value);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since sin(0) = 0\n\t      return deepMap(x, sin, true);\n\t    }\n\t  });\n\n\t  sin.toTex = {1: '\\\\sin\\\\left(${args[0]}\\\\right)'};\n\n\t  return sin;\n\t}\n\n\texports.name = 'sin';\n\texports.factory = factory;\n\n\n/***/ },\n/* 482 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\r\n\r\n\tvar deepMap = __webpack_require__(19);\r\n\r\n\tfunction factory (type, config, load, typed) {\r\n\t  /**\r\n\t   * Calculate the hyperbolic sine of a value,\r\n\t   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\r\n\t   *\r\n\t   * For matrices, the function is evaluated element wise.\r\n\t   *\r\n\t   * Syntax:\r\n\t   *\r\n\t   *    math.sinh(x)\r\n\t   *\r\n\t   * Examples:\r\n\t   *\r\n\t   *    math.sinh(0.5);       // returns number 0.5210953054937474\r\n\t   *\r\n\t   * See also:\r\n\t   *\r\n\t   *    cosh, tanh\r\n\t   *\r\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\r\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x\r\n\t   */\r\n\t  var sinh = typed('sinh', {\r\n\t    'number': _sinh,\r\n\r\n\t    'Complex': function (x) {\r\n\t      return x.sinh();\r\n\t    },\r\n\r\n\t    'BigNumber': function (x) {\r\n\t      return x.sinh();\r\n\t    },\r\n\r\n\t    'Unit': function (x) {\r\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n\t        throw new TypeError ('Unit in function sinh is no angle');\r\n\t      }\r\n\t      return sinh(x.value);\r\n\t    },\r\n\r\n\t    'Array | Matrix': function (x) {\r\n\t      // deep map collection, skip zeros since sinh(0) = 0\r\n\t      return deepMap(x, sinh, true);\r\n\t    }\r\n\t  });\r\n\r\n\t  sinh.toTex = {1: '\\\\sinh\\\\left(${args[0]}\\\\right)'};\r\n\r\n\t  return sinh;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the hyperbolic sine of a number\r\n\t * @param {number} x\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\tvar _sinh = Math.sinh || function (x) {\r\n\t  return (Math.exp(x) - Math.exp(-x)) / 2;\r\n\t};\r\n\r\n\texports.name = 'sinh';\r\n\texports.factory = factory;\r\n\n\n/***/ },\n/* 483 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar deepMap = __webpack_require__(19);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.tan(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.tan(0.5);                    // returns number 0.5463024898437905\n\t   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905\n\t   *    math.tan(math.pi / 4);            // returns number 1\n\t   *    math.tan(math.unit(45, 'deg'));   // returns number 1\n\t   *\n\t   * See also:\n\t   *\n\t   *    atan, sin, cos\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x\n\t   */\n\t  var tan = typed('tan', {\n\t    'number': Math.tan,\n\n\t    'Complex': function (x) {\n\t        return x.tan();\n\t    },\n\n\t    'BigNumber': function (x) {\n\t      return x.tan();\n\t    },\n\n\t    'Unit': function (x) {\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n\t        throw new TypeError ('Unit in function tan is no angle');\n\t      }\n\t      return tan(x.value);\n\t    },\n\n\t    'Array | Matrix': function (x) {\n\t      // deep map collection, skip zeros since tan(0) = 0\n\t      return deepMap(x, tan, true);\n\t    }\n\t  });\n\n\t  tan.toTex = {1: '\\\\tan\\\\left(${args[0]}\\\\right)'};\n\n\t  return tan;\n\t}\n\n\texports.name = 'tan';\n\texports.factory = factory;\n\n\n/***/ },\n/* 484 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\r\n\r\n\tvar deepMap = __webpack_require__(19);\r\n\r\n\tfunction factory (type, config, load, typed) {\r\n\t  /**\r\n\t   * Calculate the hyperbolic tangent of a value,\r\n\t   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\r\n\t   *\r\n\t   * For matrices, the function is evaluated element wise.\r\n\t   *\r\n\t   * Syntax:\r\n\t   *\r\n\t   *    math.tanh(x)\r\n\t   *\r\n\t   * Examples:\r\n\t   *\r\n\t   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\r\n\t   *    math.tanh(0.5);                   // returns 0.46211715726000974\r\n\t   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974\r\n\t   *    1 / math.coth(0.5);               // returns 0.46211715726000974\r\n\t   *\r\n\t   * See also:\r\n\t   *\r\n\t   *    sinh, cosh, coth\r\n\t   *\r\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\r\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x\r\n\t   */\r\n\t  var tanh = typed('tanh', {\r\n\t    'number': _tanh,\r\n\r\n\t    'Complex': function (x) {\r\n\t        return x.tanh();\r\n\t    },\r\n\r\n\t    'BigNumber': function (x) {\r\n\t      return x.tanh();\r\n\t    },\r\n\r\n\t    'Unit': function (x) {\r\n\t      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n\t        throw new TypeError ('Unit in function tanh is no angle');\r\n\t      }\r\n\t      return tanh(x.value);\r\n\t    },\r\n\r\n\t    'Array | Matrix': function (x) {\r\n\t      // deep map collection, skip zeros since tanh(0) = 0\r\n\t      return deepMap(x, tanh, true);\r\n\t    }\r\n\t  });\r\n\r\n\t  tanh.toTex = {1: '\\\\tanh\\\\left(${args[0]}\\\\right)'};\r\n\r\n\t  return tanh;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the hyperbolic tangent of a number\r\n\t * @param {number} x\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\tvar _tanh = Math.tanh || function (x) {\r\n\t  var e = Math.exp(2 * x);\r\n\t  return (e - 1) / (e + 1);\r\n\t};\r\n\r\n\texports.name = 'tanh';\r\n\texports.factory = factory;\r\n\n\n/***/ },\n/* 485 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(486)\n\t];\n\n/***/ },\n/* 486 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\n\t  var matrix = load(__webpack_require__(52));\n\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\n\t  /**\n\t   * Change the unit of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.to(x, unit)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm\n\t   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm\n\t   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits\n\t   *\n\t   * See also:\n\t   *\n\t   *    unit\n\t   *\n\t   * @param {Unit | Array | Matrix} x     The unit to be converted.\n\t   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n\t   *                                      or a unit without value.\n\t   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n\t   */\n\t  var to = typed('to', {\n\n\t    'Unit, Unit | string': function (x, unit) {\n\t      return x.to(unit);\n\t    },\n\n\t    'Matrix, Matrix': function (x, y) {\n\t      // SparseMatrix does not support Units\n\t      return algorithm13(x, y, to);\n\t    },\n\n\t    'Array, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return to(matrix(x), matrix(y)).valueOf();\n\t    },\n\n\t    'Array, Matrix': function (x, y) {\n\t      // use matrix implementation\n\t      return to(matrix(x), y);\n\t    },\n\n\t    'Matrix, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return to(x, matrix(y));\n\t    },\n\n\t    'Matrix, any': function (x, y) {\n\t      // SparseMatrix does not support Units\n\t      return algorithm14(x, y, to, false);\n\t    },\n\n\t    'any, Matrix': function (x, y) {\n\t      // SparseMatrix does not support Units\n\t      return algorithm14(y, x, to, true);\n\t    },\n\n\t    'Array, any': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(x), y, to, false).valueOf();\n\t    },\n\n\t    'any, Array': function (x, y) {\n\t      // use matrix implementation\n\t      return algorithm14(matrix(y), x, to, true).valueOf();\n\t    }\n\t  });\n\n\t  to.toTex = {\n\t    2: '\\\\left(${args[0]}' + latex.operators['to'] + '${args[1]}\\\\right)'\n\t  };\n\n\t  return to;\n\t}\n\n\texports.name = 'to';\n\texports.factory = factory;\n\n\n/***/ },\n/* 487 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(488),\n\t  __webpack_require__(408),\n\t  __webpack_require__(356),\n\t  __webpack_require__(88),\n\t  __webpack_require__(370),\n\t  __webpack_require__(422),\n\t  __webpack_require__(90)\n\t];\n\n\n/***/ },\n/* 488 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar object= __webpack_require__(3);\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Clone an object.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.clone(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.clone(3.5);                   // returns number 3.5\n\t   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i\n\t   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg\n\t   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]\n\t   *    math.clone(\"hello world\");         // returns string \"hello world\"\n\t   *\n\t   * @param {*} x   Object to be cloned\n\t   * @return {*} A clone of object x\n\t   */\n\t  var clone = typed('clone', {\n\t    'any': object.clone\n\t  });\n\n\t  clone.toTex = undefined; // use default template\n\n\t  return clone;\n\t}\n\n\texports.name = 'clone';\n\texports.factory = factory;\n\n\n/***/ },\n/* 489 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = [\n\t  __webpack_require__(490)\n\t];\n\n\n/***/ },\n/* 490 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Instantiate mathjs data types from their JSON representation\n\t   * @param {string} key\n\t   * @param {*} value\n\t   * @returns {*} Returns the revived object\n\t   */\n\t  return function reviver(key, value) {\n\t    var constructor = type[value && value.mathjs];\n\t    if (constructor && typeof constructor.fromJSON === 'function') {\n\t      return constructor.fromJSON(value);\n\t    }\n\n\t    return value;\n\t  }\n\t}\n\n\texports.name = 'reviver';\n\texports.path = 'json';\n\texports.factory = factory;\n\n\n/***/ },\n/* 491 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar ArgumentsError = __webpack_require__(11);\n\tvar DimensionError = __webpack_require__(42);\n\tvar IndexError = __webpack_require__(43);\n\n\tmodule.exports = [\n\t  {\n\t    name: 'ArgumentsError', path: 'error',\n\t    factory: function () {\n\t      return ArgumentsError;\n\t    }\n\t  },\n\t  {\n\t    name: 'DimensionError',\n\t    path: 'error',\n\t    factory: function () {\n\t      return DimensionError;\n\t    }\n\t  },\n\t  {\n\t    name: 'IndexError',\n\t    path: 'error',\n\t    factory: function () {\n\t      return IndexError;\n\t    }\n\t  }\n\t];\n\n\t// TODO: implement an InvalidValueError?\n\n\n/***/ }\n/******/ ])\n});\n;","// File:src/Three.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar THREE = { REVISION: '78' };\n\n//\n\nif ( typeof define === 'function' && define.amd ) {\n\n\tdefine( 'three', THREE );\n\n} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\n\n\tmodule.exports = THREE;\n\n}\n\n// Polyfills\n\nif ( Number.EPSILON === undefined ) {\n\n\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n}\n\n//\n\nif ( Math.sign === undefined ) {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\tMath.sign = function ( x ) {\n\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t};\n\n}\n\nif ( Function.prototype.name === undefined ) {\n\n\t// Missing in IE9-11.\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\tget: function () {\n\n\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n\t\t}\n\n\t} );\n\n}\n\nif ( Object.assign === undefined ) {\n\n\t// Missing in IE.\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t( function () {\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\t'use strict';\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t} )();\n\n}\n\n//\n\nObject.assign( THREE, {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\n\n\tMOUSE: { LEFT: 0, MIDDLE: 1, RIGHT: 2 },\n\n\t// GL STATE CONSTANTS\n\n\tCullFaceNone: 0,\n\tCullFaceBack: 1,\n\tCullFaceFront: 2,\n\tCullFaceFrontBack: 3,\n\n\tFrontFaceDirectionCW: 0,\n\tFrontFaceDirectionCCW: 1,\n\n\t// SHADOWING TYPES\n\n\tBasicShadowMap: 0,\n\tPCFShadowMap: 1,\n\tPCFSoftShadowMap: 2,\n\n\t// MATERIAL CONSTANTS\n\n\t// side\n\n\tFrontSide: 0,\n\tBackSide: 1,\n\tDoubleSide: 2,\n\n\t// shading\n\n\tFlatShading: 1,\n\tSmoothShading: 2,\n\n\t// colors\n\n\tNoColors: 0,\n\tFaceColors: 1,\n\tVertexColors: 2,\n\n\t// blending modes\n\n\tNoBlending: 0,\n\tNormalBlending: 1,\n\tAdditiveBlending: 2,\n\tSubtractiveBlending: 3,\n\tMultiplyBlending: 4,\n\tCustomBlending: 5,\n\n\t// custom blending equations\n\t// (numbers start from 100 not to clash with other\n\t// mappings to OpenGL constants defined in Texture.js)\n\n\tAddEquation: 100,\n\tSubtractEquation: 101,\n\tReverseSubtractEquation: 102,\n\tMinEquation: 103,\n\tMaxEquation: 104,\n\n\t// custom blending destination factors\n\n\tZeroFactor: 200,\n\tOneFactor: 201,\n\tSrcColorFactor: 202,\n\tOneMinusSrcColorFactor: 203,\n\tSrcAlphaFactor: 204,\n\tOneMinusSrcAlphaFactor: 205,\n\tDstAlphaFactor: 206,\n\tOneMinusDstAlphaFactor: 207,\n\n\t// custom blending source factors\n\n\t//ZeroFactor: 200,\n\t//OneFactor: 201,\n\t//SrcAlphaFactor: 204,\n\t//OneMinusSrcAlphaFactor: 205,\n\t//DstAlphaFactor: 206,\n\t//OneMinusDstAlphaFactor: 207,\n\tDstColorFactor: 208,\n\tOneMinusDstColorFactor: 209,\n\tSrcAlphaSaturateFactor: 210,\n\n\t// depth modes\n\n\tNeverDepth: 0,\n\tAlwaysDepth: 1,\n\tLessDepth: 2,\n\tLessEqualDepth: 3,\n\tEqualDepth: 4,\n\tGreaterEqualDepth: 5,\n\tGreaterDepth: 6,\n\tNotEqualDepth: 7,\n\n\n\t// TEXTURE CONSTANTS\n\n\tMultiplyOperation: 0,\n\tMixOperation: 1,\n\tAddOperation: 2,\n\n\t// Tone Mapping modes\n\n\tNoToneMapping: 0, // do not do any tone mapping, not even exposure (required for special purpose passes.)\n\tLinearToneMapping: 1, // only apply exposure.\n\tReinhardToneMapping: 2,\n\tUncharted2ToneMapping: 3, // John Hable\n\tCineonToneMapping: 4, // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\n\t// Mapping modes\n\n\tUVMapping: 300,\n\n\tCubeReflectionMapping: 301,\n\tCubeRefractionMapping: 302,\n\n\tEquirectangularReflectionMapping: 303,\n\tEquirectangularRefractionMapping: 304,\n\n\tSphericalReflectionMapping: 305,\n\tCubeUVReflectionMapping: 306,\n\tCubeUVRefractionMapping: 307,\n\n\t// Wrapping modes\n\n\tRepeatWrapping: 1000,\n\tClampToEdgeWrapping: 1001,\n\tMirroredRepeatWrapping: 1002,\n\n\t// Filters\n\n\tNearestFilter: 1003,\n\tNearestMipMapNearestFilter: 1004,\n\tNearestMipMapLinearFilter: 1005,\n\tLinearFilter: 1006,\n\tLinearMipMapNearestFilter: 1007,\n\tLinearMipMapLinearFilter: 1008,\n\n\t// Data types\n\n\tUnsignedByteType: 1009,\n\tByteType: 1010,\n\tShortType: 1011,\n\tUnsignedShortType: 1012,\n\tIntType: 1013,\n\tUnsignedIntType: 1014,\n\tFloatType: 1015,\n\tHalfFloatType: 1025,\n\n\t// Pixel types\n\n\t//UnsignedByteType: 1009,\n\tUnsignedShort4444Type: 1016,\n\tUnsignedShort5551Type: 1017,\n\tUnsignedShort565Type: 1018,\n\n\t// Pixel formats\n\n\tAlphaFormat: 1019,\n\tRGBFormat: 1020,\n\tRGBAFormat: 1021,\n\tLuminanceFormat: 1022,\n\tLuminanceAlphaFormat: 1023,\n\t// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\n\tRGBEFormat: THREE.RGBAFormat, //1024;\n\tDepthFormat: 1026,\n\n\t// DDS / ST3C Compressed texture formats\n\n\tRGB_S3TC_DXT1_Format: 2001,\n\tRGBA_S3TC_DXT1_Format: 2002,\n\tRGBA_S3TC_DXT3_Format: 2003,\n\tRGBA_S3TC_DXT5_Format: 2004,\n\n\t// PVRTC compressed texture formats\n\n\tRGB_PVRTC_4BPPV1_Format: 2100,\n\tRGB_PVRTC_2BPPV1_Format: 2101,\n\tRGBA_PVRTC_4BPPV1_Format: 2102,\n\tRGBA_PVRTC_2BPPV1_Format: 2103,\n\n\t// ETC compressed texture formats\n\n\tRGB_ETC1_Format: 2151,\n\n\t// Loop styles for AnimationAction\n\n\tLoopOnce: 2200,\n\tLoopRepeat: 2201,\n\tLoopPingPong: 2202,\n\n\t// Interpolation\n\n\tInterpolateDiscrete: 2300,\n\tInterpolateLinear: 2301,\n\tInterpolateSmooth: 2302,\n\n\t// Interpolant ending modes\n\n\tZeroCurvatureEnding: 2400,\n\tZeroSlopeEnding: 2401,\n\tWrapAroundEnding: 2402,\n\n\t// Triangle Draw modes\n\n\tTrianglesDrawMode: 0,\n\tTriangleStripDrawMode: 1,\n\tTriangleFanDrawMode: 2,\n\n\t// Texture Encodings\n\n\tLinearEncoding: 3000, // No encoding at all.\n\tsRGBEncoding: 3001,\n\tGammaEncoding: 3007, // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\n\n\t// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\n\t// These encodings should not specified as output encodings except in rare situations.\n\tRGBEEncoding: 3002, // AKA Radiance.\n\tLogLuvEncoding: 3003,\n\tRGBM7Encoding: 3004,\n\tRGBM16Encoding: 3005,\n\tRGBDEncoding: 3006, // MaxRange is 256.\n\n\t// Depth packing strategies\n\n\tBasicDepthPacking: 3200, // for writing to float textures for high precision or for visualizing results in RGB buffers\n\tRGBADepthPacking: 3201 // for packing into RGBA buffers.\n\n} );\n\n// File:src/math/Color.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Color = function ( r, g, b ) {\n\n\tif ( g === undefined && b === undefined ) {\n\n\t\t// r is THREE.Color, hex or string\n\t\treturn this.set( r );\n\n\t}\n\n\treturn this.setRGB( r, g, b );\n\n};\n\nTHREE.Color.prototype = {\n\n\tconstructor: THREE.Color,\n\n\tr: 1, g: 1, b: 1,\n\n\tset: function ( value ) {\n\n\t\tif ( value instanceof THREE.Color ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t},\n\n\tsetHex: function ( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t},\n\n\tsetRGB: function ( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t},\n\n\tsetHSL: function () {\n\n\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\tif ( t < 0 ) t += 1;\n\t\t\tif ( t > 1 ) t -= 1;\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\treturn p;\n\n\t\t}\n\n\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = THREE.Math.euclideanModulo( h, 1 );\n\t\t\ts = THREE.Math.clamp( s, 0, 1 );\n\t\t\tl = THREE.Math.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetStyle: function ( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tvar color;\n\t\t\tvar name = m[ 1 ];\n\t\t\tvar components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tvar hex = m[ 1 ];\n\t\t\tvar size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = THREE.ColorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t},\n\n\tcopy: function ( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t},\n\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t},\n\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t},\n\n\tconvertGammaToLinear: function () {\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tthis.r = r * r;\n\t\tthis.g = g * g;\n\t\tthis.b = b * b;\n\n\t\treturn this;\n\n\t},\n\n\tconvertLinearToGamma: function () {\n\n\t\tthis.r = Math.sqrt( this.r );\n\t\tthis.g = Math.sqrt( this.g );\n\t\tthis.b = Math.sqrt( this.b );\n\n\t\treturn this;\n\n\t},\n\n\tgetHex: function () {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t},\n\n\tgetHexString: function () {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t},\n\n\tgetHSL: function ( optionalTarget ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tvar max = Math.max( r, g, b );\n\t\tvar min = Math.min( r, g, b );\n\n\t\tvar hue, saturation;\n\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tvar delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\thsl.h = hue;\n\t\thsl.s = saturation;\n\t\thsl.l = lightness;\n\n\t\treturn hsl;\n\n\t},\n\n\tgetStyle: function () {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t},\n\n\toffsetHSL: function ( h, s, l ) {\n\n\t\tvar hsl = this.getHSL();\n\n\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t},\n\n\taddColors: function ( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n};\n\nTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n// File:src/math/Quaternion.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nTHREE.Quaternion = function ( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Quaternion.prototype = {\n\n\tconstructor: THREE.Quaternion,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget w () {\n\n\t\treturn this._w;\n\n\t},\n\n\tset w ( value ) {\n\n\t\tthis._w = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar c1 = Math.cos( euler._x / 2 );\n\t\tvar c2 = Math.cos( euler._y / 2 );\n\t\tvar c3 = Math.cos( euler._z / 2 );\n\t\tvar s1 = Math.sin( euler._x / 2 );\n\t\tvar s2 = Math.sin( euler._y / 2 );\n\t\tvar s3 = Math.sin( euler._z / 2 );\n\n\t\tvar order = euler.order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function () {\n\n\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar v1, r;\n\n\t\tvar EPS = 0.000001;\n\n\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t}\n\n\t\t\tthis._x = v1.x;\n\t\t\tthis._y = v1.y;\n\t\t\tthis._z = v1.z;\n\t\t\tthis._w = r;\n\n\t\t\treturn this.normalize();\n\n\t\t};\n\n\t}(),\n\n\tinverse: function () {\n\n\t\treturn this.conjugate().normalize();\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tpremultiply: function ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n};\n\nObject.assign( THREE.Quaternion, {\n\n\tslerp: function( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t},\n\n\tslerpFlat: function(\n\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t,\n\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n} );\n\n// File:src/math/Vector2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.Vector2 = function ( x, y ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\n};\n\nTHREE.Vector2.prototype = {\n\n\tconstructor: THREE.Vector2,\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t},\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t},\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t},\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t},\n\n\t//\n\n\tset: function ( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector2();\n\t\t\t\tmax = new THREE.Vector2();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t},\n\n\tlengthManhattan: function() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tangle: function () {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\treturn angle;\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\trotateAround: function ( center, angle ) {\n\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tvar x = this.x - center.x;\n\t\tvar y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Vector3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author *kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector3 = function ( x, y, z ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\n};\n\nTHREE.Vector3.prototype = {\n\n\tconstructor: THREE.Vector3,\n\n\tset: function ( x, y, z ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVectors: function ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyEuler: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function applyEuler( euler ) {\n\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyAxisAngle: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tapplyProjection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 projection matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n\t\treturn this;\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t},\n\n\tproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function project( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\tunproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function unproject( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\ttransformDirection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector3();\n\t\t\t\tmax = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tcross: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tthis.x = y * v.z - z * v.y;\n\t\tthis.y = z * v.x - x * v.z;\n\t\tthis.z = x * v.y - y * v.x;\n\n\t\treturn this;\n\n\t},\n\n\tcrossVectors: function ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t},\n\n\tprojectOnVector: function ( vector ) {\n\n\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\t\n\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\t\n\t},\n\n\tprojectOnPlane: function () {\n\n\t\tvar v1;\n\n\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( v1 );\n\n\t\t};\n\n\t}(),\n\n\treflect: function () {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\tvar v1;\n\n\t\treturn function reflect( normal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t};\n\n\t}(),\n\n\tangleTo: function ( v ) {\n\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t},\n\n\tsetFromSpherical: function( s ) {\n\n\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixPosition: function ( m ) {\n\n\t\treturn this.setFromMatrixColumn( m, 3 );\n\n\t},\n\n\tsetFromMatrixScale: function ( m ) {\n\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\tif ( typeof m === 'number' ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t\t\tvar temp = m\n\t\t\tm = index;\n\t\t\tindex = temp;\n\n\t\t}\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\t\tthis.z = attribute.array[ index + 2 ];\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Vector4.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector4 = function ( x, y, z, w ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\tthis.w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Vector4.prototype = {\n\n\tconstructor: THREE.Vector4,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\t\t\tthis.w = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\t this.x = 1;\n\t\t\t this.y = 0;\n\t\t\t this.z = 0;\n\n\t\t} else {\n\n\t\t\t this.x = q.x / s;\n\t\t\t this.y = q.y / s;\n\t\t\t this.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector4();\n\t\t\t\tmax = new THREE.Vector4();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\t\tthis.z = attribute.array[ index + 2 ];\n\t\tthis.w = attribute.array[ index + 3 ];\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Euler.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nTHREE.Euler = function ( x, y, z, order ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._order = order || THREE.Euler.DefaultOrder;\n\n};\n\nTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nTHREE.Euler.DefaultOrder = 'XYZ';\n\nTHREE.Euler.prototype = {\n\n\tconstructor: THREE.Euler,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget order () {\n\n\t\treturn this._order;\n\n\t},\n\n\tset order ( value ) {\n\n\t\tthis._order = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order || this._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t},\n\n\tcopy: function ( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\tvar clamp = THREE.Math.clamp;\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements;\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\torder = order || this._order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._y = 0;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromQuaternion: function () {\n\n\t\tvar matrix;\n\n\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t};\n\n\t}(),\n\n\tsetFromVector3: function ( v, order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t},\n\n\treorder: function () {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\tvar q = new THREE.Quaternion();\n\n\t\treturn function reorder( newOrder ) {\n\n\t\t\tq.setFromEuler( this );\n\t\t\t\n\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t},\n\n\ttoVector3: function ( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n};\n\n// File:src/math/Line3.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Line3 = function ( start, end ) {\n\n\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\n\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\n\n};\n\nTHREE.Line3.prototype = {\n\n\tconstructor: THREE.Line3,\n\n\tset: function ( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t},\n\n\tdelta: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.end, this.start );\n\n\t},\n\n\tdistanceSq: function () {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t},\n\n\tdistance: function () {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tclosestPointToPointParameter: function () {\n\n\t\tvar startP = new THREE.Vector3();\n\t\tvar startEnd = new THREE.Vector3();\n\n\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\tstartP.subVectors( point, this.start );\n\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n};\n\n// File:src/math/Box2.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Box2 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\n\n};\n\nTHREE.Box2.prototype = {\n\n\tconstructor: THREE.Box2,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n};\n\n// File:src/math/Box3.js\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Box3 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\n\n};\n\nTHREE.Box3.prototype = {\n\n\tconstructor: THREE.Box3,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromArray: function ( array ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tvar x = array[ i ];\n\t\t\tvar y = array[ i + 1 ];\n\t\t\tvar z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromObject: function () {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function setFromObject( object ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tobject.traverse( function ( node ) {\n\n\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {\n\n\t\t\t\t\t\tvar positions = geometry.attributes[ 'position' ].array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\tv1.fromArray( positions, i );\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsSphere: ( function () {\n\n\t\tvar closestPoint;\n\n\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\tif ( closestPoint === undefined ) closestPoint = new THREE.Vector3();\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t};\n\n\t} )(),\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tvar min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tgetBoundingSphere: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function getBoundingSphere( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Sphere();\n\n\t\t\tresult.center = this.center();\n\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar points = [\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3()\n\t\t];\n\n\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif( this.isEmpty() ) return this;\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n};\n\n// File:src/math/Matrix3.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n * @author tschw\n */\n\nTHREE.Matrix3 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0,\n\t\t0, 1, 0,\n\t\t0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix3.prototype = {\n\n\tconstructor: THREE.Matrix3,\n\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix4: function( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.fromArray( array, j );\n\t\t\t\tv1.applyMatrix3( this );\n\t\t\t\tv1.toArray( array, j );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\tapplyToBuffer: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t};\n\n\t}(),\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t},\n\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\tif ( matrix instanceof THREE.Matrix4 ) {\n\n\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n\t\t}\n\n\t\tvar me = matrix.elements,\n\t\t\tte = this.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\t\t}\n\t\t\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar tmp, m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\treturn this.toArray( array, offset );\n\n\t},\n\n\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t},\n\n\ttransposeIntoArray: function ( r ) {\n\n\t\tvar m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n};\n\n// File:src/math/Matrix4.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Matrix4 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix4.prototype = {\n\n\tconstructor: THREE.Matrix4,\n\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Matrix4().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tthis.elements.set( m.elements );\n\n\t\treturn this;\n\n\t},\n\n\tcopyPosition: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0,       0,       0,       1\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\textractRotation: function () {\n\n\t\tvar v1;\n\n\t\treturn function extractRotation( m ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeRotationFromEuler: function ( euler ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\tte[ 4 ] = xy - wz;\n\t\tte[ 8 ] = xz + wy;\n\n\t\tte[ 1 ] = xy + wz;\n\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\tte[ 9 ] = yz - wx;\n\n\t\tte[ 2 ] = xz - wy;\n\t\tte[ 6 ] = yz + wx;\n\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tlookAt: function () {\n\n\t\tvar x, y, z;\n\n\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\tif ( x === undefined ) {\n\n\t\t\t\tx = new THREE.Vector3();\n\t\t\t\ty = new THREE.Vector3();\n\t\t\t\tz = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tz.subVectors( eye, target ).normalize();\n\n\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\tz.z = 1;\n\n\t\t\t}\n\n\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\tz.z += 0.0001;\n\t\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\t}\n\n\t\t\ty.crossVectors( z, x );\n\n\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyToArray: function ( a, b, r ) {\n\n\t\tvar te = this.elements;\n\n\t\tthis.multiplyMatrices( a, b );\n\n\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.fromArray( array, j );\n\t\t\t\tv1.applyMatrix4( this );\n\t\t\t\tv1.toArray( array, j );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\tapplyToBuffer: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t};\n\n\t}(),\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar te = this.elements;\n\t\tvar tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\treturn this.toArray( array, offset );\n\n\t},\n\n\tgetPosition: function () {\n\n\t\tvar v1;\n\n\t\treturn function getPosition() {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t};\n\n\t}(),\n\n\tsetPosition: function ( v ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 12 ] = v.x;\n\t\tte[ 13 ] = v.y;\n\t\tte[ 14 ] = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tvar te = this.elements,\n\t\t\tme = m.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\t\t\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\tscale: function ( v ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t},\n\n\tgetMaxScaleOnAxis: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t},\n\n\tmakeTranslation: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationX: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0,  0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s,  c, 0,\n\t\t\t0, 0,  0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationY: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationZ: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts,  c, 0, 0,\n\t\t\t0,  0, 1, 0,\n\t\t\t0,  0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tvar c = Math.cos( angle );\n\t\tvar s = Math.sin( angle );\n\t\tvar t = 1 - c;\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\tvar tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\t return this;\n\n\t},\n\n\tmakeScale: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcompose: function ( position, quaternion, scale ) {\n\n\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\tthis.scale( scale );\n\t\tthis.setPosition( position );\n\n\t\treturn this;\n\n\t},\n\n\tdecompose: function () {\n\n\t\tvar vector, matrix;\n\n\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tvector = new THREE.Vector3();\n\t\t\t\tmatrix = new THREE.Matrix4();\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) {\n\n\t\t\t\tsx = - sx;\n\n\t\t\t}\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\n\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = 2 * near / ( right - left );\n\t\tvar y = 2 * near / ( top - bottom );\n\n\t\tvar a = ( right + left ) / ( right - left );\n\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\tvar c = - ( far + near ) / ( far - near );\n\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t},\n\n\tmakePerspective: function ( fov, aspect, near, far ) {\n\n\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\tvar ymin = - ymax;\n\t\tvar xmin = ymin * aspect;\n\t\tvar xmax = ymax * aspect;\n\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n\t},\n\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar w = 1.0 / ( right - left );\n\t\tvar h = 1.0 / ( top - bottom );\n\t\tvar p = 1.0 / ( far - near );\n\n\t\tvar x = ( right + left ) * w;\n\t\tvar y = ( top + bottom ) * h;\n\t\tvar z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\tarray[ offset + 9 ]  = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n};\n\n// File:src/math/Ray.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Ray = function ( origin, direction ) {\n\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\n\n};\n\nTHREE.Ray.prototype = {\n\n\tconstructor: THREE.Ray,\n\n\tset: function ( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t},\n\n\tlookAt: function ( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\trecast: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function recast( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\tresult.subVectors( point, this.origin );\n\t\tvar directionDistance = result.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn result.copy( this.origin );\n\n\t\t}\n\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t},\n\n\tdistanceSqToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn v1.distanceToSquared( point );\n\n\t\t};\n\n\t}(),\n\n\tdistanceSqToSegment: function () {\n\n\t\tvar segCenter = new THREE.Vector3();\n\t\tvar segDir = new THREE.Vector3();\n\t\tvar diff = new THREE.Vector3();\n\n\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\tvar c = diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t};\n\n\t}(),\n\n\tintersectSphere: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = v1.dot( this.direction );\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t},\n\n\tdistanceToPlane: function ( plane ) {\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t :  null;\n\n\t},\n\n\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\tvar t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, optionalTarget );\n\n\t},\n\n\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t},\n\n\tintersectBox: function ( box, optionalTarget ) {\n\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tvar invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tvar origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t},\n\n\tintersectsBox: ( function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t};\n\n\t} )(),\n\n\tintersectTriangle: function () {\n\n\t\t// Compute the offset origin, edges, and normal.\n\t\tvar diff = new THREE.Vector3();\n\t\tvar edge1 = new THREE.Vector3();\n\t\tvar edge2 = new THREE.Vector3();\n\t\tvar normal = new THREE.Vector3();\n\n\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\tedge1.subVectors( b, a );\n\t\t\tedge2.subVectors( c, a );\n\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tdiff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix4: function ( matrix4 ) {\n\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.sub( this.origin );\n\t\tthis.direction.normalize();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n};\n\n// File:src/math/Sphere.js\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Sphere = function ( center, radius ) {\n\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n};\n\nTHREE.Sphere.prototype = {\n\n\tconstructor: THREE.Sphere,\n\n\tset: function ( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function () {\n\n\t\tvar box = new THREE.Box3();\n\n\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\tbox.setFromPoints( points ).center( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\treturn ( this.radius <= 0 );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We use the following equation to compute the signed distance from\n\t\t// the center of the sphere to the plane.\n\t\t//\n\t\t// distance = q * n - d\n\t\t//\n\t\t// If this distance is greater than the radius of the sphere,\n\t\t// then there is no intersection.\n\n\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tresult.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tresult.sub( this.center ).normalize();\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\tvar box = optionalTarget || new THREE.Box3();\n\n\t\tbox.set( this.center, this.center );\n\t\tbox.expandByScalar( this.radius );\n\n\t\treturn box;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n};\n\n// File:src/math/Frustum.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\n\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\n\n\tthis.planes = [\n\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\n\n\t];\n\n};\n\nTHREE.Frustum.prototype = {\n\n\tconstructor: THREE.Frustum,\n\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix: function ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\tintersectsObject: function () {\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function intersectsObject( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSprite: function () {\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsBox: function () {\n\n\t\tvar p1 = new THREE.Vector3(),\n\t\t\tp2 = new THREE.Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t};\n\n\t}(),\n\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n};\n\n// File:src/math/Plane.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Plane = function ( normal, constant ) {\n\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n};\n\nTHREE.Plane.prototype = {\n\n\tconstructor: THREE.Plane,\n\n\tset: function ( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponents: function ( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCoplanarPoints: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\n\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t},\n\n\tnormalize: function () {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t},\n\n\tdistanceToSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t},\n\n\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n\t},\n\n\torthoPoint: function ( point, optionalTarget ) {\n\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n\t},\n\n\tintersectLine: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function intersectLine( line, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tvar direction = line.delta( v1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t};\n\n\t}(),\n\n\tintersectsLine: function ( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tvar startSign = this.distanceToPoint( line.start );\n\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t},\n\n\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar m1 = new THREE.Matrix3();\n\n\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\t// transform normal based on theory here:\n\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.constant = this.constant - offset.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n};\n\n// File:src/math/Spherical.js\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The poles (phi) are at the positive and negative y axis.\n * The equator starts at positive z.\n */\n\nTHREE.Spherical = function ( radius, phi, theta ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\treturn this;\n\n};\n\nTHREE.Spherical.prototype = {\n\n\tconstructor: THREE.Spherical,\n\n\tset: function ( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius.copy( other.radius );\n\t\tthis.phi.copy( other.phi );\n\t\tthis.theta.copy( other.theta );\n\n\t\treturn this;\n\n\t},\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe: function() {\n\n\t\tvar EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function( vec3 ) {\n\n\t\tthis.radius = vec3.length();\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\tthis.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n};\n\n// File:src/math/Math.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Math = {\n\n\tDEG2RAD: Math.PI / 180,\n\tRAD2DEG: 180 / Math.PI,\n\n\tgenerateUUID: function () {\n\n\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\tvar uuid = new Array( 36 );\n\t\tvar rnd = 0, r;\n\n\t\treturn function generateUUID() {\n\n\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n\t\t\t\t\tuuid[ i ] = '-';\n\n\t\t\t\t} else if ( i === 14 ) {\n\n\t\t\t\t\tuuid[ i ] = '4';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uuid.join( '' );\n\n\t\t};\n\n\t}(),\n\n\tclamp: function ( value, min, max ) {\n\n\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t},\n\n\t// compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\teuclideanModulo: function ( n, m ) {\n\n\t\treturn ( ( n % m ) + m ) % m;\n\n\t},\n\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t},\n\n\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\tsmoothstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t},\n\n\tsmootherstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t},\n\n\trandom16: function () {\n\n\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t\treturn Math.random();\n\n\t},\n\n\t// Random integer from <low, high> interval\n\n\trandInt: function ( low, high ) {\n\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t},\n\n\t// Random float from <low, high> interval\n\n\trandFloat: function ( low, high ) {\n\n\t\treturn low + Math.random() * ( high - low );\n\n\t},\n\n\t// Random float from <-range/2, range/2> interval\n\n\trandFloatSpread: function ( range ) {\n\n\t\treturn range * ( 0.5 - Math.random() );\n\n\t},\n\n\tdegToRad: function ( degrees ) {\n\n\t\treturn degrees * THREE.Math.DEG2RAD;\n\n\t},\n\n\tradToDeg: function ( radians ) {\n\n\t\treturn radians * THREE.Math.RAD2DEG;\n\n\t},\n\n\tisPowerOfTwo: function ( value ) {\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t},\n\n\tnearestPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n\t},\n\n\tnextPowerOfTwo: function ( value ) {\n\n\t\tvalue --;\n\t\tvalue |= value >> 1;\n\t\tvalue |= value >> 2;\n\t\tvalue |= value >> 4;\n\t\tvalue |= value >> 8;\n\t\tvalue |= value >> 16;\n\t\tvalue ++;\n\n\t\treturn value;\n\n\t}\n\n};\n\n// File:src/math/Spline.js\n\n/**\n * Spline from Tween.js, slightly optimized (and trashed)\n * http://sole.github.com/tween.js/examples/05_spline.html\n *\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Spline = function ( points ) {\n\n\tthis.points = points;\n\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\tpoint, intPoint, weight, w2, w3,\n\tpa, pb, pc, pd;\n\n\tthis.initFromArray = function ( a ) {\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n\t\t}\n\n\t};\n\n\tthis.getPoint = function ( k ) {\n\n\t\tpoint = ( this.points.length - 1 ) * k;\n\t\tintPoint = Math.floor( point );\n\t\tweight = point - intPoint;\n\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t\tc[ 1 ] = intPoint;\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n\t\tpa = this.points[ c[ 0 ] ];\n\t\tpb = this.points[ c[ 1 ] ];\n\t\tpc = this.points[ c[ 2 ] ];\n\t\tpd = this.points[ c[ 3 ] ];\n\n\t\tw2 = weight * weight;\n\t\tw3 = weight * w2;\n\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n\t\treturn v3;\n\n\t};\n\n\tthis.getControlPointsArray = function () {\n\n\t\tvar i, p, l = this.points.length,\n\t\t\tcoords = [];\n\n\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\tp = this.points[ i ];\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n\t\t}\n\n\t\treturn coords;\n\n\t};\n\n\t// approximate length by summing linear segments\n\n\tthis.getLength = function ( nSubDivisions ) {\n\n\t\tvar i, index, nSamples, position,\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t\t\toldPosition = new THREE.Vector3(),\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tchunkLengths = [],\n\t\t\ttotalLength = 0;\n\n\t\t// first point has 0 length\n\n\t\tchunkLengths[ 0 ] = 0;\n\n\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n\t\tnSamples = this.points.length * nSubDivisions;\n\n\t\toldPosition.copy( this.points[ 0 ] );\n\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n\t\t\tindex = i / nSamples;\n\n\t\t\tposition = this.getPoint( index );\n\t\t\ttmpVec.copy( position );\n\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n\t\t\toldPosition.copy( position );\n\n\t\t\tpoint = ( this.points.length - 1 ) * index;\n\t\t\tintPoint = Math.floor( point );\n\n\t\t\tif ( intPoint !== oldIntPoint ) {\n\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t\t\t\toldIntPoint = intPoint;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// last point ends with total length\n\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n\t\treturn { chunks: chunkLengths, total: totalLength };\n\n\t};\n\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n\t\tvar i, j,\n\t\t\tindex, indexCurrent, indexNext,\n\t\t\trealDistance,\n\t\t\tsampling, position,\n\t\t\tnewpoints = [],\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tsl = this.getLength();\n\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n\t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t\t\tindexNext = i / ( this.points.length - 1 );\n\n\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n\t\t\t\tposition = this.getPoint( index );\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n\t\t\t}\n\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n\t\t}\n\n\t\tthis.points = newpoints;\n\n\t};\n\n\t// Catmull-Rom\n\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n};\n\n// File:src/math/Triangle.js\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Triangle = function ( a, b, c ) {\n\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\n\n};\n\nTHREE.Triangle.normal = function () {\n\n\tvar v0 = new THREE.Vector3();\n\n\treturn function normal( a, b, c, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tresult.subVectors( c, b );\n\t\tv0.subVectors( a, b );\n\t\tresult.cross( v0 );\n\n\t\tvar resultLengthSq = result.lengthSq();\n\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t}\n\n\t\treturn result.set( 0, 0, 0 );\n\n\t};\n\n}();\n\n// static/instance method to calculate barycentric coordinates\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\nTHREE.Triangle.barycoordFromPoint = function () {\n\n\tvar v0 = new THREE.Vector3();\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\n\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n\t\tv0.subVectors( c, a );\n\t\tv1.subVectors( b, a );\n\t\tv2.subVectors( point, a );\n\n\t\tvar dot00 = v0.dot( v0 );\n\t\tvar dot01 = v0.dot( v1 );\n\t\tvar dot02 = v0.dot( v2 );\n\t\tvar dot11 = v1.dot( v1 );\n\t\tvar dot12 = v1.dot( v2 );\n\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn result.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tvar invDenom = 1 / denom;\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn result.set( 1 - u - v, v, u );\n\n\t};\n\n}();\n\nTHREE.Triangle.containsPoint = function () {\n\n\tvar v1 = new THREE.Vector3();\n\n\treturn function containsPoint( point, a, b, c ) {\n\n\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t};\n\n}();\n\nTHREE.Triangle.prototype = {\n\n\tconstructor: THREE.Triangle,\n\n\tset: function ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t},\n\n\tarea: function () {\n\n\t\tvar v0 = new THREE.Vector3();\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function area() {\n\n\t\t\tv0.subVectors( this.c, this.b );\n\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t};\n\n\t}(),\n\n\tmidpoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t},\n\n\tnormal: function ( optionalTarget ) {\n\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tplane: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Plane();\n\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t},\n\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t},\n\n\tclosestPointToPoint: function () {\n\n\t\tvar plane, edgeList, projectedPoint, closestPoint;\n\n\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n\t\t\tif ( plane === undefined ) {\n\n\t\t\t\tplane = new THREE.Plane();\n\t\t\t\tedgeList = [ new THREE.Line3(), new THREE.Line3(), new THREE.Line3() ];\n\t\t\t\tprojectedPoint = new THREE.Vector3();\n\t\t\t\tclosestPoint = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\tvar minDistance = Infinity;\n\n\t\t\t// project the point onto the plane of the triangle\n\n\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t// check if the projection lies within the triangle\n\n\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t// if so, this is the closest point\n\n\t\t\t\tresult.copy( projectedPoint );\n\n\t\t\t} else {\n\n\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\tif( distance < minDistance ) {\n\n\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\tresult.copy( closestPoint );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n};\n\n// File:src/math/Interpolant.js\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n * @author tschw\n */\n\nTHREE.Interpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tthis.parameterPositions = parameterPositions;\n\tthis._cachedIndex = 0;\n\n\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\tthis.sampleValues = sampleValues;\n\tthis.valueSize = sampleSize;\n\n};\n\nTHREE.Interpolant.prototype = {\n\n\tconstructor: THREE.Interpolant,\n\n\tevaluate: function( t ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\ti1 = this._cachedIndex,\n\n\t\t\tt1 = pp[   i1   ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tvar right;\n\n\t\t\t\tlinear_scan: {\n//- See http://jsperf.com/comparison-to-undefined/3\n//- slower code:\n//-\n//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n//- slower code:\n//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[   i1   ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t},\n\n\tsettings: null, // optional, subclass-specific settings structure\n\t// Note: The indirection allows central control of many interpolants.\n\n\t// --- Protected interface\n\n\tDefaultSettings_: {},\n\n\tgetSettings_: function() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t},\n\n\tcopySampleValue_: function( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// Template methods for derived classes:\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tthrow new Error( \"call to abstract method\" );\n\t\t// implementations shall return this.resultBuffer\n\n\t},\n\n\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t// empty\n\n\t}\n\n};\n\nObject.assign( THREE.Interpolant.prototype, {\n\n\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t\tTHREE.Interpolant.prototype.copySampleValue_,\n\n\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t\tTHREE.Interpolant.prototype.copySampleValue_\n\n} );\n\n// File:src/math/interpolants/CubicInterpolant.js\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @author tschw\n */\n\nTHREE.CubicInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\tthis._weightPrev = -0;\n\tthis._offsetPrev = -0;\n\tthis._weightNext = -0;\n\tthis._offsetNext = -0;\n\n};\n\nTHREE.CubicInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.CubicInterpolant,\n\n\tDefaultSettings_: {\n\n\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\n\t},\n\n\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\tiPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase THREE.ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase THREE.ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t},\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/math/interpolants/DiscreteInterpolant.js\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n *\n * @author tschw\n */\n\nTHREE.DiscreteInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.DiscreteInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.DiscreteInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n} );\n\n// File:src/math/interpolants/LinearInterpolant.js\n\n/**\n * @author tschw\n */\n\nTHREE.LinearInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.LinearInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.LinearInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/math/interpolants/QuaternionLinearInterpolant.js\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @author tschw\n */\n\nTHREE.QuaternionLinearInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.QuaternionLinearInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.QuaternionLinearInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset = i1 * stride,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tTHREE.Quaternion.slerpFlat( result, 0,\n\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/core/Clock.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Clock = function ( autoStart ) {\n\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\tthis.startTime = 0;\n\tthis.oldTime = 0;\n\tthis.elapsedTime = 0;\n\n\tthis.running = false;\n\n};\n\nTHREE.Clock.prototype = {\n\n\tconstructor: THREE.Clock,\n\n\tstart: function () {\n\n\t\tthis.startTime = ( performance || Date ).now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.running = true;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\n\t},\n\n\tgetElapsedTime: function () {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t},\n\n\tgetDelta: function () {\n\n\t\tvar diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tvar newTime = ( performance || Date ).now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n};\n\n// File:src/core/EventDispatcher.js\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nTHREE.EventDispatcher = function () {};\n\nObject.assign( THREE.EventDispatcher.prototype, {\n\n\taddEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t},\n\n\thasEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tremoveEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tdispatchEvent: function ( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\tvar array = [], i = 0;\n\t\t\tvar length = listenerArray.length;\n\n\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ] = listenerArray[ i ];\n\n\t\t\t}\n\n\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/core/Layers.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Layers = function () {\n\n\tthis.mask = 1;\n\n};\n\nTHREE.Layers.prototype = {\n\n\tconstructor: THREE.Layers,\n\n\tset: function ( channel ) {\n\n\t\tthis.mask = 1 << channel;\n\n\t},\n\n\tenable: function ( channel ) {\n\n\t\tthis.mask |= 1 << channel;\n\n\t},\n\n\ttoggle: function ( channel ) {\n\n\t\tthis.mask ^= 1 << channel;\n\n\t},\n\n\tdisable: function ( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel );\n\n\t},\n\n\ttest: function ( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n};\n\n// File:src/core/Raycaster.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */\n\n( function ( THREE ) {\n\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\n\n\t\tthis.ray = new THREE.Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t};\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//\n\n\tTHREE.Raycaster.prototype = {\n\n\t\tconstructor: THREE.Raycaster,\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t};\n\n}( THREE ) );\n\n// File:src/core/Object3D.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author elephantatwork / www.elephantatwork.ch\n */\n\nTHREE.Object3D = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Object3D';\n\n\tthis.parent = null;\n\tthis.children = [];\n\n\tthis.up = THREE.Object3D.DefaultUp.clone();\n\n\tvar position = new THREE.Vector3();\n\tvar rotation = new THREE.Euler();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3( 1, 1, 1 );\n\n\tfunction onRotationChange() {\n\n\t\tquaternion.setFromEuler( rotation, false );\n\n\t}\n\n\tfunction onQuaternionChange() {\n\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t}\n\n\trotation.onChange( onRotationChange );\n\tquaternion.onChange( onQuaternionChange );\n\n\tObject.defineProperties( this, {\n\t\tposition: {\n\t\t\tenumerable: true,\n\t\t\tvalue: position\n\t\t},\n\t\trotation: {\n\t\t\tenumerable: true,\n\t\t\tvalue: rotation\n\t\t},\n\t\tquaternion: {\n\t\t\tenumerable: true,\n\t\t\tvalue: quaternion\n\t\t},\n\t\tscale: {\n\t\t\tenumerable: true,\n\t\t\tvalue: scale\n\t\t},\n\t\tmodelViewMatrix: {\n\t\t\tvalue: new THREE.Matrix4()\n\t\t},\n\t\tnormalMatrix: {\n\t\t\tvalue: new THREE.Matrix3()\n\t\t}\n\t} );\n\n\tthis.matrix = new THREE.Matrix4();\n\tthis.matrixWorld = new THREE.Matrix4();\n\n\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\n\tthis.matrixWorldNeedsUpdate = false;\n\n\tthis.layers = new THREE.Layers();\n\tthis.visible = true;\n\n\tthis.castShadow = false;\n\tthis.receiveShadow = false;\n\n\tthis.frustumCulled = true;\n\tthis.renderOrder = 0;\n\n\tthis.userData = {};\n\n};\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\nTHREE.Object3D.DefaultMatrixAutoUpdate = true;\n\nObject.assign( THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t},\n\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t},\n\n\tsetRotationFromEuler: function ( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t},\n\n\tsetRotationFromMatrix: function ( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t},\n\n\trotateOnAxis: function () {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar q1 = new THREE.Quaternion();\n\n\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\ttranslateOnAxis: function () {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function translateX( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function translateY( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function translateZ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\tlocalToWorld: function ( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t},\n\n\tworldToLocal: function () {\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function worldToLocal( vector ) {\n\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t};\n\n\t}(),\n\n\tadd: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object instanceof THREE.Object3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\tthis.children.push( object );\n\n\t\t} else {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tremove: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t}\n\n\t},\n\n\tgetObjectById: function ( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t},\n\n\tgetObjectByName: function ( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t},\n\n\tgetObjectByProperty: function ( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tvar child = this.children[ i ];\n\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t},\n\n\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t},\n\n\tgetWorldQuaternion: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar scale = new THREE.Vector3();\n\n\t\treturn function getWorldQuaternion( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Quaternion();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldRotation: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldRotation( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Euler();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t};\n\n\t}(),\n\n\tgetWorldScale: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldScale( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}(),\n\n\traycast: function () {},\n\n\ttraverse: function ( callback ) {\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseVisible: function ( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseAncestors: function ( callback ) {\n\n\t\tvar parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t},\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\t// meta is '' when called from JSON.stringify\n\t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n\t\tvar output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tvar object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\t//\n\n\t\tif ( this.geometry !== undefined ) {\n\n\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tobject.geometry = this.geometry.uuid;\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tobject.material = this.material.uuid;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache ( cache ) {\n\n\t\t\tvar values = [];\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\t\t\treturn values;\n\n\t\t}\n\n\t},\n\n\tclone: function ( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t},\n\n\tcopy: function ( source, recursive ) {\n\n\t\tif ( recursive === undefined ) recursive = true;\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tvar child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\nTHREE.Object3DIdCount = 0;\n\n// File:src/core/Face3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\n\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n};\n\nTHREE.Face3.prototype = {\n\n\tconstructor: THREE.Face3,\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\n\t\tthis.normal.copy( source.normal );\n\t\tthis.color.copy( source.color );\n\n\t\tthis.materialIndex = source.materialIndex;\n\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/core/BufferAttribute.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferAttribute = function ( array, itemSize, normalized ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.array = array;\n\tthis.itemSize = itemSize;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\tthis.normalized = normalized === true;\n\n};\n\nTHREE.BufferAttribute.prototype = {\n\n\tconstructor: THREE.BufferAttribute,\n\n\tget count() {\n\n\t\treturn this.array.length / this.itemSize;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyArray: function ( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t},\n\n\tcopyColorsArray: function ( colors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tvar color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new THREE.Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyIndicesArray: function ( indices ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\tvar index = indices[ i ];\n\n\t\t\tarray[ offset ++ ] = index.a;\n\t\t\tarray[ offset ++ ] = index.b;\n\t\t\tarray[ offset ++ ] = index.c;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector2sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector3sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector4sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n};\n\n//\n\nTHREE.Int8Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\n\n};\n\nTHREE.Uint8Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\n\n};\n\nTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n};\n\nTHREE.Int16Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\n\n};\n\nTHREE.Uint16Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\n\n};\n\nTHREE.Int32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\n\n};\n\nTHREE.Uint32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\n\n};\n\nTHREE.Float32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\n\n};\n\nTHREE.Float64Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\n\n};\n\n\n// Deprecated\n\nTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\n\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\n\n};\n\n// File:src/core/InstancedBufferAttribute.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\n\n\tTHREE.BufferAttribute.call( this, array, itemSize );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n};\n\nTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\nTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\n\nTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\n\n\tTHREE.BufferAttribute.prototype.copy.call( this, source );\n\n\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\treturn this;\n\n};\n\n// File:src/core/InterleavedBuffer.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InterleavedBuffer = function ( array, stride ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.array = array;\n\tthis.stride = stride;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n};\n\nTHREE.InterleavedBuffer.prototype = {\n\n\tconstructor: THREE.InterleavedBuffer,\n\n\tget length () {\n\n\t\treturn this.array.length;\n\n\t},\n\n\tget count () {\n\n\t\treturn this.array.length / this.stride;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.stride = source.stride;\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n};\n\n// File:src/core/InstancedInterleavedBuffer.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\n\n\tTHREE.InterleavedBuffer.call( this, array, stride );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n};\n\nTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\nTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\n\nTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\n\n\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\treturn this;\n\n};\n\n// File:src/core/InterleavedBufferAttribute.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.data = interleavedBuffer;\n\tthis.itemSize = itemSize;\n\tthis.offset = offset;\n\n};\n\n\nTHREE.InterleavedBufferAttribute.prototype = {\n\n\tconstructor: THREE.InterleavedBufferAttribute,\n\n\tget length() {\n\n\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\treturn this.array.length;\n\n\t},\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/core/Geometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://clara.io\n */\n\nTHREE.Geometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Geometry';\n\n\tthis.vertices = [];\n\tthis.colors = [];\n\tthis.faces = [];\n\tthis.faceVertexUvs = [ [] ];\n\n\tthis.morphTargets = [];\n\tthis.morphNormals = [];\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\tthis.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.elementsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.lineDistancesNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n};\n\nObject.assign( THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.verticesNeedUpdate = true;\n\t\tthis.normalsNeedUpdate = true;\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1;\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1;\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj;\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tfromBufferGeometry: function ( geometry ) {\n\n\t\tvar scope = this;\n\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\tvar attributes = geometry.attributes;\n\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\tvar tempNormals = [];\n\t\tvar tempUVs = [];\n\t\tvar tempUVs2 = [];\n\n\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\tscope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\tscope.faces.push( face );\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( indices !== undefined ) {\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeFaceNormals();\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.center().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tnormalize: function () {\n\n\t\tthis.computeBoundingSphere();\n\n\t\tvar center = this.boundingSphere.center;\n\t\tvar radius = this.boundingSphere.radius;\n\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\tvar matrix = new THREE.Matrix4();\n\t\tmatrix.set(\n\t\t\ts, 0, 0, - s * center.x,\n\t\t\t0, s, 0, - s * center.y,\n\t\t\t0, 0, s, - s * center.z,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\tthis.applyMatrix( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tcomputeFaceNormals: function () {\n\n\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tvar face = this.faces[ f ];\n\n\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab );\n\n\t\t\tcb.normalize();\n\n\t\t\tface.normal.copy( cb );\n\n\t\t}\n\n\t},\n\n\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\tvar v, vl, f, fl, face, vertices;\n\n\t\tvertices = new Array( this.vertices.length );\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ] = new THREE.Vector3();\n\n\t\t}\n\n\t\tif ( areaWeighted ) {\n\n\t\t\t// vertex normals weighted by triangle areas\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ].normalize();\n\n\t\t}\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeMorphNormals: function () {\n\n\t\tvar i, il, f, fl, face;\n\n\t\t// save original normals\n\t\t// - create temp variables on first access\n\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t} else {\n\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t}\n\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\tvar tmpGeo = new THREE.Geometry();\n\t\ttmpGeo.faces = this.faces;\n\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t// create on first access\n\n\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\n\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\n\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t// set vertices to morph target\n\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t// compute morph normals\n\n\t\t\ttmpGeo.computeFaceNormals();\n\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t// store morph normals\n\n\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore original normals\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t}\n\n\t},\n\n\tcomputeTangents: function () {\n\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t},\n\n\tcomputeLineDistances: function () {\n\n\t\tvar d = 0;\n\t\tvar vertices = this.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tif ( i > 0 ) {\n\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t},\n\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\tif ( geometry instanceof THREE.Geometry === false ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar normalMatrix,\n\t\tvertexOffset = this.vertices.length,\n\t\tvertices1 = this.vertices,\n\t\tvertices2 = geometry.vertices,\n\t\tfaces1 = this.faces,\n\t\tfaces2 = geometry.faces,\n\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\n\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\tif ( matrix !== undefined ) {\n\n\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t}\n\n\t\t// vertices\n\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\tvertices1.push( vertexCopy );\n\n\t\t}\n\n\t\t// faces\n\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t}\n\n\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t}\n\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\tfaces1.push( faceCopy );\n\n\t\t}\n\n\t\t// uvs\n\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\tif ( uv === undefined ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t}\n\n\t\t\tuvs1.push( uvCopy );\n\n\t\t}\n\n\t},\n\n\tmergeMesh: function ( mesh ) {\n\n\t\tif ( mesh instanceof THREE.Mesh === false ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\treturn;\n\n\t\t}\n\n\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t},\n\n\t/*\n\t * Checks for duplicate vertices with hashmap.\n\t * Duplicated vertices are removed\n\t * and faces' vertices are updated.\n\t */\n\n\tmergeVertices: function () {\n\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\tvar unique = [], changes = [];\n\n\t\tvar v, key;\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\tvar i, il, face;\n\t\tvar indices, j, jl;\n\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tv = this.vertices[ i ];\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if faces are completely degenerate after merging vertices, we\n\t\t// have to remove them from the geometry.\n\t\tvar faceIndicesToRemove = [];\n\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tface = this.faces[ i ];\n\n\t\t\tface.a = changes[ face.a ];\n\t\t\tface.b = changes[ face.b ];\n\t\t\tface.c = changes[ face.c ];\n\n\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\tvar dupIndex = - 1;\n\n\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t// we have to remove the face as nothing can be saved\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\tdupIndex = n;\n\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Use unique set of vertices\n\n\t\tvar diff = this.vertices.length - unique.length;\n\t\tthis.vertices = unique;\n\t\treturn diff;\n\n\t},\n\n\tsortFacesByMaterialIndex: function () {\n\n\t\tvar faces = this.faces;\n\t\tvar length = faces.length;\n\n\t\t// tag faces\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tfaces[ i ]._id = i;\n\n\t\t}\n\n\t\t// sort faces\n\n\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t}\n\n\t\tfaces.sort( materialIndexSort );\n\n\t\t// sort uvs\n\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\tvar newUvs1, newUvs2;\n\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar id = faces[ i ]._id;\n\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t}\n\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Geometry',\n\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Geometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tvar faces = [];\n\t\tvar normals = [];\n\t\tvar normalsHash = {};\n\t\tvar colors = [];\n\t\tvar colorsHash = {};\n\t\tvar uvs = [];\n\t\tvar uvsHash = {};\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tvar hasMaterial = true;\n\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\tvar faceType = 0;\n\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\tfaces.push( faceType );\n\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\tfaces.push( face.materialIndex );\n\n\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t}\n\n\t\tfunction getNormalIndex( normal ) {\n\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\treturn normalsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getColorIndex( color ) {\n\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\tcolors.push( color.getHex() );\n\n\t\t\treturn colorsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getUvIndex( uv ) {\n\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\treturn uvsHash[ hash ];\n\n\t\t}\n\n\t\tdata.data = {};\n\n\t\tdata.data.vertices = vertices;\n\t\tdata.data.normals = normals;\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\tdata.data.faces = faces;\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t// Handle primitives\n\n\t\tvar parameters = this.parameters;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t}\n\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\tthis.constructor.apply( geometry, values );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\treturn new this.constructor().copy( this );\n\t\t*/\n\n\t\treturn new THREE.Geometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.vertices = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [ [] ];\n\n\t\tvar vertices = source.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t}\n\n\t\tvar faces = source.faces;\n\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\nTHREE.GeometryIdCount = 0;\n\n// File:src/core/DirectGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.DirectGeometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'DirectGeometry';\n\n\tthis.indices = [];\n\tthis.vertices = [];\n\tthis.normals = [];\n\tthis.colors = [];\n\tthis.uvs = [];\n\tthis.uvs2 = [];\n\n\tthis.groups = [];\n\n\tthis.morphTargets = {};\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\t// this.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n};\n\nObject.assign( THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\n\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\n\n\tcomputeFaceNormals: function () {\n\n\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n\t},\n\n\tcomputeGroups: function ( geometry ) {\n\n\t\tvar group;\n\t\tvar groups = [];\n\t\tvar materialIndex;\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tvar faces = geometry.faces;\n\t\tvar vertices = geometry.vertices;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tvar morphTargets = geometry.morphTargets;\n\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\tvar morphTargetsPosition;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tmorphTargetsPosition = [];\n\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tvar morphNormals = geometry.morphNormals;\n\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\tvar morphTargetsNormal;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tmorphTargetsNormal = [];\n\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tvar skinIndices = geometry.skinIndices;\n\t\tvar skinWeights = geometry.skinWeights;\n\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n// File:src/core/BufferGeometry.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'BufferGeometry';\n\n\tthis.index = null;\n\tthis.attributes = {};\n\n\tthis.morphAttributes = {};\n\n\tthis.groups = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\tthis.drawRange = { start: 0, count: Infinity };\n\n};\n\nObject.assign( THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tgetIndex: function () {\n\n\t\treturn this.index;\n\n\t},\n\n\tsetIndex: function ( index ) {\n\n\t\tthis.index = index;\n\n\t},\n\n\taddAttribute: function ( name, attribute ) {\n\n\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( name === 'index' ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\tthis.setIndex( attribute );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t},\n\n\tgetAttribute: function ( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t},\n\n\tremoveAttribute: function ( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t},\n\n\taddGroup: function ( start, count, materialIndex ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t} );\n\n\t},\n\n\tclearGroups: function () {\n\n\t\tthis.groups = [];\n\n\t},\n\n\tsetDrawRange: function ( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tmatrix.applyToVector3Array( position.array );\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tvar normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1;\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1;\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj;\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.center().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tsetFromObject: function ( object ) {\n\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\n\n\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\n\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\n\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t} else if ( object instanceof THREE.Mesh ) {\n\n\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdateFromObject: function ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\tif ( direct === undefined ) {\n\n\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\tgeometry = direct;\n\n\t\t}\n\n\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.position;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.normal;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.color;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\tvar attribute = this.attributes.uv;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\tvar attribute = this.attributes.lineDistance;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\n\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t},\n\n\tfromDirectGeometry: function ( geometry ) {\n\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t}\n\n\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t}\n\n\t\tif ( geometry.indices.length > 0 ) {\n\n\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n\t\t}\n\n\t\t// groups\n\n\t\tthis.groups = geometry.groups;\n\n\t\t// morphs\n\n\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\n\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// skinning\n\n\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t}\n\n\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t}\n\n\t\tvar positions = this.attributes.position.array;\n\n\t\tif ( positions !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromArray( positions );\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tvar box = new THREE.Box3();\n\t\tvar vector = new THREE.Vector3();\n\n\t\treturn function computeBoundingSphere() {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t\t}\n\n\t\t\tvar positions = this.attributes.position;\n\n\t\t\tif ( positions ) {\n\n\t\t\t\tvar array = positions.array;\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\tbox.setFromArray( array );\n\t\t\t\tbox.center( center );\n\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\t\t\tvector.fromArray( array, i );\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\tcomputeFaceNormals: function () {\n\n\t\t// backwards compatibility\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tvar index = this.index;\n\t\tvar attributes = this.attributes;\n\t\tvar groups = this.groups;\n\n\t\tif ( attributes.position ) {\n\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar normals = attributes.normal.array;\n\n\t\t\tvar vA, vB, vC,\n\n\t\t\tpA = new THREE.Vector3(),\n\t\t\tpB = new THREE.Vector3(),\n\t\t\tpC = new THREE.Vector3(),\n\n\t\t\tcb = new THREE.Vector3(),\n\t\t\tab = new THREE.Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tmerge: function ( geometry, offset ) {\n\n\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tvar attribute1 = attributes[ key ];\n\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tnormalizeNormals: function () {\n\n\t\tvar normals = this.attributes.normal.array;\n\n\t\tvar x, y, z, n;\n\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n\t\t\tx = normals[ i ];\n\t\t\ty = normals[ i + 1 ];\n\t\t\tz = normals[ i + 2 ];\n\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tnormals[ i ] *= n;\n\t\t\tnormals[ i + 1 ] *= n;\n\t\t\tnormals[ i + 2 ] *= n;\n\n\t\t}\n\n\t},\n\n\ttoNonIndexed: function () {\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar geometry2 = new THREE.BufferGeometry();\n\n\t\tvar indices = this.index.array;\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tvar index = 0, index2 = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tdata.data = { attributes: {} };\n\n\t\tvar index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: array\n\t\t\t};\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: attribute.normalized\n\t\t\t};\n\n\t\t}\n\n\t\tvar groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tvar boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t// Handle primitives\n\n\t\tvar parameters = this.parameters;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t}\n\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\tthis.constructor.apply( geometry, values );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\treturn new this.constructor().copy( this );\n\t\t*/\n\n\t\treturn new THREE.BufferGeometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\tvar attributes = source.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t}\n\n\t\tvar groups = source.groups;\n\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\nTHREE.BufferGeometry.MaxIndex = 65535;\n\n// File:src/core/InstancedBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedBufferGeometry = function () {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'InstancedBufferGeometry';\n\tthis.maxInstancedCount = undefined;\n\n};\n\nTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\n\nTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\n\tthis.groups.push( {\n\n\t\tstart: start,\n\t\tcount: count,\n\t\tinstances: instances\n\n\t} );\n\n};\n\nTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\n\n\tvar index = source.index;\n\n\tif ( index !== null ) {\n\n\t\tthis.setIndex( index.clone() );\n\n\t}\n\n\tvar attributes = source.attributes;\n\n\tfor ( var name in attributes ) {\n\n\t\tvar attribute = attributes[ name ];\n\t\tthis.addAttribute( name, attribute.clone() );\n\n\t}\n\n\tvar groups = source.groups;\n\n\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\tvar group = groups[ i ];\n\t\tthis.addGroup( group.start, group.count, group.instances );\n\n\t}\n\n\treturn this;\n\n};\n\n// File:src/core/Uniform.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Uniform = function ( value ) {\n\n\tif ( typeof value === 'string' ) {\n\n\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\tvalue = arguments[ 1 ];\n\n\t}\n\n\tthis.value = value;\n\n\tthis.dynamic = false;\n\n};\n\nTHREE.Uniform.prototype = {\n\n\tconstructor: THREE.Uniform,\n\n\tonUpdate: function ( callback ) {\n\n\t\tthis.dynamic = true;\n\t\tthis.onUpdateCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/animation/AnimationAction.js\n\n/**\n *\n * Action provided by AnimationMixer for scheduling clip playback on specific\n * objects.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n *\n */\n\nTHREE.AnimationAction = function() {\n\n\tthrow new Error( \"THREE.AnimationAction: \" +\n\t\t\t\"Use mixer.clipAction for construction.\" );\n\n};\n\nTHREE.AnimationAction._new =\n\t\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\tthis._mixer = mixer;\n\tthis._clip = clip;\n\tthis._localRoot = localRoot || null;\n\n\tvar tracks = clip.tracks,\n\t\tnTracks = tracks.length,\n\t\tinterpolants = new Array( nTracks );\n\n\tvar interpolantSettings = {\n\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\t};\n\n\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\tinterpolants[ i ] = interpolant;\n\t\tinterpolant.settings = interpolantSettings;\n\n\t}\n\n\tthis._interpolantSettings = interpolantSettings;\n\n\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t// inside: PropertyMixer (managed by the mixer)\n\tthis._propertyBindings = new Array( nTracks );\n\n\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\tthis._timeScaleInterpolant = null;\n\tthis._weightInterpolant = null;\n\n\tthis.loop = THREE.LoopRepeat;\n\tthis._loopCount = -1;\n\n\t// global mixer time when the action is to be started\n\t// it's set back to 'null' upon start of the action\n\tthis._startTime = null;\n\n\t// scaled local time of the action\n\t// gets clamped or wrapped to 0..clip.duration according to loop\n\tthis.time = 0;\n\n\tthis.timeScale = 1;\n\tthis._effectiveTimeScale = 1;\n\n\tthis.weight = 1;\n\tthis._effectiveWeight = 1;\n\n\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\n\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n};\n\nTHREE.AnimationAction._new.prototype = {\n\n\tconstructor: THREE.AnimationAction._new,\n\n\t// State & Scheduling\n\n\tplay: function() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t},\n\n\tstop: function() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t},\n\n\treset: function() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0;\t\t\t// restart clip\n\t\tthis._loopCount = -1;\t// forget previous loops\n\t\tthis._startTime = null;\t// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t},\n\n\tisRunning: function() {\n\n\t\tvar start = this._startTime;\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t},\n\n\t// return true when play has been called\n\tisScheduled: function() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t},\n\n\tstartAt: function( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t},\n\n\tsetLoop: function( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t},\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight: function( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t},\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight: function() {\n\n\t\treturn this._effectiveWeight;\n\n\t},\n\n\tfadeIn: function( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t},\n\n\tfadeOut: function( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t},\n\n\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n\t\tvar mixer = this._mixer;\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif( warp ) {\n\n\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t},\n\n\tstopFading: function() {\n\n\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Time Scale Control\n\n\t// set the weight stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale: function( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale: function() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t},\n\n\tsetDuration: function( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\tsyncWith: function( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\thalt: function( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t},\n\n\twarp: function( startTimeScale, endTimeScale, duration ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t},\n\n\tstopWarping: function() {\n\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Object Accessors\n\n\tgetMixer: function() {\n\n\t\treturn this._mixer;\n\n\t},\n\n\tgetClip: function() {\n\n\t\treturn this._clip;\n\n\t},\n\n\tgetRoot: function() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t},\n\n\t// Interna\n\n\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t\t// called by the mixer\n\n\t\tvar startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tvar weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tvar interpolants = this._interpolants;\n\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_updateWeight: function( time ) {\n\n\t\tvar weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t},\n\n\t_updateTimeScale: function( time ) {\n\n\t\tvar timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t},\n\n\t_updateTime: function( deltaTime ) {\n\n\t\tvar time = this.time + deltaTime;\n\n\t\tif ( deltaTime === 0 ) return time;\n\n\t\tvar duration = this._clip.duration,\n\n\t\t\tloop = this.loop,\n\t\t\tloopCount = this._loopCount;\n\n\t\tif ( loop === THREE.LoopOnce ) {\n\n\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t// just started\n\n\t\t\t\tthis.loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else break handle_stop;\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tvar pingPong = ( loop === THREE.LoopPingPong );\n\n\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\t\t\t\t// wrap around\n\n\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending < 0 ) {\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 0 ) {\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\tthis.time = time;\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.time = time;\n\t\treturn time;\n\n\t},\n\n\t_setEndings: function( atStart, atEnd, pingPong ) {\n\n\t\tvar settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart \t= THREE.ZeroSlopeEnding;\n\t\t\tsettings.endingEnd\t\t= THREE.ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = THREE.WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = THREE.WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n};\n\n\n// File:src/animation/AnimationClip.js\n\n/**\n *\n * Reusable set of Tracks that represent an animation.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationClip = function ( name, duration, tracks ) {\n\n\tthis.name = name;\n\tthis.tracks = tracks;\n\tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\t// this means it should figure out its duration by scanning the tracks\n\tif ( this.duration < 0 ) {\n\n\t\tthis.resetDuration();\n\n\t}\n\n\t// maybe only do these on demand, as doing them here could potentially slow down loading\n\t// but leaving these here during development as this ensures a lot of testing of these functions\n\tthis.trim();\n\tthis.optimize();\n\n};\n\nTHREE.AnimationClip.prototype = {\n\n\tconstructor: THREE.AnimationClip,\n\n\tresetDuration: function() {\n\n\t\tvar tracks = this.tracks,\n\t\t\tduration = 0;\n\n\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tvar track = this.tracks[ i ];\n\n\t\t\tduration = Math.max(\n\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t},\n\n\ttrim: function() {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\toptimize: function() {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// Static methods:\n\nObject.assign( THREE.AnimationClip, {\n\n\tparse: function( json ) {\n\n\t\tvar tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\n\n\t},\n\n\n\ttoJSON: function( clip ) {\n\n\t\tvar tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tvar json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks\n\n\t\t};\n\n\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t},\n\n\n\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\tvar tracks = [];\n\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tvar times = [];\n\t\t\tvar values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tvar order = THREE.AnimationUtils.getKeyframeOrder( times );\n\t\t\ttimes = THREE.AnimationUtils.sortedArray( times, 1, order );\n\t\t\tvalues = THREE.AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\t\tnew THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\t\t}\n\n\t\treturn new THREE.AnimationClip( name, -1, tracks );\n\n\t},\n\n\tfindByName: function( objectOrClipArray, name ) {\n\n\t\tvar clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tvar o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\n\t\tvar animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar clips = [];\n\n\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t},\n\n\t// parse the animation.hierarchy format\n\tparseAnimation: function( animation, bones, nodeName ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar addNonemptyTrack = function(\n\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tTHREE.AnimationUtils.flattenJSON(\n\t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar tracks = [];\n\n\t\tvar clipName = animation.name || 'default';\n\t\t// automatic length determination in AnimationClip.\n\t\tvar duration = animation.length || -1;\n\t\tvar fps = animation.fps || 30;\n\n\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets in a way exactly compatible\n\t\t\t// with AnimationHandler.init( animation )\n\t\t\tif ( animationKeys[0].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tvar morphTargetNames = {};\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tfor ( var m = 0;\n\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t} else {\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.QuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\n\n\t\treturn clip;\n\n\t}\n\n} );\n\n// File:src/animation/AnimationMixer.js\n\n/**\n *\n * Player for AnimationClips.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.AnimationMixer = function( root ) {\n\n\tthis._root = root;\n\tthis._initMemoryManager();\n\tthis._accuIndex = 0;\n\n\tthis.time = 0;\n\n\tthis.timeScale = 1.0;\n\n};\n\nObject.assign( THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction: function( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\tprototypeAction = null;\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tvar existingAction =\n\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tvar newAction = new THREE.\n\t\t\t\tAnimationMixer._Action( this, clipObject, optionalRoot );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t},\n\n\t// get an existing action\n\texistingAction: function( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction: function() {\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tthis._nActiveActions = 0;\n\t\tthis._nActiveBindings = 0;\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tactions[ i ].reset();\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].useCount = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// advance the time and update apply the animation\n\tupdate: function( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tvar action = actions[ i ];\n\n\t\t\tif ( action.enabled ) {\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tvar bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// return this mixer's root target object\n\tgetRoot: function() {\n\n\t\treturn this._root;\n\n\t},\n\n\t// free all resources specific to a particular clip\n\tuncacheClip: function( clip ) {\n\n\t\tvar actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t},\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot: function( root ) {\n\n\t\tvar rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remove a targeted clip from the cache\n\tuncacheAction: function( clip, optionalRoot ) {\n\n\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n} );\n\nTHREE.AnimationMixer._Action = THREE.AnimationAction._new;\n\n// Implementation details:\n\nObject.assign( THREE.AnimationMixer.prototype, {\n\n\t_bindAction: function( action, prototypeAction ) {\n\n\t\tvar root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar track = tracks[ i ],\n\t\t\t\ttrackName = track.name,\n\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new THREE.PropertyMixer(\n\t\t\t\t\t\tTHREE.PropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t},\n\n\t_activateAction: function( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t},\n\n\t_deactivateAction: function( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t},\n\n\t// Memory manager\n\n\t_initMemoryManager: function() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \t\tknownActions: Array< _Action >\t- used as prototypes\n\t\t// \t\tactionByRoot: _Action\t\t\t- lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() { return scope._actions.length; },\n\t\t\t\tget inUse() { return scope._nActiveActions; }\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() { return scope._bindings.length; },\n\t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t\t\t}\n\n\t\t};\n\n\t},\n\n\t// Memory management for _Action objects\n\n\t_isActiveAction: function( action ) {\n\n\t\tvar index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t},\n\n\t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\n\t\tvar actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t},\n\n\t_removeInactiveAction: function( action ) {\n\n\t\tvar actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tvar clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t},\n\n\t_removeInactiveBindingsForAction: function( action ) {\n\n\t\tvar bindings = action._propertyBindings;\n\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tvar binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_lendAction: function( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t},\n\n\t_takeBackAction: function( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t},\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tbindings = this._bindings;\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t},\n\n\t_removeInactiveBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tremove_empty_map: {\n\n\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t},\n\n\t_lendBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t},\n\n\t_takeBackBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t},\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant: function() {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new THREE.LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t},\n\n\t_takeBackControlInterpolant: function( interpolant ) {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t},\n\n\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\n} );\n\n// File:src/animation/AnimationObjectGroup.js\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * \t-\tAdd objects you would otherwise pass as 'root' to the\n * \t\tconstructor or the .clipAction method of AnimationMixer.\n *\n * \t-\tInstead pass this object as 'root'.\n *\n * \t-\tYou can also add and remove objects later when the mixer\n * \t\tis running.\n *\n * Note:\n *\n *  \tObjects of this class appear as one object to the mixer,\n *  \tso cache control of the individual objects must be done\n *  \ton the group.\n *\n * Limitation:\n *\n * \t- \tThe animated properties must be compatible among the\n * \t\tall objects in the group.\n *\n *  -\tA single property can either be controlled through a\n *  \ttarget group or directly, but not both.\n *\n * @author tschw\n */\n\nTHREE.AnimationObjectGroup = function( var_args ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\t// cached objects followed by the active ones\n\tthis._objects = Array.prototype.slice.call( arguments );\n\n\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t// note: read by PropertyBinding.Composite\n\n\tvar indices = {};\n\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t}\n\n\tthis._paths = [];\t\t\t\t\t// inside: string\n\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\tvar scope = this;\n\n\tthis.stats = {\n\n\t\tobjects: {\n\t\t\tget total() { return scope._objects.length; },\n\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t\t},\n\n\t\tget bindingsPerObject() { return scope._bindings.length; }\n\n\t};\n\n};\n\nTHREE.AnimationObjectGroup.prototype = {\n\n\tconstructor: THREE.AnimationObjectGroup,\n\n\tadd: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push(\n\t\t\t\t\t\t\tnew THREE.PropertyBinding(\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tvar knownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new THREE.PropertyBinding(\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject) {\n\n\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\tremove: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// remove & forget\n\tuncache: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_: function( path, parsedPath ) {\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ],\n\t\t\tbindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tvar paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( var i = nCachedObjects,\n\t\t\t\tn = objects.length; i !== n; ++ i ) {\n\n\t\t\tvar object = objects[ i ];\n\n\t\t\tbindingsForPath[ i ] =\n\t\t\t\t\tnew THREE.PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t},\n\n\tunsubscribe_: function( path ) {\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n};\n\n\n// File:src/animation/AnimationUtils.js\n\n/**\n * @author tschw\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationUtils = {\n\n\t// same as Array.prototype.slice, but also works on typed arrays\n\tarraySlice: function( array, from, to ) {\n\n\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t},\n\n\t// converts an array to a specific type\n\tconvertArray: function( array, type, forceClone ) {\n\n\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\treturn new type( array ); // create typed array\n\n\t\t}\n\n\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t},\n\n\tisTypedArray: function( object ) {\n\n\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t},\n\n\t// returns an array by which times and values can be sorted\n\tgetKeyframeOrder: function( times ) {\n\n\t\tfunction compareTime( i, j ) {\n\n\t\t\treturn times[ i ] - times[ j ];\n\n\t\t}\n\n\t\tvar n = times.length;\n\t\tvar result = new Array( n );\n\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\tresult.sort( compareTime );\n\n\t\treturn result;\n\n\t},\n\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\tsortedArray: function( values, stride, order ) {\n\n\t\tvar nValues = values.length;\n\t\tvar result = new values.constructor( nValues );\n\n\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// function for parsing AOS keyframe formats\n\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t}\n\n\t\tif ( key === undefined ) return; // no data\n\n\t\tvar value = key[ valuePropertyName ];\n\t\tif ( value === undefined ) return; // no data\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else if ( value.toArray !== undefined ) {\n\t\t\t// ...assume THREE.Math-ish\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else {\n\t\t\t// otherwise push as-is\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/animation/KeyframeTrack.js\n\n/**\n *\n * A timed sequence of keyframes for a specific property.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.KeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\n\tif( times === undefined || times.length === 0 ) {\n\n\t\tthrow new Error( \"no keyframes in track named \" + name );\n\n\t}\n\n\tthis.name = name;\n\n\tthis.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );\n\tthis.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\tthis.validate();\n\tthis.optimize();\n\n};\n\nTHREE.KeyframeTrack.prototype = {\n\n\tconstructor: THREE.KeyframeTrack,\n\n\tTimeBufferType: Float32Array,\n\tValueBufferType: Float32Array,\n\n\tDefaultInterpolation: THREE.InterpolateLinear,\n\n\tInterpolantFactoryMethodDiscrete: function( result ) {\n\n\t\treturn new THREE.DiscreteInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\treturn new THREE.LinearInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: function( result ) {\n\n\t\treturn new THREE.CubicInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tsetInterpolation: function( interpolation ) {\n\n\t\tvar factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase THREE.InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( message );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t},\n\n\tgetInterpolation: function() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn THREE.InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn THREE.InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn THREE.InterpolateSmooth;\n\n\t\t}\n\n\t},\n\n\tgetValueSize: function() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t},\n\n\t// move all keyframes either forwards or backwards in time\n\tshift: function( timeOffset ) {\n\n\t\tif( timeOffset !== 0.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale: function( timeScale ) {\n\n\t\tif( timeScale !== 1.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim: function( startTime, endTime ) {\n\n\t\tvar times = this.times,\n\t\t\tnKeys = times.length,\n\t\t\tfrom = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\n\t\t\tvar stride = this.getValueSize();\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, from, to );\n\t\t\tthis.values = THREE.AnimationUtils.\n\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate: function() {\n\n\t\tvar valid = true;\n\n\t\tvar valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( \"invalid value size in track\", this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif( nKeys === 0 ) {\n\n\t\t\tconsole.error( \"track is empty\", this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar prevTime = null;\n\n\t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tvar currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( THREE.AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t},\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize: function() {\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\t\t\tstride = this.getValueSize(),\n\n\t\t\twriteIndex = 1;\n\n\t\tfor( var i = 1, n = times.length - 1; i <= n; ++ i ) {\n\n\t\t\tvar keep = false;\n\n\t\t\tvar time = times[ i ];\n\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\tvar offset = i * stride,\n\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// Static methods:\n\nObject.assign( THREE.KeyframeTrack, {\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tparse: function( json ) {\n\n\t\tif( json.type === undefined ) {\n\n\t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n\t\t}\n\n\t\tvar trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tTHREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we asssume a constructor compatible with the base\n\t\t\treturn new trackType(\n\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function( track ) {\n\n\t\tvar trackType = track.constructor;\n\n\t\tvar json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': THREE.AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t'values': THREE.AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t},\n\n\t_getTrackTypeForValueTypeName: function( typeName ) {\n\n\t\tswitch( typeName.toLowerCase() ) {\n\n\t\t\tcase \"scalar\":\n\t\t\tcase \"double\":\n\t\t\tcase \"float\":\n\t\t\tcase \"number\":\n\t\t\tcase \"integer\":\n\n\t\t\t\treturn THREE.NumberKeyframeTrack;\n\n\t\t\tcase \"vector\":\n\t\t\tcase \"vector2\":\n\t\t\tcase \"vector3\":\n\t\t\tcase \"vector4\":\n\n\t\t\t\treturn THREE.VectorKeyframeTrack;\n\n\t\t\tcase \"color\":\n\n\t\t\t\treturn THREE.ColorKeyframeTrack;\n\n\t\t\tcase \"quaternion\":\n\n\t\t\t\treturn THREE.QuaternionKeyframeTrack;\n\n\t\t\tcase \"bool\":\n\t\t\tcase \"boolean\":\n\n\t\t\t\treturn THREE.BooleanKeyframeTrack;\n\n\t\t\tcase \"string\":\n\n\t\t\t\treturn THREE.StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n\t}\n\n} );\n\n// File:src/animation/PropertyBinding.js\n\n/**\n *\n * A reference to a real property in the scene graph.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.PropertyBinding = function ( rootNode, path, parsedPath ) {\n\n\tthis.path = path;\n\tthis.parsedPath = parsedPath ||\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\n\tthis.node = THREE.PropertyBinding.findNode(\n\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\n\tthis.rootNode = rootNode;\n\n};\n\nTHREE.PropertyBinding.prototype = {\n\n\tconstructor: THREE.PropertyBinding,\n\n\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t// prototype version of these methods with one that represents\n\t\t// the bound state. When the property is not found, the methods\n\t\t// become no-ops.\n\n\t},\n\n\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t},\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind: function() {\n\n\t\tvar targetObject = this.node,\n\t\t\tparsedPath = this.parsedPath,\n\n\t\t\tobjectName = parsedPath.objectName,\n\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = THREE.PropertyBinding.findNode(\n\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n \t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tvar versioning = this.Versioning.None;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tvar bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( nodeProperty.length !== undefined ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t},\n\n\tunbind: function() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n};\n\nObject.assign( THREE.PropertyBinding.prototype, { // prototype, continued\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable: function() {},\n\t_setValue_unavailable: function() {},\n\n\t// initial state of these methods that calls 'bind'\n\t_getValue_unbound: THREE.PropertyBinding.prototype.getValue,\n\t_setValue_unbound: THREE.PropertyBinding.prototype.setValue,\n\n\tBindingType: {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t},\n\n\tVersioning: {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t},\n\n\tGetterByBindingType: [\n\n\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t},\n\n\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t}\n\n\t\t},\n\n\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t},\n\n\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t}\n\n\t],\n\n\tSetterByBindingTypeAndVersioning: [\n\n\t\t[\n\t\t\t// Direct\n\n\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// EntireArray\n\n\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// ArrayElement\n\n\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// HasToFromArray\n\n\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t]\n\n\t]\n\n} );\n\nTHREE.PropertyBinding.Composite =\n\t\tfunction( targetGroup, path, optionalParsedPath ) {\n\n\tvar parsedPath = optionalParsedPath ||\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\n\tthis._targetGroup = targetGroup;\n\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n};\n\nTHREE.PropertyBinding.Composite.prototype = {\n\n\tconstructor: THREE.PropertyBinding.Composite,\n\n\tgetValue: function( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t},\n\n\tsetValue: function( array, offset ) {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t},\n\n\tbind: function() {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t},\n\n\tunbind: function() {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.PropertyBinding.create = function( root, path, parsedPath ) {\n\n\tif ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {\n\n\t\treturn new THREE.PropertyBinding( root, path, parsedPath );\n\n\t} else {\n\n\t\treturn new THREE.PropertyBinding.Composite( root, path, parsedPath );\n\n\t}\n\n};\n\nTHREE.PropertyBinding.parseTrackName = function( trackName ) {\n\n\t// matches strings in the form of:\n\t//    nodeName.property\n\t//    nodeName.property[accessor]\n\t//    nodeName.material.property[accessor]\n\t//    uuid.property[accessor]\n\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t//    parentName/nodeName.property\n\t//    parentName/parentName/nodeName.property[index]\n\t//\t  .bone[Armature.DEF_cog].position\n\t// created and tested via https://regex101.com/#javascript\n\n\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\n\tvar matches = re.exec( trackName );\n\n\tif ( ! matches ) {\n\n\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\n\t}\n\n\tif ( matches.index === re.lastIndex ) {\n\n\t\tre.lastIndex++;\n\n\t}\n\n\tvar results = {\n\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\tnodeName: matches[ 3 ], \t// allowed to be null, specified root node.\n\t\tobjectName: matches[ 5 ],\n\t\tobjectIndex: matches[ 7 ],\n\t\tpropertyName: matches[ 9 ],\n\t\tpropertyIndex: matches[ 11 ]\t// allowed to be null, specifies that the whole property is set.\n\t};\n\n\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\n\t}\n\n\treturn results;\n\n};\n\nTHREE.PropertyBinding.findNode = function( root, nodeName ) {\n\n\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\treturn root;\n\n\t}\n\n\t// search into skeleton bones.\n\tif ( root.skeleton ) {\n\n\t\tvar searchSkeleton = function( skeleton ) {\n\n\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n\t\t\t\tvar bone = skeleton.bones[ i ];\n\n\t\t\t\tif ( bone.name === nodeName ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t\tvar bone = searchSkeleton( root.skeleton );\n\n\t\tif ( bone ) {\n\n\t\t\treturn bone;\n\n\t\t}\n\t}\n\n\t// search into node subtree.\n\tif ( root.children ) {\n\n\t\tvar searchNodeSubtree = function( children ) {\n\n\t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\treturn childNode;\n\n\t\t\t\t}\n\n\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\tif ( result ) return result;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\tif ( subTreeNode ) {\n\n\t\t\treturn subTreeNode;\n\n\t\t}\n\n\t}\n\n\treturn null;\n\n};\n\n// File:src/animation/PropertyMixer.js\n\n/**\n *\n * Buffered scene graph property that allows weighted accumulation.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.PropertyMixer = function ( binding, typeName, valueSize ) {\n\n\tthis.binding = binding;\n\tthis.valueSize = valueSize;\n\n\tvar bufferType = Float64Array,\n\t\tmixFunction;\n\n\tswitch ( typeName ) {\n\n\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\n\t\tcase 'string':\n\t\tcase 'bool':\n\n\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\n\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\n\t}\n\n\tthis.buffer = new bufferType( valueSize * 4 );\n\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t//\n\t// interpolators can use .buffer as their .result\n\t// the data then goes to 'incoming'\n\t//\n\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t// the cumulative result and are compared to detect\n\t// changes\n\t//\n\t// 'orig' stores the original state of the property\n\n\tthis._mixBufferRegion = mixFunction;\n\n\tthis.cumulativeWeight = 0;\n\n\tthis.useCount = 0;\n\tthis.referenceCount = 0;\n\n};\n\nTHREE.PropertyMixer.prototype = {\n\n\tconstructor: THREE.PropertyMixer,\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate: function( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tvar mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t},\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply: function( accuIndex ) {\n\n\t\tvar stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState: function() {\n\n\t\tvar binding = this.binding;\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * 3;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\tthis.cumulativeWeight = 0;\n\n\t},\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState: function() {\n\n\t\tvar originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t},\n\n\n\t// mix functions\n\n\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tTHREE.Quaternion.slerpFlat( buffer, dstOffset,\n\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\n\t},\n\n\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tvar s = 1 - t;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tvar j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/animation/tracks/BooleanKeyframeTrack.js\n\n/**\n *\n * A Track of Boolean keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.BooleanKeyframeTrack = function ( name, times, values ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values );\n\n};\n\nTHREE.BooleanKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.BooleanKeyframeTrack,\n\n\tValueTypeName: 'bool',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\tInterpolantFactoryMethodSmooth: undefined\n\n\t// Note: Actually this track could have a optimized / compressed\n\t// representation of a single value and a custom interpolant that\n\t// computes \"firstValue ^ isOdd( index )\".\n\n} );\n\n// File:src/animation/tracks/ColorKeyframeTrack.js\n\n/**\n *\n * A Track of keyframe values that represent color.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.ColorKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.ColorKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.ColorKeyframeTrack,\n\n\tValueTypeName: 'color'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n\n\t// Note: Very basic implementation and nothing special yet.\n\t// However, this is the place for color space parameterization.\n\n} );\n\n// File:src/animation/tracks/NumberKeyframeTrack.js\n\n/**\n *\n * A Track of numeric keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.NumberKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.NumberKeyframeTrack,\n\n\tValueTypeName: 'number',\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n// File:src/animation/tracks/QuaternionKeyframeTrack.js\n\n/**\n *\n * A Track of quaternion keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.QuaternionKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.QuaternionKeyframeTrack,\n\n\tValueTypeName: 'quaternion',\n\n\t// ValueBufferType is inherited\n\n\tDefaultInterpolation: THREE.InterpolateLinear,\n\n\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\treturn new THREE.QuaternionLinearInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n} );\n\n// File:src/animation/tracks/StringKeyframeTrack.js\n\n/**\n *\n * A Track that interpolates Strings\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.StringKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.StringKeyframeTrack,\n\n\tValueTypeName: 'string',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\n\tInterpolantFactoryMethodSmooth: undefined\n\n} );\n\n// File:src/animation/tracks/VectorKeyframeTrack.js\n\n/**\n *\n * A Track of vectored keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.VectorKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.VectorKeyframeTrack,\n\n\tValueTypeName: 'vector'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n// File:src/audio/Audio.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nTHREE.Audio = function ( listener ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Audio';\n\n\tthis.context = listener.context;\n\tthis.source = this.context.createBufferSource();\n\tthis.source.onended = this.onEnded.bind( this );\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( listener.getInput() );\n\n\tthis.autoplay = false;\n\n\tthis.startTime = 0;\n\tthis.playbackRate = 1;\n\tthis.isPlaying = false;\n\tthis.hasPlaybackControl = true;\n\tthis.sourceType = 'empty';\n\n\tthis.filters = [];\n\n};\n\nTHREE.Audio.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Audio,\n\n\tgetOutput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tsetNodeSource: function ( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t},\n\n\tsetBuffer: function ( audioBuffer ) {\n\n\t\tthis.source.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t},\n\n\tplay: function () {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar source = this.context.createBufferSource();\n\n\t\tsource.buffer = this.source.buffer;\n\t\tsource.loop = this.source.loop;\n\t\tsource.onended = this.source.onended;\n\t\tsource.start( 0, this.startTime );\n\t\tsource.playbackRate.value = this.playbackRate;\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\treturn this.connect();\n\n\t},\n\n\tpause: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.startTime = this.context.currentTime;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.startTime = 0;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdisconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilters: function () {\n\n\t\treturn this.filters;\n\n\t},\n\n\tsetFilters: function ( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value;\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t},\n\n\tsetFilter: function ( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t},\n\n\tsetPlaybackRate: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.value = this.playbackRate;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetPlaybackRate: function () {\n\n\t\treturn this.playbackRate;\n\n\t},\n\n\tonEnded: function () {\n\n\t\tthis.isPlaying = false;\n\n\t},\n\n\tgetLoop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.source.loop;\n\n\t},\n\n\tsetLoop: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.loop = value;\n\n\t},\n\n\tgetVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\n\tsetVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/audio/AudioAnalyser.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioAnalyser = function ( audio, fftSize ) {\n\n\tthis.analyser = audio.context.createAnalyser();\n\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\taudio.getOutput().connect( this.analyser );\n\n};\n\nObject.assign( THREE.AudioAnalyser.prototype, {\n\n\tgetFrequencyData: function () {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t},\n\n\tgetAverageFrequency: function () {\n\n\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n} );\n\n// File:src/audio/AudioContext.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nObject.defineProperty( THREE, 'AudioContext', {\n\n\tget: ( function () {\n\n\t\tvar context;\n\n\t\treturn function get() {\n\n\t\t\tif ( context === undefined ) {\n\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn context;\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/audio/PositionalAudio.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PositionalAudio = function ( listener ) {\n\n\tTHREE.Audio.call( this, listener );\n\n\tthis.panner = this.context.createPanner();\n\tthis.panner.connect( this.gain );\n\n};\n\nTHREE.PositionalAudio.prototype = Object.assign( Object.create( THREE.Audio.prototype ), {\n\n\tconstructor: THREE.PositionalAudio,\n\n\tgetOutput: function () {\n\n\t\treturn this.panner;\n\n\t},\n\n\tgetRefDistance: function () {\n\n\t\treturn this.panner.refDistance;\n\n\t},\n\n\tsetRefDistance: function ( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t},\n\n\tgetRolloffFactor: function () {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t},\n\n\tsetRolloffFactor: function ( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t},\n\n\tgetDistanceModel: function () {\n\n\t\treturn this.panner.distanceModel;\n\n\t},\n\n\tsetDistanceModel: function ( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t},\n\n\tgetMaxDistance: function () {\n\n\t\treturn this.panner.maxDistance;\n\n\t},\n\n\tsetMaxDistance: function ( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new THREE.Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t};\n\n\t} )()\n\n\n} );\n\n// File:src/audio/AudioListener.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioListener = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tthis.context = THREE.AudioContext;\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( this.context.destination );\n\n\tthis.filter = null;\n\n};\n\nTHREE.AudioListener.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.AudioListener,\n\n\tgetInput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tremoveFilter: function ( ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.filter;\n\n\t},\n\n\tsetFilter: function ( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t},\n\n\tgetMasterVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetMasterVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3();\n\n\t\tvar orientation = new THREE.Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/cameras/Camera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.Camera = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new THREE.Matrix4();\n\tthis.projectionMatrix = new THREE.Matrix4();\n\n};\n\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Camera.prototype.constructor = THREE.Camera;\n\nTHREE.Camera.prototype.getWorldDirection = function () {\n\n\tvar quaternion = new THREE.Quaternion();\n\n\treturn function getWorldDirection( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.getWorldQuaternion( quaternion );\n\n\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t};\n\n}();\n\nTHREE.Camera.prototype.lookAt = function () {\n\n\t// This routine does not support cameras with rotated and/or translated parent(s)\n\n\tvar m1 = new THREE.Matrix4();\n\n\treturn function lookAt( vector ) {\n\n\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t};\n\n}();\n\nTHREE.Camera.prototype.clone = function () {\n\n\treturn new this.constructor().copy( this );\n\n};\n\nTHREE.Camera.prototype.copy = function ( source ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\treturn this;\n\n};\n\n// File:src/cameras/CubeCamera.js\n\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'CubeCamera';\n\n\tvar fov = 90, aspect = 1;\n\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPX.up.set( 0, - 1, 0 );\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\n\tthis.add( cameraPX );\n\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNX.up.set( 0, - 1, 0 );\n\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\n\tthis.add( cameraNX );\n\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPY.up.set( 0, 0, 1 );\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\n\tthis.add( cameraPY );\n\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNY.up.set( 0, 0, - 1 );\n\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\n\tthis.add( cameraNY );\n\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPZ.up.set( 0, - 1, 0 );\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\n\tthis.add( cameraPZ );\n\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNZ.up.set( 0, - 1, 0 );\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\n\tthis.add( cameraNZ );\n\n\tvar options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };\n\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\n\tthis.updateCubeMap = function ( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tvar renderTarget = this.renderTarget;\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderTarget.activeCubeFace = 0;\n\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 1;\n\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 2;\n\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 3;\n\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 4;\n\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderTarget.activeCubeFace = 5;\n\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\trenderer.setRenderTarget( null );\n\n\t};\n\n};\n\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\n\n// File:src/cameras/OrthographicCamera.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author arose / http://github.com/arose\n */\n\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'OrthographicCamera';\n\n\tthis.zoom = 1;\n\tthis.view = null;\n\n\tthis.left = left;\n\tthis.right = right;\n\tthis.top = top;\n\tthis.bottom = bottom;\n\n\tthis.near = ( near !== undefined ) ? near : 0.1;\n\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.OrthographicCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\n\tconstructor: THREE.OrthographicCamera,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Camera.prototype.copy.call( this, source );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t},\n\n\tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.view = {\n\t\t\tfullWidth: fullWidth,\n\t\t\tfullHeight: fullHeight,\n\t\t\toffsetX: x,\n\t\t\toffsetY: y,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function() {\n\n\t\tthis.view = null;\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tvar cx = ( this.right + this.left ) / 2;\n\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\tvar left = cx - dx;\n\t\tvar right = cx + dx;\n\t\tvar top = cy + dy;\n\t\tvar bottom = cy - dy;\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/cameras/PerspectiveCamera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author tschw\n */\n\nTHREE.PerspectiveCamera = function( fov, aspect, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.zoom = 1;\n\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\tthis.focus = 10;\n\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.view = null;\n\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.PerspectiveCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\n\tconstructor: THREE.PerspectiveCamera,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Camera.prototype.copy.call( this, source );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength: function ( focalLength ) {\n\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = THREE.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength: function () {\n\n\t\tvar vExtentSlope = Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t},\n\n\tgetEffectiveFOV: function () {\n\n\t\treturn THREE.Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t},\n\n\tgetFilmWidth: function () {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t},\n\n\tgetFilmHeight: function () {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t},\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   var w = 1920;\n\t *   var h = 1080;\n\t *   var fullWidth = w * 3;\n\t *   var fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tthis.view = {\n\t\t\tfullWidth: fullWidth,\n\t\t\tfullHeight: fullHeight,\n\t\t\toffsetX: x,\n\t\t\toffsetY: y,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function() {\n\n\t\tthis.view = null;\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar near = this.near,\n\t\t\ttop = near * Math.tan(\n\t\t\t\t\tTHREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\theight = 2 * top,\n\t\t\twidth = this.aspect * height,\n\t\t\tleft = - 0.5 * width,\n\t\t\tview = this.view;\n\n\t\tif ( view !== null ) {\n\n\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tvar skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makeFrustum(\n\t\t\t\tleft, left + width, top - height, top, near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/cameras/StereoCamera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.StereoCamera = function () {\n\n\tthis.type = 'StereoCamera';\n\n\tthis.aspect = 1;\n\n\tthis.cameraL = new THREE.PerspectiveCamera();\n\tthis.cameraL.layers.enable( 1 );\n\tthis.cameraL.matrixAutoUpdate = false;\n\n\tthis.cameraR = new THREE.PerspectiveCamera();\n\tthis.cameraR.layers.enable( 2 );\n\tthis.cameraR.matrixAutoUpdate = false;\n\n};\n\nObject.assign( THREE.StereoCamera.prototype, {\n\n\tupdate: ( function () {\n\n\t\tvar focus, fov, aspect, near, far;\n\n\t\tvar eyeRight = new THREE.Matrix4();\n\t\tvar eyeLeft = new THREE.Matrix4();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar needsUpdate = focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tfocus = camera.focus;\n\t\t\t\tfov = camera.fov;\n\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\tnear = camera.near;\n\t\t\t\tfar = camera.far;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSep = 0.064 / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/lights/Light.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Light = function ( color, intensity ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Light';\n\n\tthis.color = new THREE.Color( color );\n\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\tthis.receiveShadow = undefined;\n\n};\n\nTHREE.Light.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Light,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/lights/LightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LightShadow = function ( camera ) {\n\n\tthis.camera = camera;\n\n\tthis.bias = 0;\n\tthis.radius = 1;\n\n\tthis.mapSize = new THREE.Vector2( 512, 512 );\n\n\tthis.map = null;\n\tthis.matrix = new THREE.Matrix4();\n\n};\n\nObject.assign( THREE.LightShadow.prototype, {\n\n\tcopy: function ( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n// File:src/lights/AmbientLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AmbientLight = function ( color, intensity ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'AmbientLight';\n\n\tthis.castShadow = undefined;\n\n};\n\nTHREE.AmbientLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.AmbientLight\n\n} );\n\n// File:src/lights/DirectionalLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DirectionalLight = function ( color, intensity ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'DirectionalLight';\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.target = new THREE.Object3D();\n\n\tthis.shadow = new THREE.DirectionalLightShadow();\n\n};\n\nTHREE.DirectionalLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.DirectionalLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/DirectionalLightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.DirectionalLightShadow = function ( light ) {\n\n\tTHREE.LightShadow.call( this, new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n};\n\nTHREE.DirectionalLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\n\tconstructor: THREE.DirectionalLightShadow\n\n} );\n\n// File:src/lights/HemisphereLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\n\n\tTHREE.Light.call( this, skyColor, intensity );\n\n\tthis.type = 'HemisphereLight';\n\n\tthis.castShadow = undefined;\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.groundColor = new THREE.Color( groundColor );\n\n};\n\nTHREE.HemisphereLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.HemisphereLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/PointLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nTHREE.PointLight = function ( color, intensity, distance, decay ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'PointLight';\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n};\n\nTHREE.PointLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.PointLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/SpotLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'SpotLight';\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.target = new THREE.Object3D();\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\treturn this.intensity * Math.PI;\n\t\t},\n\t\tset: function ( power ) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new THREE.SpotLightShadow();\n\n};\n\nTHREE.SpotLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.SpotLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/SpotLightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SpotLightShadow = function () {\n\n\tTHREE.LightShadow.call( this, new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n};\n\nTHREE.SpotLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\n\tconstructor: THREE.SpotLightShadow,\n\n\tupdate: function ( light ) {\n\n\t\tvar fov = THREE.Math.RAD2DEG * 2 * light.angle;\n\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\tvar far = light.distance || 500;\n\n\t\tvar camera = this.camera;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/loaders/AudioLoader.js\n\n/**\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nTHREE.AudioLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.AudioLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar context = THREE.AudioContext;\n\n\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t} );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n} );\n\n// File:src/loaders/Cache.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\n// File:src/loaders/Loader.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Loader = function () {\n\n\tthis.onLoadStart = function () {};\n\tthis.onLoadProgress = function () {};\n\tthis.onLoadComplete = function () {};\n\n};\n\nTHREE.Loader.prototype = {\n\n\tconstructor: THREE.Loader,\n\n\tcrossOrigin: undefined,\n\n\textractUrlBase: function ( url ) {\n\n\t\tvar parts = url.split( '/' );\n\n\t\tif ( parts.length === 1 ) return './';\n\n\t\tparts.pop();\n\n\t\treturn parts.join( '/' ) + '/';\n\n\t},\n\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\tvar array = [];\n\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t}\n\n\t\treturn array;\n\n\t},\n\n\tcreateMaterial: ( function () {\n\n\t\tvar color, textureLoader, materialLoader;\n\n\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\tif ( color === undefined ) color = new THREE.Color();\n\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\n\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\n\n\t\t\t// convert from old material format\n\n\t\t\tvar textures = {};\n\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\n\n\t\t\t\tvar texture;\n\n\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t}\n\n\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t}\n\n\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t}\n\n\t\t\t\tvar uuid = THREE.Math.generateUUID();\n\n\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\treturn uuid;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar json = {\n\t\t\t\tuuid: THREE.Math.generateUUID(),\n\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t};\n\n\t\t\tfor ( var name in m ) {\n\n\t\t\t\tvar value = m[ name ];\n\n\t\t\t\tswitch ( name ) {\n\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\tjson.blending = THREE[ value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\tjson.side = THREE.BackSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\tjson.side = THREE.DoubleSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\tcase 'opacity':\n\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\treturn materialLoader.parse( json );\n\n\t\t};\n\n\t} )()\n\n};\n\nTHREE.Loader.Handlers = {\n\n\thandlers: [],\n\n\tadd: function ( regex, loader ) {\n\n\t\tthis.handlers.push( regex, loader );\n\n\t},\n\n\tget: function ( file ) {\n\n\t\tvar handlers = this.handlers;\n\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\tvar regex = handlers[ i ];\n\t\t\tvar loader  = handlers[ i + 1 ];\n\n\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\treturn loader;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n};\n\n// File:src/loaders/XHRLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.XHRLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.XHRLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\tvar scope = this;\n\n\t\tvar cached = THREE.Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tif ( onLoad ) {\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tonLoad( cached );\n\n\t\t\t\t}, 0 );\n\n\t\t\t}\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.overrideMimeType( 'text/plain' );\n\t\trequest.open( 'GET', url, true );\n\n\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\tvar response = event.target.response;\n\n\t\t\tTHREE.Cache.add( url, response );\n\n\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\n\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} else {\n\n\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, false );\n\n\t\tif ( onProgress !== undefined ) {\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tonProgress( event );\n\n\t\t\t}, false );\n\n\t\t}\n\n\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}, false );\n\n\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\trequest.send( null );\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn request;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t},\n\n\tsetWithCredentials: function ( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/FontLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.FontLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.FontLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t}\n\n\t\t\tvar font = scope.parse( json );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\treturn new THREE.Font( json );\n\n\t}\n\n} );\n\n// File:src/loaders/ImageLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ImageLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.ImageLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t\timage.onload = function () {\n\n\t\t\tURL.revokeObjectURL( image.src );\n\t\t\tif ( onLoad ) onLoad( image );\n\n\t\t};\n\n\t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\n\t\t\timage.src = url;\n\n\t\t} else {\n\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'blob' );\n\t\t\tloader.load( url, function ( blob ) {\n\n\t\t\t\timage.src = URL.createObjectURL( blob );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn image;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/JSONLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.JSONLoader = function ( manager ) {\n\n\tif ( typeof manager === 'boolean' ) {\n\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\tmanager = undefined;\n\n\t}\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\tthis.withCredentials = false;\n\n};\n\nObject.assign( THREE.JSONLoader.prototype, {\n\n\tload: function( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = JSON.parse( text );\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\tvar type = metadata.type;\n\n\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tparse: function ( json, texturePath ) {\n\n\t\tvar geometry = new THREE.Geometry(),\n\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n\t\tparseModel( scale );\n\n\t\tparseSkin();\n\t\tparseMorphing( scale );\n\t\tparseAnimations();\n\n\t\tgeometry.computeFaceNormals();\n\t\tgeometry.computeBoundingSphere();\n\n\t\tfunction parseModel( scale ) {\n\n\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t}\n\n\t\t\tvar i, j, fi,\n\n\t\t\toffset, zLength,\n\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\ttype,\n\t\t\tisQuad,\n\t\t\thasMaterial,\n\t\t\thasFaceVertexUv,\n\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\tuvLayer, uv, u, v,\n\n\t\t\tfaces = json.faces,\n\t\t\tvertices = json.vertices,\n\t\t\tnormals = json.normals,\n\t\t\tcolors = json.colors,\n\n\t\t\tnUvLayers = 0;\n\n\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t// disregard empty arrays\n\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = vertices.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\tvertex = new THREE.Vector3();\n\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = faces.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\ttype = faces[ offset ++ ];\n\n\n\t\t\t\tisQuad              = isBitSet( type, 0 );\n\t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\tfaceA = new THREE.Face3();\n\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\tfaceB = new THREE.Face3();\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\toffset += 4;\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface = new THREE.Face3();\n\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseSkin() {\n\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.bones = json.bones;\n\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseMorphing( scale ) {\n\n\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\tvar vertex = new THREE.Vector3();\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAnimations() {\n\n\t\t\tvar outputAnimations = [];\n\n\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\tvar animations = [];\n\n\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\tanimations.push( json.animation );\n\n\t\t\t}\n\n\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t}\n\n\t\t\t// parse implicit morph animations\n\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t}\n\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t}\n\n\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\treturn { geometry: geometry };\n\n\t\t} else {\n\n\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/loaders/LoadingManager.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\n\n\tvar scope = this;\n\n\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n\tthis.onStart = undefined;\n\tthis.onLoad = onLoad;\n\tthis.onProgress = onProgress;\n\tthis.onError = onError;\n\n\tthis.itemStart = function ( url ) {\n\n\t\titemsTotal ++;\n\n\t\tif ( isLoading === false ) {\n\n\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tisLoading = true;\n\n\t};\n\n\tthis.itemEnd = function ( url ) {\n\n\t\titemsLoaded ++;\n\n\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t}\n\n\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\tisLoading = false;\n\n\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\tscope.onLoad();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.itemError = function ( url ) {\n\n\t\tif ( scope.onError !== undefined ) {\n\n\t\t\tscope.onError( url );\n\n\t\t}\n\n\t};\n\n};\n\nTHREE.DefaultLoadingManager = new THREE.LoadingManager();\n\n// File:src/loaders/BufferGeometryLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometryLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.BufferGeometryLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tvar index = json.data.index;\n\n\t\tvar TYPED_ARRAYS = {\n\t\t\t'Int8Array': Int8Array,\n\t\t\t'Uint8Array': Uint8Array,\n\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t\t\t'Int16Array': Int16Array,\n\t\t\t'Uint16Array': Uint16Array,\n\t\t\t'Int32Array': Int32Array,\n\t\t\t'Uint32Array': Uint32Array,\n\t\t\t'Float32Array': Float32Array,\n\t\t\t'Float64Array': Float64Array\n\t\t};\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tvar attributes = json.data.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t}\n\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tvar center = new THREE.Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n// File:src/loaders/MaterialLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MaterialLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\tthis.textures = {};\n\n};\n\nObject.assign( THREE.MaterialLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTextures: function ( value ) {\n\n\t\tthis.textures = value;\n\n\t},\n\n\tgetTexture: function ( name ) {\n\n\t\tvar textures = this.textures;\n\n\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t}\n\n\t\treturn textures[ name ];\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar material = new THREE[ json.type ];\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\n\t\t// for PointsMaterial\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\n\n\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\n\t\t\tmaterial.transparent = true;\n\n\t\t}\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tvar normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new THREE.Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\n\n\t\tif ( json.envMap !== undefined ) {\n\n\t\t\tmaterial.envMap = this.getTexture( json.envMap );\n\t\t\tmaterial.combine = THREE.MultiplyOperation;\n\n\t\t}\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t// MultiMaterial\n\n\t\tif ( json.materials !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn material;\n\n\t}\n\n} );\n\n// File:src/loaders/ObjectLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ObjectLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\tthis.texturePath = '';\n\n};\n\nObject.assign( THREE.ObjectLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.texturePath === '' ) {\n\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t}\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json, onLoad ) {\n\n\t\tvar geometries = this.parseGeometries( json.geometries );\n\n\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tvar textures  = this.parseTextures( json.textures, images );\n\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\tif ( json.animations ) {\n\n\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t}\n\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t},\n\n\tparseGeometries: function ( json ) {\n\n\t\tvar geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar geometryLoader = new THREE.JSONLoader();\n\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar geometry;\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE [ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\tcase 'TetrahedronGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t},\n\n\tparseMaterials: function ( json, textures ) {\n\n\t\tvar materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar loader = new THREE.MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar material = loader.parse( json[ i ] );\n\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t},\n\n\tparseAnimations: function ( json ) {\n\n\t\tvar animations = [];\n\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\tvar clip = THREE.AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t},\n\n\tparseImages: function ( json, onLoad ) {\n\n\t\tvar scope = this;\n\t\tvar images = {};\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tvar manager = new THREE.LoadingManager( onLoad );\n\n\t\t\tvar loader = new THREE.ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar image = json[ i ];\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t},\n\n\tparseTextures: function ( json, images ) {\n\n\t\tfunction parseConstant( value ) {\n\n\t\t\tif ( typeof( value ) === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn THREE[ value ];\n\n\t\t}\n\n\t\tvar textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\n\t\t\t\tif ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\t\t\t\tif ( Array.isArray( data.wrap ) ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t},\n\n\tparseObject: function () {\n\n\t\tvar matrix = new THREE.Matrix4();\n\n\t\treturn function parseObject( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new THREE.Scene();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new THREE.AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new THREE.LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new THREE.Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new THREE.Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tfor ( var child in data.children ) {\n\n\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t};\n\n\t}()\n\n} );\n\n// File:src/loaders/TextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.TextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.TextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new THREE.Texture();\n\n\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/CubeTextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CubeTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.CubeTextureLoader.prototype, {\n\n\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new THREE.CubeTexture();\n\n\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tvar loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/BinaryTextureLoader.js\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n */\n\nTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n};\n\nObject.assign( THREE.BinaryTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new THREE.DataTexture();\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\n\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t}\n\n\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n// File:src/loaders/CompressedTextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n */\n\nTHREE.CompressedTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n};\n\nObject.assign( THREE.CompressedTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar images = [];\n\n\t\tvar texture = new THREE.CompressedTexture();\n\t\ttexture.image = images;\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/materials/Material.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Material = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Material';\n\n\tthis.fog = true;\n\tthis.lights = true;\n\n\tthis.blending = THREE.NormalBlending;\n\tthis.side = THREE.FrontSide;\n\tthis.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\tthis.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\tthis.opacity = 1;\n\tthis.transparent = false;\n\n\tthis.blendSrc = THREE.SrcAlphaFactor;\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\n\tthis.blendEquation = THREE.AddEquation;\n\tthis.blendSrcAlpha = null;\n\tthis.blendDstAlpha = null;\n\tthis.blendEquationAlpha = null;\n\n\tthis.depthFunc = THREE.LessEqualDepth;\n\tthis.depthTest = true;\n\tthis.depthWrite = true;\n\n\tthis.clippingPlanes = null;\n\tthis.clipShadows = false;\n\n\tthis.colorWrite = true;\n\n\tthis.precision = null; // override the renderer's default precision for this material\n\n\tthis.polygonOffset = false;\n\tthis.polygonOffsetFactor = 0;\n\tthis.polygonOffsetUnits = 0;\n\n\tthis.alphaTest = 0;\n\tthis.premultipliedAlpha = false;\n\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\tthis.visible = true;\n\n\tthis._needsUpdate = true;\n\n};\n\nTHREE.Material.prototype = {\n\n\tconstructor: THREE.Material,\n\n\tget needsUpdate() {\n\n\t\treturn this._needsUpdate;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.update();\n\t\tthis._needsUpdate = value;\n\n\t},\n\n\tsetValues: function ( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( var key in values ) {\n\n\t\t\tvar newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue instanceof THREE.Color ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRoot = meta === undefined;\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\n\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\tif ( this.bumpMap instanceof THREE.Texture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\t\tif ( this.normalMap instanceof THREE.Texture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\t\tif ( this.displacementMap instanceof THREE.Texture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\t\tif ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap instanceof THREE.Texture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t}\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== THREE.NormalBlending ) data.blending = this.blending;\n\t\tif ( this.shading !== THREE.SmoothShading ) data.shading = this.shading;\n\t\tif ( this.side !== THREE.FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache ( cache ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.shading = source.shading;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.alphaTest = source.alphaTest;\n\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.overdraw = source.overdraw;\n\n\t\tthis.visible = source.visible;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\tdstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tvar n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\n\t\treturn this;\n\n\t},\n\n\tupdate: function () {\n\n\t\tthis.dispatchEvent( { type: 'update' } );\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nObject.assign( THREE.Material.prototype, THREE.EventDispatcher.prototype );\n\nTHREE.MaterialIdCount = 0;\n\n// File:src/materials/LineBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\"\n * }\n */\n\nTHREE.LineBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\tthis.linecap = 'round';\n\tthis.linejoin = 'round';\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\n\nTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\tthis.linecap = source.linecap;\n\tthis.linejoin = source.linejoin;\n\n\treturn this;\n\n};\n\n// File:src/materials/LineDashedMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>\n * }\n */\n\nTHREE.LineDashedMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineDashedMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\n\tthis.scale = 1;\n\tthis.dashSize = 3;\n\tthis.gapSize = 1;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\n\nTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\n\tthis.scale = source.scale;\n\tthis.dashSize = source.dashSize;\n\tthis.gapSize = source.gapSize;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>\n * }\n */\n\nTHREE.MeshBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\n\n\tthis.map = null;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\n\nTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshDepthMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / https://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshDepthMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshDepthMaterial';\n\n\tthis.depthPacking = THREE.BasicDepthPacking;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\n\nTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.depthPacking = source.depthPacking;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshLambertMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshLambertMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshLambertMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\n\nTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshNormalMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshNormalMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this, parameters );\n\n\tthis.type = 'MeshNormalMaterial';\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\tthis.morphTargets = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\n\nTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshPhongMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshPhongMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshPhongMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.specular = new THREE.Color( 0x111111 );\n\tthis.shininess = 30;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\n\nTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.specular.copy( source.specular );\n\tthis.shininess = source.shininess;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshStandardMaterial.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshStandardMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.type = 'MeshStandardMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.roughness = 0.5;\n\tthis.metalness = 0.5;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.roughnessMap = null;\n\n\tthis.metalnessMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.envMapIntensity = 1.0;\n\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\n\nTHREE.MeshStandardMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.color.copy( source.color );\n\tthis.roughness = source.roughness;\n\tthis.metalness = source.metalness;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.roughnessMap = source.roughnessMap;\n\n\tthis.metalnessMap = source.metalnessMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.envMapIntensity = source.envMapIntensity;\n\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshPhysicalMaterial.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  reflectivity: <float>\n * }\n */\n\nTHREE.MeshPhysicalMaterial = function ( parameters ) {\n\n\tTHREE.MeshStandardMaterial.call( this );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.type = 'MeshPhysicalMaterial';\n\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\tthis.clearCoat = 0.0;\n\tthis.clearCoatRoughness = 0.0;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshPhysicalMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );\nTHREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;\n\nTHREE.MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.MeshStandardMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.reflectivity = source.reflectivity;\n\n\tthis.clearCoat = source.clearCoat;\n\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\treturn this;\n\n};\n\n// File:src/materials/MultiMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MultiMaterial = function ( materials ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.type = 'MultiMaterial';\n\n\tthis.materials = materials instanceof Array ? materials : [];\n\n\tthis.visible = true;\n\n};\n\nTHREE.MultiMaterial.prototype = {\n\n\tconstructor: THREE.MultiMaterial,\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.2,\n\t\t\t\ttype: 'material',\n\t\t\t\tgenerator: 'MaterialExporter'\n\t\t\t},\n\t\t\tuuid: this.uuid,\n\t\t\ttype: this.type,\n\t\t\tmaterials: []\n\t\t};\n\n\t\tvar materials = this.materials;\n\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tvar material = materials[ i ].toJSON( meta );\n\t\t\tdelete material.metadata;\n\n\t\t\toutput.materials.push( material );\n\n\t\t}\n\n\t\toutput.visible = this.visible;\n\n\t\treturn output;\n\n\t},\n\n\tclone: function () {\n\n\t\tvar material = new this.constructor();\n\n\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n\t\t}\n\n\t\tmaterial.visible = this.visible;\n\n\t\treturn material;\n\n\t}\n\n};\n\n// File:src/materials/PointsMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\n\nTHREE.PointsMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'PointsMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.map = null;\n\n\tthis.size = 1;\n\tthis.sizeAttenuation = true;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\n\nTHREE.PointsMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.size = source.size;\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\treturn this;\n\n};\n\n// File:src/materials/ShaderMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.ShaderMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'ShaderMaterial';\n\n\tthis.defines = {};\n\tthis.uniforms = {};\n\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\tthis.linewidth = 1;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false; // set to use scene fog\n\tthis.lights = false; // set to use scene lights\n\tthis.clipping = false; // set to use user-defined clipping planes\n\n\tthis.skinning = false; // set to use skinning attribute streams\n\tthis.morphTargets = false; // set to use morph targets\n\tthis.morphNormals = false; // set to use morph normals\n\n\tthis.extensions = {\n\t\tderivatives: false, // set to use derivatives\n\t\tfragDepth: false, // set to use fragment depth values\n\t\tdrawBuffers: false, // set to use draw buffers\n\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t};\n\n\t// When rendered geometry doesn't include these attributes but the material does,\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\tthis.defaultAttributeValues = {\n\t\t'color': [ 1, 1, 1 ],\n\t\t'uv': [ 0, 0 ],\n\t\t'uv2': [ 0, 0 ]\n\t};\n\n\tthis.index0AttributeName = undefined;\n\n\tif ( parameters !== undefined ) {\n\n\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n};\n\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\n\nTHREE.ShaderMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.fragmentShader = source.fragmentShader;\n\tthis.vertexShader = source.vertexShader;\n\n\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\n\n\tthis.defines = source.defines;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.lights = source.lights;\n\tthis.clipping = source.clipping;\n\n\tthis.skinning = source.skinning;\n\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\tthis.extensions = source.extensions;\n\n\treturn this;\n\n};\n\nTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\n\n\tdata.uniforms = this.uniforms;\n\tdata.vertexShader = this.vertexShader;\n\tdata.fragmentShader = this.fragmentShader;\n\n\treturn data;\n\n};\n\n// File:src/materials/RawShaderMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.RawShaderMaterial = function ( parameters ) {\n\n\tTHREE.ShaderMaterial.call( this, parameters );\n\n\tthis.type = 'RawShaderMaterial';\n\n};\n\nTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\nTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\n\n// File:src/materials/SpriteMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *\tuvOffset: new THREE.Vector2(),\n *\tuvScale: new THREE.Vector2()\n * }\n */\n\nTHREE.SpriteMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.map = null;\n\n\tthis.rotation = 0;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\n\nTHREE.SpriteMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.map = source.map;\n\n\tthis.rotation = source.rotation;\n\n\treturn this;\n\n};\n\n// File:src/materials/ShadowMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ShadowMaterial = function () {\n\n\tTHREE.ShaderMaterial.call( this, {\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\t\tvertexShader: THREE.ShaderChunk[ 'shadow_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'shadow_frag' ]\n\t} );\n\n\tthis.lights = true;\n\tthis.transparent = true;\n\n\tObject.defineProperties( this, {\n\t\topacity: {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn this.uniforms.opacity.value;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tthis.uniforms.opacity.value = value;\n\t\t\t}\n\t\t}\n\t} );\n\n};\n\nTHREE.ShadowMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\nTHREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial;\n\n// File:src/textures/Texture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.sourceFile = '';\n\n\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\n\tthis.mipmaps = [];\n\n\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\n\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\n\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\n\n\tthis.offset = new THREE.Vector2( 0, 0 );\n\tthis.repeat = new THREE.Vector2( 1, 1 );\n\n\tthis.generateMipmaps = true;\n\tthis.premultiplyAlpha = false;\n\tthis.flipY = true;\n\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\n\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t//\n\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\tthis.encoding = encoding !== undefined ? encoding :  THREE.LinearEncoding;\n\n\tthis.version = 0;\n\tthis.onUpdate = null;\n\n};\n\nTHREE.Texture.DEFAULT_IMAGE = undefined;\nTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\n\nTHREE.Texture.prototype = {\n\n\tconstructor: THREE.Texture,\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tfunction getDataURL( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image.toDataURL !== undefined ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = image.width;\n\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tvar image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tmeta.textures[ this.uuid ] = output;\n\n\t\treturn output;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t},\n\n\ttransformUv: function ( uv ) {\n\n\t\tif ( this.mapping !== THREE.UVMapping )  return;\n\n\t\tuv.multiply( this.repeat );\n\t\tuv.add( this.offset );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t}\n\n};\n\nObject.assign( THREE.Texture.prototype, THREE.EventDispatcher.prototype );\n\nTHREE.TextureIdCount = 0;\n\n// File:src/textures/DepthTexture.js\n\n/**\n * @author Matt DesLauriers / @mattdesl\n */\n\nTHREE.DepthTexture = function ( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\n  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy );\n\n  this.image = { width: width, height: height };\n\n  this.type = type !== undefined ? type : THREE.UnsignedShortType;\n\n  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\n  this.flipY = false;\n  this.generateMipmaps  = false;\n\n};\n\nTHREE.DepthTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.DepthTexture.prototype.constructor = THREE.DepthTexture;\n\n// File:src/textures/CanvasTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.needsUpdate = true;\n\n};\n\nTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\n\n// File:src/textures/CubeTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\timages = images !== undefined ? images : [];\n\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\n\n\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.flipY = false;\n\n};\n\nTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\n\nObject.defineProperty( THREE.CubeTexture.prototype, 'images', {\n\n\tget: function () {\n\n\t\treturn this.image;\n\n\t},\n\n\tset: function ( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n} );\n\n// File:src/textures/CompressedTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n};\n\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\n\n// File:src/textures/DataTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { data: data, width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\n\tthis.flipY = false;\n\tthis.generateMipmaps  = false;\n\n};\n\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\n\n// File:src/textures/VideoTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.generateMipmaps = false;\n\n\tvar scope = this;\n\n\tfunction update() {\n\n\t\trequestAnimationFrame( update );\n\n\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tscope.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tupdate();\n\n};\n\nTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\n\n// File:src/objects/Group.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Group = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Group';\n\n};\n\nTHREE.Group.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Group\n\n} );\n\n// File:src/objects/Points.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Points = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Points';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nTHREE.Points.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Points,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar object = this;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar position = new THREE.Vector3();\n\n\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/Line.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Line = function ( geometry, material, mode ) {\n\n\tif ( mode === 1 ) {\n\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\treturn new THREE.LineSegments( geometry, material );\n\n\t}\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Line';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nTHREE.Line.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Line,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar precision = raycaster.linePrecision;\n\t\t\tvar precisionSq = precision * precision;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar vStart = new THREE.Vector3();\n\t\t\tvar vEnd = new THREE.Vector3();\n\t\t\tvar interSegment = new THREE.Vector3();\n\t\t\tvar interRay = new THREE.Vector3();\n\t\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LineSegments.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LineSegments = function ( geometry, material ) {\n\n\tTHREE.Line.call( this, geometry, material );\n\n\tthis.type = 'LineSegments';\n\n};\n\nTHREE.LineSegments.prototype = Object.assign( Object.create( THREE.Line.prototype ), {\n\n\tconstructor: THREE.LineSegments\n\n} );\n\n// File:src/objects/Mesh.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nTHREE.Mesh = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.drawMode = THREE.TrianglesDrawMode;\n\n\tthis.updateMorphTargets();\n\n};\n\nTHREE.Mesh.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Mesh,\n\n\tsetDrawMode: function ( value ) {\n\n\t\tthis.drawMode = value;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.drawMode = source.drawMode;\n\n\t\treturn this;\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\n\n\t\t\tthis.morphTargetBase = - 1;\n\t\t\tthis.morphTargetInfluences = [];\n\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tgetMorphTargetIndexByName: function ( name ) {\n\n\t\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\n\n\t\t\treturn this.morphTargetDictionary[ name ];\n\n\t\t}\n\n\t\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\n\n\t\treturn 0;\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\tvar vA = new THREE.Vector3();\n\t\tvar vB = new THREE.Vector3();\n\t\tvar vC = new THREE.Vector3();\n\n\t\tvar tempA = new THREE.Vector3();\n\t\tvar tempB = new THREE.Vector3();\n\t\tvar tempC = new THREE.Vector3();\n\n\t\tvar uvA = new THREE.Vector2();\n\t\tvar uvB = new THREE.Vector2();\n\t\tvar uvC = new THREE.Vector2();\n\n\t\tvar barycoord = new THREE.Vector3();\n\n\t\tvar intersectionPoint = new THREE.Vector3();\n\t\tvar intersectionPointWorld = new THREE.Vector3();\n\n\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\treturn uv1.clone();\n\n\t\t}\n\n\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\tvar intersect;\n\t\t\tvar material = object.material;\n\n\t\t\tif ( material.side === THREE.BackSide ) {\n\n\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t} else {\n\n\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\n\n\t\t\t}\n\n\t\t\tif ( intersect === null ) return null;\n\n\t\t\tintersectionPointWorld.copy( point );\n\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\treturn {\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\tobject: object\n\t\t\t};\n\n\t\t}\n\n\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\tif ( intersection ) {\n\n\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n\t\t\t\t}\n\n\t\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\n\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t}\n\n\t\t\treturn intersection;\n\n\t\t}\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) return;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t}\n\n\t\t\tvar uvs, intersection;\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\tuvs = attributes.uv.array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\ta = indices[ i ];\n\t\t\t\t\t\tb = indices[ i + 1 ];\n\t\t\t\t\t\tc = indices[ i + 2 ];\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n\t\t\t\t\t\ta = i / 3;\n\t\t\t\t\t\tb = a + 1;\n\t\t\t\t\t\tc = a + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/Bone.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.Bone = function ( skin ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Bone';\n\n\tthis.skin = skin;\n\n};\n\nTHREE.Bone.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Bone,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.skin = source.skin;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/objects/Skeleton.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\n\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n\tthis.identityMatrix = new THREE.Matrix4();\n\n\t// copy the bone array\n\n\tbones = bones || [];\n\n\tthis.bones = bones.slice( 0 );\n\n\t// create a bone texture or an array of floats\n\n\tif ( this.useVertexTexture ) {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\n\t\tsize = Math.max( size, 4 );\n\n\t\tthis.boneTextureWidth = size;\n\t\tthis.boneTextureHeight = size;\n\n\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\n\n\t} else {\n\n\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n\t}\n\n\t// use the supplied bone inverses or calculate the inverses\n\n\tif ( boneInverses === undefined ) {\n\n\t\tthis.calculateInverses();\n\n\t} else {\n\n\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\nObject.assign( THREE.Skeleton.prototype, {\n\n\tcalculateInverses: function () {\n\n\t\tthis.boneInverses = [];\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tvar inverse = new THREE.Matrix4();\n\n\t\t\tif ( this.bones[ b ] ) {\n\n\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t},\n\n\tpose: function () {\n\n\t\tvar bone;\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tbone = this.bones[ b ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tbone = this.bones[ b ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdate: ( function () {\n\n\t\tvar offsetMatrix = new THREE.Matrix4();\n\n\t\treturn function update() {\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\n\t\t\t}\n\n\t\t\tif ( this.useVertexTexture ) {\n\n\t\t\t\tthis.boneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t};\n\n\t} )(),\n\n\tclone: function () {\n\n\t\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n\t}\n\n} );\n\n// File:src/objects/SkinnedMesh.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.type = 'SkinnedMesh';\n\n\tthis.bindMode = \"attached\";\n\tthis.bindMatrix = new THREE.Matrix4();\n\tthis.bindMatrixInverse = new THREE.Matrix4();\n\n\t// init bones\n\n\t// TODO: remove bone creation as there is no reason (other than\n\t// convenience) for THREE.SkinnedMesh to do this.\n\n\tvar bones = [];\n\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\tvar bone, gbone;\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tbone = new THREE.Bone( this );\n\t\t\tbones.push( bone );\n\n\t\t\tbone.name = gbone.name;\n\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t}\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\n\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n\t\t\t} else {\n\n\t\t\t\tthis.add( bones[ b ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tthis.normalizeSkinWeights();\n\n\tthis.updateMatrixWorld( true );\n\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n};\n\n\nTHREE.SkinnedMesh.prototype = Object.assign( Object.create( THREE.Mesh.prototype ), {\n\n\tconstructor: THREE.SkinnedMesh,\n\n\tbind: function( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t},\n\n\tpose: function () {\n\n\t\tthis.skeleton.pose();\n\n\t},\n\n\tnormalizeSkinWeights: function () {\n\n\t\tif ( this.geometry instanceof THREE.Geometry ) {\n\n\t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( this.geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar vec = new THREE.Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdateMatrixWorld: function( force ) {\n\n\t\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\n\n\t\tif ( this.bindMode === \"attached\" ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t} else if ( this.bindMode === \"detached\" ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t},\n\n\tclone: function() {\n\n\t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LOD.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LOD = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'LOD';\n\n\tObject.defineProperties( this, {\n\t\tlevels: {\n\t\t\tenumerable: true,\n\t\t\tvalue: []\n\t\t}\n\t} );\n\n};\n\n\nTHREE.LOD.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.LOD,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source, false );\n\n\t\tvar levels = source.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\taddLevel: function ( object, distance ) {\n\n\t\tif ( distance === undefined ) distance = 0;\n\n\t\tdistance = Math.abs( distance );\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t},\n\n\tgetObjectForDistance: function ( distance ) {\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn levels[ i - 1 ].object;\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar matrixPosition = new THREE.Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t};\n\n\t}() ),\n\n\tupdate: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.levels = [];\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/objects/Sprite.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Sprite = function ( material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Sprite';\n\n\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\n\n};\n\nTHREE.Sprite.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Sprite,\n\n\traycast: ( function () {\n\n\t\tvar matrixPosition = new THREE.Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\n\t\t\tif ( distanceSq > guessSizeSq ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t\t\t\tpoint: this.position,\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LensFlare.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.lensFlares = [];\n\n\tthis.positionScreen = new THREE.Vector3();\n\tthis.customUpdateCallback = undefined;\n\n\tif ( texture !== undefined ) {\n\n\t\tthis.add( texture, size, distance, blending, color );\n\n\t}\n\n};\n\nTHREE.LensFlare.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.LensFlare,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.positionScreen.copy( source.positionScreen );\n\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n\t\tif ( size === undefined ) size = - 1;\n\t\tif ( distance === undefined ) distance = 0;\n\t\tif ( opacity === undefined ) opacity = 1;\n\t\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\n\t\tif ( blending === undefined ) blending = THREE.NormalBlending;\n\n\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\t\tthis.lensFlares.push( {\n\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\tscale: 1, \t\t// scale\n\t\t\trotation: 0, \t\t// rotation\n\t\t\topacity: opacity,\t// opacity\n\t\t\tcolor: color,\t\t// color\n\t\t\tblending: blending\t// blending\n\t\t} );\n\n\t},\n\n\t/*\n\t * Update lens flares update positions on all flares based on the screen position\n\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t */\n\n\tupdateLensFlares: function () {\n\n\t\tvar f, fl = this.lensFlares.length;\n\t\tvar flare;\n\t\tvar vecX = - this.positionScreen.x * 2;\n\t\tvar vecY = - this.positionScreen.y * 2;\n\n\t\tfor ( f = 0; f < fl; f ++ ) {\n\n\t\t\tflare = this.lensFlares[ f ];\n\n\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/scenes/Scene.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Scene = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Scene';\n\n\tthis.background = null;\n\tthis.fog = null;\n\tthis.overrideMaterial = null;\n\n\tthis.autoUpdate = true; // checked by the renderer\n\n};\n\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Scene.prototype.constructor = THREE.Scene;\n\nTHREE.Scene.prototype.copy = function ( source, recursive ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source, recursive );\n\n\tif ( source.background !== null ) this.background = source.background.clone();\n\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\tthis.autoUpdate = source.autoUpdate;\n\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\treturn this;\n\n};\n\n// File:src/scenes/Fog.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Fog = function ( color, near, far ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\n\tthis.near = ( near !== undefined ) ? near : 1;\n\tthis.far = ( far !== undefined ) ? far : 1000;\n\n};\n\nTHREE.Fog.prototype.clone = function () {\n\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\n\n};\n\n// File:src/scenes/FogExp2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.FogExp2 = function ( color, density ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n};\n\nTHREE.FogExp2.prototype.clone = function () {\n\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\n\n};\n\n// File:src/renderers/shaders/ShaderChunk.js\n\nTHREE.ShaderChunk = {};\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_pars_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphatest_fragment' ] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\n\nTHREE.ShaderChunk[ 'aomap_fragment' ] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'aomap_pars_fragment' ] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\n\nTHREE.ShaderChunk[ 'begin_vertex' ] = \"\\nvec3 transformed = vec3( position );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'beginnormal_vertex' ] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\n\nTHREE.ShaderChunk[ 'bsdfs' ] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\t\tvec4 plane = clippingPlanes[ i ];\\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_pars_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\t\tvarying vec3 vViewPosition;\\n\t#endif\\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_pars_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_fragment' ] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_pars_fragment' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_pars_vertex' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_vertex' ] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/common.glsl\n\nTHREE.ShaderChunk[ 'common' ] = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\n\nTHREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\tvec3 absDirection = abs(direction);\\n\tint face = -1;\\n\tif( absDirection.x > absDirection.z ) {\\n\t\tif(absDirection.x > absDirection.y )\\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\telse {\\n\t\tif(absDirection.z > absDirection.y )\\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\tfloat dxRoughness = dFdx(roughness);\\n\tfloat dyRoughness = dFdy(roughness);\\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\tfloat mipLevel = 0.5 * log2(d);\\n\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\tbool bRes = mipLevel == 0.0;\\n\tscale =  bRes && (scale < a) ? a : scale;\\n\tvec3 r;\\n\tvec2 offset;\\n\tint face = getFaceFromDirection(direction);\\n\tfloat rcpPowScale = 1.0 / powScale;\\n\tif( face == 0) {\\n\t\tr = vec3(direction.x, -direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 1) {\\n\t\tr = vec3(direction.y, direction.x, direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 2) {\\n\t\tr = vec3(direction.z, direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 3) {\\n\t\tr = vec3(direction.x, direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse if( face == 4) {\\n\t\tr = vec3(direction.y, direction.x, -direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse {\\n\t\tr = vec3(direction.z, -direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\tr = normalize(r);\\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\tvec2 base = offset + vec2( texelOffset );\\n\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\tfloat r1 = floor(roughnessVal);\\n\tfloat r2 = r1 + 1.0;\\n\tfloat t = fract(roughnessVal);\\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\tfloat s = mipInfo.y;\\n\tfloat level0 = mipInfo.x;\\n\tfloat level1 = level0 + 1.0;\\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\tvec4 result = mix(color10, color20, t);\\n\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'defaultnormal_vertex' ] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'displacementmap_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\n\nTHREE.ShaderChunk[ 'emissivemap_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'encodings_pars_fragment' ] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\n\nTHREE.ShaderChunk[ 'encodings_fragment' ] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_fragment' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_fragment' ] = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\t\tvarying vec3 vWorldPosition;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvarying vec3 vWorldPosition;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t\tuniform float refractionRatio;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvWorldPosition = worldPosition.xyz;\\n\t#else\\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_fragment' ] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_pars_fragment' ] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_pars_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_lambert_vertex' ] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\n\nTHREE.ShaderChunk[ 'lights_pars' ] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#include <normal_flip>\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#include <normal_flip>\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#endif\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_fragment' ] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_physical_fragment' ] = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_physical_pars_fragment' ] = \"struct PhysicalMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n\t#ifndef STANDARD\\n\t\tfloat clearCoat;\\n\t\tfloat clearCoatRoughness;\\n\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\t#ifndef STANDARD\\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\t#ifndef STANDARD\\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_template.glsl\n\nTHREE.ShaderChunk[ 'lights_template' ] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\t#ifndef STANDARD\\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\t#else\\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\t#endif\\n\t\t\\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_fragment' ] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'metalnessmap_fragment' ] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphnormal_vertex' ] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normal_flip.glsl\n\nTHREE.ShaderChunk[ 'normal_flip' ] = \"#ifdef DOUBLE_SIDED\\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\n\nTHREE.ShaderChunk[ 'normal_fragment' ] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'normalmap_pars_fragment' ] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/packing.glsl\n\nTHREE.ShaderChunk[ 'packing' ] = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\n\nTHREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\n\nTHREE.ShaderChunk[ 'project_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'roughnessmap_fragment' ] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinbase_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_pars_vertex' ] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinnormal_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_fragment' ] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_pars_fragment' ] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\n\nTHREE.ShaderChunk[ 'tonemapping_fragment' ] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'uv2_pars_fragment' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv2_pars_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv2_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'uv_pars_fragment' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv_pars_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\n\nTHREE.ShaderChunk[ 'worldpos_vertex' ] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/UniformsUtils.js\n\n/**\n * Uniform Utilities\n */\n\nTHREE.UniformsUtils = {\n\n\tmerge: function ( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t},\n\n\tclone: function ( uniforms_src ) {\n\n\t\tvar uniforms_dst = {};\n\n\t\tfor ( var u in uniforms_src ) {\n\n\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uniforms_dst;\n\n\t}\n\n};\n\n// File:src/renderers/shaders/UniformsLib.js\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nTHREE.UniformsLib = {\n\n\tcommon: {\n\n\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\": { value: 1.0 },\n\n\t\t\"map\": { value: null },\n\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) },\n\n\t\t\"specularMap\": { value: null },\n\t\t\"alphaMap\": { value: null },\n\n\t\t\"envMap\": { value: null },\n\t\t\"flipEnvMap\": { value: - 1 },\n\t\t\"reflectivity\": { value: 1.0 },\n\t\t\"refractionRatio\": { value: 0.98 }\n\n\t},\n\n\taomap: {\n\n\t\t\"aoMap\": { value: null },\n\t\t\"aoMapIntensity\": { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\t\"lightMap\": { value: null },\n\t\t\"lightMapIntensity\": { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\t\"emissiveMap\": { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\t\"bumpMap\": { value: null },\n\t\t\"bumpScale\": { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\t\"normalMap\": { value: null },\n\t\t\"normalScale\": { value: new THREE.Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\t\"displacementMap\": { value: null },\n\t\t\"displacementScale\": { value: 1 },\n\t\t\"displacementBias\": { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\t\"roughnessMap\": { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\t\"metalnessMap\": { value: null }\n\n\t},\n\n\tfog: {\n\n\t\t\"fogDensity\": { value: 0.00025 },\n\t\t\"fogNear\": { value: 1 },\n\t\t\"fogFar\": { value: 2000 },\n\t\t\"fogColor\": { value: new THREE.Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\t\"ambientLightColor\": { value: [] },\n\n\t\t\"directionalLights\": { value: [], properties: {\n\t\t\t\"direction\": {},\n\t\t\t\"color\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"directionalShadowMap\": { value: [] },\n\t\t\"directionalShadowMatrix\": { value: [] },\n\n\t\t\"spotLights\": { value: [], properties: {\n\t\t\t\"color\": {},\n\t\t\t\"position\": {},\n\t\t\t\"direction\": {},\n\t\t\t\"distance\": {},\n\t\t\t\"coneCos\": {},\n\t\t\t\"penumbraCos\": {},\n\t\t\t\"decay\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"spotShadowMap\": { value: [] },\n\t\t\"spotShadowMatrix\": { value: [] },\n\n\t\t\"pointLights\": { value: [], properties: {\n\t\t\t\"color\": {},\n\t\t\t\"position\": {},\n\t\t\t\"decay\": {},\n\t\t\t\"distance\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"pointShadowMap\": { value: [] },\n\t\t\"pointShadowMatrix\": { value: [] },\n\n\t\t\"hemisphereLights\": { value: [], properties: {\n\t\t\t\"direction\": {},\n\t\t\t\"skyColor\": {},\n\t\t\t\"groundColor\": {}\n\t\t} }\n\n\t},\n\n\tpoints: {\n\n\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\": { value: 1.0 },\n\t\t\"size\": { value: 1.0 },\n\t\t\"scale\": { value: 1.0 },\n\t\t\"map\": { value: null },\n\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) }\n\n\t}\n\n};\n\n// File:src/renderers/shaders/ShaderLib/cube_frag.glsl\n\nTHREE.ShaderChunk[ 'cube_frag' ] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/cube_vert.glsl\n\nTHREE.ShaderChunk[ 'cube_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/depth_frag.glsl\n\nTHREE.ShaderChunk[ 'depth_frag' ] = \"#if DEPTH_PACKING == 3200\\n\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( 1.0 );\\n\t#if DEPTH_PACKING == 3200\\n\t\tdiffuseColor.a = opacity;\\n\t#endif\\n\t#include <map_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <logdepthbuf_fragment>\\n\t#if DEPTH_PACKING == 3200\\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\t#elif DEPTH_PACKING == 3201\\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\t#endif\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/depth_vert.glsl\n\nTHREE.ShaderChunk[ 'depth_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\n\nTHREE.ShaderChunk[ 'distanceRGBA_frag' ] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\n\nTHREE.ShaderChunk[ 'distanceRGBA_vert' ] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\n\nTHREE.ShaderChunk[ 'equirect_frag' ] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\n\nTHREE.ShaderChunk[ 'equirect_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\n\nTHREE.ShaderChunk[ 'linedashed_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\n\nTHREE.ShaderChunk[ 'linedashed_vert' ] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\n\nTHREE.ShaderChunk[ 'meshbasic_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\n\nTHREE.ShaderChunk[ 'meshbasic_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <envmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\n\nTHREE.ShaderChunk[ 'meshlambert_frag' ] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\n\nTHREE.ShaderChunk[ 'meshlambert_vert' ] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\n\nTHREE.ShaderChunk[ 'meshphong_frag' ] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\n\nTHREE.ShaderChunk[ 'meshphong_vert' ] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl\n\nTHREE.ShaderChunk[ 'meshphysical_frag' ] = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\tuniform float clearCoat;\\n\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_physical_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl\n\nTHREE.ShaderChunk[ 'meshphysical_vert' ] = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/normal_frag.glsl\n\nTHREE.ShaderChunk[ 'normal_frag' ] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/normal_vert.glsl\n\nTHREE.ShaderChunk[ 'normal_vert' ] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/points_frag.glsl\n\nTHREE.ShaderChunk[ 'points_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/points_vert.glsl\n\nTHREE.ShaderChunk[ 'points_vert' ] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/shadow_frag.glsl\n\nTHREE.ShaderChunk[ 'shadow_frag' ] = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/shadow_vert.glsl\n\nTHREE.ShaderChunk[ 'shadow_vert' ] = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib.js\n\n/**\n * Webgl Shader Library for three.js\n *\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\n\nTHREE.ShaderLib = {\n\n\t'basic': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshbasic_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshbasic_frag' ]\n\n\t},\n\n\t'lambert': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshlambert_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshlambert_frag' ]\n\n\t},\n\n\t'phong': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\"specular\" : { value: new THREE.Color( 0x111111 ) },\n\t\t\t\t\"shininess\": { value: 30 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphong_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphong_frag' ]\n\n\t},\n\n\t'standard': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\tTHREE.UniformsLib[ 'roughnessmap' ],\n\t\t\tTHREE.UniformsLib[ 'metalnessmap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\"roughness\": { value: 0.5 },\n\t\t\t\t\"metalness\": { value: 0 },\n\t\t\t\t\"envMapIntensity\" : { value: 1 }, // temporary\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\n\t},\n\n\t'points': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'points' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'points_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'points_frag' ]\n\n\t},\n\n\t'dashed': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\n\t\t\t{\n\t\t\t\t\"scale\"    : { value: 1 },\n\t\t\t\t\"dashSize\" : { value: 1 },\n\t\t\t\t\"totalSize\": { value: 2 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'linedashed_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'linedashed_frag' ]\n\n\t},\n\n\t'depth': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'depth_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'depth_frag' ]\n\n\t},\n\n\t'normal': {\n\n\t\tuniforms: {\n\n\t\t\t\"opacity\" : { value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'normal_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'normal_frag' ]\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\t'cube': {\n\n\t\tuniforms: {\n\t\t\t\"tCube\": { value: null },\n\t\t\t\"tFlip\": { value: - 1 }\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'cube_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'cube_frag' ]\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\t'equirect': {\n\n\t\tuniforms: {\n\t\t\t\"tEquirect\": { value: null },\n\t\t\t\"tFlip\": { value: - 1 }\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'equirect_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'equirect_frag' ]\n\n\t},\n\n\t'distanceRGBA': {\n\n\t\tuniforms: {\n\n\t\t\t\"lightPos\": { value: new THREE.Vector3() }\n\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'distanceRGBA_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'distanceRGBA_frag' ]\n\n\t}\n\n};\n\nTHREE.ShaderLib[ 'physical' ] = {\n\n\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\tTHREE.ShaderLib[ 'standard' ].uniforms,\n\n\t\t{\n\t\t\t\"clearCoat\": { value: 0 },\n\t\t\t\"clearCoatRoughness\": { value: 0 }\n\t\t}\n\n\t] ),\n\n\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\n};\n\n// File:src/renderers/WebGLRenderer.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n * @author tschw\n */\n\nTHREE.WebGLRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n\tvar lights = [];\n\n\tvar opaqueObjects = [];\n\tvar opaqueObjectsLastIndex = - 1;\n\tvar transparentObjects = [];\n\tvar transparentObjectsLastIndex = - 1;\n\n\tvar morphInfluences = new Float32Array( 8 );\n\n\tvar sprites = [];\n\tvar lensFlares = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\tthis.context = null;\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.gammaInput = false;\n\tthis.gammaOutput = false;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = THREE.LinearToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\tthis.toneMappingWhitePoint = 1.0;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// internal properties\n\n\tvar _this = this,\n\n\t// internal state cache\n\n\t_currentProgram = null,\n\t_currentRenderTarget = null,\n\t_currentFramebuffer = null,\n\t_currentMaterialId = - 1,\n\t_currentGeometryProgram = '',\n\t_currentCamera = null,\n\n\t_currentScissor = new THREE.Vector4(),\n\t_currentScissorTest = null,\n\n\t_currentViewport = new THREE.Vector4(),\n\n\t//\n\n\t_usedTextureUnits = 0,\n\n\t//\n\n\t_clearColor = new THREE.Color( 0x000000 ),\n\t_clearAlpha = 0,\n\n\t_width = _canvas.width,\n\t_height = _canvas.height,\n\n\t_pixelRatio = 1,\n\n\t_scissor = new THREE.Vector4( 0, 0, _width, _height ),\n\t_scissorTest = false,\n\n\t_viewport = new THREE.Vector4( 0, 0, _width, _height ),\n\n\t// frustum\n\n\t_frustum = new THREE.Frustum(),\n\n\t// clipping\n\n\t_clipping = new THREE.WebGLClipping(),\n\t_clippingEnabled = false,\n\t_localClippingEnabled = false,\n\n\t_sphere = new THREE.Sphere(),\n\n\t// camera matrices cache\n\n\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t_vector3 = new THREE.Vector3(),\n\n\t// light arrays cache\n\n\t_lights = {\n\n\t\thash: '',\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tdirectional: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\tpoint: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: [],\n\n\t\tshadows: []\n\n\t},\n\n\t// info\n\n\t_infoRender = {\n\n\t\tcalls: 0,\n\t\tvertices: 0,\n\t\tfaces: 0,\n\t\tpoints: 0\n\n\t};\n\n\tthis.info = {\n\n\t\trender: _infoRender,\n\t\tmemory: {\n\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\n\t\t},\n\t\tprograms: null\n\n\t};\n\n\n\t// initialize\n\n\tvar _gl;\n\n\ttry {\n\n\t\tvar attributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t};\n\n\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n\t\t\t} else {\n\n\t\t\t\tthrow 'Error creating WebGL context.';\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n\t}\n\n\tvar extensions = new THREE.WebGLExtensions( _gl );\n\n\textensions.get( 'WEBGL_depth_texture' );\n\textensions.get( 'OES_texture_float' );\n\textensions.get( 'OES_texture_float_linear' );\n\textensions.get( 'OES_texture_half_float' );\n\textensions.get( 'OES_texture_half_float_linear' );\n\textensions.get( 'OES_standard_derivatives' );\n\textensions.get( 'ANGLE_instanced_arrays' );\n\n\tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\n\n\t}\n\n\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\n\n\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\n\tvar properties = new THREE.WebGLProperties();\n\tvar textures = new THREE.WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\n\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\n\tvar lightCache = new THREE.WebGLLights();\n\n\tthis.info.programs = programCache.programs;\n\n\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\n\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n\t//\n\n\tvar backgroundCamera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar backgroundCamera2 = new THREE.PerspectiveCamera();\n\tvar backgroundPlaneMesh = new THREE.Mesh(\n\t\tnew THREE.PlaneBufferGeometry( 2, 2 ),\n\t\tnew THREE.MeshBasicMaterial( { depthTest: false, depthWrite: false } )\n\t);\n\tvar backgroundBoxShader = THREE.ShaderLib[ 'cube' ];\n\tvar backgroundBoxMesh = new THREE.Mesh(\n\t\tnew THREE.BoxBufferGeometry( 5, 5, 5 ),\n\t\tnew THREE.ShaderMaterial( {\n\t\t\tuniforms: backgroundBoxShader.uniforms,\n\t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tside: THREE.BackSide\n\t\t} )\n\t);\n\tobjects.update( backgroundPlaneMesh );\n\tobjects.update( backgroundBoxMesh );\n\n\t//\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\tfunction glClearColor( r, g, b, a ) {\n\n\t\tif ( _premultipliedAlpha === true ) {\n\n\t\t\tr *= a; g *= a; b *= a;\n\n\t\t}\n\n\t\tstate.clearColor( r, g, b, a );\n\n\t}\n\n\tfunction setDefaultGLState() {\n\n\t\tstate.init();\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t}\n\n\tfunction resetGLState() {\n\n\t\t_currentProgram = null;\n\t\t_currentCamera = null;\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\n\t\tstate.reset();\n\n\t}\n\n\tsetDefaultGLState();\n\n\tthis.context = _gl;\n\tthis.capabilities = capabilities;\n\tthis.extensions = extensions;\n\tthis.properties = properties;\n\tthis.state = state;\n\n\t// shadow map\n\n\tvar shadowMap = new THREE.WebGLShadowMap( this, _lights, objects );\n\n\tthis.shadowMap = shadowMap;\n\n\n\t// Plugins\n\n\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\n\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n\t};\n\n\tthis.getMaxAnisotropy = function () {\n\n\t\treturn capabilities.getMaxAnisotropy();\n\n\t};\n\n\tthis.getPrecision = function () {\n\n\t\treturn capabilities.precision;\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _viewport.z, _viewport.w, false );\n\n\t};\n\n\tthis.getSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = width * _pixelRatio;\n\t\t_canvas.height = height * _pixelRatio;\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.setClearAlpha = function ( alpha ) {\n\n\t\t_clearAlpha = alpha;\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tvar bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\tthis.setRenderTarget( renderTarget );\n\t\tthis.clear( color, depth, stencil );\n\n\t};\n\n\t// Reset\n\n\tthis.resetGLState = resetGLState;\n\n\tthis.dispose = function() {\n\n\t\ttransparentObjects = [];\n\t\ttransparentObjectsLastIndex = -1;\n\t\topaqueObjects = [];\n\t\topaqueObjectsLastIndex = -1;\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tresetGLState();\n\t\tsetDefaultGLState();\n\n\t\tproperties.clear();\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tvar material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReference( material );\n\n\t\tproperties.delete( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReference( material ) {\n\n\t\tvar programInfo = properties.get( material ).program;\n\n\t\tmaterial.program = undefined;\n\n\t\tif ( programInfo !== undefined ) {\n\n\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\tstate.initAttributes();\n\n\t\tvar buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tvar attributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.position );\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading ) {\n\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.normal );\n\n\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.uv );\n\n\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.color );\n\n\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\tsetMaterial( material );\n\n\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\tvar updateBuffers = false;\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphTargetInfluences !== undefined ) {\n\n\t\t\tvar activeInfluences = [];\n\n\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n\t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n\t\t\t}\n\n\t\t\tactiveInfluences.sort( absNumericalSort );\n\n\t\t\tif ( activeInfluences.length > 8 ) {\n\n\t\t\t\tactiveInfluences.length = 8;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n\t\t\t\tvar influence = activeInfluences[ i ];\n\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n\t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n\t\t\t\t\tvar index = influence[ 1 ];\n\n\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tprogram.getUniforms().setValue(\n\t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t//\n\n\t\tvar index = geometry.index;\n\t\tvar position = geometry.attributes.position;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = objects.getWireframeAttribute( geometry );\n\n\t\t}\n\n\t\tvar renderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( index );\n\n\t\t} else {\n\n\t\t\trenderer = bufferRenderer;\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar dataStart = 0;\n\t\tvar dataCount = Infinity;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdataCount = index.count;\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\tdataCount = position.count;\n\n\t\t}\n\n\t\tvar rangeStart = geometry.drawRange.start;\n\t\tvar rangeCount = geometry.drawRange.count;\n\n\t\tvar groupStart = group !== null ? group.start : 0;\n\t\tvar groupCount = group !== null ? group.count : Infinity;\n\n\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\n\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t//\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\tcase THREE.TrianglesDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TriangleStripDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TriangleFanDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object instanceof THREE.LineSegments ) {\n\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t}\n\n\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t}\n\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\n\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\tvar extension;\n\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\tstate.initAttributes();\n\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( var name in programAttributes ) {\n\n\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tvar type = _gl.FLOAT;\n\t\t\t\t\tvar array = geometryAttribute.array;\n\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\n\t\t\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\t\t\ttype = _gl.FLOAT;\n\n\t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\t\t\tconsole.warn(\"Unsupported data buffer format: Float64Array\");\n\n\t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\n\t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\t\t\ttype = _gl.SHORT;\n\n\t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\n\t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\t\t\ttype = _gl.INT;\n\n\t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\t\t\ttype = _gl.BYTE;\n\n\t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t}\n\n\t// Sorting\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n\t}\n\n\tfunction painterSortStable ( a, b ) {\n\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable ( a, b ) {\n\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t} if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar fog = scene.fog;\n\n\t\t// reset caching for this frame\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\tlights.length = 0;\n\n\t\topaqueObjectsLastIndex = - 1;\n\t\ttransparentObjectsLastIndex = - 1;\n\n\t\tsprites.length = 0;\n\t\tlensFlares.length = 0;\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tprojectObject( scene, camera );\n\n\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\topaqueObjects.sort( painterSortStable );\n\t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\tsetupShadows( lights );\n\n\t\tshadowMap.render( scene, camera );\n\n\t\tsetupLights( lights, camera );\n\n\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t//\n\n\t\t_infoRender.calls = 0;\n\t\t_infoRender.vertices = 0;\n\t\t_infoRender.faces = 0;\n\t\t_infoRender.points = 0;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\trenderTarget = null;\n\n\t\t}\n\n\t\tthis.setRenderTarget( renderTarget );\n\n\t\t//\n\n\t\tvar background = scene.background;\n\n\t\tif ( background === null ) {\n\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t} else if ( background instanceof THREE.Color ) {\n\n\t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\n\t\t}\n\n\t\tif ( this.autoClear || forceClear ) {\n\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background instanceof THREE.CubeTexture ) {\n\n\t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\n\t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\n\t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\n\t\t} else if ( background instanceof THREE.Texture ) {\n\n\t\t\tbackgroundPlaneMesh.material.map = background;\n\n\t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.overrideMaterial ) {\n\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n\t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\n\t\t} else {\n\n\t\t\t// opaque pass (front-to-back order)\n\n\t\t\tstate.setBlending( THREE.NoBlending );\n\t\t\trenderObjects( opaqueObjects, camera, fog );\n\n\t\t\t// transparent pass (back-to-front order)\n\n\t\t\trenderObjects( transparentObjects, camera, fog );\n\n\t\t}\n\n\t\t// custom render plugins (post pass)\n\n\t\tspritePlugin.render( scene, camera );\n\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\tif ( renderTarget ) {\n\n\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.setDepthTest( true );\n\t\tstate.setDepthWrite( true );\n\t\tstate.setColorWrite( true );\n\n\t\t// _gl.finish();\n\n\t};\n\n\tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n\t\tvar array, index;\n\n\t\t// allocate the next position in the appropriate array\n\n\t\tif ( material.transparent ) {\n\n\t\t\tarray = transparentObjects;\n\t\t\tindex = ++ transparentObjectsLastIndex;\n\n\t\t} else {\n\n\t\t\tarray = opaqueObjects;\n\t\t\tindex = ++ opaqueObjectsLastIndex;\n\n\t\t}\n\n\t\t// recycle existing render item or grow the array\n\n\t\tvar renderItem = array[ index ];\n\n\t\tif ( renderItem !== undefined ) {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.z = _vector3.z;\n\t\t\trenderItem.group = group;\n\n\t\t} else {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tz: _vector3.z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\t// assert( index === array.length );\n\t\t\tarray.push( renderItem );\n\n\t\t}\n\n\t}\n\n\t// TODO Duplicated code (Frustum)\n\n\tfunction isObjectViewable( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null )\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSpriteViewable( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSphereViewable( sphere ) {\n\n\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\tif ( numPlanes === 0 ) return true;\n\n\t\tvar planes = _this.clippingPlanes,\n\n\t\t\tcenter = sphere.center,\n\t\t\tnegRad = - sphere.radius,\n\t\t\ti = 0;\n\n\t\tdo {\n\n\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t} while ( ++ i !== numPlanes );\n\n\t\treturn true;\n\n\t}\n\n\tfunction projectObject( object, camera ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\tlights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\n\t\t\t\t\tsprites.push( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\n\n\t\t\t\tlensFlares.push( object );\n\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\n\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\tvar object = renderItem.object;\n\t\t\tvar geometry = renderItem.geometry;\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\tvar group = renderItem.group;\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\tsetMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\t\t\t_currentGeometryProgram = '';\n\n\t\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t\t\t} );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initMaterial( material, fog, object ) {\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tvar parameters = programCache.getParameters(\n\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\n\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\tvar program = materialProperties.program;\n\t\tvar programChange = true;\n\n\t\tif ( program === undefined ) {\n\n\t\t\t// new material\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t} else if ( program.code !== code ) {\n\n\t\t\t// changed glsl or parameters\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t// same glsl and uniform list\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// only rebuild uniform list\n\t\t\tprogramChange = false;\n\n\t\t}\n\n\t\tif ( programChange ) {\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\n\n\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n\t\t\tmaterialProperties.program = program;\n\t\t\tmaterial.program = program;\n\n\t\t}\n\n\t\tvar attributes = program.getAttributes();\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.morphNormals ) {\n\n\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\n\t\tif ( ! ( material instanceof THREE.ShaderMaterial ) &&\n\t\t\t\t! ( material instanceof THREE.RawShaderMaterial ) ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t}\n\n\t\tif ( material.lights ) {\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.lightsHash = _lights.hash;\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t\t\tuniforms.directionalLights.value = _lights.directional;\n\t\t\tuniforms.spotLights.value = _lights.spot;\n\t\t\tuniforms.pointLights.value = _lights.point;\n\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\n\t\t}\n\n\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\tuniformsList =\n\t\t\t\t\tTHREE.WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.uniformsList = uniformsList;\n\t\tmaterialProperties.dynamicUniforms =\n\t\t\t\tTHREE.WebGLUniforms.splitDynamic( uniformsList, uniforms );\n\n\t}\n\n\tfunction setMaterial( material ) {\n\n\t\tif ( material.side !== THREE.DoubleSide )\n\t\t\tstate.enable( _gl.CULL_FACE );\n\t\telse\n\t\t\tstate.disable( _gl.CULL_FACE );\n\n\t\tstate.setFlipSided( material.side === THREE.BackSide );\n\n\t\tif ( material.transparent === true ) {\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t} else {\n\n\t\t\tstate.setBlending( THREE.NoBlending );\n\n\t\t}\n\n\t\tstate.setDepthFunc( material.depthFunc );\n\t\tstate.setDepthTest( material.depthTest );\n\t\tstate.setDepthWrite( material.depthWrite );\n\t\tstate.setColorWrite( material.colorWrite );\n\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t}\n\n\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t_usedTextureUnits = 0;\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tif ( _clippingEnabled ) {\n\n\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t}\n\n\t\t\tif ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\tmaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( materialProperties.lightsHash !== undefined &&\n\t\t\tmaterialProperties.lightsHash !== _lights.hash ) {\n\n\t\t\tmaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( material.needsUpdate ) {\n\n\t\t\tinitMaterial( material, fog, object );\n\t\t\tmaterial.needsUpdate = false;\n\n\t\t}\n\n\t\tvar refreshProgram = false;\n\t\tvar refreshMaterial = false;\n\t\tvar refreshLights = false;\n\n\t\tvar program = materialProperties.program,\n\t\t\tp_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n\t\tif ( program.id !== _currentProgram ) {\n\n\t\t\t_gl.useProgram( program.program );\n\t\t\t_currentProgram = program.id;\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\n\t\t\tif ( camera !== _currentCamera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material.envMap ) {\n\n\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material.skinning ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// not sure why, but otherwise weird things happen\n\n\t\tif ( material.skinning ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tvar skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t}\n\n\t\t\t// refresh single material specific uniforms\n\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\t}\n\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t}\n\n\t\t\tTHREE.WebGLUniforms.upload(\n\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t}\n\n\n\t\t// common matrices\n\n\t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\n\t\t// dynamic uniforms\n\n\t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\n\t\tif ( dynUniforms !== null ) {\n\n\t\t\tTHREE.WebGLUniforms.evalDynamic(\n\t\t\t\t\tdynUniforms, m_uniforms, object, camera );\n\n\t\t\tTHREE.WebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\t// Uniforms (refresh uniforms objects)\n\n\tfunction refreshUniformsCommon ( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tuniforms.diffuse.value = material.color;\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tuniforms.map.value = material.map;\n\t\tuniforms.specularMap.value = material.specularMap;\n\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. normal map\n\t\t// 4. bump map\n\t\t// 5. alpha map\n\t\t// 6. emissive map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tvar offset = uvScaleMap.offset;\n\t\t\tvar repeat = uvScaleMap.repeat;\n\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t}\n\n\t\tuniforms.envMap.value = material.envMap;\n\n\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap instanceof THREE.CubeTexture ) ) ? 1 : - 1;\n\n\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t}\n\n\tfunction refreshUniformsLine ( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash ( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints ( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\n\t\tuniforms.map.value = material.map;\n\n\t\tif ( material.map !== null ) {\n\n\t\t\tvar offset = material.map.offset;\n\t\t\tvar repeat = material.map.repeat;\n\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsFog ( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value = fog.color;\n\n\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert ( uniforms, material ) {\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong ( uniforms, material ) {\n\n\t\tuniforms.specular.value = material.specular;\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard ( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical ( uniforms, material ) {\n\n\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\t// Lighting\n\n\tfunction setupShadows ( lights ) {\n\n\t\tvar lightShadowsLength = 0;\n\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\n\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\n\t\t\t}\n\n\t\t}\n\n\t\t_lights.shadows.length = lightShadowsLength;\n\n\t}\n\n\tfunction setupLights ( lights, camera ) {\n\n\t\tvar l, ll, light,\n\t\tr = 0, g = 0, b = 0,\n\t\tcolor,\n\t\tintensity,\n\t\tdistance,\n\t\tshadowMap,\n\n\t\tviewMatrix = camera.matrixWorldInverse,\n\n\t\tdirectionalLength = 0,\n\t\tpointLength = 0,\n\t\tspotLength = 0,\n\t\themiLength = 0;\n\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tlight = lights[ l ];\n\n\t\t\tcolor = light.color;\n\t\t\tintensity = light.intensity;\n\t\t\tdistance = light.distance;\n\n\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\tr += color.r * intensity;\n\t\t\t\tg += color.g * intensity;\n\t\t\t\tb += color.b * intensity;\n\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\n\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();\n\n\t\t\t\t}\n\n\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t// equal to inverse of the light's position\n\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\n\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\n\t\t\t}\n\n\t\t}\n\n\t\t_lights.ambient[ 0 ] = r;\n\t\t_lights.ambient[ 1 ] = g;\n\t\t_lights.ambient[ 2 ] = b;\n\n\t\t_lights.directional.length = directionalLength;\n\t\t_lights.spot.length = spotLength;\n\t\t_lights.point.length = pointLength;\n\t\t_lights.hemi.length = hemiLength;\n\n\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n\t}\n\n\t// GL state setting\n\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\tstate.setCullFace( cullFace );\n\t\tstate.setFlipSided( frontFaceDirection === THREE.FrontFaceDirectionCW );\n\n\t};\n\n\t// Textures\n\n\tfunction allocTextureUnit() {\n\n\t\tvar textureUnit = _usedTextureUnits;\n\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t}\n\n\t\t_usedTextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tthis.allocTextureUnit = allocTextureUnit;\n\n\t// this.setTexture2D = setTexture2D;\n\tthis.setTexture2D = ( function() {\n\n\t\tvar warned = false;\n\n\t\t// backwards compatibility: peel texture.texture\n\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\tif ( texture instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTexture = ( function() {\n\n\t\tvar warned = false;\n\n\t\treturn function setTexture( texture, slot ) {\n\n\t\t\tif ( ! warned ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\twarned = true;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTextureCube = ( function() {\n\n\t\tvar warned = false;\n\n\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\tif ( texture instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( texture instanceof THREE.CubeTexture ||\n\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tthis.getCurrentRenderTarget = function() {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tvar framebuffer;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\n\t\t} else {\n\n\t\t\tframebuffer = null;\n\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n\t\t}\n\n\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tstate.viewport( _currentViewport );\n\n\t\tif ( isCube ) {\n\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t}\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( framebuffer ) {\n\n\t\t\tvar restore = false;\n\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\trestore = true;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar texture = renderTarget.texture;\n\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.type !== THREE.UnsignedByteType &&\n\t\t\t\t     paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) &&\n\t\t\t\t     ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) ) &&\n\t\t\t\t     ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t// Map three.js constants to WebGL constants\n\n\tfunction paramThreeToGL ( p ) {\n\n\t\tvar extension;\n\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\tif ( p === THREE.IntType ) return _gl.INT;\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\n\n\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\n\n\t\t}\n\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t\tif ( p === THREE.DepthFormat ) return _gl.DEPTH_COMPONENT;\n\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t}\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t}\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\n\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n};\n\n// File:src/renderers/WebGLRenderTarget.js\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n * @author Marius Kintel / https://github.com/kintel\n */\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.width = width;\n\tthis.height = height;\n\n\tthis.scissor = new THREE.Vector4( 0, 0, width, height );\n\tthis.scissorTest = false;\n\n\tthis.viewport = new THREE.Vector4( 0, 0, width, height );\n\n\toptions = options || {};\n\n\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\n\n\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\tthis.depthTexture = null;\n\n};\n\nObject.assign( THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {\n\n\tsetSize: function ( width, height ) {\n\n\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n// File:src/renderers/WebGLRenderTargetCube.js\n\n/**\n * @author alteredq / http://alteredqualia.com\n */\n\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\n\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\n\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\tthis.activeMipMapLevel = 0;\n\n};\n\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\nTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\n\n// File:src/renderers/webgl/WebGLBufferRenderer.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\t_gl.drawArrays( mode, start, count );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t}\n\n\tfunction renderInstances( geometry ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar position = geometry.attributes.position;\n\n\t\tvar count = 0;\n\n\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\tcount = position.data.count;\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t} else {\n\n\t\t\tcount = position.count;\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t}\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n\t}\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n};\n\n// File:src/renderers/webgl/WebGLClipping.js\n\nTHREE.WebGLClipping = function() {\n\n\tvar scope = this,\n\n\t\tglobalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false,\n\n\t\tplane = new THREE.Plane(),\n\t\tviewNormalMatrix = new THREE.Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\n\tthis.init = function( planes, enableLocalClipping, camera ) {\n\n\t\tvar enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function() {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function() {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\n\t\tif ( ! localClippingEnabled ||\n\t\t\t\tplanes === null || planes.length === 0 ||\n\t\t\t\trenderingShadows && ! clipShadows ) {\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tcache.clippingState = dstArray;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\tdstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).\n\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\treturn dstArray;\n\n\t}\n\n};\n\n\n// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tvar type, size;\n\n\tfunction setIndex( index ) {\n\n\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\ttype = _gl.UNSIGNED_INT;\n\t\t\tsize = 4;\n\n\t\t} else {\n\n\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\t\tsize = 2;\n\n\t\t}\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\t_gl.drawElements( mode, count, type, start * size );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t}\n\n\tfunction renderInstances( geometry, start, count ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t}\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n};\n\n// File:src/renderers/webgl/WebGLExtensions.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLExtensions = function ( gl ) {\n\n\tvar extensions = {};\n\n\tthis.get = function ( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tvar extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLCapabilities.js\n\nTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\n\n\tvar maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tthis.getMaxAnisotropy = getMaxAnisotropy;\n\tthis.getMaxPrecision = getMaxPrecision;\n\n\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\n\n\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\tthis.vertexTextures = this.maxVertexTextures > 0;\n\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n\n\tvar _maxPrecision = getMaxPrecision( this.precision );\n\n\tif ( _maxPrecision !== this.precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\n\t\tthis.precision = _maxPrecision;\n\n\t}\n\n\tif ( this.logarithmicDepthBuffer ) {\n\n\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\n\n\t}\n\n};\n\n// File:src/renderers/webgl/WebGLGeometries.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLGeometries = function ( gl, properties, info ) {\n\n\tvar geometries = {};\n\n\tfunction get( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n\t\t\treturn geometries[ geometry.id ];\n\n\t\t}\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tvar buffergeometry;\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tbuffergeometry = geometry;\n\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\n\n\t\t\t}\n\n\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t}\n\n\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tvar geometry = event.target;\n\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\tdeleteAttribute( buffergeometry.index );\n\n\t\t}\n\n\t\tdeleteAttributes( buffergeometry.attributes );\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\t// TODO\n\n\t\tvar property = properties.get( geometry );\n\n\t\tif ( property.wireframe ) {\n\n\t\t\tdeleteAttribute( property.wireframe );\n\n\t\t}\n\n\t\tproperties.delete( geometry );\n\n\t\tvar bufferproperty = properties.get( buffergeometry );\n\n\t\tif ( bufferproperty.wireframe ) {\n\n\t\t\tdeleteAttribute( bufferproperty.wireframe );\n\n\t\t}\n\n\t\tproperties.delete( buffergeometry );\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction getAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t}\n\n\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t}\n\n\tfunction deleteAttribute( attribute ) {\n\n\t\tvar buffer = getAttributeBuffer( attribute );\n\n\t\tif ( buffer !== undefined ) {\n\n\t\t\tgl.deleteBuffer( buffer );\n\t\t\tremoveAttributeBuffer( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction deleteAttributes( attributes ) {\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tdeleteAttribute( attributes[ name ] );\n\n\t\t}\n\n\t}\n\n\tfunction removeAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\tproperties.delete( attribute.data );\n\n\t\t} else {\n\n\t\t\tproperties.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tthis.get = get;\n\n};\n\n// File:src/renderers/webgl/WebGLLights.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLLights = function () {\n\n\tvar lights = {};\n\n\tthis.get = function ( light ) {\n\n\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\treturn lights[ light.id ];\n\n\t\t}\n\n\t\tvar uniforms;\n\n\t\tswitch ( light.type ) {\n\n\t\t\tcase 'DirectionalLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\tdistance: 0,\n\t\t\t\t\tconeCos: 0,\n\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\tdistance: 0,\n\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tskyColor: new THREE.Color(),\n\t\t\t\t\tgroundColor: new THREE.Color()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tlights[ light.id ] = uniforms;\n\n\t\treturn uniforms;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLObjects.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLObjects = function ( gl, properties, info ) {\n\n\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\n\n\t//\n\n\tfunction update( object ) {\n\n\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n\t\tvar geometry = geometries.get( object );\n\n\t\tif ( object.geometry instanceof THREE.Geometry ) {\n\n\t\t\tgeometry.updateFromObject( object );\n\n\t\t}\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\tif ( index !== null ) {\n\n\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t}\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction updateAttribute( attribute, bufferType ) {\n\n\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\n\n\t\tvar attributeProperties = properties.get( data );\n\n\t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n\t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n\t\t} else if ( attributeProperties.version !== data.version ) {\n\n\t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n\t\t}\n\n\t}\n\n\tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n\t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\tgl.bufferData( bufferType, data.array, usage );\n\n\t\tattributeProperties.version = data.version;\n\n\t}\n\n\tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n\t\t} else if ( data.updateRange.count === 0 ) {\n\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t} else {\n\n\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n\t\t\tdata.updateRange.count = 0; // reset range\n\n\t\t}\n\n\t\tattributeProperties.version = data.version;\n\n\t}\n\n\tfunction getAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t}\n\n\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tvar property = properties.get( geometry );\n\n\t\tif ( property.wireframe !== undefined ) {\n\n\t\t\treturn property.wireframe;\n\n\t\t}\n\n\t\tvar indices = [];\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\t\tvar position = attributes.position;\n\n\t\t// console.time( 'wireframe' );\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar edges = {};\n\t\t\tvar array = index.array;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\n\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\n\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar array = attributes.position.array;\n\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tvar a = i + 0;\n\t\t\t\tvar b = i + 1;\n\t\t\t\tvar c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// console.timeEnd( 'wireframe' );\n\n\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\n\n\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\tproperty.wireframe = attribute;\n\n\t\treturn attribute;\n\n\t}\n\n\tfunction checkEdge( edges, a, b ) {\n\n\t\tif ( a > b ) {\n\n\t\t\tvar tmp = a;\n\t\t\ta = b;\n\t\t\tb = tmp;\n\n\t\t}\n\n\t\tvar list = edges[ a ];\n\n\t\tif ( list === undefined ) {\n\n\t\t\tedges[ a ] = [ b ];\n\t\t\treturn true;\n\n\t\t} else if ( list.indexOf( b ) === -1 ) {\n\n\t\t\tlist.push( b );\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tthis.getAttributeBuffer = getAttributeBuffer;\n\tthis.getWireframeAttribute = getWireframeAttribute;\n\n\tthis.update = update;\n\n};\n\n// File:src/renderers/webgl/WebGLProgram.js\n\nTHREE.WebGLProgram = ( function () {\n\n\tvar programIdCount = 0;\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase THREE.LinearEncoding:\n\t\t\t\treturn [ 'Linear','( value )' ];\n\t\t\tcase THREE.sRGBEncoding:\n\t\t\t\treturn [ 'sRGB','( value )' ];\n\t\t\tcase THREE.RGBEEncoding:\n\t\t\t\treturn [ 'RGBE','( value )' ];\n\t\t\tcase THREE.RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t\t\tcase THREE.RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t\t\tcase THREE.RGBDEncoding:\n\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t\t\tcase THREE.GammaEncoding:\n\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase THREE.LinearToneMapping:\n\t\t\t\ttoneMappingName = \"Linear\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.ReinhardToneMapping:\n\t\t\t\ttoneMappingName = \"Reinhard\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = \"Uncharted2\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.CineonToneMapping:\n\t\t\t\ttoneMappingName = \"OptimizedCineon\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n\t}\n\n\tfunction parseIncludes( string ) {\n\n\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\n\t\tfunction replace( match, include ) {\n\n\t\t\tvar replace = THREE.ShaderChunk[ include ];\n\n\t\t\tif ( replace === undefined ) {\n\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t\t}\n\n\t\t\treturn parseIncludes( replace );\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction unrollLoops( string ) {\n\n\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\t\tfunction replace( match, start, end, snippet ) {\n\n\t\t\tvar unroll = '';\n\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t\t}\n\n\t\t\treturn unroll;\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\treturn function WebGLProgram( renderer, code, material, parameters ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar extensions = material.extensions;\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = material.__webglShader.vertexShader;\n\t\tvar fragmentShader = material.__webglShader.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t}\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase THREE.CubeReflectionMapping:\n\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.CubeUVReflectionMapping:\n\t\t\t\tcase THREE.CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.EquirectangularReflectionMapping:\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase THREE.MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t// console.log( 'building new program ' );\n\n\t\t//\n\n\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( material instanceof THREE.RawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = parseIncludes( vertexShader, parameters );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\n\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n\t\tif ( material instanceof THREE.ShaderMaterial === false ) {\n\n\t\t\tvertexShader = unrollLoops( vertexShader );\n\t\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function() {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms =\n\t\t\t\t\t\tnew THREE.WebGLUniforms( gl, program, renderer );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function() {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function() {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tuniforms: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tattributes: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\n\t\t//\n\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/WebGLPrograms.js\n\nTHREE.WebGLPrograms = function ( renderer, capabilities ) {\n\n\tvar programs = [];\n\n\tvar shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points'\n\t};\n\n\tvar parameterNames = [\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"roughnessMap\", \"metalnessMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n\t];\n\n\n\tfunction allocateBones ( object ) {\n\n\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = nVertexMatrices;\n\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\tvar encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = THREE.LinearEncoding;\n\n\t\t} else if ( map instanceof THREE.Texture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\tif ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\tencoding = THREE.GammaEncoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\n\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxBones = allocateBones( object );\n\t\tvar precision = renderer.getPrecision();\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\n\t\tvar parameters = {\n\n\t\t\tshaderID: shaderID,\n\n\t\t\tprecision: precision,\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\tenvMap: !! material.envMap,\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexColors: material.vertexColors,\n\n\t\t\tfog: fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\n\n\t\t\tflatShading: material.shading === THREE.FlatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumClippingPlanes: nClipPlanes,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\n\t\t\tflipSided: material.side === THREE.BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t};\n\n\t\treturn parameters;\n\n\t};\n\n\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\tvar array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( material.fragmentShader );\n\t\t\tarray.push( material.vertexShader );\n\n\t\t}\n\n\t\tif ( material.defines !== undefined ) {\n\n\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t}\n\n\t\treturn array.join();\n\n\t};\n\n\tthis.acquireProgram = function ( material, parameters, code ) {\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tvar programInfo = programs[ p ];\n\n\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\tprogram = programInfo;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t};\n\n\tthis.releaseProgram = function( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tvar i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t};\n\n\t// Exposed for resource monitoring & error feedback via renderer.info:\n\tthis.programs = programs;\n\n};\n\n// File:src/renderers/webgl/WebGLProperties.js\n\n/**\n* @author fordacious / fordacious.github.io\n*/\n\nTHREE.WebGLProperties = function () {\n\n\tvar properties = {};\n\n\tthis.get = function ( object ) {\n\n\t\tvar uuid = object.uuid;\n\t\tvar map = properties[ uuid ];\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties[ uuid ] = map;\n\n\t\t}\n\n\t\treturn map;\n\n\t};\n\n\tthis.delete = function ( object ) {\n\n\t\tdelete properties[ object.uuid ];\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tproperties = {};\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLShader.js\n\nTHREE.WebGLShader = ( function () {\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\treturn function WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/WebGLShadowMap.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {\n\n\tvar _gl = _renderer.context,\n\t_state = _renderer.state,\n\t_frustum = new THREE.Frustum(),\n\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t_lightShadows = _lights.shadows,\n\n\t_shadowMapSize = new THREE.Vector2(),\n\n\t_lookTarget = new THREE.Vector3(),\n\t_lightPositionWorld = new THREE.Vector3(),\n\n\t_renderList = [],\n\n\t_MorphingFlag = 1,\n\t_SkinningFlag = 2,\n\n\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t_materialCache = {};\n\n\tvar cubeDirections = [\n\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\n\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\n\t];\n\n\tvar cubeUps = [\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\n\t];\n\n\tvar cube2DViewPorts = [\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\n\t];\n\n\t// init\n\n\tvar depthMaterialTemplate = new THREE.MeshDepthMaterial();\n\tdepthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;\n\tdepthMaterialTemplate.clipping = true;\n\n\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\n\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\n\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t\tdepthMaterial.morphTargets = useMorphing;\n\t\tdepthMaterial.skinning = useSkinning;\n\n\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\n\t\t\tdefines: {\n\t\t\t\t'USE_SHADOWMAP': ''\n\t\t\t},\n\t\t\tuniforms: distanceUniforms,\n\t\t\tvertexShader: distanceShader.vertexShader,\n\t\t\tfragmentShader: distanceShader.fragmentShader,\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning,\n\t\t\tclipping: true\n\t\t} );\n\n\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t}\n\n\t//\n\n\tvar scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = THREE.PCFShadowMap;\n\n\tthis.renderReverseSided = true;\n\tthis.renderSingleSided = true;\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( _lightShadows.length === 0 ) return;\n\n\t\t// Set GL state for depth map.\n\t\t_state.clearColor( 1, 1, 1, 1 );\n\t\t_state.disable( _gl.BLEND );\n\t\t_state.setDepthTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tvar faceCount, isPointLight;\n\n\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n\t\t\tvar light = _lightShadows[ i ];\n\t\t\tvar shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tif ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tfaceCount = 6;\n\t\t\t\tisPointLight = true;\n\n\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t// following orientation:\n\t\t\t\t//\n\t\t\t\t//  xzXZ\n\t\t\t\t//   y Y\n\t\t\t\t//\n\t\t\t\t// X - Positive x direction\n\t\t\t\t// x - Negative x direction\n\t\t\t\t// Y - Positive y direction\n\t\t\t\t// y - Negative y direction\n\t\t\t\t// Z - Positive z direction\n\t\t\t\t// z - Negative z direction\n\n\t\t\t\t// positive X\n\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative X\n\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Z\n\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative Z\n\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Y\n\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t// negative Y\n\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t} else {\n\n\t\t\t\tfaceCount = 1;\n\t\t\t\tisPointLight = false;\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tvar pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\n\n\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow instanceof THREE.SpotLightShadow ) {\n\n\t\t\t\tshadow.update( light );\n\n\t\t\t}\n\n\t\t\tvar shadowMap = shadow.map;\n\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t_renderer.clear();\n\n\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t// run a single pass if not\n\n\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t}\n\n\t\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n\t\t\t\t// compute shadow matrix\n\n\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t);\n\n\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t_renderList.length = 0;\n\n\t\t\t\tprojectObject( scene, camera, shadowCamera );\n\n\t\t\t\t// render shadow map\n\t\t\t\t// render regular objects\n\n\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar object = _renderList[ j ];\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Restore GL state.\n\t\tvar clearColor = _renderer.getClearColor(),\n\t\tclearAlpha = _renderer.getClearAlpha();\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n\t\tscope.needsUpdate = false;\n\n\t};\n\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tvar result = null;\n\n\t\tvar materialVariants = _depthMaterials;\n\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\tif ( isPointLight ) {\n\n\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t}\n\n\t\tif ( ! customMaterial ) {\n\n\t\t\tvar useMorphing = geometry.morphTargets !== undefined &&\n\t\t\t\t\tgeometry.morphTargets.length > 0 && material.morphTargets;\n\n\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\n\n\t\t\tvar variantIndex = 0;\n\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t} else {\n\n\t\t\tresult = customMaterial;\n\n\t\t}\n\n\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t material.clipShadows === true &&\n\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tvar side = material.side;\n\n\t\tif ( scope.renderSingleSided && side == THREE.DoubleSide ) {\n\n\t\t\tside = THREE.FrontSide;\n\n\t\t}\n\n\t\tif ( scope.renderReverseSided ) {\n\n\t\t\tif ( side === THREE.FrontSide ) side = THREE.BackSide;\n\t\t\telse if ( side === THREE.BackSide ) side = THREE.FrontSide;\n\n\t\t}\n\n\t\tresult.side = side;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction projectObject( object, camera, shadowCamera ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {\n\n\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t_renderList.push( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/renderers/webgl/WebGLState.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\n\n\tvar _this = this;\n\n\tthis.buffers = {\n\t\tcolor: new THREE.WebGLColorBuffer( gl, this ),\n\t\tdepth: new THREE.WebGLDepthBuffer( gl, this ),\n\t\tstencil: new THREE.WebGLStencilBuffer( gl, this )\n\t};\n\n\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\tvar capabilities = {};\n\n\tvar compressedTextureFormats = null;\n\n\tvar currentBlending = null;\n\tvar currentBlendEquation = null;\n\tvar currentBlendSrc = null;\n\tvar currentBlendDst = null;\n\tvar currentBlendEquationAlpha = null;\n\tvar currentBlendSrcAlpha = null;\n\tvar currentBlendDstAlpha = null;\n\tvar currentPremultipledAlpha = false;\n\n\tvar currentFlipSided = null;\n\tvar currentCullFace = null;\n\n\tvar currentLineWidth = null;\n\n\tvar currentPolygonOffsetFactor = null;\n\tvar currentPolygonOffsetUnits = null;\n\n\tvar currentScissorTest = null;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n\tvar currentTextureSlot = null;\n\tvar currentBoundTextures = {};\n\n\tvar currentScissor = new THREE.Vector4();\n\tvar currentViewport = new THREE.Vector4();\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tvar texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tvar emptyTextures = {};\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t//\n\n\tthis.init = function () {\n\n\t\tthis.clearColor( 0, 0, 0, 1 );\n\t\tthis.clearDepth( 1 );\n\t\tthis.clearStencil( 0 );\n\n\t\tthis.enable( gl.DEPTH_TEST );\n\t\tthis.setDepthFunc( THREE.LessEqualDepth );\n\n\t\tthis.setFlipSided( false );\n\t\tthis.setCullFace( THREE.CullFaceBack );\n\t\tthis.enable( gl.CULL_FACE );\n\n\t\tthis.enable( gl.BLEND );\n\t\tthis.setBlending( THREE.NormalBlending );\n\n\t};\n\n\tthis.initAttributes = function () {\n\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t};\n\n\tthis.enableAttribute = function ( attribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t}\n\n\t};\n\n\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t};\n\n\tthis.disableUnusedAttributes = function () {\n\n\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.enable = function ( id ) {\n\n\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tcapabilities[ id ] = true;\n\n\t\t}\n\n\t};\n\n\tthis.disable = function ( id ) {\n\n\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tcapabilities[ id ] = false;\n\n\t\t}\n\n\t};\n\n\tthis.getCompressedTextureFormats = function () {\n\n\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\tcompressedTextureFormats = [];\n\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn compressedTextureFormats;\n\n\t};\n\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending !== THREE.NoBlending ) {\n\n\t\t\tthis.enable( gl.BLEND );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.BLEND );\n\t\t\tcurrentBlending = blending; // no blending, that is\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\tif ( blending === THREE.AdditiveBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t}\n\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t}\n\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t}\n\n\t\tif ( blending === THREE.CustomBlending ) {\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t}\n\n\t};\n\n\t// TODO Deprecate\n\n\tthis.setColorWrite = function ( colorWrite ) {\n\n\t\tthis.buffers.color.setMask( colorWrite );\n\n\t};\n\n\tthis.setDepthTest = function ( depthTest ) {\n\n\t\tthis.buffers.depth.setTest( depthTest );\n\n\t};\n\n\tthis.setDepthWrite = function ( depthWrite ) {\n\n\t\tthis.buffers.depth.setMask( depthWrite );\n\n\t};\n\n\tthis.setDepthFunc = function ( depthFunc ) {\n\n\t\tthis.buffers.depth.setFunc( depthFunc );\n\n\t};\n\n\tthis.setStencilTest = function ( stencilTest ) {\n\n\t\tthis.buffers.stencil.setTest( stencilTest );\n\n\t};\n\n\tthis.setStencilWrite = function ( stencilWrite ) {\n\n\t\tthis.buffers.stencil.setMask( stencilWrite );\n\n\t};\n\n\tthis.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\tthis.buffers.stencil.setFunc( stencilFunc, stencilRef, stencilMask );\n\n\t};\n\n\tthis.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\tthis.buffers.stencil.setOp( stencilFail, stencilZFail, stencilZPass );\n\n\t};\n\n\t//\n\n\tthis.setFlipSided = function ( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t};\n\n\tthis.setCullFace = function ( cullFace ) {\n\n\t\tif ( cullFace !== THREE.CullFaceNone ) {\n\n\t\t\tthis.enable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === THREE.CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t};\n\n\tthis.setLineWidth = function ( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tgl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t};\n\n\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn currentScissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( scissorTest ) {\n\n\t\tcurrentScissorTest = scissorTest;\n\n\t\tif ( scissorTest ) {\n\n\t\t\tthis.enable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t};\n\n\t// texture\n\n\tthis.activeTexture = function ( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t};\n\n\tthis.bindTexture = function ( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t_this.activeTexture();\n\n\t\t}\n\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t};\n\n\tthis.compressedTexImage2D = function () {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( error );\n\n\t\t}\n\n\t};\n\n\tthis.texImage2D = function () {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( error );\n\n\t\t}\n\n\t};\n\n\t// TODO Deprecate\n\n\tthis.clearColor = function ( r, g, b, a ) {\n\n\t\tthis.buffers.color.setClear( r, g, b, a );\n\n\t};\n\n\tthis.clearDepth = function ( depth ) {\n\n\t\tthis.buffers.depth.setClear( depth );\n\n\t};\n\n\tthis.clearStencil = function ( stencil ) {\n\n\t\tthis.buffers.stencil.setClear( stencil );\n\n\t};\n\n\t//\n\n\tthis.scissor = function ( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t};\n\n\tthis.viewport = function ( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tthis.reset = function () {\n\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcapabilities = {};\n\n\t\tcompressedTextureFormats = null;\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentBlending = null;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tthis.buffers.color.reset();\n\t\tthis.buffers.depth.reset();\n\t\tthis.buffers.stencil.reset();\n\n\t};\n\n};\n\nTHREE.WebGLColorBuffer = function ( gl, state ) {\n\n\tvar locked = false;\n\n\tvar color = new THREE.Vector4();\n\tvar currentColorMask = null;\n\tvar currentColorClear = new THREE.Vector4();\n\n\tthis.setMask = function ( colorMask ) {\n\n\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\tcurrentColorMask = colorMask;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( r, g, b, a ) {\n\n\t\tcolor.set( r, g, b, a );\n\n\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\tgl.clearColor( r, g, b, a );\n\t\t\tcurrentColorClear.copy( color );\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentColorMask = null;\n\t\tcurrentColorClear = new THREE.Vector4();\n\n\t};\n\n};\n\nTHREE.WebGLDepthBuffer = function( gl, state ) {\n\n\tvar locked = false;\n\n\tvar currentDepthMask = null;\n\tvar currentDepthFunc = null;\n\tvar currentDepthClear = null;\n\n\tthis.setTest = function ( depthTest ) {\n\n\t\tif ( depthTest ) {\n\n\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t} else {\n\n\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t}\n\n\t};\n\n\tthis.setMask = function( depthMask ){\n\n\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\tgl.depthMask( depthMask );\n\t\t\tcurrentDepthMask = depthMask;\n\n\t\t}\n\n\t};\n\n\tthis.setFunc = function ( depthFunc ) {\n\n\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\tif ( depthFunc ) {\n\n\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\tcase THREE.NeverDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.AlwaysDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.LessDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.LessEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.EqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.GreaterEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.GreaterDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.NotEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t}\n\n\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( depth ) {\n\n\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\tgl.clearDepth( depth );\n\t\t\tcurrentDepthClear = depth;\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentDepthMask = null;\n\t\tcurrentDepthFunc = null;\n\t\tcurrentDepthClear = null;\n\n\t};\n\n};\n\nTHREE.WebGLStencilBuffer = function ( gl, state ) {\n\n\tvar locked = false;\n\n\tvar currentStencilMask = null;\n\tvar currentStencilFunc = null;\n\tvar currentStencilRef = null;\n\tvar currentStencilFuncMask = null;\n\tvar currentStencilFail  = null;\n\tvar currentStencilZFail = null;\n\tvar currentStencilZPass = null;\n\tvar currentStencilClear = null;\n\n\tthis.setTest = function ( stencilTest ) {\n\n\t\tif ( stencilTest ) {\n\n\t\t\tstate.enable( gl.STENCIL_TEST );\n\n\t\t} else {\n\n\t\t\tstate.disable( gl.STENCIL_TEST );\n\n\t\t}\n\n\t};\n\n\tthis.setMask = function ( stencilMask ) {\n\n\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\tgl.stencilMask( stencilMask );\n\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t}\n\n\t};\n\n\tthis.setFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\n\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\tcurrentStencilRef  = stencilRef;\n\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t}\n\n\t};\n\n\tthis.setOp\t = function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t     currentStencilZFail !== stencilZFail ||\n\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\n\t\t\tcurrentStencilFail  = stencilFail;\n\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( stencil ) {\n\n\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\tgl.clearStencil( stencil );\n\t\t\tcurrentStencilClear = stencil;\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentStencilMask = null;\n\t\tcurrentStencilFunc = null;\n\t\tcurrentStencilRef = null;\n\t\tcurrentStencilFuncMask = null;\n\t\tcurrentStencilFail = null;\n\t\tcurrentStencilZFail = null;\n\t\tcurrentStencilZPass = null;\n\t\tcurrentStencilClear = null;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLTextures.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLTextures = function ( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\n\tvar _infoMemory = info.memory;\n\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n\t//\n\n\tfunction clampToMaxSize ( image, maxSize ) {\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t// premultiplied alpha.\n\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction makePowerOfTwo( image ) {\n\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\n\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\n\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\n\n\t\treturn false;\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback ( f ) {\n\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tvar texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\t_infoMemory.textures --;\n\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tvar renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t_infoMemory.textures --;\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t// cube texture\n\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t} else {\n\n\t\t\t// 2D texture\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\t// remove all webgl properties\n\t\tproperties.delete( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t}\n\n\t\tproperties.delete( renderTarget.texture );\n\t\tproperties.delete( renderTarget );\n\n\t}\n\n\t//\n\n\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube ( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image.length === 6 ) {\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t_infoMemory.textures ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\n\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setTextureCubeDynamic ( texture, slot ) {\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t}\n\n\tfunction setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {\n\n\t\tvar extension;\n\n\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension ) {\n\n\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t_infoMemory.textures ++;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\timage = makePowerOfTwo( image );\n\n\t\t}\n\n\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\tglFormat = paramThreeToGL( texture.format ),\n\t\tglType = paramThreeToGL( texture.type );\n\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\tif ( texture instanceof THREE.DepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\tif ( texture.type === THREE.FloatType ) {\n\n\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t}\n\n\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture instanceof THREE.DataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t}\n\n\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\n\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage ( renderbuffer, renderTarget ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture ( framebuffer, renderTarget ) {\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( !( renderTarget.depthTexture instanceof THREE.DepthTexture ) ) {\n\n\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t_infoMemory.textures ++;\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t} else {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tvar texture = renderTarget.texture;\n\n\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t\t\t\ttexture.minFilter !== THREE.NearestFilter &&\n\t\t\t\ttexture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t_gl.generateMipmap( target );\n\t\t\tstate.bindTexture( target, null );\n\n\t\t}\n\n\t}\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n};\n\n// File:src/renderers/webgl/WebGLUniforms.js\n\n/**\n *\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [renderer] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'renderer' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (renderer factorizations):\n *\n * .upload( gl, seq, values, renderer )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n * .splitDynamic( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with dynamic entry and removes them from 'seq'\n *\n *\n * Methods of the top-level container (renderer factorizations):\n *\n * .setValue( gl, name, value )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .set( gl, obj, prop )\n *\n * \t\tsets uniform from object and property with same name than uniform\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n *\n * @author tschw\n *\n */\n\nTHREE.WebGLUniforms = ( function() { // scope\n\n\tvar emptyTexture = new THREE.Texture();\n\tvar emptyCubeTexture = new THREE.CubeTexture();\n\n\t// --- Base for inner nodes (including the root) ---\n\n\tvar UniformContainer = function() {\n\n\t\t\tthis.seq = [];\n\t\t\tthis.map = {};\n\n\t\t},\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\t\tarrayCacheF32 = [],\n\t\tarrayCacheI32 = [],\n\n\t\tuncacheTemporaryArrays = function() {\n\n\t\t\tarrayCacheF32.length = 0;\n\t\t\tarrayCacheI32.length = 0;\n\n\t\t},\n\n\t// Flattening for arrays of vectors and matrices\n\n\t\tflatten = function( array, nBlocks, blockSize ) {\n\n\t\t\tvar firstElem = array[ 0 ];\n\n\t\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t\t// unoptimized: ! isNaN( firstElem )\n\t\t\t// see http://jacksondunstan.com/articles/983\n\n\t\t\tvar n = nBlocks * blockSize,\n\t\t\t\tr = arrayCacheF32[ n ];\n\n\t\t\tif ( r === undefined ) {\n\n\t\t\t\tr = new Float32Array( n );\n\t\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t\t}\n\n\t\t\tif ( nBlocks !== 0 ) {\n\n\t\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\t\toffset += blockSize;\n\t\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn r;\n\n\t\t},\n\n\t// Texture unit allocation\n\n\t\tallocTexUnits = function( renderer, n ) {\n\n\t\t\tvar r = arrayCacheI32[ n ];\n\n\t\t\tif ( r === undefined ) {\n\n\t\t\t\tr = new Int32Array( n );\n\t\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tr[ i ] = renderer.allocTextureUnit();\n\n\t\t\treturn r;\n\n\t\t},\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t\t// Single scalar\n\n\t\tsetValue1f = function( gl, v ) { gl.uniform1f( this.addr, v ); },\n\t\tsetValue1i = function( gl, v ) { gl.uniform1i( this.addr, v ); },\n\n\t\t// Single float vector (from flat array or THREE.VectorN)\n\n\t\tsetValue2fv = function( gl, v ) {\n\n\t\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t\t\telse gl.uniform2f( this.addr, v.x, v.y );\n\n\t\t},\n\n\t\tsetValue3fv = function( gl, v ) {\n\n\t\t\tif ( v.x !== undefined )\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t\t\telse if ( v.r !== undefined )\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t\t\telse\n\t\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t},\n\n\t\tsetValue4fv = function( gl, v ) {\n\n\t\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t},\n\n\t\t// Single matrix (from flat array or MatrixN)\n\n\t\tsetValue2fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\tsetValue3fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\tsetValue4fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\t// Single texture (2D / Cube)\n\n\t\tsetValueT1 = function( gl, v, renderer ) {\n\n\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\n\t\t},\n\n\t\tsetValueT6 = function( gl, v, renderer ) {\n\n\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n\t\t},\n\n\t\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\t\tsetValue2iv = function( gl, v ) { gl.uniform2iv( this.addr, v ); },\n\t\tsetValue3iv = function( gl, v ) { gl.uniform3iv( this.addr, v ); },\n\t\tsetValue4iv = function( gl, v ) { gl.uniform4iv( this.addr, v ); },\n\n\t\t// Helper to pick the right setter for the singular case\n\n\t\tgetSingularSetter = function( type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\t\t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Array of scalars\n\n\t\tsetValue1fv = function( gl, v ) { gl.uniform1fv( this.addr, v ); },\n\t\tsetValue1iv = function( gl, v ) { gl.uniform1iv( this.addr, v ); },\n\n\t\t// Array of vectors (flat or from THREE classes)\n\n\t\tsetValueV2a = function( gl, v ) {\n\n\t\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n\t\t},\n\n\t\tsetValueV3a = function( gl, v ) {\n\n\t\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n\t\t},\n\n\t\tsetValueV4a = function( gl, v ) {\n\n\t\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n\t\t},\n\n\t\t// Array of matrices (flat or from THREE clases)\n\n\t\tsetValueM2a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n\t\t},\n\n\t\tsetValueM3a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n\t\t},\n\n\t\tsetValueM4a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n\t\t},\n\n\t\t// Array of textures (2D / Cube)\n\n\t\tsetValueT1a = function( gl, v, renderer ) {\n\n\t\t\tvar n = v.length,\n\t\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetValueT6a = function( gl, v, renderer ) {\n\n\t\t\tvar n = v.length,\n\t\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t\t}\n\n\t\t},\n\n\n\t\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\t\tgetPureArraySetter = function( type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t\t}\n\n\t\t},\n\n\t// --- Uniform Classes ---\n\n\t\tSingleUniform = function SingleUniform( id, activeInfo, addr ) {\n\n\t\t\tthis.id = id;\n\t\t\tthis.addr = addr;\n\t\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t\t// this.path = activeInfo.name; // DEBUG\n\n\t\t},\n\n\t\tPureArrayUniform = function( id, activeInfo, addr ) {\n\n\t\t\tthis.id = id;\n\t\t\tthis.addr = addr;\n\t\t\tthis.size = activeInfo.size;\n\t\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t\t// this.path = activeInfo.name; // DEBUG\n\n\t\t},\n\n\t\tStructuredUniform = function( id ) {\n\n\t\t\tthis.id = id;\n\n\t\t\tUniformContainer.call( this ); // mix-in\n\n\t\t};\n\n\tStructuredUniform.prototype.setValue = function( gl, value ) {\n\n\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t\t// are not allowed in structured uniforms.\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ] );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g,\n\t\t// extracts\n\t\t// \t- the identifier (member name or array index)\n\t\t//  - followed by an optional right bracket (found when array index)\n\t\t//  - followed by an optional left bracket or dot (type of subscript)\n\t\t//\n\t\t// Note: These portions can be read in a non-overlapping fashion and\n\t\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t\t// in the uniform names.\n\n\t\taddUniform = function( container, uniformObject ) {\n\n\t\t\tcontainer.seq.push( uniformObject );\n\t\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t\t},\n\n\t\tparseUniform = function( activeInfo, addr, container ) {\n\n\t\t\tvar path = activeInfo.name,\n\t\t\t\tpathLength = path.length;\n\n\t\t\t// reset RegExp object, because of the early exit of a previous run\n\t\t\tRePathPart.lastIndex = 0;\n\n\t\t\tfor (; ;) {\n\n\t\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\t\tid = match[ 1 ],\n\t\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\t\t\tif ( subscript === undefined ||\n\t\t\t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t} else {\n\t\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\t\tvar map = container.map,\n\t\t\t\t\t\tnext = map[ id ];\n\n\t\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontainer = next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t// Root Container\n\n\t\tWebGLUniforms = function WebGLUniforms( gl, program, renderer ) {\n\n\t\t\tUniformContainer.call( this );\n\n\t\t\tthis.renderer = renderer;\n\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\t\tpath = info.name,\n\t\t\t\t\taddr = gl.getUniformLocation( program, path );\n\n\t\t\t\tparseUniform( info, addr, this );\n\n\t\t\t}\n\n\t\t};\n\n\n\tWebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.set = function( gl, object, name ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\n\t\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\tWebGLUniforms.splitDynamic = function( seq, values ) {\n\n\t\tvar r = null,\n\t\t\tn = seq.length,\n\t\t\tw = 0;\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v && v.dynamic === true ) {\n\n\t\t\t\tif ( r === null ) r = [];\n\t\t\t\tr.push( u );\n\n\t\t\t} else {\n\n\t\t\t\t// in-place compact 'seq', removing the matches\n\t\t\t\tif ( w < i ) seq[ w ] = u;\n\t\t\t\t++ w;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( w < n ) seq.length = w;\n\n\t\treturn r;\n\n\t};\n\n\tWebGLUniforms.evalDynamic = function( seq, values, object, camera ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar v = values[ seq[ i ].id ],\n\t\t\t\tf = v.onUpdateCallback;\n\n\t\t\tif ( f !== undefined ) f.call( v, object, camera );\n\n\t\t}\n\n\t};\n\n\treturn WebGLUniforms;\n\n} )();\n\n// File:src/renderers/webgl/plugins/LensFlarePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlarePlugin = function ( renderer, flares ) {\n\n\tvar gl = renderer.context;\n\tvar state = renderer.state;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar shader, program, attributes, uniforms;\n\n\tvar tempTexture, occlusionTexture;\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 1, - 1,  0, 0,\n\t\t\t 1, - 1,  1, 0,\n\t\t\t 1,  1,  1, 1,\n\t\t\t- 1,  1,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\t// buffers\n\n\t\tvertexBuffer     = gl.createBuffer();\n\t\telementBuffer    = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t// textures\n\n\t\ttempTexture      = gl.createTexture();\n\t\tocclusionTexture = gl.createTexture();\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tshader = {\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t// pink square\n\n\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n\t\t\t\t\t// restore\n\n\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t// flare\n\n\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" )\n\n\t\t};\n\n\t\tprogram = createProgram( shader );\n\n\t\tattributes = {\n\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t};\n\n\t\tuniforms = {\n\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t};\n\n\t}\n\n\t/*\n\t * Render lens flares\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t *         reads these back and calculates occlusion.\n\t */\n\n\tthis.render = function ( scene, camera, viewport ) {\n\n\t\tif ( flares.length === 0 ) return;\n\n\t\tvar tempPosition = new THREE.Vector3();\n\n\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\thalfViewportHeight = viewport.w * 0.5;\n\n\t\tvar size = 16 / viewport.w,\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\n\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\n\n\t\tvar validArea = new THREE.Box2();\n\n\t\tvalidArea.min.set( 0, 0 );\n\t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.vertex );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\t// loop through all lens flares to update their occlusion and positions\n\t\t// setup gl and common used attribs/uniforms\n\n\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.setDepthWrite( false );\n\n\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\tsize = 16 / viewport.w;\n\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t// calc object screen position\n\n\t\t\tvar flare = flares[ i ];\n\n\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n\t\t\t// setup arrays for gl programs\n\n\t\t\tscreenPosition.copy( tempPosition );\n\n\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t// screen cull\n\n\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t// render pink quad\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t// restore graphics\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// update object positions\n\n\t\t\t\tflare.positionScreen.copy( screenPosition );\n\n\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t}\n\n\t\t\t\t// render flares\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\tstate.enable( gl.BLEND );\n\n\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\t\tstate.enable( gl.DEPTH_TEST );\n\t\tstate.setDepthWrite( true );\n\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram ( shader ) {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\tgl.compileShader( fragmentShader );\n\t\tgl.compileShader( vertexShader );\n\n\t\tgl.attachShader( program, fragmentShader );\n\t\tgl.attachShader( program, vertexShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n};\n\n// File:src/renderers/webgl/plugins/SpritePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpritePlugin = function ( renderer, sprites ) {\n\n\tvar gl = renderer.context;\n\tvar state = renderer.state;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar program, attributes, uniforms;\n\n\tvar texture;\n\n\t// decompose matrixWorld\n\n\tvar spritePosition = new THREE.Vector3();\n\tvar spriteRotation = new THREE.Quaternion();\n\tvar spriteScale = new THREE.Vector3();\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t- 0.5,   0.5,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\tvertexBuffer  = gl.createBuffer();\n\t\telementBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\tprogram = createProgram();\n\n\t\tattributes = {\n\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t};\n\n\t\tuniforms = {\n\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t};\n\n\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tcanvas.width = 8;\n\t\tcanvas.height = 8;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.fillStyle = 'white';\n\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\ttexture = new THREE.Texture( canvas );\n\t\ttexture.needsUpdate = true;\n\n\t}\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( sprites.length === 0 ) return;\n\n\t\t// setup gl\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.position );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.enable( gl.BLEND );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\tvar oldFogType = 0;\n\t\tvar sceneFogType = 0;\n\t\tvar fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\toldFogType = 1;\n\t\t\t\tsceneFogType = 1;\n\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\toldFogType = 2;\n\t\t\t\tsceneFogType = 2;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\toldFogType = 0;\n\t\t\tsceneFogType = 0;\n\n\t\t}\n\n\n\t\t// update positions and sort\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t}\n\n\t\tsprites.sort( painterSortStable );\n\n\t\t// render all sprites\n\n\t\tvar scale = [];\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\t\t\tvar material = sprite.material;\n\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\tvar fogType = 0;\n\n\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\tfogType = sceneFogType;\n\n\t\t\t}\n\n\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\toldFogType = fogType;\n\n\t\t\t}\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t}\n\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\tstate.setDepthWrite( material.depthWrite );\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setTexture2D( texture, 0 );\n\n\t\t\t}\n\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram () {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform float rotation;',\n\t\t\t'uniform vec2 scale;',\n\t\t\t'uniform vec2 uvOffset;',\n\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t'attribute vec2 position;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n\t\t\t\t'vec2 alignedPosition = position * scale;',\n\n\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t\t'vec4 finalPosition;',\n\n\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n\t\t\t\t'gl_Position = finalPosition;',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform vec3 color;',\n\t\t\t'uniform sampler2D map;',\n\t\t\t'uniform float opacity;',\n\n\t\t\t'uniform int fogType;',\n\t\t\t'uniform vec3 fogColor;',\n\t\t\t'uniform float fogDensity;',\n\t\t\t'uniform float fogNear;',\n\t\t\t'uniform float fogFar;',\n\t\t\t'uniform float alphaTest;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t\t'if ( fogType > 0 ) {',\n\n\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t'float fogFactor = 0.0;',\n\n\t\t\t\t\t'if ( fogType == 1 ) {',\n\n\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n\t\t\t\t\t'} else {',\n\n\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t\t\t'}',\n\n\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n\t\t\t\t'}',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.compileShader( vertexShader );\n\t\tgl.compileShader( fragmentShader );\n\n\t\tgl.attachShader( program, vertexShader );\n\t\tgl.attachShader( program, fragmentShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n\tfunction painterSortStable ( a, b ) {\n\t\t\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn b.id - a.id;\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/Three.Legacy.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nObject.assign( THREE, {\n\tFace4: function ( a, b, c, d, normal, color, materialIndex ) {\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\n\t},\n\tLineStrip: 0,\n\tLinePieces: 1,\n\tMeshFaceMaterial: THREE.MultiMaterial,\n\tPointCloud: function ( geometry, material ) {\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new THREE.Points( geometry, material );\n\t},\n\tParticle: THREE.Sprite,\n\tParticleSystem: function ( geometry, material ) {\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new THREE.Points( geometry, material );\n\t},\n\tPointCloudMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tParticleBasicMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tParticleSystemMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tVertex: function ( x, y, z ) {\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new THREE.Vector3( x, y, z );\n\t}\n} );\n\n//\n\nObject.assign( THREE.Box2.prototype, {\n\tempty: function () {\n\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\t},\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t}\n} );\n\nObject.assign( THREE.Box3.prototype, {\n\tempty: function () {\n\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\t},\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\t}\n} );\n\nObject.assign( THREE.Matrix3.prototype, {\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\treturn vector.applyMatrix3( this );\n\t},\n\tmultiplyVector3Array: function ( a ) {\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\t}\n} );\n\nObject.assign( THREE.Matrix4.prototype, {\n\textractPosition: function ( m ) {\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\treturn this.copyPosition( m );\n\t},\n\tsetRotationFromQuaternion: function ( q ) {\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\treturn this.makeRotationFromQuaternion( q );\n\t},\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t\treturn vector.applyProjection( this );\n\t},\n\tmultiplyVector4: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\t},\n\tmultiplyVector3Array: function ( a ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\t},\n\trotateAxis: function ( v ) {\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\tv.transformDirection( this );\n\t},\n\tcrossVector: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\t},\n\ttranslate: function ( v ) {\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t},\n\trotateX: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t},\n\trotateY: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t},\n\trotateZ: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t},\n\trotateByAxis: function ( axis, angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t}\n} );\n\nObject.assign( THREE.Plane.prototype, {\n\tisIntersectionLine: function ( line ) {\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\t}\n} );\n\nObject.assign( THREE.Quaternion.prototype, {\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\t}\n} );\n\nObject.assign( THREE.Ray.prototype, {\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t},\n\tisIntersectionPlane: function ( plane ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\treturn this.intersectsPlane( plane );\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\t}\n} );\n\nObject.assign( THREE.Vector3.prototype, {\n\tsetEulerFromRotationMatrix: function () {\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t},\n\tsetEulerFromQuaternion: function () {\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t},\n\tgetPositionFromMatrix: function ( m ) {\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\treturn this.setFromMatrixPosition( m );\n\t},\n\tgetScaleFromMatrix: function ( m ) {\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\treturn this.setFromMatrixScale( m );\n\t},\n\tgetColumnFromMatrix: function ( index, matrix ) {\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\treturn this.setFromMatrixColumn( matrix, index );\n\t}\n} );\n\n//\n\nObject.assign( THREE.Object3D.prototype, {\n\tgetChildByName: function ( name ) {\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\treturn this.getObjectByName( name );\n\t},\n\trenderDepth: function ( value ) {\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t},\n\ttranslate: function ( distance, axis ) {\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\treturn this.translateOnAxis( axis, distance );\n\t}\n} );\n\nObject.defineProperties( THREE.Object3D.prototype, {\n\teulerOrder: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.LOD.prototype, {\n\tobjects: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\treturn this.levels;\n\t\t}\n\t}\n} );\n\n//\n\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( THREE.Light.prototype, {\n\tonlyShadow: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.BufferAttribute.prototype, {\n\tlength: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\t\treturn this.array.length;\n\t\t}\n\t}\n} );\n\nObject.assign( THREE.BufferGeometry.prototype, {\n\taddIndex: function ( index ) {\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\tthis.setIndex( index );\n\t},\n\taddDrawCall: function ( start, count, indexOffset ) {\n\t\tif ( indexOffset !== undefined ) {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t\t}\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\tthis.addGroup( start, count );\n\t},\n\tclearDrawCalls: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\tthis.clearGroups();\n\t},\n\tcomputeTangents: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t},\n\tcomputeOffsets: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t}\n} );\n\nObject.defineProperties( THREE.BufferGeometry.prototype, {\n\tdrawcalls: {\n\t\tget: function () {\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.Material.prototype, {\n\twrapAround: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t}\n\t},\n\twrapRGB: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t\t\treturn new THREE.Color();\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.MeshPhongMaterial.prototype, {\n\tmetal: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\treturn false;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.ShaderMaterial.prototype, {\n\tderivatives: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\t\t}\n\t}\n} );\n\n//\n\nTHREE.EventDispatcher.prototype = Object.assign( Object.create( {\n\n\t// Note: Extra base ensures these properties are not 'assign'ed.\n\n\tconstructor: THREE.EventDispatcher,\n\n\tapply: function ( target ) {\n\n\t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\n\t\tObject.assign( target, this );\n\n\t}\n\n} ), THREE.EventDispatcher.prototype );\n\n//\n\nObject.assign( THREE.WebGLRenderer.prototype, {\n\tsupportsFloatTextures: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_float' );\n\t},\n\tsupportsHalfFloatTextures: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t},\n\tsupportsStandardDerivatives: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t},\n\tsupportsCompressedTextureS3TC: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t},\n\tsupportsCompressedTexturePVRTC: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t},\n\tsupportsBlendMinMax: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t},\n\tsupportsVertexTextures: function () {\n\t\treturn this.capabilities.vertexTextures;\n\t},\n\tsupportsInstancedArrays: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t},\n\tenableScissorTest: function ( boolean ) {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\tthis.setScissorTest( boolean );\n\t},\n\tinitMaterial: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t},\n\taddPrePlugin: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t},\n\taddPostPlugin: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t},\n\tupdateShadowMap: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t}\n} );\n\nObject.defineProperties( THREE.WebGLRenderer.prototype, {\n\tshadowMapEnabled: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.enabled;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.type;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.cullFace;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\tthis.shadowMap.cullFace = value;\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.WebGLShadowMap.prototype, {\n\tcullFace: {\n\t\tget: function () {\n\t\t\treturn this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;\n\t\t},\n\t\tset: function ( cullFace ) {\n\t\t\tvar value = ( cullFace !== THREE.CullFaceBack );\n\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\tthis.renderReverseSided = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.WebGLRenderTarget.prototype, {\n\twrapS: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.assign( THREE.Audio.prototype, {\n\tload: function ( file ) {\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t\tvar scope = this;\n\t\tvar audioLoader = new THREE.AudioLoader();\n\t\taudioLoader.load( file, function ( buffer ) {\n\t\t\tscope.setBuffer( buffer );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\nObject.assign( THREE.AudioAnalyser.prototype, {\n\tgetData: function ( file ) {\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\t}\n} );\n\n//\n\nTHREE.GeometryUtils = {\n\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n\t\tvar matrix;\n\n\t\tif ( geometry2 instanceof THREE.Mesh ) {\n\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\tmatrix = geometry2.matrix;\n\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t}\n\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t},\n\n\tcenter: function ( geometry ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\treturn geometry.center();\n\n\t}\n\n};\n\nTHREE.ImageUtils = {\n\n\tcrossOrigin: undefined,\n\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new THREE.TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new THREE.CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadCompressedTexture: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t},\n\n\tloadCompressedTextureCube: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t}\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function ( vector, camera ) {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n};\n\n//\n\nTHREE.CanvasRenderer = function () {\n\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\tthis.clear = function () {};\n\tthis.render = function () {};\n\tthis.setClearColor = function () {};\n\tthis.setSize = function () {};\n\n};\n\n// File:src/extras/CurveUtils.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.CurveUtils = {\n\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n\t},\n\n\t// Puay Bing, thanks for helping with this derivative!\n\n\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t\t\t3 * t * t * p3;\n\n\t},\n\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n\t\t// To check if my formulas are correct\n\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n\t\treturn h00 + h10 + h01 + h11;\n\n\t},\n\n\t// Catmull-Rom\n\n\tinterpolate: function( p0, p1, p2, p3, t ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n};\n\n// File:src/extras/SceneUtils.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\tvar group = new THREE.Group();\n\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\n\n\t\t}\n\n\t\treturn group;\n\n\t},\n\n\tdetach: function ( child, parent, scene ) {\n\n\t\tchild.applyMatrix( parent.matrixWorld );\n\t\tparent.remove( child );\n\t\tscene.add( child );\n\n\t},\n\n\tattach: function ( child, scene, parent ) {\n\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t\tchild.applyMatrix( matrixWorldInverse );\n\n\t\tscene.remove( child );\n\t\tparent.add( child );\n\n\t}\n\n};\n\n// File:src/extras/ShapeUtils.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.ShapeUtils = {\n\n\t// calculate area of the contour polygon\n\n\tarea: function ( contour ) {\n\n\t\tvar n = contour.length;\n\t\tvar a = 0.0;\n\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t},\n\n\ttriangulate: ( function () {\n\n\t\t/**\n\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t * See original code and more information here:\n\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t *\n\t\t * ported to actionscript by Zevan Rosser\n\t\t * www.actionsnippet.com\n\t\t *\n\t\t * ported to javascript by Joshua Koo\n\t\t * http://www.lab4games.net/zz85/blog\n\t\t *\n\t\t */\n\n\t\tfunction snip( contour, u, v, w, n, verts ) {\n\n\t\t\tvar p;\n\t\t\tvar ax, ay, bx, by;\n\t\t\tvar cx, cy, px, py;\n\n\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\tay = contour[ verts[ u ] ].y;\n\n\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\tby = contour[ verts[ v ] ].y;\n\n\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\tcy = contour[ verts[ w ] ].y;\n\n\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n\t\t\taX = cx - bx;  aY = cy - by;\n\t\t\tbX = ax - cx;  bY = ay - cy;\n\t\t\tcX = bx - ax;  cY = by - ay;\n\n\t\t\tfor ( p = 0; p < n; p ++ ) {\n\n\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\tpy = contour[ verts[ p ] ].y;\n\n\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n\t\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n\t\t\t\t// see if p is inside triangle abc\n\n\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// takes in an contour array and returns\n\n\t\treturn function triangulate( contour, indices ) {\n\n\t\t\tvar n = contour.length;\n\n\t\t\tif ( n < 3 ) return null;\n\n\t\t\tvar result = [],\n\t\t\t\tverts = [],\n\t\t\t\tvertIndices = [];\n\n\t\t\t/* we want a counter-clockwise polygon in verts */\n\n\t\t\tvar u, v, w;\n\n\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\n\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n\t\t\t} else {\n\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n\t\t\t}\n\n\t\t\tvar nv = n;\n\n\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n\t\t\tvar count = 2 * nv;   /* error detection */\n\n\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n\t\t\t\tif ( ( count -- ) <= 0 ) {\n\n\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t//return null;\n\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\treturn result;\n\n\t\t\t\t}\n\n\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n\t\t\t\t\tvar a, b, c, s, t;\n\n\t\t\t\t\t/* true names of the vertices */\n\n\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\tc = verts[ w ];\n\n\t\t\t\t\t/* output Triangle */\n\n\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\tcontour[ c ] ] );\n\n\n\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n\t\t\t\t\t/* remove v from the remaining polygon */\n\n\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnv --;\n\n\t\t\t\t\t/* reset error detection counter */\n\n\t\t\t\t\tcount = 2 * nv;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( indices ) return vertIndices;\n\t\t\treturn result;\n\n\t\t}\n\n\t} )(),\n\n\ttriangulateShape: function ( contour, holes ) {\n\n\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n\t\t\t\t// not parallel\n\n\t\t\t\tvar perpSeg2;\n\t\t\t\tif ( limit > 0 ) {\n\n\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n\t\t\t\t}\n\n\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\tif ( perpSeg2 === 0 ) {\n\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t}\n\t\t\t\tif ( perpSeg2 === limit ) {\n\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\treturn [ inSeg1Pt2 ];\n\n\t\t\t\t}\n\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n\t\t\t\t// return real intersection point\n\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n\t\t\t} else {\n\n\t\t\t\t// parallel or collinear\n\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n\t\t\t\t// they are collinear or degenerate\n\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t// both segments are points\n\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n\t\t\t\t}\n\t\t\t\t// segment#1  is a single point\n\t\t\t\tif ( seg1Pt ) {\n\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t}\n\t\t\t\t// segment#2  is a single point\n\t\t\t\tif ( seg2Pt ) {\n\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\treturn [ inSeg2Pt1 ];\n\n\t\t\t\t}\n\n\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\tif ( seg1dx !== 0 ) {\n\n\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg2min ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg1min ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n\t\t\t// The order of legs is important\n\n\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n\t\t\t\t// angle != 180 deg.\n\n\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n\t\t\t\tif ( from2toAngle > 0 ) {\n\n\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// angle == 180 deg.\n\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\treturn\t( from2otherAngle > 0 );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tfunction removeHoles( contour, holes ) {\n\n\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\tvar hole;\n\n\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\treturn\ttrue;\n\n\t\t\t}\n\n\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t// checks for intersections with shape edges\n\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t}\n\n\t\t\t\treturn\tfalse;\n\n\t\t\t}\n\n\t\t\tvar indepHoles = [];\n\n\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t// checks for intersections with hole edges\n\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\treturn\tfalse;\n\n\t\t\t}\n\n\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\tshapePt, holePt,\n\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\ttmpHole1, tmpHole2;\n\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tindepHoles.push( h );\n\n\t\t\t}\n\n\t\t\tvar minShapeIndex = 0;\n\t\t\tvar counter = indepHoles.length * 2;\n\t\t\twhile ( indepHoles.length > 0 ) {\n\n\t\t\t\tcounter --;\n\t\t\t\tif ( counter < 0 ) {\n\n\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t// which can be connected without intersections\n\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\tholeIndex\t= - 1;\n\n\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shape; \t\t\t/* shape with no holes */\n\n\t\t}\n\n\n\t\tvar i, il, f, face,\n\t\t\tkey, index,\n\t\t\tallPointsMap = {};\n\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n\t\tvar allpoints = contour.concat();\n\n\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n\t\t}\n\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n\t\t// prepare all points map\n\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Shape: Duplicate point\", key );\n\n\t\t\t}\n\n\t\t\tallPointsMap[ key ] = i;\n\n\t\t}\n\n\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t//console.log( \"triangles\",triangles, triangles.length );\n\n\t\t// check all face vertices against all points map\n\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n\t\t\tface = triangles[ i ];\n\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n\t\t\t\tindex = allPointsMap[ key ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tface[ f ] = index;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn triangles.concat();\n\n\t},\n\n\tisClockWise: function ( pts ) {\n\n\t\treturn THREE.ShapeUtils.area( pts ) < 0;\n\n\t},\n\n\t// Bezier Curves formulas obtained from\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n\t// Quad Bezier Functions\n\n\tb2: ( function () {\n\n\t\tfunction b2p0( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn k * k * p;\n\n\t\t}\n\n\t\tfunction b2p1( t, p ) {\n\n\t\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t\t}\n\n\t\tfunction b2p2( t, p ) {\n\n\t\t\treturn t * t * p;\n\n\t\t}\n\n\t\treturn function b2( t, p0, p1, p2 ) {\n\n\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n\t\t};\n\n\t} )(),\n\n\t// Cubic Bezier Functions\n\n\tb3: ( function () {\n\n\t\tfunction b3p0( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn k * k * k * p;\n\n\t\t}\n\n\t\tfunction b3p1( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn 3 * k * k * t * p;\n\n\t\t}\n\n\t\tfunction b3p2( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn 3 * k * t * t * p;\n\n\t\t}\n\n\t\tfunction b3p3( t, p ) {\n\n\t\t\treturn t * t * t * p;\n\n\t\t}\n\n\t\treturn function b3( t, p0, p1, p2, p3 ) {\n\n\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n\t\t};\n\n\t} )()\n\n};\n\n// File:src/extras/core/Curve.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of Curve methods\n * .getPoint(t), getTangent(t)\n * .getPointAt(u), getTagentAt(u)\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following classes subclasses THREE.Curve:\n *\n * -- 2d classes --\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.CubicBezierCurve\n * THREE.SplineCurve\n * THREE.ArcCurve\n * THREE.EllipseCurve\n *\n * -- 3d classes --\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n * THREE.CubicBezierCurve3\n * THREE.SplineCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath\n *\n **/\n\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\n\nTHREE.Curve = function () {\n\n};\n\nTHREE.Curve.prototype = {\n\n\tconstructor: THREE.Curve,\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint: function ( t ) {\n\n\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t\treturn null;\n\n\t},\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t );\n\n\t},\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 5;\n\n\t\tvar d, pts = [];\n\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpts.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn pts;\n\n\t},\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 5;\n\n\t\tvar d, pts = [];\n\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpts.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn pts;\n\n\t},\n\n\t// Get total curve arc length\n\n\tgetLength: function () {\n\n\t\tvar lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t},\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n\t\tif ( this.cacheArcLengths\n\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t\t\t&& ! this.needsUpdate ) {\n\n\t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tvar cache = [];\n\t\tvar current, last = this.getPoint( 0 );\n\t\tvar p, sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint ( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n\t},\n\n\tupdateArcLengths: function() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping: function ( u, distance ) {\n\n\t\tvar arcLengths = this.getLengths();\n\n\t\tvar i = 0, il = arcLengths.length;\n\n\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t//var time = Date.now();\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tvar low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\t//console.log('b' , i, low, high, Date.now()- time);\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\tvar t = i / ( il - 1 );\n\t\t\treturn t;\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tvar lengthBefore = arcLengths[ i ];\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t},\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent: function( t ) {\n\n\t\tvar delta = 0.0001;\n\t\tvar t1 = t - delta;\n\t\tvar t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tvar pt1 = this.getPoint( t1 );\n\t\tvar pt2 = this.getPoint( t2 );\n\n\t\tvar vec = pt2.clone().sub( pt1 );\n\t\treturn vec.normalize();\n\n\t},\n\n\tgetTangentAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t );\n\n\t}\n\n};\n\n// TODO: Transformation for Curves?\n\n/**************************************************************\n *\t3D Curves\n **************************************************************/\n\n// A Factory method for creating new curve subclasses\n\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\n\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\n\tconstructor.prototype.constructor = constructor;\n\tconstructor.prototype.getPoint = getPointFunc;\n\n\treturn constructor;\n\n};\n\n// File:src/extras/core/CurvePath.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nTHREE.CurvePath = function () {\n\n\tthis.curves = [];\n\n\tthis.autoClose = false; // Automatically closes the path\n\n};\n\nTHREE.CurvePath.prototype = Object.assign( Object.create( THREE.Curve.prototype ), {\n\n\tconstructor: THREE.CurvePath,\n\n\tadd: function ( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t},\n\n\tclosePath: function () {\n\n\t\t// TODO Test\n\t\t// and verify for vector3 (needs to implement equals)\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t},\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint: function ( t ) {\n\n\t\tvar d = t * this.getLength();\n\t\tvar curveLengths = this.getCurveLengths();\n\t\tvar i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\tvar u = 1 - diff / curve.getLength();\n\n\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t},\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength: function () {\n\n\t\tvar lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t},\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths: function () {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tvar lengths = [], sums = 0;\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t},\n\n\t/**************************************************************\n\t *\tCreate Geometries Helpers\n\t **************************************************************/\n\n\t/// Generate geometry from path points (for Line or Points objects)\n\n\tcreatePointsGeometry: function ( divisions ) {\n\n\t\tvar pts = this.getPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\t// Generate geometry from equidistant sampling along the path\n\n\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\tvar pts = this.getSpacedPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateGeometry: function ( points ) {\n\n\t\tvar geometry = new THREE.Geometry();\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n// File:src/extras/core/Font.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Font = function ( data ) {\n\n\tthis.data = data;\n\n};\n\nObject.assign( THREE.Font.prototype, {\n\n\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\tfunction createPaths( text ) {\n\n\t\t\tvar chars = String( text ).split( '' );\n\t\t\tvar scale = size / data.resolution;\n\t\t\tvar offset = 0;\n\n\t\t\tvar paths = [];\n\n\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t\t\t\toffset += ret.offset;\n\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t\treturn paths;\n\n\t\t}\n\n\t\tfunction createPath( c, scale, offset ) {\n\n\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n\t\t\tif ( ! glyph ) return;\n\n\t\t\tvar path = new THREE.Path();\n\n\t\t\tvar pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;\n\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n\t\t\tif ( glyph.o ) {\n\n\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn { offset: glyph.ha * scale, path: path };\n\n\t\t}\n\n\t\t//\n\n\t\tif ( size === undefined ) size = 100;\n\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\tvar data = this.data;\n\n\t\tvar paths = createPaths( text );\n\t\tvar shapes = [];\n\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n// File:src/extras/core/Path.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n *\n **/\n\nTHREE.Path = function ( points ) {\n\n\tTHREE.CurvePath.call( this );\n\n\tthis.actions = [];\n\n\tif ( points ) {\n\n\t\tthis.fromPoints( points );\n\n\t}\n\n};\n\nTHREE.Path.prototype = Object.assign( Object.create( THREE.CurvePath.prototype ), {\n\n\tconstructor: THREE.Path,\n\n\t// TODO Clean up PATH API\n\n\t// Create path using straight lines to connect all points\n\t// - vectors: array of Vector2\n\n\tfromPoints: function ( vectors ) {\n\n\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n\t\t}\n\n\t},\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.actions.push( { action: 'moveTo', args: [ x, y ] } );\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.actions.push( { action: 'lineTo', args: [ x, y ] } );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar curve = new THREE.QuadraticBezierCurve(\n\t\t\tnew THREE.Vector2( x0, y0 ),\n\t\t\tnew THREE.Vector2( aCPx, aCPy ),\n\t\t\tnew THREE.Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar curve = new THREE.CubicBezierCurve(\n\t\t\tnew THREE.Vector2( x0, y0 ),\n\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\n\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\n\t\t\tnew THREE.Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );\n\n\t},\n\n\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\tvar args = Array.prototype.slice.call( arguments );\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\n\t\tArray.prototype.push.apply( npts, pts );\n\n\t\tvar curve = new THREE.SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tvar lastPoint = pts[ pts.length - 1 ];\n\t\targs.push( lastPoint.x );\n\t\targs.push( lastPoint.y );\n\n\t\tthis.actions.push( { action: 'splineThru', args: args } );\n\n\t},\n\n\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t},\n\n\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar args = [\n\t\t\taX, aY,\n\t\t\txRadius, yRadius,\n\t\t\taStartAngle, aEndAngle,\n\t\t\taClockwise,\n\t\t\taRotation || 0 // aRotation is optional.\n\t\t];\n\n\t\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\tthis.curves.push( curve );\n\n\t\tvar lastPoint = curve.getPoint( 1 );\n\t\targs.push( lastPoint.x );\n\t\targs.push( lastPoint.y );\n\n\t\tthis.actions.push( { action: 'ellipse', args: args } );\n\n\t},\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 40;\n\n\t\tvar points = [];\n\n\t\tfor ( var i = 0; i < divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t//if ( !this.getPoint( i / divisions ) ) throw \"DIE\";\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tgetPoints: function ( divisions ) {\n\n\t\tdivisions = divisions || 12;\n\n\t\tvar b2 = THREE.ShapeUtils.b2;\n\t\tvar b3 = THREE.ShapeUtils.b3;\n\n\t\tvar points = [];\n\n\t\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\n\t\t\tlaste, tx, ty;\n\n\t\tfor ( var i = 0, l = this.actions.length; i < l; i ++ ) {\n\n\t\t\tvar item = this.actions[ i ];\n\n\t\t\tvar action = item.action;\n\t\t\tvar args = item.args;\n\n\t\t\tswitch ( action ) {\n\n\t\t\tcase 'moveTo':\n\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'lineTo':\n\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'quadraticCurveTo':\n\n\t\t\t\tcpx  = args[ 2 ];\n\t\t\t\tcpy  = args[ 3 ];\n\n\t\t\t\tcpx1 = args[ 0 ];\n\t\t\t\tcpy1 = args[ 1 ];\n\n\t\t\t\tif ( points.length > 0 ) {\n\n\t\t\t\t\tlaste = points[ points.length - 1 ];\n\n\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / divisions;\n\n\t\t\t\t\ttx = b2( t, cpx0, cpx1, cpx );\n\t\t\t\t\tty = b2( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'bezierCurveTo':\n\n\t\t\t\tcpx  = args[ 4 ];\n\t\t\t\tcpy  = args[ 5 ];\n\n\t\t\t\tcpx1 = args[ 0 ];\n\t\t\t\tcpy1 = args[ 1 ];\n\n\t\t\t\tcpx2 = args[ 2 ];\n\t\t\t\tcpy2 = args[ 3 ];\n\n\t\t\t\tif ( points.length > 0 ) {\n\n\t\t\t\t\tlaste = points[ points.length - 1 ];\n\n\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\n\n\t\t\t\t}\n\n\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / divisions;\n\n\t\t\t\t\ttx = b3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\tty = b3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'splineThru':\n\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\n\t\t\t\tvar spts = [ last ];\n\n\t\t\t\tvar n = divisions * args[ 0 ].length;\n\n\t\t\t\tspts = spts.concat( args[ 0 ] );\n\n\t\t\t\tvar spline = new THREE.SplineCurve( spts );\n\n\t\t\t\tfor ( var j = 1; j <= n; j ++ ) {\n\n\t\t\t\t\tpoints.push( spline.getPointAt( j / n ) );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'arc':\n\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\n\t\t\t\t\taRadius = args[ 2 ],\n\t\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\n\t\t\t\t\taClockwise = !! args[ 5 ];\n\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\n\t\t\t\tvar angle;\n\t\t\t\tvar tdivisions = divisions * 2;\n\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / tdivisions;\n\n\t\t\t\t\tif ( ! aClockwise ) {\n\n\t\t\t\t\t\tt = 1 - t;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\n\n\t\t\t\t\ttx = aX + aRadius * Math.cos( angle );\n\t\t\t\t\tty = aY + aRadius * Math.sin( angle );\n\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\t//console.log(points);\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ellipse':\n\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\n\t\t\t\t\txRadius = args[ 2 ],\n\t\t\t\t\tyRadius = args[ 3 ],\n\t\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\n\t\t\t\t\taClockwise = !! args[ 6 ],\n\t\t\t\t\taRotation = args[ 7 ];\n\n\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\n\t\t\t\tvar angle;\n\t\t\t\tvar tdivisions = divisions * 2;\n\n\t\t\t\tvar cos, sin;\n\t\t\t\tif ( aRotation !== 0 ) {\n\n\t\t\t\t\tcos = Math.cos( aRotation );\n\t\t\t\t\tsin = Math.sin( aRotation );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / tdivisions;\n\n\t\t\t\t\tif ( ! aClockwise ) {\n\n\t\t\t\t\t\tt = 1 - t;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\n\n\t\t\t\t\ttx = aX + xRadius * Math.cos( angle );\n\t\t\t\t\tty = aY + yRadius * Math.sin( angle );\n\n\t\t\t\t\tif ( aRotation !== 0 ) {\n\n\t\t\t\t\t\tvar x = tx, y = ty;\n\n\t\t\t\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\t\t\t\ttx = ( x - aX ) * cos - ( y - aY ) * sin + aX;\n\t\t\t\t\t\tty = ( x - aX ) * sin + ( y - aY ) * cos + aY;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\t//console.log(points);\n\n\t\t\t\tbreak;\n\n\t\t\t} // end switch\n\n\t\t}\n\n\n\n\t\t// Normalize to remove the closing point by default.\n\t\tvar lastPoint = points[ points.length - 1 ];\n\t\tif ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&\n\t\t\t\t Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )\n\t\t\tpoints.splice( points.length - 1, 1 );\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\tfunction extractSubpaths( inActions ) {\n\n\t\t\tvar subPaths = [], lastPath = new THREE.Path();\n\n\t\t\tfor ( var i = 0, l = inActions.length; i < l; i ++ ) {\n\n\t\t\t\tvar item = inActions[ i ];\n\n\t\t\t\tvar args = item.args;\n\t\t\t\tvar action = item.action;\n\n\t\t\t\tif ( action === 'moveTo' ) {\n\n\t\t\t\t\tif ( lastPath.actions.length !== 0 ) {\n\n\t\t\t\t\t\tsubPaths.push( lastPath );\n\t\t\t\t\t\tlastPath = new THREE.Path();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlastPath[ action ].apply( lastPath, args );\n\n\t\t\t}\n\n\t\t\tif ( lastPath.actions.length !== 0 ) {\n\n\t\t\t\tsubPaths.push( lastPath );\n\n\t\t\t}\n\n\t\t\t// console.log(subPaths);\n\n\t\t\treturn\tsubPaths;\n\n\t\t}\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\tvar tmpShape = new THREE.Shape();\n\t\t\t\ttmpShape.actions = tmpPath.actions;\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tvar inside = false;\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tvar isClockWise = THREE.ShapeUtils.isClockWise;\n\n\t\tvar subPaths = extractSubpaths( this.actions );\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new THREE.Shape();\n\t\t\ttmpShape.actions = tmpPath.actions;\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tvar betterShapeHoles = [];\n\t\tvar newShapes = [];\n\t\tvar newShapeHoles = [];\n\t\tvar mainIdx = 0;\n\t\tvar tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.actions = tmpPath.actions;\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tvar ambiguous = false;\n\t\t\tvar toChange = [];\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmpHoles;\n\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n// File:src/extras/core/Shape.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nTHREE.Shape = function () {\n\n\tTHREE.Path.apply( this, arguments );\n\n\tthis.holes = [];\n\n};\n\nTHREE.Shape.prototype = Object.assign( Object.create( THREE.Path.prototype ), {\n\n\tconstructor: THREE.Shape,\n\n\t// Convenience method to return ExtrudeGeometry\n\n\textrude: function ( options ) {\n\n\t\treturn new THREE.ExtrudeGeometry( this, options );\n\n\t},\n\n\t// Convenience method to return ShapeGeometry\n\n\tmakeGeometry: function ( options ) {\n\n\t\treturn new THREE.ShapeGeometry( this, options );\n\n\t},\n\n\tgetPointsHoles: function ( divisions ) {\n\n\t\tvar holesPts = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t},\n\n\t// Get points of shape and holes (keypoints based on segments parameter)\n\n\textractAllPoints: function ( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t},\n\n\textractPoints: function ( divisions ) {\n\n\t\treturn this.extractAllPoints( divisions );\n\n\t}\n\n} );\n\n// File:src/extras/curves/LineCurve.js\n\n/**************************************************************\n *\tLine\n **************************************************************/\n\nTHREE.LineCurve = function ( v1, v2 ) {\n\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\n\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\n\n\tvar point = this.v2.clone().sub( this.v1 );\n\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\n\n\treturn this.getPoint( u );\n\n};\n\nTHREE.LineCurve.prototype.getTangent = function( t ) {\n\n\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\treturn tangent.normalize();\n\n};\n\n// File:src/extras/curves/QuadraticBezierCurve.js\n\n/**************************************************************\n *\tQuadratic Bezier curve\n **************************************************************/\n\n\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\n\n\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar b2 = THREE.ShapeUtils.b2;\n\n\treturn new THREE.Vector2(\n\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t);\n\n};\n\n\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\n\n\treturn new THREE.Vector2(\n\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t).normalize();\n\n};\n\n// File:src/extras/curves/CubicBezierCurve.js\n\n/**************************************************************\n *\tCubic Bezier curve\n **************************************************************/\n\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\tthis.v3 = v3;\n\n};\n\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\n\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar b3 = THREE.ShapeUtils.b3;\n\n\treturn new THREE.Vector2( \n\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t);\n\n};\n\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\n\n\treturn new THREE.Vector2( \n\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t).normalize();\n\n};\n\n// File:src/extras/curves/SplineCurve.js\n\n/**************************************************************\n *\tSpline curve\n **************************************************************/\n\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\n\n\tthis.points = ( points == undefined ) ? [] : points;\n\n};\n\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\n\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\n\n\tvar points = this.points;\n\tvar point = ( points.length - 1 ) * t;\n\n\tvar intPoint = Math.floor( point );\n\tvar weight = point - intPoint;\n\n\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\tvar point1 = points[ intPoint ];\n\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\treturn new THREE.Vector2(\n\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t);\n\n};\n\n// File:src/extras/curves/EllipseCurve.js\n\n/**************************************************************\n *\tEllipse curve\n **************************************************************/\n\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tthis.aX = aX;\n\tthis.aY = aY;\n\n\tthis.xRadius = xRadius;\n\tthis.yRadius = yRadius;\n\n\tthis.aStartAngle = aStartAngle;\n\tthis.aEndAngle = aEndAngle;\n\n\tthis.aClockwise = aClockwise;\n\t\n\tthis.aRotation = aRotation || 0;\n\n};\n\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\n\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\n\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\n\tif ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\n\tif ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\n\n\tvar angle;\n\n\tif ( this.aClockwise === true ) {\n\n\t\tangle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\n\n\t} else {\n\n\t\tangle = this.aStartAngle + t * deltaAngle;\n\n\t}\n\t\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\tif ( this.aRotation !== 0 ) {\n\n\t\tvar cos = Math.cos( this.aRotation );\n\t\tvar sin = Math.sin( this.aRotation );\n\n\t\tvar tx = x, ty = y;\n\n\t\t// Rotate the point about the center of the ellipse.\n\t\tx = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;\n\t\ty = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;\n\n\t}\n\n\treturn new THREE.Vector2( x, y );\n\n};\n\n// File:src/extras/curves/ArcCurve.js\n\n/**************************************************************\n *\tArc curve\n **************************************************************/\n\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n};\n\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\nTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\n\n// File:src/extras/curves/LineCurve3.js\n\n/**************************************************************\n *\tLine3D\n **************************************************************/\n\nTHREE.LineCurve3 = THREE.Curve.create(\n\n\tfunction ( v1, v2 ) {\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\tvector.multiplyScalar( t );\n\t\tvector.add( this.v1 );\n\n\t\treturn vector;\n\n\t}\n\n);\n\n// File:src/extras/curves/QuadraticBezierCurve3.js\n\n/**************************************************************\n *\tQuadratic Bezier 3D curve\n **************************************************************/\n\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\n\n\t\treturn new THREE.Vector3(\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/CubicBezierCurve3.js\n\n/**************************************************************\n *\tCubic Bezier 3D curve\n **************************************************************/\n\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2, v3 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar b3 = THREE.ShapeUtils.b3;\n\n\t\treturn new THREE.Vector3(\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/SplineCurve3.js\n\n/**************************************************************\n *\tSpline 3D curve\n **************************************************************/\n\n\nTHREE.SplineCurve3 = THREE.Curve.create(\n\n\tfunction ( points /* array of Vector3 */ ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t\tthis.points = ( points == undefined ) ? [] : points;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t\tvar point1 = points[ intPoint ];\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\t\treturn new THREE.Vector3(\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/CatmullRomCurve3.js\n\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\nTHREE.CatmullRomCurve3 = ( function() {\n\n\tvar\n\t\ttmp = new THREE.Vector3(),\n\t\tpx = new CubicPoly(),\n\t\tpy = new CubicPoly(),\n\t\tpz = new CubicPoly();\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t}\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n\t\tthis.c0 = x0;\n\t\tthis.c1 = t0;\n\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t};\n\n\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t// compute tangents when parameterized in [t1,t2]\n\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t// rescale tangents for parametrization in [0,1]\n\t\tt1 *= dt1;\n\t\tt2 *= dt1;\n\n\t\t// initCubicPoly\n\t\tthis.init( x1, x2, t1, t2 );\n\n\t};\n\n\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t};\n\n\tCubicPoly.prototype.calc = function( t ) {\n\n\t\tvar t2 = t * t;\n\t\tvar t3 = t2 * t;\n\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n\t};\n\n\t// Subclass Three.js curve\n\treturn THREE.Curve.create(\n\n\t\tfunction ( p /* array of Vector3 */ ) {\n\n\t\t\tthis.points = p || [];\n\t\t\tthis.closed = false;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tvar points = this.points,\n\t\t\t\tpoint, intPoint, weight, l;\n\n\t\t\tl = points.length;\n\n\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\t\tintPoint = Math.floor( point );\n\t\t\tweight = point - intPoint;\n\n\t\t\tif ( this.closed ) {\n\n\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\n\t\t\t}\n\n\t\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t\t} else {\n\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\t\tp0 = tmp;\n\n\t\t\t}\n\n\t\t\tp1 = points[ intPoint % l ];\n\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t\t} else {\n\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\t\tp3 = tmp;\n\n\t\t\t}\n\n\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t\t// safety check for repeated points\n\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t\t} else if ( this.type === 'catmullrom' ) {\n\n\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n\t\t\t}\n\n\t\t\tvar v = new THREE.Vector3(\n\t\t\t\tpx.calc( weight ),\n\t\t\t\tpy.calc( weight ),\n\t\t\t\tpz.calc( weight )\n\t\t\t);\n\n\t\t\treturn v;\n\n\t\t}\n\n\t);\n\n} )();\n\n// File:src/extras/curves/ClosedSplineCurve3.js\n\n/**************************************************************\n *\tClosed Spline 3D curve\n **************************************************************/\n\n\nTHREE.ClosedSplineCurve3 = function ( points ) {\n\n\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\n\tTHREE.CatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\tthis.closed = true;\n\n};\n\nTHREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );\n\n// File:src/extras/geometries/BoxGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n */\n\nTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'BoxGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tthis.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\n\nTHREE.CubeGeometry = THREE.BoxGeometry;\n\n// File:src/extras/geometries/BoxBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'BoxBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tvar scope = this;\n\n\t// segments\n\twidthSegments = Math.floor( widthSegments ) || 1;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\n\t// buffers\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\tvar vertices = new Float32Array( vertexCount * 3 );\n\tvar normals = new Float32Array( vertexCount * 3 );\n\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t// offset variables\n\tvar vertexBufferOffset = 0;\n\tvar uvBufferOffset = 0;\n\tvar indexBufferOffset = 0;\n\tvar numberOfVertices = 0;\n\n\t// group variables\n\tvar groupStart = 0;\n\n\t// build each side of the box geometry\n\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n\t// build geometry\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\t// helper functions\n\n\tfunction calculateVertexCount ( w, h, d ) {\n\n\t\tvar vertices = 0;\n\n\t\t// calculate the amount of vertices for each side (plane)\n\t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\n\t\treturn vertices;\n\n\t}\n\n\tfunction calculateIndexCount ( w, h, d ) {\n\n\t\tvar index = 0;\n\n\t\t// calculate the amount of squares for each side\n\t\tindex += w * h * 2; // xy\n\t\tindex += w * d * 2; // xz\n\t\tindex += d * h * 2; // zy\n\n\t\treturn index * 6; // two triangles per square => six vertices per square\n\n\t}\n\n\tfunction buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\tvar segmentWidth\t= width / gridX;\n\t\tvar segmentHeight = height / gridY;\n\n\t\tvar widthHalf = width / 2;\n\t\tvar heightHalf = height / 2;\n\t\tvar depthHalf = depth / 2;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar vertexCounter = 0;\n\t\tvar groupCount = 0;\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t// set values to correct vector component\n\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t// now apply vector to vertex buffer\n\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t// set values to correct vector component\n\t\t\t\tvector[ u ] = 0;\n\t\t\t\tvector[ v ] = 0;\n\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t// now apply vector to normal buffer\n\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t// uvs\n\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\n\t\t\t\t// update offsets and counters\n\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\tuvBufferOffset += 2;\n\t\t\t\tvertexCounter += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// 1. you need three indices to draw a single face\n\t\t// 2. a single segment consists of two faces\n\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t// indices\n\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// face one\n\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t\t// face two\n\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t\t// update offsets and counters\n\t\t\t\tindexBufferOffset += 6;\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t\t// update total number of vertices\n\t\tnumberOfVertices += vertexCounter;\n\n\t}\n\n};\n\nTHREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;\n\n// File:src/extras/geometries/CircleGeometry.js\n\n/**\n * @author hughes\n */\n\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CircleGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n};\n\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\n\n// File:src/extras/geometries/CircleBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'CircleBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 50;\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tvar vertices = segments + 2;\n\n\tvar positions = new Float32Array( vertices * 3 );\n\tvar normals = new Float32Array( vertices * 3 );\n\tvar uvs = new Float32Array( vertices * 2 );\n\n\t// center data is already zero, but need to set a few extras\n\tnormals[ 2 ] = 1.0;\n\tuvs[ 0 ] = 0.5;\n\tuvs[ 1 ] = 0.5;\n\n\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\tpositions[ i ] = radius * Math.cos( segment );\n\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n\t\tnormals[ i + 2 ] = 1; // normal z\n\n\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n\t}\n\n\tvar indices = [];\n\n\tfor ( var i = 1; i <= segments; i ++ ) {\n\n\t\tindices.push( i, i + 1, 0 );\n\n\t}\n\n\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\n\n// File:src/extras/geometries/CylinderBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.CylinderBufferGeometry = function( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'CylinderBufferGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tvar scope = this;\n\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\theight = height !== undefined ? height : 100;\n\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\n\topenEnded = openEnded !== undefined ? openEnded : false;\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n\t// used to calculate buffer length\n\n\tvar nbCap = 0;\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) nbCap ++;\n\t\tif ( radiusBottom > 0 ) nbCap ++;\n\n\t}\n\n\tvar vertexCount = calculateVertexCount();\n\tvar indexCount = calculateIndexCount();\n\n\t// buffers\n\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\n\tvar index = 0,\n\t    indexOffset = 0,\n\t    indexArray = [],\n\t    halfHeight = height / 2;\n\n\t// group variables\n\tvar groupStart = 0;\n\n\t// generate geometry\n\n\tgenerateTorso();\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// helper functions\n\n\tfunction calculateVertexCount() {\n\n\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\tfunction calculateIndexCount() {\n\n\t\tvar count = radialSegments * heightSegments * 2 * 3;\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tcount += radialSegments * nbCap * 3;\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\tfunction generateTorso() {\n\n\t\tvar x, y;\n\t\tvar normal = new THREE.Vector3();\n\t\tvar vertex = new THREE.Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\t// this will be used to calculate the normal\n\t\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\tvar indexRow = [];\n\n\t\t\tvar v = y / heightSegments;\n\n\t\t\t// calculate the radius of the current row\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\n\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\t\t\t\tnormal.copy( vertex );\n\n\t\t\t\t// handle special case if radiusTop/radiusBottom is zero\n\n\t\t\t\tif ( ( radiusTop === 0 && y === 0 ) || ( radiusBottom === 0 && y === heightSegments ) ) {\n\n\t\t\t\t\tnormal.x = Math.sin( u * thetaLength + thetaStart );\n\t\t\t\t\tnormal.z = Math.cos( u * thetaLength + thetaStart );\n\n\t\t\t\t}\n\n\t\t\t\tnormal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\t\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\t\t// save index of vertex in respective row\n\t\t\t\tindexRow.push( index );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// now save vertices of the row in our index array\n\t\t\tindexArray.push( indexRow );\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t// update counters\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t}\n\n\tfunction generateCap( top ) {\n\n\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\tvar uv = new THREE.Vector2();\n\t\tvar vertex = new THREE.Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t// save the index of the first center vertex\n\t\tcenterIndexStart = index;\n\n\t\t// first we generate the center vertex data of the cap.\n\t\t// because the geometry needs one set of uvs per face,\n\t\t// we must generate a center vertex per face/segment\n\n\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t// vertex\n\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t// uv\n\t\t\tuv.x = 0.5;\n\t\t\tuv.y = 0.5;\n\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// save the index of the last center vertex\n\t\tcenterIndexEnd = index;\n\n\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\tvar u = x / radialSegments;\n\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t// vertex\n\t\t\tvertex.x = radius * sinTheta;\n\t\t\tvertex.y = halfHeight * sign;\n\t\t\tvertex.z = radius * cosTheta;\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t// uv\n\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar c = centerIndexStart + x;\n\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\tif ( top === true ) {\n\n\t\t\t\t// face top\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t} else {\n\n\t\t\t\t// face bottom\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t}\n\n\t\t\t// update counters\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t}\n\n};\n\nTHREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;\n\n// File:src/extras/geometries/CylinderGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CylinderGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\n\n// File:src/extras/geometries/ConeBufferGeometry.js\n\n/*\n * @author: abelnation / http://github.com/abelnation\n */\n\nTHREE.ConeBufferGeometry = function (\n\tradius, height,\n\tradialSegments, heightSegments,\n\topenEnded, thetaStart, thetaLength ) {\n\n\tTHREE.CylinderBufferGeometry.call( this,\n\t\t0, radius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n};\n\nTHREE.ConeBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry;\n\n// File:src/extras/geometries/ConeGeometry.js\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\nTHREE.ConeGeometry = function (\n\tradius, height,\n\tradialSegments, heightSegments,\n\topenEnded, thetaStart, thetaLength ) {\n\n\tTHREE.CylinderGeometry.call( this,\n\t\t0, radius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n};\n\nTHREE.ConeGeometry.prototype = Object.create( THREE.CylinderGeometry.prototype );\nTHREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry;\n\n// File:src/extras/geometries/EdgesGeometry.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\tvar thresholdDot = Math.cos( THREE.Math.DEG2RAD * thresholdAngle );\n\n\tvar edge = [ 0, 0 ], hash = {};\n\n\tfunction sortFunction( a, b ) {\n\n\t\treturn a - b;\n\n\t}\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\n\tvar geometry2;\n\n\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\tgeometry2 = new THREE.Geometry();\n\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t} else {\n\n\t\tgeometry2 = geometry.clone();\n\n\t}\n\n\tgeometry2.mergeVertices();\n\tgeometry2.computeFaceNormals();\n\n\tvar vertices = geometry2.vertices;\n\tvar faces = geometry2.faces;\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\tedge.sort( sortFunction );\n\n\t\t\tvar key = edge.toString();\n\n\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t} else {\n\n\t\t\t\thash[ key ].face2 = i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tvar coords = [];\n\n\tfor ( var key in hash ) {\n\n\t\tvar h = hash[ key ];\n\n\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\tvar vertex = vertices[ h.vert1 ];\n\t\t\tcoords.push( vertex.x );\n\t\t\tcoords.push( vertex.y );\n\t\t\tcoords.push( vertex.z );\n\n\t\t\tvertex = vertices[ h.vert2 ];\n\t\t\tcoords.push( vertex.x );\n\t\t\tcoords.push( vertex.y );\n\t\t\tcoords.push( vertex.z );\n\n\t\t}\n\n\t}\n\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\n\n};\n\nTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\n\n// File:src/extras/geometries/ExtrudeGeometry.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  amount: <int>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline is bevel\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n *\n *  uvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\n\n\tif ( typeof( shapes ) === \"undefined\" ) {\n\n\t\tshapes = [];\n\t\treturn;\n\n\t}\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ExtrudeGeometry';\n\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n\t// can't really use automatic vertex normals\n\t// as then front and back sides get smoothed too\n\t// should do separate smoothing just for sides\n\n\t//this.computeVertexNormals();\n\n\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n};\n\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\n\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tvar sl = shapes.length;\n\n\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\tvar shape = shapes[ s ];\n\t\tthis.addShape( shape, options );\n\n\t}\n\n};\n\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\tvar extrudePath = options.extrudePath;\n\tvar extrudePts, extrudeByPath = false;\n\n\t// Use default WorldUVGenerator if no UV generators are specified.\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\n\n\tvar splineTube, binormal, normal, position2;\n\tif ( extrudePath ) {\n\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\textrudeByPath = true;\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t// SETUP TNB variables\n\n\t\t// Reuse TNB from TubeGeomtry for now.\n\t\t// TODO1 - have a .isClosed in spline?\n\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\tbinormal = new THREE.Vector3();\n\t\tnormal = new THREE.Vector3();\n\t\tposition2 = new THREE.Vector3();\n\n\t}\n\n\t// Safeguards if bevels are not enabled\n\n\tif ( ! bevelEnabled ) {\n\n\t\tbevelSegments = 0;\n\t\tbevelThickness = 0;\n\t\tbevelSize = 0;\n\n\t}\n\n\t// Variables initialization\n\n\tvar ahole, h, hl; // looping of holes\n\tvar scope = this;\n\n\tvar shapesOffset = this.vertices.length;\n\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n\t}\n\n\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t/* Vertices */\n\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\tvertices = vertices.concat( ahole );\n\n\t}\n\n\n\tfunction scalePt2 ( pt, vec, size ) {\n\n\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t}\n\n\tvar b, bs, t, z,\n\t\tvert, vlen = vertices.length,\n\t\tface, flen = faces.length;\n\n\n\t// Find directions for point movement\n\n\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t//\n\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t// check for collinear edges\n\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t// not collinear\n\n\t\t\t// length of vectors for normalizing\n\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t// vector from inPt to intersection point\n\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t//  but prevent crazy spikes\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\n\n\t\t\t} else {\n\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// handle special case of collinear edges\n\n\t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( direction_eq ) {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\tv_trans_y =  v_prev_x;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t} else {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t}\n\n\n\tvar contourMovements = [];\n\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\tif ( j === il ) j = 0;\n\t\tif ( k === il ) k = 0;\n\n\t\t//  (j)---(i)---(k)\n\t\t// console.log('i,j,k', i, j , k)\n\n\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t}\n\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\toneHoleMovements = [];\n\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t}\n\n\t\tholesMovements.push( oneHoleMovements );\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t}\n\n\n\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\n\t\t//z = bevelThickness * t;\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\n\t\t//bs = bevelSize * t; // linear\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tbs = bevelSize;\n\n\t// Back facing vertices\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\tif ( ! extrudeByPath ) {\n\n\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t} else {\n\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t}\n\n\t}\n\n\t// Add stepped vertices...\n\t// Including front facing vertices\n\n\tvar s;\n\n\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Add bevel segments planes\n\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\n\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Faces */\n\n\t// Top and bottom faces\n\n\tbuildLidFaces();\n\n\t// Sides faces\n\n\tbuildSideFaces();\n\n\n\t/////  Internal functions\n\n\tfunction buildLidFaces() {\n\n\t\tif ( bevelEnabled ) {\n\n\t\t\tvar layer = 0; // steps + 1\n\t\t\tvar offset = vlen * layer;\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t}\n\n\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\toffset = vlen * layer;\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t}\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Create faces for the z-sides of the shape\n\n\tfunction buildSideFaces() {\n\n\t\tvar layeroffset = 0;\n\t\tsidewalls( contour, layeroffset );\n\t\tlayeroffset += contour.length;\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t//, true\n\t\t\tlayeroffset += ahole.length;\n\n\t\t}\n\n\t}\n\n\tfunction sidewalls( contour, layeroffset ) {\n\n\t\tvar j, k;\n\t\ti = contour.length;\n\n\t\twhile ( -- i >= 0 ) {\n\n\t\t\tj = i;\n\t\t\tk = i - 1;\n\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\tfunction v( x, y, z ) {\n\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\n\n\t}\n\n\tfunction f3( a, b, c ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\n\n\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n\t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n\t}\n\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\t\td += shapesOffset;\n\n\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\n\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\n\n\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n\t}\n\n};\n\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\n\t\treturn [\n\t\t\tnew THREE.Vector2( a.x, a.y ),\n\t\t\tnew THREE.Vector2( b.x, b.y ),\n\t\t\tnew THREE.Vector2( c.x, c.y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\t\tvar d = vertices[ indexD ];\n\n\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\n\t\t\t];\n\n\t\t}\n\n\t}\n};\n\n// File:src/extras/geometries/ShapeGeometry.js\n\n/**\n * @author jonobr1 / http://jonobr1.com\n *\n * Creates a one-sided polygonal geometry from a path shape. Similar to\n * ExtrudeGeometry.\n *\n * parameters = {\n *\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n *\n *\tmaterial: <int> // material index for front and back faces\n *\tuvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ShapeGeometry = function ( shapes, options ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ShapeGeometry';\n\n\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n};\n\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\n\n/**\n * Add an array of shapes to THREE.ShapeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\tthis.addShape( shapes[ i ], options );\n\n\t}\n\n\treturn this;\n\n};\n\n/**\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tif ( options === undefined ) options = {};\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar material = options.material;\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n\t//\n\n\tvar i, l, hole;\n\n\tvar shapesOffset = this.vertices.length;\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\t\thole = holes[ i ];\n\n\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\n\n\t\t\t\tholes[ i ] = hole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false;\n\n\t}\n\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t// Vertices\n\n\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\thole = holes[ i ];\n\t\tvertices = vertices.concat( hole );\n\n\t}\n\n\t//\n\n\tvar vert, vlen = vertices.length;\n\tvar face, flen = faces.length;\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = vertices[ i ];\n\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\n\n\t}\n\n\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\tface = faces[ i ];\n\n\t\tvar a = face[ 0 ] + shapesOffset;\n\t\tvar b = face[ 1 ] + shapesOffset;\n\t\tvar c = face[ 2 ] + shapesOffset;\n\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n\t}\n\n};\n\n// File:src/extras/geometries/LatheBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n // points - to create a closed torus, one must use a set of points\n //    like so: [ a, b, c, d, a ], see first is the same as last.\n // segments - the number of circumference segments to create\n // phiStart - the starting radian\n // phiLength - the radian (0 to 2PI) range of the lathed section\n //    2PI is a closed lathe, less than 2PI is a portion.\n\nTHREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'LatheBufferGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tsegments = Math.floor( segments ) || 12;\n\tphiStart = phiStart || 0;\n\tphiLength = phiLength || Math.PI * 2;\n\n\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\tphiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = ( segments + 1 ) * points.length;\n\tvar indexCount = segments * points.length * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\tvar index = 0, indexOffset = 0, base;\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\n\tvar inverseSegments = 1.0 / segments;\n\tvar vertex = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\tvar i, j;\n\n\t// generate vertices and uvs\n\n\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\tvar sin = Math.sin( phi );\n\t\tvar cos = Math.cos( phi );\n\n\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t// vertex\n\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\tvertex.y = points[ j ].y;\n\t\t\tvertex.z = points[ j ].x * cos;\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// uv\n\t\t\tuv.x = i / segments;\n\t\t\tuv.y = j / ( points.length - 1 );\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\tbase = j + i * points.length;\n\n\t\t\t// indices\n\t\t\tvar a = base;\n\t\t\tvar b = base + points.length;\n\t\t\tvar c = base + points.length + 1;\n\t\t\tvar d = base + 1;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// generate normals\n\n\tthis.computeVertexNormals();\n\n\t// if the geometry is closed, we need to average the normals along the seam.\n\t// because the corresponding vertices are identical (but still have different UVs).\n\n\tif( phiLength === Math.PI * 2 ) {\n\n\t\tvar normals = this.attributes.normal.array;\n\t\tvar n1 = new THREE.Vector3();\n\t\tvar n2 = new THREE.Vector3();\n\t\tvar n = new THREE.Vector3();\n\n\t\t// this is the buffer offset for the last line of vertices\n\t\tbase = segments * points.length * 3;\n\n\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t// select the normal of the vertex in the first line\n\t\t\tn1.x = normals[ j + 0 ];\n\t\t\tn1.y = normals[ j + 1 ];\n\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t// select the normal of the vertex in the last line\n\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t// average normals\n\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t// assign the new values to both normals\n\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t} // next row\n\n\t}\n\n};\n\nTHREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;\n\n// File:src/extras/geometries/LatheGeometry.js\n\n/**\n * @author astrodud / http://astrodud.isgreat.org/\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://clara.io\n */\n\n// points - to create a closed torus, one must use a set of points\n//    like so: [ a, b, c, d, a ], see first is the same as last.\n// segments - the number of circumference segments to create\n// phiStart - the starting radian\n// phiLength - the radian (0 to 2PI) range of the lathed section\n//    2PI is a closed lathe, less than 2PI is a portion.\n\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'LatheGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\n\n// File:src/extras/geometries/PlaneGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n};\n\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\n\n// File:src/extras/geometries/PlaneBufferGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = Math.floor( widthSegments ) || 1;\n\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n\tvar offset = 0;\n\tvar offset2 = 0;\n\n\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices[ offset ] = x;\n\t\t\tvertices[ offset + 1 ] = - y;\n\n\t\t\tnormals[ offset + 2 ] = 1;\n\n\t\t\tuvs[ offset2 ] = ix / gridX;\n\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n\t\t\toffset += 3;\n\t\t\toffset2 += 2;\n\n\t\t}\n\n\t}\n\n\toffset = 0;\n\n\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n\tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\tindices[ offset ] = a;\n\t\t\tindices[ offset + 1 ] = b;\n\t\t\tindices[ offset + 2 ] = d;\n\n\t\t\tindices[ offset + 3 ] = b;\n\t\t\tindices[ offset + 4 ] = c;\n\t\t\tindices[ offset + 5 ] = d;\n\n\t\t\toffset += 6;\n\n\t\t}\n\n\t}\n\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n};\n\nTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\n\n// File:src/extras/geometries/RingBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'RingBufferGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tinnerRadius = innerRadius || 20;\n\touterRadius = outerRadius || 50;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// some helper variables\n\tvar index = 0, indexOffset = 0, segment;\n\tvar radius = innerRadius;\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\tvar vertex = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\t// values are generate from the inside of the ring to the outside\n\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t// vertex\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\n\t\t\t// uv\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex++;\n\n\t\t}\n\n\t\t// increase the radius for next row of vertices\n\t\tradius += radiusStep;\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t// indices\n\t\t\tvar a = segment;\n\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\tvar d = segment + 1;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n};\n\nTHREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;\n\n// File:src/extras/geometries/RingGeometry.js\n\n/**\n * @author Kaleb Murphy\n */\n\nTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'RingGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\n};\n\nTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\n\n// File:src/extras/geometries/SphereGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'SphereGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n};\n\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\n\n// File:src/extras/geometries/SphereBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * based on THREE.SphereGeometry\n */\n\nTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'SphereBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 50;\n\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\tphiStart = phiStart !== undefined ? phiStart : 0;\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\tvar thetaEnd = thetaStart + thetaLength;\n\n\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\tvar index = 0, vertices = [], normal = new THREE.Vector3();\n\n\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n\t\tvar verticesRow = [];\n\n\t\tvar v = y / heightSegments;\n\n\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n\t\t\tvar u = x / widthSegments;\n\n\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\tnormal.set( px, py, pz ).normalize();\n\n\t\t\tpositions.setXYZ( index, px, py, pz );\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\tverticesRow.push( index );\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\tvertices.push( verticesRow );\n\n\t}\n\n\tvar indices = [];\n\n\tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t\t\tvar v2 = vertices[ y ][ x ];\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n\t\t}\n\n\t}\n\n\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\n\tthis.addAttribute( 'position', positions );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\n\n// File:src/extras/geometries/TextGeometry.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float> // how far from text outline is bevel\n * }\n */\n\nTHREE.TextGeometry = function ( text, parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar font = parameters.font;\n\n\tif ( font instanceof THREE.Font === false ) {\n\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\treturn new THREE.Geometry();\n\n\t}\n\n\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t// translate parameters to ExtrudeGeometry API\n\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t// defaults\n\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\tTHREE.ExtrudeGeometry.call( this, shapes, parameters );\n\n\tthis.type = 'TextGeometry';\n\n};\n\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\nTHREE.TextGeometry.prototype.constructor = THREE.TextGeometry;\n\n// File:src/extras/geometries/TorusBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'TorusBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\tarc = arc || Math.PI * 2;\n\n\t// used to calculate buffer length\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\tvar vertices = new Float32Array( vertexCount * 3 );\n\tvar normals = new Float32Array( vertexCount * 3 );\n\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t// offset variables\n\tvar vertexBufferOffset = 0;\n\tvar uvBufferOffset = 0;\n\tvar indexBufferOffset = 0;\n\n\t// helper variables\n\tvar center = new THREE.Vector3();\n\tvar vertex = new THREE.Vector3();\n\tvar normal = new THREE.Vector3();\n\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar u = i / tubularSegments * arc;\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t// vertex\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\n\t\t\t// this vector is used to calculate the normal\n\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\tcenter.y = radius * Math.sin( u );\n\n\t\t\t// normal\n\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\n\t\t\t// uv\n\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\n\t\t\t// update offsets\n\t\t\tvertexBufferOffset += 3;\n\t\t\tuvBufferOffset += 2;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t// indices\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t// face one\n\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t// face two\n\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t// update offset\n\t\t\tindexBufferOffset += 6;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n};\n\nTHREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;\n\n// File:src/extras/geometries/TorusGeometry.js\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n */\n\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tthis.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\n};\n\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\n\n// File:src/extras/geometries/TorusKnotBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * see: http://www.blackpawn.com/texts/pqtorus/\n */\nTHREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'TorusKnotBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\tp = p || 2;\n\tq = q || 3;\n\n\t// used to calculate buffer length\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\tvar i, j, index = 0, indexOffset = 0;\n\n\tvar vertex = new THREE.Vector3();\n\tvar normal = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\n\tvar P1 = new THREE.Vector3();\n\tvar P2 = new THREE.Vector3();\n\n\tvar B = new THREE.Vector3();\n\tvar T = new THREE.Vector3();\n\tvar N = new THREE.Vector3();\n\n\t// generate vertices, normals and uvs\n\n\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t// calculate orthonormal basis\n\n\t\tT.subVectors( P2, P1 );\n\t\tN.addVectors( P2, P1 );\n\t\tB.crossVectors( T, N );\n\t\tN.crossVectors( B, T );\n\n\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\tB.normalize();\n\t\tN.normalize();\n\n\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t// now calculate the final vertex position.\n\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t// vertex\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\t\t\tuv.x = i / tubularSegments;\n\t\t\tuv.y = j / radialSegments;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t// indices\n\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// this function calculates the current position on the torus curve\n\n\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\tvar cu = Math.cos( u );\n\t\tvar su = Math.sin( u );\n\t\tvar quOverP = q / p * u;\n\t\tvar cs = Math.cos( quOverP );\n\n\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t}\n\n};\n\nTHREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;\n\n// File:src/extras/geometries/TorusKnotGeometry.js\n\n/**\n * @author oosmoxiecode\n */\n\nTHREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusKnotGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\tthis.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\n\n// File:src/extras/geometries/TubeGeometry.js\n\n/**\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n *\n * Modified from the TorusKnotGeometry by @oosmoxiecode\n *\n * Creates a tube which extrudes along a 3d spline\n *\n * Uses parallel transport frames as described in\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n */\n\nTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TubeGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\tsegments: segments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed,\n\t\ttaper: taper\n\t};\n\n\tsegments = segments || 64;\n\tradius = radius || 1;\n\tradialSegments = radialSegments || 8;\n\tclosed = closed || false;\n\ttaper = taper || THREE.TubeGeometry.NoTaper;\n\n\tvar grid = [];\n\n\tvar scope = this,\n\n\t\ttangent,\n\t\tnormal,\n\t\tbinormal,\n\n\t\tnumpoints = segments + 1,\n\n\t\tu, v, r,\n\n\t\tcx, cy,\n\t\tpos, pos2 = new THREE.Vector3(),\n\t\ti, j,\n\t\tip, jp,\n\t\ta, b, c, d,\n\t\tuva, uvb, uvc, uvd;\n\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\n\t\ttangents = frames.tangents,\n\t\tnormals = frames.normals,\n\t\tbinormals = frames.binormals;\n\n\t// proxy internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\tfunction vert( x, y, z ) {\n\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\n\n\t}\n\n\t// construct the grid\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tgrid[ i ] = [];\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\tpos = path.getPointAt( u );\n\n\t\ttangent = tangents[ i ];\n\t\tnormal = normals[ i ];\n\t\tbinormal = binormals[ i ];\n\n\t\tr = radius * taper( u );\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tv = j / radialSegments * 2 * Math.PI;\n\n\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tcy = r * Math.sin( v );\n\n\t\t\tpos2.copy( pos );\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n\t\t}\n\n\t}\n\n\n\t// construct the mesh\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n\t\t\tjp = ( j + 1 ) % radialSegments;\n\n\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t\t\tb = grid[ ip ][ j ];\n\t\t\tc = grid[ ip ][ jp ];\n\t\t\td = grid[ i ][ jp ];\n\n\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\n\nTHREE.TubeGeometry.NoTaper = function ( u ) {\n\n\treturn 1;\n\n};\n\nTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\n\n\treturn Math.sin( Math.PI * u );\n\n};\n\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\nTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n\tvar\tnormal = new THREE.Vector3(),\n\n\t\ttangents = [],\n\t\tnormals = [],\n\t\tbinormals = [],\n\n\t\tvec = new THREE.Vector3(),\n\t\tmat = new THREE.Matrix4(),\n\n\t\tnumpoints = segments + 1,\n\t\ttheta,\n\t\tsmallest,\n\n\t\ttx, ty, tz,\n\t\ti, u;\n\n\n\t// expose internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\t// compute the tangent vectors for each segment on the path\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\ttangents[ i ] = path.getTangentAt( u );\n\t\ttangents[ i ].normalize();\n\n\t}\n\n\tinitialNormal3();\n\n\t/*\n\tfunction initialNormal1(lastBinormal) {\n\t\t// fixed start binormal. Has dangers of 0 vectors\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t}\n\n\tfunction initialNormal2() {\n\n\t\t// This uses the Frenet-Serret formula for deriving binormal\n\t\tvar t2 = path.getTangentAt( epsilon );\n\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n\t}\n\t*/\n\n\tfunction initialNormal3() {\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the smallest tangent xyz component\n\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tsmallest = Number.MAX_VALUE;\n\t\ttx = Math.abs( tangents[ 0 ].x );\n\t\tty = Math.abs( tangents[ 0 ].y );\n\t\ttz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= smallest ) {\n\n\t\t\tsmallest = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= smallest ) {\n\n\t\t\tsmallest = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= smallest ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t}\n\n\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\tvec.normalize();\n\n\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t}\n\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t}\n\n\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\tif ( closed ) {\n\n\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n\t\ttheta /= ( numpoints - 1 );\n\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\n\t\t\ttheta = - theta;\n\n\t\t}\n\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\t\t// twist a little...\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/extras/geometries/PolyhedronGeometry.js\n\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PolyhedronGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tradius = radius || 1;\n\tdetail = detail || 0;\n\n\tvar that = this;\n\n\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n\t}\n\n\tvar p = this.vertices;\n\n\tvar faces = [];\n\n\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n\t\tvar v1 = p[ indices[ i ] ];\n\t\tvar v2 = p[ indices[ i + 1 ] ];\n\t\tvar v3 = p[ indices[ i + 2 ] ];\n\n\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n\t}\n\n\tvar centroid = new THREE.Vector3();\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tsubdivide( faces[ i ], detail );\n\n\t}\n\n\n\t// Handle case when face straddles the seam\n\n\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\tvar x0 = uvs[ 0 ].x;\n\t\tvar x1 = uvs[ 1 ].x;\n\t\tvar x2 = uvs[ 2 ].x;\n\n\t\tvar max = Math.max( x0, x1, x2 );\n\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n\t\t}\n\n\t}\n\n\n\t// Apply radius\n\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\tthis.vertices[ i ].multiplyScalar( radius );\n\n\t}\n\n\n\t// Merge vertices\n\n\tthis.mergeVertices();\n\n\tthis.computeFaceNormals();\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n\n\t// Project vector onto sphere's surface\n\n\tfunction prepare( vector ) {\n\n\t\tvar vertex = vector.normalize().clone();\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\n\n\t\treturn vertex;\n\n\t}\n\n\n\t// Approximate a curved face with recursively sub-divided triangles.\n\n\tfunction make( v1, v2, v3 ) {\n\n\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\tthat.faces.push( face );\n\n\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n\t\tvar azi = azimuth( centroid );\n\n\t\tthat.faceVertexUvs[ 0 ].push( [\n\t\t\tcorrectUV( v1.uv, v1, azi ),\n\t\t\tcorrectUV( v2.uv, v2, azi ),\n\t\t\tcorrectUV( v3.uv, v3, azi )\n\t\t] );\n\n\t}\n\n\n\t// Analytically subdivide a face to the required detail level.\n\n\tfunction subdivide( face, detail ) {\n\n\t\tvar cols = Math.pow( 2, detail );\n\t\tvar a = prepare( that.vertices[ face.a ] );\n\t\tvar b = prepare( that.vertices[ face.b ] );\n\t\tvar c = prepare( that.vertices[ face.c ] );\n\t\tvar v = [];\n\n\t\t// Construct all of the vertices for this subdivision.\n\n\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n\t\t\tv[ i ] = [];\n\n\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t\t\tvar rows = cols - i;\n\n\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Construct all of the faces.\n\n\t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k ],\n\t\t\t\t\t\tv[ i ][ k ]\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k ]\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\tfunction azimuth( vector ) {\n\n\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t}\n\n\n\t// Angle above the XZ plane.\n\n\tfunction inclination( vector ) {\n\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t}\n\n\n\t// Texture fixing helper. Spheres have some odd behaviours.\n\n\tfunction correctUV( uv, vector, azimuth ) {\n\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t\treturn uv.clone();\n\n\t}\n\n\n};\n\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\n\n// File:src/extras/geometries/DodecahedronGeometry.js\n\n/**\n * @author Abe Pazos / https://hamoid.com\n */\n\nTHREE.DodecahedronGeometry = function ( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar r = 1 / t;\n\n\tvar vertices = [\n\n\t\t// (±1, ±1, ±1)\n\t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t\t- 1,  1, - 1,    - 1,  1,  1,\n\t\t 1, - 1, - 1,     1, - 1,  1,\n\t\t 1,  1, - 1,     1,  1,  1,\n\n\t\t// (0, ±1/φ, ±φ)\n\t\t 0, - r, - t,     0, - r,  t,\n\t\t 0,  r, - t,     0,  r,  t,\n\n\t\t// (±1/φ, ±φ, 0)\n\t\t- r, - t,  0,    - r,  t,  0,\n\t\t r, - t,  0,     r,  t,  0,\n\n\t\t// (±φ, 0, ±1/φ)\n\t\t- t,  0, - r,     t,  0, - r,\n\t\t- t,  0,  r,     t,  0,  r\n\t];\n\n\tvar indices = [\n\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'DodecahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\n\n// File:src/extras/geometries/IcosahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\tvar vertices = [\n\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t];\n\n\tvar indices = [\n\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'IcosahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\n\n// File:src/extras/geometries/OctahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.OctahedronGeometry = function ( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t];\n\n\tvar indices = [\n\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'OctahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\n\n// File:src/extras/geometries/TetrahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\n\n\tvar vertices = [\n\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t];\n\n\tvar indices = [\n\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'TetrahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\n\n// File:src/extras/geometries/ParametricGeometry.js\n\n/**\n * @author zz85 / https://github.com/zz85\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n *\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n *\n */\n\nTHREE.ParametricGeometry = function ( func, slices, stacks ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ParametricGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\tvar verts = this.vertices;\n\tvar faces = this.faces;\n\tvar uvs = this.faceVertexUvs[ 0 ];\n\n\tvar i, j, p;\n\tvar u, v;\n\n\tvar sliceCount = slices + 1;\n\n\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\tv = i / stacks;\n\n\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\tu = j / slices;\n\n\t\t\tp = func( u, v );\n\t\t\tverts.push( p );\n\n\t\t}\n\n\t}\n\n\tvar a, b, c, d;\n\tvar uva, uvb, uvc, uvd;\n\n\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\ta = i * sliceCount + j;\n\t\t\tb = i * sliceCount + j + 1;\n\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t\t\td = ( i + 1 ) * sliceCount + j;\n\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\n\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\n\n\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\n\t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\n\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\t// console.log(this);\n\n\t// magic bullet\n\t// var diff = this.mergeVertices();\n\t// console.log('removed ', diff, ' vertices by merging');\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\n\n// File:src/extras/geometries/WireframeGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeGeometry = function ( geometry ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tvar edge = [ 0, 0 ], hash = {};\n\n\tfunction sortFunction( a, b ) {\n\n\t\treturn a - b;\n\n\t}\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\n\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\tvar vertices = geometry.vertices;\n\t\tvar faces = geometry.faces;\n\t\tvar numEdges = 0;\n\n\t\t// allocate maximal size\n\t\tvar edges = new Uint32Array( 6 * faces.length );\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\tvar key = edge.toString();\n\n\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\t// Indexed BufferGeometry\n\n\t\t\tvar indices = geometry.index.array;\n\t\t\tvar vertices = geometry.attributes.position;\n\t\t\tvar groups = geometry.groups;\n\t\t\tvar numEdges = 0;\n\n\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\tgeometry.addGroup( 0, indices.length );\n\n\t\t\t}\n\n\t\t\t// allocate maximal size\n\t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t\t\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\t\t\tvar key = edge.toString();\n\n\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t} else {\n\n\t\t\t// non-indexed BufferGeometry\n\n\t\t\tvar vertices = geometry.attributes.position.array;\n\t\t\tvar numEdges = vertices.length / 3;\n\t\t\tvar numTris = numEdges / 3;\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tvar index = 18 * i + 6 * j;\n\n\t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\n\n// File:src/extras/helpers/AxisHelper.js\n\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AxisHelper = function ( size ) {\n\n\tsize = size || 1;\n\n\tvar vertices = new Float32Array( [\n\t\t0, 0, 0,  size, 0, 0,\n\t\t0, 0, 0,  0, size, 0,\n\t\t0, 0, 0,  0, 0, size\n\t] );\n\n\tvar colors = new Float32Array( [\n\t\t1, 0, 0,  1, 0.6, 0,\n\t\t0, 1, 0,  0.6, 1, 0,\n\t\t0, 0, 1,  0, 0.6, 1\n\t] );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n};\n\nTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\n\n// File:src/extras/helpers/ArrowHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\n\nTHREE.ArrowHelper = ( function () {\n\n\tvar lineGeometry = new THREE.BufferGeometry();\n\tlineGeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\tvar coneGeometry = new THREE.CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t};\n\n}() );\n\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\n\nTHREE.ArrowHelper.prototype.setDirection = ( function () {\n\n\tvar axis = new THREE.Vector3();\n\tvar radians;\n\n\treturn function setDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tradians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\tthis.line.updateMatrix();\n\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\tthis.cone.position.y = length;\n\tthis.cone.updateMatrix();\n\n};\n\nTHREE.ArrowHelper.prototype.setColor = function ( color ) {\n\n\tthis.line.material.color.copy( color );\n\tthis.cone.material.color.copy( color );\n\n};\n\n// File:src/extras/helpers/BoxHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BoxHelper = function ( object, color ) {\n\t\n\tif ( color === undefined ) color = 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\tvar positions = new Float32Array( 8 * 3 );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ) );\n\n\tif ( object !== undefined ) {\n\n\t\tthis.update( object );\n\n\t}\n\n};\n\nTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\n\nTHREE.BoxHelper.prototype.update = ( function () {\n\n\tvar box = new THREE.Box3();\n\n\treturn function update( object ) {\n\n\t\tif ( object instanceof THREE.Box3 ) {\n\n\t\t\tbox.copy( object );\n\n\t\t} else {\n\n\t\t\tbox.setFromObject( object );\n\n\t\t}\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tvar min = box.min;\n\t\tvar max = box.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t};\n\n} )();\n\n// File:src/extras/helpers/BoundingBoxHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\n// a helper to show the world-axis-aligned bounding box for an object\n\nTHREE.BoundingBoxHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n\tthis.object = object;\n\n\tthis.box = new THREE.Box3();\n\n\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n};\n\nTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\n\nTHREE.BoundingBoxHelper.prototype.update = function () {\n\n\tthis.box.setFromObject( this.object );\n\n\tthis.box.size( this.scale );\n\n\tthis.box.center( this.position );\n\n};\n\n// File:src/extras/helpers/CameraHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nTHREE.CameraHelper = function ( camera ) {\n\n\tvar geometry = new THREE.Geometry();\n\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\n\n\tvar pointMap = {};\n\n\t// colors\n\n\tvar hexFrustum = 0xffaa00;\n\tvar hexCone = 0xff0000;\n\tvar hexUp = 0x00aaff;\n\tvar hexTarget = 0xffffff;\n\tvar hexCross = 0x333333;\n\n\t// near\n\n\taddLine( \"n1\", \"n2\", hexFrustum );\n\taddLine( \"n2\", \"n4\", hexFrustum );\n\taddLine( \"n4\", \"n3\", hexFrustum );\n\taddLine( \"n3\", \"n1\", hexFrustum );\n\n\t// far\n\n\taddLine( \"f1\", \"f2\", hexFrustum );\n\taddLine( \"f2\", \"f4\", hexFrustum );\n\taddLine( \"f4\", \"f3\", hexFrustum );\n\taddLine( \"f3\", \"f1\", hexFrustum );\n\n\t// sides\n\n\taddLine( \"n1\", \"f1\", hexFrustum );\n\taddLine( \"n2\", \"f2\", hexFrustum );\n\taddLine( \"n3\", \"f3\", hexFrustum );\n\taddLine( \"n4\", \"f4\", hexFrustum );\n\n\t// cone\n\n\taddLine( \"p\", \"n1\", hexCone );\n\taddLine( \"p\", \"n2\", hexCone );\n\taddLine( \"p\", \"n3\", hexCone );\n\taddLine( \"p\", \"n4\", hexCone );\n\n\t// up\n\n\taddLine( \"u1\", \"u2\", hexUp );\n\taddLine( \"u2\", \"u3\", hexUp );\n\taddLine( \"u3\", \"u1\", hexUp );\n\n\t// target\n\n\taddLine( \"c\", \"t\", hexTarget );\n\taddLine( \"p\", \"c\", hexCross );\n\n\t// cross\n\n\taddLine( \"cn1\", \"cn2\", hexCross );\n\taddLine( \"cn3\", \"cn4\", hexCross );\n\n\taddLine( \"cf1\", \"cf2\", hexCross );\n\taddLine( \"cf3\", \"cf4\", hexCross );\n\n\tfunction addLine( a, b, hex ) {\n\n\t\taddPoint( a, hex );\n\t\taddPoint( b, hex );\n\n\t}\n\n\tfunction addPoint( id, hex ) {\n\n\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\tgeometry.colors.push( new THREE.Color( hex ) );\n\n\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\tpointMap[ id ] = [];\n\n\t\t}\n\n\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n\t}\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n\tthis.camera = camera;\n\tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\tthis.matrix = camera.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.pointMap = pointMap;\n\n\tthis.update();\n\n};\n\nTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\n\nTHREE.CameraHelper.prototype.update = function () {\n\n\tvar geometry, pointMap;\n\n\tvar vector = new THREE.Vector3();\n\tvar camera = new THREE.Camera();\n\n\tfunction setPoint( point, x, y, z ) {\n\n\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn function update() {\n\n\t\tgeometry = this.geometry;\n\t\tpointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix\n\t\t// world matrix must be identity\n\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t// center / target\n\n\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\tsetPoint( \"t\", 0, 0,  1 );\n\n\t\t// near\n\n\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\tsetPoint( \"f4\",   w,   h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t};\n\n}();\n\n// File:src/extras/helpers/DirectionalLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.DirectionalLightHelper = function ( light, size ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tif ( size === undefined ) size = 1;\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [\n\t\t- size,   size, 0,\n\t\t  size,   size, 0,\n\t\t  size, - size, 0,\n\t\t- size, - size, 0,\n\t\t- size,   size, 0\n\t], 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\n\tthis.add( new THREE.Line( geometry, material ) );\n\n\tgeometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\tthis.add( new THREE.Line( geometry, material ));\n\n\tthis.update();\n\n};\n\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\n\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\n\n\tvar lightPlane = this.children[ 0 ];\n\tvar targetLine = this.children[ 1 ];\n\n\tlightPlane.geometry.dispose();\n\tlightPlane.material.dispose();\n\ttargetLine.geometry.dispose();\n\ttargetLine.material.dispose();\n\n};\n\nTHREE.DirectionalLightHelper.prototype.update = function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar v3 = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\tv3.subVectors( v2, v1 );\n\n\t\tvar lightPlane = this.children[ 0 ];\n\t\tvar targetLine = this.children[ 1 ];\n\n\t\tlightPlane.lookAt( v3 );\n\t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\ttargetLine.lookAt( v3 );\n\t\ttargetLine.scale.z = v3.length();\n\n\t};\n\n}();\n\n// File:src/extras/helpers/EdgesHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @param object THREE.Mesh whose geometry will be used\n * @param hex line color\n * @param thresholdAngle the minimum angle (in degrees),\n * between the face normals of adjacent faces,\n * that is required to render an edge. A value of 10 means\n * an edge is only rendered if the angle is at least 10 degrees.\n */\n\nTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\n\n// File:src/extras/helpers/FaceNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\t// FaceNormalsHelper only supports THREE.Geometry\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\tnNormals = objGeometry.faces.length;\n\n\t} else {\n\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t}\n\n\t//\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\tthis.update();\n\n};\n\nTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\n\nTHREE.FaceNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar normalMatrix = new THREE.Matrix3();\n\n\treturn function update() {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tvar vertices = objGeometry.vertices;\n\n\t\tvar faces = objGeometry.faces;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar normal = face.normal;\n\n\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t.divideScalar( 3 )\n\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t\treturn this;\n\n\t};\n\n}() );\n\n// File:src/extras/helpers/GridHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.GridHelper = function ( size, step, color1, color2 ) {\n\n\tcolor1 = new THREE.Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new THREE.Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tfor ( var i = - size, j = 0; i <= size; i += step ) {\n\n\t\tvertices.push( - size, 0, i, size, 0, i );\n\t\tvertices.push( i, 0, - size, i, 0, size );\n\n\t\tvar color = i === 0 ? color1 : color2;\n\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\n\t}\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new THREE.Float32Attribute( colors, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n};\n\nTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\n\nTHREE.GridHelper.prototype.setColors = function () {\n\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n};\n\n// File:src/extras/helpers/HemisphereLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\n\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n\tgeometry.rotateX( - Math.PI / 2 );\n\n\tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n\t}\n\n\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\n\n\tthis.lightSphere = new THREE.Mesh( geometry, material );\n\tthis.add( this.lightSphere );\n\n\tthis.update();\n\n};\n\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\n\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\n\n\tthis.lightSphere.geometry.dispose();\n\tthis.lightSphere.material.dispose();\n\n};\n\nTHREE.HemisphereLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n\t};\n\n}();\n\n// File:src/extras/helpers/PointLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PointLightHelper = function ( light, sphereSize ) {\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tvar geometry = new THREE.SphereBufferGeometry( sphereSize, 4, 2 );\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.matrix = this.light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\t/*\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tvar d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n};\n\nTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\n\nTHREE.PointLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\n};\n\nTHREE.PointLightHelper.prototype.update = function () {\n\n\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t/*\n\tvar d = this.light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.visible = true;\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\t*/\n\n};\n\n// File:src/extras/helpers/SkeletonHelper.js\n\n/**\n * @author Sean Griffin / http://twitter.com/sgrif\n * @author Michael Guerrero / http://realitymeltdown.com\n * @author mrdoob / http://mrdoob.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkeletonHelper = function ( object ) {\n\n\tthis.bones = this.getBoneList( object );\n\n\tvar geometry = new THREE.Geometry();\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dynamic = true;\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n\tthis.root = object;\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\n\nTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\n\nTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\n\n\tvar boneList = [];\n\n\tif ( object instanceof THREE.Bone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n};\n\nTHREE.SkeletonHelper.prototype.update = function () {\n\n\tvar geometry = this.geometry;\n\n\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\n\n\tvar boneMatrix = new THREE.Matrix4();\n\n\tvar j = 0;\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tj += 2;\n\n\t\t}\n\n\t}\n\n\tgeometry.verticesNeedUpdate = true;\n\n\tgeometry.computeBoundingSphere();\n\n};\n\n// File:src/extras/helpers/SpotLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.SpotLightHelper = function ( light ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = [\n\t\t0, 0, 0,   0,   0,   1,\n\t\t0, 0, 0,   1,   0,   1,\n\t\t0, 0, 0, - 1,   0,   1,\n\t\t0, 0, 0,   0,   1,   1,\n\t\t0, 0, 0,   0, - 1,   1\n\t];\n\n\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\tpositions.push(\n\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t);\n\n\t}\n\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( positions, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\n\tthis.cone = new THREE.LineSegments( geometry, material );\n\tthis.add( this.cone );\n\n\tthis.update();\n\n};\n\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\n\nTHREE.SpotLightHelper.prototype.dispose = function () {\n\n\tthis.cone.geometry.dispose();\n\tthis.cone.material.dispose();\n\n};\n\nTHREE.SpotLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\tvar vector2 = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t};\n\n}();\n\n// File:src/extras/helpers/VertexNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\tnNormals = objGeometry.faces.length * 3;\n\n\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t}\n\n\t//\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\nTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\n\nTHREE.VertexNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar normalMatrix = new THREE.Matrix3();\n\n\treturn function update() {\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\tvar idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t\treturn this;\n\n\t};\n\n}() );\n\n// File:src/extras/helpers/WireframeHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\n\n// File:src/extras/objects/ImmediateRenderObject.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ImmediateRenderObject = function ( material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.material = material;\n\tthis.render = function ( renderCallback ) {};\n\n};\n\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\n\n// File:src/extras/objects/MorphBlendMesh.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.MorphBlendMesh = function( geometry, material ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.animationsMap = {};\n\tthis.animationsList = [];\n\n\t// prepare default animation\n\t// (all frames played together in 1 second)\n\n\tvar numFrames = this.geometry.morphTargets.length;\n\n\tvar name = \"__default\";\n\n\tvar startFrame = 0;\n\tvar endFrame = numFrames - 1;\n\n\tvar fps = numFrames / 1;\n\n\tthis.createAnimation( name, startFrame, endFrame, fps );\n\tthis.setAnimationWeight( name, 1 );\n\n};\n\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\n\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\n\n\tvar animation = {\n\n\t\tstart: start,\n\t\tend: end,\n\n\t\tlength: end - start + 1,\n\n\t\tfps: fps,\n\t\tduration: ( end - start ) / fps,\n\n\t\tlastFrame: 0,\n\t\tcurrentFrame: 0,\n\n\t\tactive: false,\n\n\t\ttime: 0,\n\t\tdirection: 1,\n\t\tweight: 1,\n\n\t\tdirectionBackwards: false,\n\t\tmirroredLoop: false\n\n\t};\n\n\tthis.animationsMap[ name ] = animation;\n\tthis.animationsList.push( animation );\n\n};\n\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\n\n\tvar pattern = /([a-z]+)_?(\\d+)/i;\n\n\tvar firstAnimation, frameRanges = {};\n\n\tvar geometry = this.geometry;\n\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\n\n\t\tvar morph = geometry.morphTargets[ i ];\n\t\tvar chunks = morph.name.match( pattern );\n\n\t\tif ( chunks && chunks.length > 1 ) {\n\n\t\t\tvar name = chunks[ 1 ];\n\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\n\n\t\t\tvar range = frameRanges[ name ];\n\n\t\t\tif ( i < range.start ) range.start = i;\n\t\t\tif ( i > range.end ) range.end = i;\n\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\n\n\t\t}\n\n\t}\n\n\tfor ( var name in frameRanges ) {\n\n\t\tvar range = frameRanges[ name ];\n\t\tthis.createAnimation( name, range.start, range.end, fps );\n\n\t}\n\n\tthis.firstAnimation = firstAnimation;\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = 1;\n\t\tanimation.directionBackwards = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = - 1;\n\t\tanimation.directionBackwards = true;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.fps = fps;\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.duration = duration;\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.weight = weight;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = time;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\n\n\tvar time = 0;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\ttime = animation.time;\n\n\t}\n\n\treturn time;\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\n\n\tvar duration = - 1;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tduration = animation.duration;\n\n\t}\n\n\treturn duration;\n\n};\n\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = 0;\n\t\tanimation.active = true;\n\n\t} else {\n\n\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.active = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\n\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\n\n\t\tvar animation = this.animationsList[ i ];\n\n\t\tif ( ! animation.active ) continue;\n\n\t\tvar frameTime = animation.duration / animation.length;\n\n\t\tanimation.time += animation.direction * delta;\n\n\t\tif ( animation.mirroredLoop ) {\n\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\n\n\t\t\t\tanimation.direction *= - 1;\n\n\t\t\t\tif ( animation.time > animation.duration ) {\n\n\t\t\t\t\tanimation.time = animation.duration;\n\t\t\t\t\tanimation.directionBackwards = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( animation.time < 0 ) {\n\n\t\t\t\t\tanimation.time = 0;\n\t\t\t\t\tanimation.directionBackwards = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tanimation.time = animation.time % animation.duration;\n\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\n\n\t\t}\n\n\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\n\t\tvar weight = animation.weight;\n\n\t\tif ( keyframe !== animation.currentFrame ) {\n\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\n\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\n\n\t\t\tanimation.lastFrame = animation.currentFrame;\n\t\t\tanimation.currentFrame = keyframe;\n\n\t\t}\n\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\n\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\n\n\t\tif ( animation.currentFrame !== animation.lastFrame ) {\n\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\n\n\t\t} else {\n\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\n\n\t\t}\n\n\t}\n\n};\n\n","/**\n * @author alteredq / http://alteredqualia.com/\n * @author mr.doob / http://mrdoob.com/\n */\n\nvar Detector = {\n\n\tcanvas: !! window.CanvasRenderingContext2D,\n\twebgl: ( function () { try { var canvas = document.createElement( 'canvas' ); return !! window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) ); } catch( e ) { return false; } } )(),\n\tworkers: !! window.Worker,\n\tfileapi: window.File && window.FileReader && window.FileList && window.Blob,\n\n\tgetWebGLErrorMessage: function () {\n\n\t\tvar element = document.createElement( 'div' );\n\t\telement.id = 'webgl-error-message';\n\t\telement.style.fontFamily = 'monospace';\n\t\telement.style.fontSize = '13px';\n\t\telement.style.fontWeight = 'normal';\n\t\telement.style.textAlign = 'center';\n\t\telement.style.background = '#fff';\n\t\telement.style.color = '#000';\n\t\telement.style.padding = '1.5em';\n\t\telement.style.width = '400px';\n\t\telement.style.margin = '5em auto 0';\n\n\t\tif ( ! this.webgl ) {\n\n\t\t\telement.innerHTML = window.WebGLRenderingContext ? [\n\t\t\t\t'Your graphics card does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000\">WebGL</a>.<br />',\n\t\t\t\t'Find out how to get it <a href=\"http://get.webgl.org/\" style=\"color:#000\">here</a>.'\n\t\t\t].join( '\\n' ) : [\n\t\t\t\t'Your browser does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000\">WebGL</a>.<br/>',\n\t\t\t\t'Find out how to get it <a href=\"http://get.webgl.org/\" style=\"color:#000\">here</a>.'\n\t\t\t].join( '\\n' );\n\n\t\t}\n\n\t\treturn element;\n\n\t},\n\n\taddGetWebGLMessage: function ( parameters ) {\n\n\t\tvar parent, id, element;\n\n\t\tparameters = parameters || {};\n\n\t\tparent = parameters.parent !== undefined ? parameters.parent : document.body;\n\t\tid = parameters.id !== undefined ? parameters.id : 'oldie';\n\n\t\telement = Detector.getWebGLErrorMessage();\n\t\telement.id = id;\n\n\t\tparent.appendChild( element );\n\n\t}\n\n};","/**\n * @author James Baicoianu / http://www.baicoianu.com/\n */\n\nTHREE.FlyControls = function ( object, domElement ) {\n\n\tthis.object = object;\n\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\tif ( domElement ) this.domElement.setAttribute( 'tabindex', -1 );\n\n\t// API\n\n\tthis.movementSpeed = 1.0;\n\tthis.rollSpeed = 0.005;\n\n\tthis.dragToLook = false;\n\tthis.autoForward = false;\n\n\t// disable default target object behavior\n\n\t// internals\n\n\tthis.tmpQuaternion = new THREE.Quaternion();\n\n\tthis.mouseStatus = 0;\n\n\tthis.moveState = { up: 0, down: 0, left: 0, right: 0, forward: 0, back: 0, pitchUp: 0, pitchDown: 0, yawLeft: 0, yawRight: 0, rollLeft: 0, rollRight: 0 };\n\tthis.moveVector = new THREE.Vector3( 0, 0, 0 );\n\tthis.rotationVector = new THREE.Vector3( 0, 0, 0 );\n\n\tthis.handleEvent = function ( event ) {\n\n\t\tif ( typeof this[ event.type ] == 'function' ) {\n\n\t\t\tthis[ event.type ]( event );\n\n\t\t}\n\n\t};\n\n\tthis.keydown = function( event ) {\n\n\t\tif ( event.altKey ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t//event.preventDefault();\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase 16: /* shift */ this.movementSpeedMultiplier = .1; break;\n\n\t\t\tcase 87: /*W*/ this.moveState.forward = 1; break;\n\t\t\tcase 83: /*S*/ this.moveState.back = 1; break;\n\n\t\t\tcase 65: /*A*/ this.moveState.left = 1; break;\n\t\t\tcase 68: /*D*/ this.moveState.right = 1; break;\n\n\t\t\tcase 82: /*R*/ this.moveState.up = 1; break;\n\t\t\tcase 70: /*F*/ this.moveState.down = 1; break;\n\n\t\t\tcase 38: /*up*/ this.moveState.pitchUp = 1; break;\n\t\t\tcase 40: /*down*/ this.moveState.pitchDown = 1; break;\n\n\t\t\tcase 37: /*left*/ this.moveState.yawLeft = 1; break;\n\t\t\tcase 39: /*right*/ this.moveState.yawRight = 1; break;\n\n\t\t\tcase 81: /*Q*/ this.moveState.rollLeft = 1; break;\n\t\t\tcase 69: /*E*/ this.moveState.rollRight = 1; break;\n\n\t\t}\n\n\t\tthis.updateMovementVector();\n\t\tthis.updateRotationVector();\n\n\t};\n\n\tthis.keyup = function( event ) {\n\n\t\tswitch( event.keyCode ) {\n\n\t\t\tcase 16: /* shift */ this.movementSpeedMultiplier = 1; break;\n\n\t\t\tcase 87: /*W*/ this.moveState.forward = 0; break;\n\t\t\tcase 83: /*S*/ this.moveState.back = 0; break;\n\n\t\t\tcase 65: /*A*/ this.moveState.left = 0; break;\n\t\t\tcase 68: /*D*/ this.moveState.right = 0; break;\n\n\t\t\tcase 82: /*R*/ this.moveState.up = 0; break;\n\t\t\tcase 70: /*F*/ this.moveState.down = 0; break;\n\n\t\t\tcase 38: /*up*/ this.moveState.pitchUp = 0; break;\n\t\t\tcase 40: /*down*/ this.moveState.pitchDown = 0; break;\n\n\t\t\tcase 37: /*left*/ this.moveState.yawLeft = 0; break;\n\t\t\tcase 39: /*right*/ this.moveState.yawRight = 0; break;\n\n\t\t\tcase 81: /*Q*/ this.moveState.rollLeft = 0; break;\n\t\t\tcase 69: /*E*/ this.moveState.rollRight = 0; break;\n\n\t\t}\n\n\t\tthis.updateMovementVector();\n\t\tthis.updateRotationVector();\n\n\t};\n\n\tthis.mousedown = function( event ) {\n\n\t\tif ( this.domElement !== document ) {\n\n\t\t\tthis.domElement.focus();\n\n\t\t}\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tif ( this.dragToLook ) {\n\n\t\t\tthis.mouseStatus ++;\n\n\t\t} else {\n\n\t\t\tswitch ( event.button ) {\n\n\t\t\t\tcase 0: this.moveState.forward = 1; break;\n\t\t\t\tcase 2: this.moveState.back = 1; break;\n\n\t\t\t}\n\n\t\t\tthis.updateMovementVector();\n\n\t\t}\n\n\t};\n\n\tthis.mousemove = function( event ) {\n\n\t\tif ( !this.dragToLook || this.mouseStatus > 0 ) {\n\n\t\t\tvar container = this.getContainerDimensions();\n\t\t\tvar halfWidth  = container.size[ 0 ] / 2;\n\t\t\tvar halfHeight = container.size[ 1 ] / 2;\n\n\t\t\tthis.moveState.yawLeft   = - ( ( event.pageX - container.offset[ 0 ] ) - halfWidth  ) / halfWidth;\n\t\t\tthis.moveState.pitchDown =   ( ( event.pageY - container.offset[ 1 ] ) - halfHeight ) / halfHeight;\n\n\t\t\tthis.updateRotationVector();\n\n\t\t}\n\n\t};\n\n\tthis.mouseup = function( event ) {\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tif ( this.dragToLook ) {\n\n\t\t\tthis.mouseStatus --;\n\n\t\t\tthis.moveState.yawLeft = this.moveState.pitchDown = 0;\n\n\t\t} else {\n\n\t\t\tswitch ( event.button ) {\n\n\t\t\t\tcase 0: this.moveState.forward = 0; break;\n\t\t\t\tcase 2: this.moveState.back = 0; break;\n\n\t\t\t}\n\n\t\t\tthis.updateMovementVector();\n\n\t\t}\n\n\t\tthis.updateRotationVector();\n\n\t};\n\n\tthis.update = function( delta ) {\n\n\t\tvar moveMult = delta * this.movementSpeed;\n\t\tvar rotMult = delta * this.rollSpeed;\n\n\t\tthis.object.translateX( this.moveVector.x * moveMult );\n\t\tthis.object.translateY( this.moveVector.y * moveMult );\n\t\tthis.object.translateZ( this.moveVector.z * moveMult );\n\n\t\tthis.tmpQuaternion.set( this.rotationVector.x * rotMult, this.rotationVector.y * rotMult, this.rotationVector.z * rotMult, 1 ).normalize();\n\t\tthis.object.quaternion.multiply( this.tmpQuaternion );\n\n\t\t// expose the rotation vector for convenience\n\t\tthis.object.rotation.setFromQuaternion( this.object.quaternion, this.object.rotation.order );\n\n\n\t};\n\n\tthis.updateMovementVector = function() {\n\n\t\tvar forward = ( this.moveState.forward || ( this.autoForward && !this.moveState.back ) ) ? 1 : 0;\n\n\t\tthis.moveVector.x = ( -this.moveState.left    + this.moveState.right );\n\t\tthis.moveVector.y = ( -this.moveState.down    + this.moveState.up );\n\t\tthis.moveVector.z = ( -forward + this.moveState.back );\n\n\t\t//console.log( 'move:', [ this.moveVector.x, this.moveVector.y, this.moveVector.z ] );\n\n\t};\n\n\tthis.updateRotationVector = function() {\n\n\t\tthis.rotationVector.x = ( -this.moveState.pitchDown + this.moveState.pitchUp );\n\t\tthis.rotationVector.y = ( -this.moveState.yawRight  + this.moveState.yawLeft );\n\t\tthis.rotationVector.z = ( -this.moveState.rollRight + this.moveState.rollLeft );\n\n\t\t//console.log( 'rotate:', [ this.rotationVector.x, this.rotationVector.y, this.rotationVector.z ] );\n\n\t};\n\n\tthis.getContainerDimensions = function() {\n\n\t\tif ( this.domElement != document ) {\n\n\t\t\treturn {\n\t\t\t\tsize\t: [ this.domElement.offsetWidth, this.domElement.offsetHeight ],\n\t\t\t\toffset\t: [ this.domElement.offsetLeft,  this.domElement.offsetTop ]\n\t\t\t};\n\n\t\t} else {\n\n\t\t\treturn {\n\t\t\t\tsize\t: [ window.innerWidth, window.innerHeight ],\n\t\t\t\toffset\t: [ 0, 0 ]\n\t\t\t};\n\n\t\t}\n\n\t};\n\n\tfunction bind( scope, fn ) {\n\n\t\treturn function () {\n\n\t\t\tfn.apply( scope, arguments );\n\n\t\t};\n\n\t};\n\n\tthis.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );\n\n\tthis.domElement.addEventListener( 'mousemove', bind( this, this.mousemove ), false );\n\tthis.domElement.addEventListener( 'mousedown', bind( this, this.mousedown ), false );\n\tthis.domElement.addEventListener( 'mouseup',   bind( this, this.mouseup ), false );\n\n\twindow.addEventListener( 'keydown', bind( this, this.keydown ), false );\n\twindow.addEventListener( 'keyup',   bind( this, this.keyup ), false );\n\n\tthis.updateMovementVector();\n\tthis.updateRotationVector();\n\n};\n","/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n/*global THREE, console */\n\n// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\n// the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\n// supported.\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n//\n// This is a drop-in replacement for (most) TrackballControls used in examples.\n// That is, include this js file and wherever you see:\n//    \tcontrols = new THREE.TrackballControls( camera );\n//      controls.target.z = 150;\n// Simple substitute \"OrbitControls\" and the control should work as-is.\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tthis.object = object;\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// API\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the control orbits around\n\t// and where it pans with respect to.\n\tthis.target = new THREE.Vector3();\n\n\t// center is old, deprecated; use \"target\" instead\n\tthis.center = this.target;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for\n\t// backwards compatibility\n\tthis.noZoom = false;\n\tthis.zoomSpeed = 1.0;\n\n\t// Limits to how far you can dolly in and out\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// Set to true to disable this control\n\tthis.noRotate = false;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to true to disable this control\n\tthis.noPan = false;\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// Set to true to disable use of the keys\n\tthis.noKeys = false;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t////////////\n\t// internals\n\n\tvar scope = this;\n\n\tvar EPS = 0.000001;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\tvar panOffset = new THREE.Vector3();\n\n\tvar offset = new THREE.Vector3();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tvar phiDelta = 0;\n\tvar thetaDelta = 0;\n\tvar scale = 1;\n\tvar pan = new THREE.Vector3();\n\n\tvar lastPosition = new THREE.Vector3();\n\n\tvar STATE = { NONE : -1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\tvar state = STATE.NONE;\n\n\t// for reset\n\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\n\t// so camera.up is the orbit axis\n\n\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\tvar quatInverse = quat.clone().inverse();\n\n\t// events\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start'};\n\tvar endEvent = { type: 'end'};\n\n\tthis.rotateLeft = function ( angle ) {\n\n\t\tif ( angle === undefined ) {\n\n\t\t\tangle = getAutoRotationAngle();\n\n\t\t}\n\n\t\tthetaDelta -= angle;\n\n\t};\n\n\tthis.rotateUp = function ( angle ) {\n\n\t\tif ( angle === undefined ) {\n\n\t\t\tangle = getAutoRotationAngle();\n\n\t\t}\n\n\t\tphiDelta -= angle;\n\n\t};\n\n\t// pass in distance in world space to move left\n\tthis.panLeft = function ( distance ) {\n\n\t\tvar te = this.object.matrix.elements;\n\n\t\t// get X column of matrix\n\t\tpanOffset.set( te[ 0 ], te[ 1 ], te[ 2 ] );\n\t\tpanOffset.multiplyScalar( - distance );\n\t\t\n\t\tpan.add( panOffset );\n\n\t};\n\n\t// pass in distance in world space to move up\n\tthis.panUp = function ( distance ) {\n\n\t\tvar te = this.object.matrix.elements;\n\n\t\t// get Y column of matrix\n\t\tpanOffset.set( te[ 4 ], te[ 5 ], te[ 6 ] );\n\t\tpanOffset.multiplyScalar( distance );\n\t\t\n\t\tpan.add( panOffset );\n\n\t};\n\t\n\t// pass in x,y of change desired in pixel space,\n\t// right and down are positive\n\tthis.pan = function ( deltaX, deltaY ) {\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tif ( scope.object.fov !== undefined ) {\n\n\t\t\t// perspective\n\t\t\tvar position = scope.object.position;\n\t\t\tvar offset = position.clone().sub( scope.target );\n\t\t\tvar targetDistance = offset.length();\n\n\t\t\t// half of the fov is center to top of screen\n\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\tscope.panLeft( 2 * deltaX * targetDistance / element.clientHeight );\n\t\t\tscope.panUp( 2 * deltaY * targetDistance / element.clientHeight );\n\n\t\t} else if ( scope.object.top !== undefined ) {\n\n\t\t\t// orthographic\n\t\t\tscope.panLeft( deltaX * (scope.object.right - scope.object.left) / element.clientWidth );\n\t\t\tscope.panUp( deltaY * (scope.object.top - scope.object.bottom) / element.clientHeight );\n\n\t\t} else {\n\n\t\t\t// camera neither orthographic or perspective\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\n\t\t}\n\n\t};\n\n\tthis.dollyIn = function ( dollyScale ) {\n\n\t\tif ( dollyScale === undefined ) {\n\n\t\t\tdollyScale = getZoomScale();\n\n\t\t}\n\n\t\tscale /= dollyScale;\n\n\t};\n\n\tthis.dollyOut = function ( dollyScale ) {\n\n\t\tif ( dollyScale === undefined ) {\n\n\t\t\tdollyScale = getZoomScale();\n\n\t\t}\n\n\t\tscale *= dollyScale;\n\n\t};\n\n\tthis.update = function () {\n\n\t\tvar position = this.object.position;\n\n\t\toffset.copy( position ).sub( this.target );\n\n\t\t// rotate offset to \"y-axis-is-up\" space\n\t\toffset.applyQuaternion( quat );\n\n\t\t// angle from z-axis around y-axis\n\n\t\tvar theta = Math.atan2( offset.x, offset.z );\n\n\t\t// angle from y-axis\n\n\t\tvar phi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );\n\n\t\tif ( this.autoRotate ) {\n\n\t\t\tthis.rotateLeft( getAutoRotationAngle() );\n\n\t\t}\n\n\t\ttheta += thetaDelta;\n\t\tphi += phiDelta;\n\n\t\t// restrict phi to be between desired limits\n\t\tphi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tphi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );\n\n\t\tvar radius = offset.length() * scale;\n\n\t\t// restrict radius to be between desired limits\n\t\tradius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );\n\t\t\n\t\t// move target to panned location\n\t\tthis.target.add( pan );\n\n\t\toffset.x = radius * Math.sin( phi ) * Math.sin( theta );\n\t\toffset.y = radius * Math.cos( phi );\n\t\toffset.z = radius * Math.sin( phi ) * Math.cos( theta );\n\n\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\toffset.applyQuaternion( quatInverse );\n\n\t\tposition.copy( this.target ).add( offset );\n\n\t\tthis.object.lookAt( this.target );\n\n\t\tthetaDelta = 0;\n\t\tphiDelta = 0;\n\t\tscale = 1;\n\t\tpan.set( 0, 0, 0 );\n\n\t\tif ( lastPosition.distanceToSquared( this.object.position ) > EPS ) {\n\n\t\t\tthis.dispatchEvent( changeEvent );\n\n\t\t\tlastPosition.copy( this.object.position );\n\n\t\t}\n\n\t};\n\n\n\tthis.reset = function () {\n\n\t\tstate = STATE.NONE;\n\n\t\tthis.target.copy( this.target0 );\n\t\tthis.object.position.copy( this.position0 );\n\n\t\tthis.update();\n\n\t};\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tevent.preventDefault();\n\n\t\tif ( event.button === 0 ) {\n\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\tstate = STATE.ROTATE;\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t} else if ( event.button === 1 ) {\n\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\tstate = STATE.DOLLY;\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t} else if ( event.button === 2 ) {\n\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\tstate = STATE.PAN;\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tscope.domElement.addEventListener( 'mousemove', onMouseMove, false );\n\t\tscope.domElement.addEventListener( 'mouseup', onMouseUp, false );\n\t\tscope.dispatchEvent( startEvent );\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tscope.dollyIn();\n\n\t\t\t} else {\n\n\t\t\t\tscope.dollyOut();\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\t\t\n\t\t\tscope.pan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction onMouseUp( /* event */ ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tscope.domElement.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tscope.domElement.removeEventListener( 'mouseup', onMouseUp, false );\n\t\tscope.dispatchEvent( endEvent );\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.noZoom === true ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tvar delta = 0;\n\n\t\tif ( event.wheelDelta !== undefined ) { // WebKit / Opera / Explorer 9\n\n\t\t\tdelta = event.wheelDelta;\n\n\t\t} else if ( event.detail !== undefined ) { // Firefox\n\n\t\t\tdelta = - event.detail;\n\n\t\t}\n\n\t\tif ( delta > 0 ) {\n\n\t\t\tscope.dollyOut();\n\n\t\t} else {\n\n\t\t\tscope.dollyIn();\n\n\t\t}\n\n\t\tscope.update();\n\t\tscope.dispatchEvent( startEvent );\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.noKeys === true || scope.noPan === true ) return;\n\t\t\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tscope.pan( 0, scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tscope.pan( 0, - scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tscope.pan( scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tscope.pan( - scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction touchstart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\t\t\tdollyStart.set( 0, distance );\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t}\n\n\tfunction touchmove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.noRotate === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return;\n\n\t\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\tif ( scope.noZoom === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return;\n\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\t\tdollyEnd.set( 0, distance );\n\t\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\t\tscope.dollyOut();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tscope.dollyIn();\n\n\t\t\t\t}\n\n\t\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.noPan === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return;\n\n\t\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\t\t\t\n\t\t\t\tscope.pan( panDelta.x, panDelta.y );\n\n\t\t\t\tpanStart.copy( panEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction touchend( /* event */ ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tscope.dispatchEvent( endEvent );\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tthis.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );\n\tthis.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tthis.domElement.addEventListener( 'mousewheel', onMouseWheel, false );\n\tthis.domElement.addEventListener( 'DOMMouseScroll', onMouseWheel, false ); // firefox\n\n\tthis.domElement.addEventListener( 'touchstart', touchstart, false );\n\tthis.domElement.addEventListener( 'touchend', touchend, false );\n\tthis.domElement.addEventListener( 'touchmove', touchmove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n"]}